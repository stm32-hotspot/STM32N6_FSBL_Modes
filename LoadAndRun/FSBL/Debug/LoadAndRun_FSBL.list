
LoadAndRun_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e638  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  3418ed84  3418ed84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  3418edc8  3418edc8  0000fe00  2**0
                  CONTENTS
  4 .ARM          00000000  3418edc8  3418edc8  0000fe00  2**0
                  CONTENTS
  5 .preinit_array 00000000  3418edc8  3418edc8  0000fe00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  3418edc8  3418edc8  0000edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  3418edcc  3418edcc  0000edcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  341c0000  3418edd0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c000c  3418eddc  0000f00c  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  3418ede0  3418ede0  0000fde0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000002bc  341c0010  341c0010  00010010  2**2
                  ALLOC
 12 ._user_heap_stack 00000a04  341c02cc  341c02cc  00010010  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  0000fe00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d84c  00000000  00000000  0000fe3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002afa  00000000  00000000  0002d686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001838  00000000  00000000  00030180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001254  00000000  00000000  000319b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00052318  00000000  00000000  00032c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001625e  00000000  00000000  00084f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00207769  00000000  00000000  0009b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a28eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000648c  00000000  00000000  002a2930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  002a8dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0010 	.word	0x341c0010
34180768:	00000000 	.word	0x00000000
3418076c:	3418ed6c 	.word	0x3418ed6c

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c0014 	.word	0x341c0014
34180788:	3418ed6c 	.word	0x3418ed6c

3418078c <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
3418078c:	b580      	push	{r7, lr}
3418078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
34180790:	22ac      	movs	r2, #172	@ 0xac
34180792:	2100      	movs	r1, #0
34180794:	480c      	ldr	r0, [pc, #48]	@ (341807c8 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180796:	f00e faaf 	bl	3418ecf8 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
3418079a:	4b0b      	ldr	r3, [pc, #44]	@ (341807c8 <MX_EXTMEM_MANAGER_Init+0x3c>)
3418079c:	2200      	movs	r2, #0
3418079e:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
341807a0:	4b09      	ldr	r3, [pc, #36]	@ (341807c8 <MX_EXTMEM_MANAGER_Init+0x3c>)
341807a2:	4a0a      	ldr	r2, [pc, #40]	@ (341807cc <MX_EXTMEM_MANAGER_Init+0x40>)
341807a4:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
341807a6:	4b08      	ldr	r3, [pc, #32]	@ (341807c8 <MX_EXTMEM_MANAGER_Init+0x3c>)
341807a8:	2203      	movs	r2, #3
341807aa:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
341807ac:	f04f 0000 	mov.w	r0, #0
341807b0:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
341807b4:	f006 fb9a 	bl	34186eec <HAL_RCCEx_GetPeriphCLKFreq>
341807b8:	4603      	mov	r3, r0
341807ba:	4619      	mov	r1, r3
341807bc:	2000      	movs	r0, #0
341807be:	f00b fe61 	bl	3418c484 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
341807c2:	bf00      	nop
341807c4:	bd80      	pop	{r7, pc}
341807c6:	bf00      	nop
341807c8:	341c0098 	.word	0x341c0098
341807cc:	341c002c 	.word	0x341c002c

341807d0 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
341807d0:	b480      	push	{r7}
341807d2:	b085      	sub	sp, #20
341807d4:	af00      	add	r7, sp, #0
341807d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
341807d8:	4a07      	ldr	r2, [pc, #28]	@ (341807f8 <LL_AHB4_GRP1_EnableClock+0x28>)
341807da:	687b      	ldr	r3, [r7, #4]
341807dc:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
341807e0:	4b05      	ldr	r3, [pc, #20]	@ (341807f8 <LL_AHB4_GRP1_EnableClock+0x28>)
341807e2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
341807e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341807e8:	68fb      	ldr	r3, [r7, #12]
}
341807ea:	bf00      	nop
341807ec:	3714      	adds	r7, #20
341807ee:	46bd      	mov	sp, r7
341807f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341807f4:	4770      	bx	lr
341807f6:	bf00      	nop
341807f8:	56028000 	.word	0x56028000

341807fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
341807fc:	b580      	push	{r7, lr}
341807fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34180800:	f000 fcc1 	bl	34181186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34180804:	f000 f810 	bl	34180828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34180808:	f000 f8fc 	bl	34180a04 <MX_GPIO_Init>
  MX_XSPI2_Init();
3418080c:	f000 f89e 	bl	3418094c <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
34180810:	f7ff ffbc 	bl	3418078c <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
34180814:	f00b fcee 	bl	3418c1f4 <BOOT_Application>
34180818:	4603      	mov	r3, r0
3418081a:	2b00      	cmp	r3, #0
3418081c:	d002      	beq.n	34180824 <main+0x28>
  {
    Error_Handler();
3418081e:	f000 f8f9 	bl	34180a14 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
34180822:	bf00      	nop
34180824:	bf00      	nop
34180826:	e7fd      	b.n	34180824 <main+0x28>

34180828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180828:	b580      	push	{r7, lr}
3418082a:	b0b6      	sub	sp, #216	@ 0xd8
3418082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3418082e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180832:	2298      	movs	r2, #152	@ 0x98
34180834:	2100      	movs	r1, #0
34180836:	4618      	mov	r0, r3
34180838:	f00e fa5e 	bl	3418ecf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3418083c:	463b      	mov	r3, r7
3418083e:	2240      	movs	r2, #64	@ 0x40
34180840:	2100      	movs	r1, #0
34180842:	4618      	mov	r0, r3
34180844:	f00e fa58 	bl	3418ecf8 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180848:	2000      	movs	r0, #0
3418084a:	f001 f84f 	bl	341818ec <HAL_PWREx_ConfigSupply>
3418084e:	4603      	mov	r3, r0
34180850:	2b00      	cmp	r3, #0
34180852:	d001      	beq.n	34180858 <SystemClock_Config+0x30>
  {
    Error_Handler();
34180854:	f000 f8de 	bl	34180a14 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180858:	2302      	movs	r3, #2
3418085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3418085c:	2308      	movs	r3, #8
3418085e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180860:	2300      	movs	r3, #0
34180862:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180864:	2300      	movs	r3, #0
34180866:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180868:	2300      	movs	r3, #0
3418086a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
3418086c:	2300      	movs	r3, #0
3418086e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180872:	2300      	movs	r3, #0
34180874:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180878:	2300      	movs	r3, #0
3418087a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3418087e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180882:	4618      	mov	r0, r3
34180884:	f001 faf4 	bl	34181e70 <HAL_RCC_OscConfig>
34180888:	4603      	mov	r3, r0
3418088a:	2b00      	cmp	r3, #0
3418088c:	d001      	beq.n	34180892 <SystemClock_Config+0x6a>
  {
    Error_Handler();
3418088e:	f000 f8c1 	bl	34180a14 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180892:	463b      	mov	r3, r7
34180894:	4618      	mov	r0, r3
34180896:	f002 f9cb 	bl	34182c30 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
3418089a:	687b      	ldr	r3, [r7, #4]
3418089c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341808a0:	d003      	beq.n	341808aa <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
341808a2:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
341808a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
341808a8:	d10e      	bne.n	341808c8 <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
341808aa:	2303      	movs	r3, #3
341808ac:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
341808ae:	2300      	movs	r3, #0
341808b0:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
341808b2:	2300      	movs	r3, #0
341808b4:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
341808b6:	463b      	mov	r3, r7
341808b8:	4618      	mov	r0, r3
341808ba:	f001 feb9 	bl	34182630 <HAL_RCC_ClockConfig>
341808be:	4603      	mov	r3, r0
341808c0:	2b00      	cmp	r3, #0
341808c2:	d001      	beq.n	341808c8 <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
341808c4:	f000 f8a6 	bl	34180a14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
341808c8:	2300      	movs	r3, #0
341808ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
341808cc:	2302      	movs	r3, #2
341808ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
341808d0:	2300      	movs	r3, #0
341808d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 1;
341808d4:	2301      	movs	r3, #1
341808d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 25;
341808d8:	2319      	movs	r3, #25
341808da:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
341808dc:	2300      	movs	r3, #0
341808de:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
341808e0:	2301      	movs	r3, #1
341808e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
341808e4:	2301      	movs	r3, #1
341808e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
341808ea:	2300      	movs	r3, #0
341808ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
341808f0:	2300      	movs	r3, #0
341808f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
341808f6:	2300      	movs	r3, #0
341808f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
341808fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180900:	4618      	mov	r0, r3
34180902:	f001 fab5 	bl	34181e70 <HAL_RCC_OscConfig>
34180906:	4603      	mov	r3, r0
34180908:	2b00      	cmp	r3, #0
3418090a:	d001      	beq.n	34180910 <SystemClock_Config+0xe8>
  {
    Error_Handler();
3418090c:	f000 f882 	bl	34180a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180910:	237f      	movs	r3, #127	@ 0x7f
34180912:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180914:	2300      	movs	r3, #0
34180916:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180918:	2300      	movs	r3, #0
3418091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
3418091c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180922:	2300      	movs	r3, #0
34180924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180926:	2300      	movs	r3, #0
34180928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
3418092a:	2300      	movs	r3, #0
3418092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
3418092e:	2300      	movs	r3, #0
34180930:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180932:	463b      	mov	r3, r7
34180934:	4618      	mov	r0, r3
34180936:	f001 fe7b 	bl	34182630 <HAL_RCC_ClockConfig>
3418093a:	4603      	mov	r3, r0
3418093c:	2b00      	cmp	r3, #0
3418093e:	d001      	beq.n	34180944 <SystemClock_Config+0x11c>
  {
    Error_Handler();
34180940:	f000 f868 	bl	34180a14 <Error_Handler>
  }
}
34180944:	bf00      	nop
34180946:	37d8      	adds	r7, #216	@ 0xd8
34180948:	46bd      	mov	sp, r7
3418094a:	bd80      	pop	{r7, pc}

3418094c <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
3418094c:	b580      	push	{r7, lr}
3418094e:	b084      	sub	sp, #16
34180950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34180952:	1d3b      	adds	r3, r7, #4
34180954:	2200      	movs	r2, #0
34180956:	601a      	str	r2, [r3, #0]
34180958:	605a      	str	r2, [r3, #4]
3418095a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
3418095c:	4b27      	ldr	r3, [pc, #156]	@ (341809fc <MX_XSPI2_Init+0xb0>)
3418095e:	4a28      	ldr	r2, [pc, #160]	@ (34180a00 <MX_XSPI2_Init+0xb4>)
34180960:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
34180962:	4b26      	ldr	r3, [pc, #152]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180964:	2204      	movs	r2, #4
34180966:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34180968:	4b24      	ldr	r3, [pc, #144]	@ (341809fc <MX_XSPI2_Init+0xb0>)
3418096a:	2200      	movs	r2, #0
3418096c:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
3418096e:	4b23      	ldr	r3, [pc, #140]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34180974:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
34180976:	4b21      	ldr	r3, [pc, #132]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180978:	221a      	movs	r2, #26
3418097a:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
3418097c:	4b1f      	ldr	r3, [pc, #124]	@ (341809fc <MX_XSPI2_Init+0xb0>)
3418097e:	2201      	movs	r2, #1
34180980:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34180982:	4b1e      	ldr	r3, [pc, #120]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180984:	2200      	movs	r2, #0
34180986:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34180988:	4b1c      	ldr	r3, [pc, #112]	@ (341809fc <MX_XSPI2_Init+0xb0>)
3418098a:	2200      	movs	r2, #0
3418098c:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
3418098e:	4b1b      	ldr	r3, [pc, #108]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180990:	2200      	movs	r2, #0
34180992:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
34180994:	4b19      	ldr	r3, [pc, #100]	@ (341809fc <MX_XSPI2_Init+0xb0>)
34180996:	2200      	movs	r2, #0
34180998:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3418099a:	4b18      	ldr	r3, [pc, #96]	@ (341809fc <MX_XSPI2_Init+0xb0>)
3418099c:	2200      	movs	r2, #0
3418099e:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
341809a0:	4b16      	ldr	r3, [pc, #88]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
341809a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
341809a8:	4b14      	ldr	r3, [pc, #80]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809aa:	2200      	movs	r2, #0
341809ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
341809ae:	4b13      	ldr	r3, [pc, #76]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809b0:	2200      	movs	r2, #0
341809b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
341809b4:	4b11      	ldr	r3, [pc, #68]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809b6:	2200      	movs	r2, #0
341809b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
341809ba:	4b10      	ldr	r3, [pc, #64]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809bc:	2200      	movs	r2, #0
341809be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
341809c0:	480e      	ldr	r0, [pc, #56]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809c2:	f00a fc73 	bl	3418b2ac <HAL_XSPI_Init>
341809c6:	4603      	mov	r3, r0
341809c8:	2b00      	cmp	r3, #0
341809ca:	d001      	beq.n	341809d0 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
341809cc:	f000 f822 	bl	34180a14 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
341809d0:	2310      	movs	r3, #16
341809d2:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
341809d4:	2301      	movs	r3, #1
341809d6:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
341809d8:	2301      	movs	r3, #1
341809da:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341809dc:	1d3b      	adds	r3, r7, #4
341809de:	f241 3288 	movw	r2, #5000	@ 0x1388
341809e2:	4619      	mov	r1, r3
341809e4:	4805      	ldr	r0, [pc, #20]	@ (341809fc <MX_XSPI2_Init+0xb0>)
341809e6:	f00b f8a5 	bl	3418bb34 <HAL_XSPIM_Config>
341809ea:	4603      	mov	r3, r0
341809ec:	2b00      	cmp	r3, #0
341809ee:	d001      	beq.n	341809f4 <MX_XSPI2_Init+0xa8>
  {
    Error_Handler();
341809f0:	f000 f810 	bl	34180a14 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
341809f4:	bf00      	nop
341809f6:	3710      	adds	r7, #16
341809f8:	46bd      	mov	sp, r7
341809fa:	bd80      	pop	{r7, pc}
341809fc:	341c002c 	.word	0x341c002c
34180a00:	5802a000 	.word	0x5802a000

34180a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34180a04:	b580      	push	{r7, lr}
34180a06:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPION_CLK_ENABLE();
34180a08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180a0c:	f7ff fee0 	bl	341807d0 <LL_AHB4_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
34180a10:	bf00      	nop
34180a12:	bd80      	pop	{r7, pc}

34180a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34180a14:	b480      	push	{r7}
34180a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34180a18:	b672      	cpsid	i
}
34180a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34180a1c:	bf00      	nop
34180a1e:	e7fd      	b.n	34180a1c <Error_Handler+0x8>

34180a20 <LL_AHB4_GRP1_EnableClock>:
{
34180a20:	b480      	push	{r7}
34180a22:	b085      	sub	sp, #20
34180a24:	af00      	add	r7, sp, #0
34180a26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180a28:	4a07      	ldr	r2, [pc, #28]	@ (34180a48 <LL_AHB4_GRP1_EnableClock+0x28>)
34180a2a:	687b      	ldr	r3, [r7, #4]
34180a2c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34180a30:	4b05      	ldr	r3, [pc, #20]	@ (34180a48 <LL_AHB4_GRP1_EnableClock+0x28>)
34180a32:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180a38:	68fb      	ldr	r3, [r7, #12]
}
34180a3a:	bf00      	nop
34180a3c:	3714      	adds	r7, #20
34180a3e:	46bd      	mov	sp, r7
34180a40:	f85d 7b04 	ldr.w	r7, [sp], #4
34180a44:	4770      	bx	lr
34180a46:	bf00      	nop
34180a48:	56028000 	.word	0x56028000

34180a4c <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34180a4c:	b480      	push	{r7}
34180a4e:	b085      	sub	sp, #20
34180a50:	af00      	add	r7, sp, #0
34180a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34180a54:	4a07      	ldr	r2, [pc, #28]	@ (34180a74 <LL_AHB5_GRP1_EnableClock+0x28>)
34180a56:	687b      	ldr	r3, [r7, #4]
34180a58:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34180a5c:	4b05      	ldr	r3, [pc, #20]	@ (34180a74 <LL_AHB5_GRP1_EnableClock+0x28>)
34180a5e:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34180a62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180a64:	68fb      	ldr	r3, [r7, #12]
}
34180a66:	bf00      	nop
34180a68:	3714      	adds	r7, #20
34180a6a:	46bd      	mov	sp, r7
34180a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34180a70:	4770      	bx	lr
34180a72:	bf00      	nop
34180a74:	56028000 	.word	0x56028000

34180a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34180a78:	b580      	push	{r7, lr}
34180a7a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34180a7c:	f000 ff5e 	bl	3418193c <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34180a80:	f000 ff6c 	bl	3418195c <HAL_PWREx_EnableVddIO3>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34180a84:	bf00      	nop
34180a86:	bd80      	pop	{r7, pc}

34180a88 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
34180a88:	b580      	push	{r7, lr}
34180a8a:	b0ec      	sub	sp, #432	@ 0x1b0
34180a8c:	af00      	add	r7, sp, #0
34180a8e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180a92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180a96:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180a98:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180a9c:	2200      	movs	r2, #0
34180a9e:	601a      	str	r2, [r3, #0]
34180aa0:	605a      	str	r2, [r3, #4]
34180aa2:	609a      	str	r2, [r3, #8]
34180aa4:	60da      	str	r2, [r3, #12]
34180aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180aa8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180aac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180ab0:	4618      	mov	r0, r3
34180ab2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180ab6:	461a      	mov	r2, r3
34180ab8:	2100      	movs	r1, #0
34180aba:	f00e f91d 	bl	3418ecf8 <memset>
  if(hxspi->Instance==XSPI2)
34180abe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ac2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180ac6:	681b      	ldr	r3, [r3, #0]
34180ac8:	681b      	ldr	r3, [r3, #0]
34180aca:	4a28      	ldr	r2, [pc, #160]	@ (34180b6c <HAL_XSPI_MspInit+0xe4>)
34180acc:	4293      	cmp	r3, r2
34180ace:	d148      	bne.n	34180b62 <HAL_XSPI_MspInit+0xda>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34180ad0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ad4:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34180ad8:	f04f 0200 	mov.w	r2, #0
34180adc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34180ae0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
34180ae4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ae8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180aec:	4a20      	ldr	r2, [pc, #128]	@ (34180b70 <HAL_XSPI_MspInit+0xe8>)
34180aee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180af2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180af6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180afa:	2200      	movs	r2, #0
34180afc:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockDivider = 32;
34180afe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180b02:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180b06:	2220      	movs	r2, #32
34180b08:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180b0a:	f107 0308 	add.w	r3, r7, #8
34180b0e:	4618      	mov	r0, r3
34180b10:	f003 ff08 	bl	34184924 <HAL_RCCEx_PeriphCLKConfig>
34180b14:	4603      	mov	r3, r0
34180b16:	2b00      	cmp	r3, #0
34180b18:	d001      	beq.n	34180b1e <HAL_XSPI_MspInit+0x96>
    {
      Error_Handler();
34180b1a:	f7ff ff7b 	bl	34180a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
34180b1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180b22:	f7ff ff93 	bl	34180a4c <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34180b26:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34180b2a:	f7ff ff8f 	bl	34180a4c <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPION_CLK_ENABLE();
34180b2e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180b32:	f7ff ff75 	bl	34180a20 <LL_AHB4_GRP1_EnableClock>
    PN9     ------> XSPIM_P2_IO5
    PN2     ------> XSPIM_P2_IO0
    PN10     ------> XSPIM_P2_IO6
    PN11     ------> XSPIM_P2_IO7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_0
34180b36:	f640 737f 	movw	r3, #3967	@ 0xf7f
34180b3a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_9
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180b3e:	2302      	movs	r3, #2
34180b40:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34180b44:	2300      	movs	r3, #0
34180b46:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34180b4a:	2303      	movs	r3, #3
34180b4c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34180b50:	2309      	movs	r3, #9
34180b52:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34180b56:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180b5a:	4619      	mov	r1, r3
34180b5c:	4805      	ldr	r0, [pc, #20]	@ (34180b74 <HAL_XSPI_MspInit+0xec>)
34180b5e:	f000 fd13 	bl	34181588 <HAL_GPIO_Init>

  /* USER CODE END XSPI2_MspInit 1 */

  }

}
34180b62:	bf00      	nop
34180b64:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34180b68:	46bd      	mov	sp, r7
34180b6a:	bd80      	pop	{r7, pc}
34180b6c:	5802a000 	.word	0x5802a000
34180b70:	03020414 	.word	0x03020414
34180b74:	56023400 	.word	0x56023400

34180b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34180b78:	b480      	push	{r7}
34180b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34180b7c:	bf00      	nop
34180b7e:	e7fd      	b.n	34180b7c <NMI_Handler+0x4>

34180b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34180b80:	b480      	push	{r7}
34180b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34180b84:	bf00      	nop
34180b86:	e7fd      	b.n	34180b84 <HardFault_Handler+0x4>

34180b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34180b88:	b480      	push	{r7}
34180b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34180b8c:	bf00      	nop
34180b8e:	e7fd      	b.n	34180b8c <MemManage_Handler+0x4>

34180b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34180b90:	b480      	push	{r7}
34180b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34180b94:	bf00      	nop
34180b96:	e7fd      	b.n	34180b94 <BusFault_Handler+0x4>

34180b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34180b98:	b480      	push	{r7}
34180b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34180b9c:	bf00      	nop
34180b9e:	e7fd      	b.n	34180b9c <UsageFault_Handler+0x4>

34180ba0 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34180ba0:	b480      	push	{r7}
34180ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34180ba4:	bf00      	nop
34180ba6:	e7fd      	b.n	34180ba4 <SecureFault_Handler+0x4>

34180ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34180ba8:	b480      	push	{r7}
34180baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
34180bac:	bf00      	nop
34180bae:	46bd      	mov	sp, r7
34180bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34180bb4:	4770      	bx	lr

34180bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
34180bb6:	b480      	push	{r7}
34180bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
34180bba:	bf00      	nop
34180bbc:	46bd      	mov	sp, r7
34180bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34180bc2:	4770      	bx	lr

34180bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
34180bc4:	b480      	push	{r7}
34180bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
34180bc8:	bf00      	nop
34180bca:	46bd      	mov	sp, r7
34180bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
34180bd0:	4770      	bx	lr

34180bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
34180bd2:	b580      	push	{r7, lr}
34180bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
34180bd6:	f000 fb21 	bl	3418121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
34180bda:	bf00      	nop
34180bdc:	bd80      	pop	{r7, pc}
	...

34180be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34180be0:	b480      	push	{r7}
34180be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34180be4:	4b6a      	ldr	r3, [pc, #424]	@ (34180d90 <SystemInit+0x1b0>)
34180be6:	4a6b      	ldr	r2, [pc, #428]	@ (34180d94 <SystemInit+0x1b4>)
34180be8:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34180bea:	4b6b      	ldr	r3, [pc, #428]	@ (34180d98 <SystemInit+0x1b8>)
34180bec:	2201      	movs	r2, #1
34180bee:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34180bf2:	4b69      	ldr	r3, [pc, #420]	@ (34180d98 <SystemInit+0x1b8>)
34180bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180bf8:	461a      	mov	r2, r3
34180bfa:	2301      	movs	r3, #1
34180bfc:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34180c00:	4b65      	ldr	r3, [pc, #404]	@ (34180d98 <SystemInit+0x1b8>)
34180c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180c06:	461a      	mov	r2, r3
34180c08:	2301      	movs	r3, #1
34180c0a:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34180c0e:	4b63      	ldr	r3, [pc, #396]	@ (34180d9c <SystemInit+0x1bc>)
34180c10:	2200      	movs	r2, #0
34180c12:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c14:	4b61      	ldr	r3, [pc, #388]	@ (34180d9c <SystemInit+0x1bc>)
34180c16:	2200      	movs	r2, #0
34180c18:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c1a:	4b60      	ldr	r3, [pc, #384]	@ (34180d9c <SystemInit+0x1bc>)
34180c1c:	2200      	movs	r2, #0
34180c1e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34180c20:	4b5e      	ldr	r3, [pc, #376]	@ (34180d9c <SystemInit+0x1bc>)
34180c22:	2201      	movs	r2, #1
34180c24:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c26:	4b5d      	ldr	r3, [pc, #372]	@ (34180d9c <SystemInit+0x1bc>)
34180c28:	2200      	movs	r2, #0
34180c2a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c2c:	4b5b      	ldr	r3, [pc, #364]	@ (34180d9c <SystemInit+0x1bc>)
34180c2e:	2200      	movs	r2, #0
34180c30:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
34180c32:	4b5a      	ldr	r3, [pc, #360]	@ (34180d9c <SystemInit+0x1bc>)
34180c34:	2202      	movs	r2, #2
34180c36:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c38:	4b58      	ldr	r3, [pc, #352]	@ (34180d9c <SystemInit+0x1bc>)
34180c3a:	2200      	movs	r2, #0
34180c3c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c3e:	4b57      	ldr	r3, [pc, #348]	@ (34180d9c <SystemInit+0x1bc>)
34180c40:	2200      	movs	r2, #0
34180c42:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34180c44:	4b55      	ldr	r3, [pc, #340]	@ (34180d9c <SystemInit+0x1bc>)
34180c46:	2203      	movs	r2, #3
34180c48:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c4a:	4b54      	ldr	r3, [pc, #336]	@ (34180d9c <SystemInit+0x1bc>)
34180c4c:	2200      	movs	r2, #0
34180c4e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c50:	4b52      	ldr	r3, [pc, #328]	@ (34180d9c <SystemInit+0x1bc>)
34180c52:	2200      	movs	r2, #0
34180c54:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34180c56:	4b51      	ldr	r3, [pc, #324]	@ (34180d9c <SystemInit+0x1bc>)
34180c58:	2204      	movs	r2, #4
34180c5a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c5c:	4b4f      	ldr	r3, [pc, #316]	@ (34180d9c <SystemInit+0x1bc>)
34180c5e:	2200      	movs	r2, #0
34180c60:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c62:	4b4e      	ldr	r3, [pc, #312]	@ (34180d9c <SystemInit+0x1bc>)
34180c64:	2200      	movs	r2, #0
34180c66:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34180c68:	4b4c      	ldr	r3, [pc, #304]	@ (34180d9c <SystemInit+0x1bc>)
34180c6a:	2205      	movs	r2, #5
34180c6c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c6e:	4b4b      	ldr	r3, [pc, #300]	@ (34180d9c <SystemInit+0x1bc>)
34180c70:	2200      	movs	r2, #0
34180c72:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c74:	4b49      	ldr	r3, [pc, #292]	@ (34180d9c <SystemInit+0x1bc>)
34180c76:	2200      	movs	r2, #0
34180c78:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34180c7a:	4b48      	ldr	r3, [pc, #288]	@ (34180d9c <SystemInit+0x1bc>)
34180c7c:	2206      	movs	r2, #6
34180c7e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c80:	4b46      	ldr	r3, [pc, #280]	@ (34180d9c <SystemInit+0x1bc>)
34180c82:	2200      	movs	r2, #0
34180c84:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c86:	4b45      	ldr	r3, [pc, #276]	@ (34180d9c <SystemInit+0x1bc>)
34180c88:	2200      	movs	r2, #0
34180c8a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34180c8c:	4b43      	ldr	r3, [pc, #268]	@ (34180d9c <SystemInit+0x1bc>)
34180c8e:	2207      	movs	r2, #7
34180c90:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34180c92:	4b42      	ldr	r3, [pc, #264]	@ (34180d9c <SystemInit+0x1bc>)
34180c94:	2200      	movs	r2, #0
34180c96:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34180c98:	4b40      	ldr	r3, [pc, #256]	@ (34180d9c <SystemInit+0x1bc>)
34180c9a:	2200      	movs	r2, #0
34180c9c:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34180c9e:	4b3e      	ldr	r3, [pc, #248]	@ (34180d98 <SystemInit+0x1b8>)
34180ca0:	2201      	movs	r2, #1
34180ca2:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34180ca6:	4b3c      	ldr	r3, [pc, #240]	@ (34180d98 <SystemInit+0x1b8>)
34180ca8:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34180cac:	4b38      	ldr	r3, [pc, #224]	@ (34180d90 <SystemInit+0x1b0>)
34180cae:	4a3c      	ldr	r2, [pc, #240]	@ (34180da0 <SystemInit+0x1c0>)
34180cb0:	689b      	ldr	r3, [r3, #8]
34180cb2:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34180cb4:	4b3b      	ldr	r3, [pc, #236]	@ (34180da4 <SystemInit+0x1c4>)
34180cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34180cb8:	4a3a      	ldr	r2, [pc, #232]	@ (34180da4 <SystemInit+0x1c4>)
34180cba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34180cbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34180cc0:	4b38      	ldr	r3, [pc, #224]	@ (34180da4 <SystemInit+0x1c4>)
34180cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34180cc4:	4a37      	ldr	r2, [pc, #220]	@ (34180da4 <SystemInit+0x1c4>)
34180cc6:	f043 0310 	orr.w	r3, r3, #16
34180cca:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34180ccc:	4b35      	ldr	r3, [pc, #212]	@ (34180da4 <SystemInit+0x1c4>)
34180cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34180cd0:	4b31      	ldr	r3, [pc, #196]	@ (34180d98 <SystemInit+0x1b8>)
34180cd2:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
34180cd6:	4a30      	ldr	r2, [pc, #192]	@ (34180d98 <SystemInit+0x1b8>)
34180cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34180cdc:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34180ce0:	4b2d      	ldr	r3, [pc, #180]	@ (34180d98 <SystemInit+0x1b8>)
34180ce2:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34180ce6:	4a2c      	ldr	r2, [pc, #176]	@ (34180d98 <SystemInit+0x1b8>)
34180ce8:	f043 0310 	orr.w	r3, r3, #16
34180cec:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34180cf0:	4b29      	ldr	r3, [pc, #164]	@ (34180d98 <SystemInit+0x1b8>)
34180cf2:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34180cf6:	4b28      	ldr	r3, [pc, #160]	@ (34180d98 <SystemInit+0x1b8>)
34180cf8:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34180cfc:	4a26      	ldr	r2, [pc, #152]	@ (34180d98 <SystemInit+0x1b8>)
34180cfe:	f023 0310 	bic.w	r3, r3, #16
34180d02:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34180d06:	4b24      	ldr	r3, [pc, #144]	@ (34180d98 <SystemInit+0x1b8>)
34180d08:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34180d0c:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34180d10:	4b21      	ldr	r3, [pc, #132]	@ (34180d98 <SystemInit+0x1b8>)
34180d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180d16:	461a      	mov	r2, r3
34180d18:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34180d1c:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34180d20:	4b1d      	ldr	r3, [pc, #116]	@ (34180d98 <SystemInit+0x1b8>)
34180d22:	2201      	movs	r2, #1
34180d24:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34180d28:	4b1b      	ldr	r3, [pc, #108]	@ (34180d98 <SystemInit+0x1b8>)
34180d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180d2e:	461a      	mov	r2, r3
34180d30:	2301      	movs	r3, #1
34180d32:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34180d36:	4b18      	ldr	r3, [pc, #96]	@ (34180d98 <SystemInit+0x1b8>)
34180d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180d3c:	461a      	mov	r2, r3
34180d3e:	2301      	movs	r3, #1
34180d40:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34180d44:	4b14      	ldr	r3, [pc, #80]	@ (34180d98 <SystemInit+0x1b8>)
34180d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180d4a:	461a      	mov	r2, r3
34180d4c:	2340      	movs	r3, #64	@ 0x40
34180d4e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34180d52:	4b13      	ldr	r3, [pc, #76]	@ (34180da0 <SystemInit+0x1c0>)
34180d54:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34180d56:	4b10      	ldr	r3, [pc, #64]	@ (34180d98 <SystemInit+0x1b8>)
34180d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34180d5c:	461a      	mov	r2, r3
34180d5e:	2301      	movs	r3, #1
34180d60:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34180d64:	4b0a      	ldr	r3, [pc, #40]	@ (34180d90 <SystemInit+0x1b0>)
34180d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34180d6a:	4a09      	ldr	r2, [pc, #36]	@ (34180d90 <SystemInit+0x1b0>)
34180d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34180d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34180d74:	4b0c      	ldr	r3, [pc, #48]	@ (34180da8 <SystemInit+0x1c8>)
34180d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34180d7a:	4a0b      	ldr	r2, [pc, #44]	@ (34180da8 <SystemInit+0x1c8>)
34180d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34180d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34180d84:	bf00      	nop
34180d86:	46bd      	mov	sp, r7
34180d88:	f85d 7b04 	ldr.w	r7, [sp], #4
34180d8c:	4770      	bx	lr
34180d8e:	bf00      	nop
34180d90:	e000ed00 	.word	0xe000ed00
34180d94:	34180400 	.word	0x34180400
34180d98:	56028000 	.word	0x56028000
34180d9c:	e000edd0 	.word	0xe000edd0
34180da0:	56008000 	.word	0x56008000
34180da4:	56024800 	.word	0x56024800
34180da8:	e002ed00 	.word	0xe002ed00

34180dac <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34180dac:	b480      	push	{r7}
34180dae:	b08d      	sub	sp, #52	@ 0x34
34180db0:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34180db2:	2300      	movs	r3, #0
34180db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34180db6:	2300      	movs	r3, #0
34180db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34180dba:	2300      	movs	r3, #0
34180dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34180dbe:	2300      	movs	r3, #0
34180dc0:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34180dc2:	2300      	movs	r3, #0
34180dc4:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34180dc6:	2300      	movs	r3, #0
34180dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34180dca:	4b9b      	ldr	r3, [pc, #620]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180dcc:	6a1b      	ldr	r3, [r3, #32]
34180dce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34180dd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34180dd6:	d029      	beq.n	34180e2c <SystemCoreClockUpdate+0x80>
34180dd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34180ddc:	f200 8180 	bhi.w	341810e0 <SystemCoreClockUpdate+0x334>
34180de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34180de4:	d01f      	beq.n	34180e26 <SystemCoreClockUpdate+0x7a>
34180de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34180dea:	f200 8179 	bhi.w	341810e0 <SystemCoreClockUpdate+0x334>
34180dee:	2b00      	cmp	r3, #0
34180df0:	d003      	beq.n	34180dfa <SystemCoreClockUpdate+0x4e>
34180df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34180df6:	d00a      	beq.n	34180e0e <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34180df8:	e172      	b.n	341810e0 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34180dfa:	4b8f      	ldr	r3, [pc, #572]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34180dfe:	09db      	lsrs	r3, r3, #7
34180e00:	f003 0303 	and.w	r3, r3, #3
34180e04:	4a8d      	ldr	r2, [pc, #564]	@ (3418103c <SystemCoreClockUpdate+0x290>)
34180e06:	fa22 f303 	lsr.w	r3, r2, r3
34180e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34180e0c:	e169      	b.n	341810e2 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34180e0e:	4b8a      	ldr	r3, [pc, #552]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34180e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34180e16:	2b00      	cmp	r3, #0
34180e18:	d102      	bne.n	34180e20 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34180e1a:	4b89      	ldr	r3, [pc, #548]	@ (34181040 <SystemCoreClockUpdate+0x294>)
34180e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34180e1e:	e160      	b.n	341810e2 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34180e20:	4b88      	ldr	r3, [pc, #544]	@ (34181044 <SystemCoreClockUpdate+0x298>)
34180e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34180e24:	e15d      	b.n	341810e2 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
34180e26:	4b88      	ldr	r3, [pc, #544]	@ (34181048 <SystemCoreClockUpdate+0x29c>)
34180e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34180e2a:	e15a      	b.n	341810e2 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34180e2c:	4b82      	ldr	r3, [pc, #520]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180e2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34180e32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34180e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34180e3a:	d066      	beq.n	34180f0a <SystemCoreClockUpdate+0x15e>
34180e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34180e40:	f200 8091 	bhi.w	34180f66 <SystemCoreClockUpdate+0x1ba>
34180e44:	2b00      	cmp	r3, #0
34180e46:	d003      	beq.n	34180e50 <SystemCoreClockUpdate+0xa4>
34180e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34180e4c:	d02f      	beq.n	34180eae <SystemCoreClockUpdate+0x102>
34180e4e:	e08a      	b.n	34180f66 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34180e50:	4b79      	ldr	r3, [pc, #484]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34180e56:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34180e58:	68fb      	ldr	r3, [r7, #12]
34180e5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34180e5e:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34180e60:	68fb      	ldr	r3, [r7, #12]
34180e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34180e66:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34180e68:	693b      	ldr	r3, [r7, #16]
34180e6a:	2b00      	cmp	r3, #0
34180e6c:	f040 80a9 	bne.w	34180fc2 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34180e70:	68fb      	ldr	r3, [r7, #12]
34180e72:	0d1b      	lsrs	r3, r3, #20
34180e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34180e78:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34180e7a:	68fb      	ldr	r3, [r7, #12]
34180e7c:	0a1b      	lsrs	r3, r3, #8
34180e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34180e82:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34180e84:	4b6c      	ldr	r3, [pc, #432]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34180e8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34180e8e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34180e90:	4b69      	ldr	r3, [pc, #420]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34180e96:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34180e98:	68fb      	ldr	r3, [r7, #12]
34180e9a:	0edb      	lsrs	r3, r3, #27
34180e9c:	f003 0307 	and.w	r3, r3, #7
34180ea0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34180ea2:	68fb      	ldr	r3, [r7, #12]
34180ea4:	0e1b      	lsrs	r3, r3, #24
34180ea6:	f003 0307 	and.w	r3, r3, #7
34180eaa:	61bb      	str	r3, [r7, #24]
      break;
34180eac:	e089      	b.n	34180fc2 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34180eae:	4b62      	ldr	r3, [pc, #392]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34180eb4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34180eb6:	68fb      	ldr	r3, [r7, #12]
34180eb8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34180ebc:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34180ebe:	68fb      	ldr	r3, [r7, #12]
34180ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34180ec4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34180ec6:	693b      	ldr	r3, [r7, #16]
34180ec8:	2b00      	cmp	r3, #0
34180eca:	d17c      	bne.n	34180fc6 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34180ecc:	68fb      	ldr	r3, [r7, #12]
34180ece:	0d1b      	lsrs	r3, r3, #20
34180ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34180ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34180ed6:	68fb      	ldr	r3, [r7, #12]
34180ed8:	0a1b      	lsrs	r3, r3, #8
34180eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
34180ede:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34180ee0:	4b55      	ldr	r3, [pc, #340]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34180ee6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34180eea:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34180eec:	4b52      	ldr	r3, [pc, #328]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34180ef2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34180ef4:	68fb      	ldr	r3, [r7, #12]
34180ef6:	0edb      	lsrs	r3, r3, #27
34180ef8:	f003 0307 	and.w	r3, r3, #7
34180efc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34180efe:	68fb      	ldr	r3, [r7, #12]
34180f00:	0e1b      	lsrs	r3, r3, #24
34180f02:	f003 0307 	and.w	r3, r3, #7
34180f06:	61bb      	str	r3, [r7, #24]
      break;
34180f08:	e05d      	b.n	34180fc6 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34180f0a:	4b4b      	ldr	r3, [pc, #300]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180f0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34180f10:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34180f12:	68fb      	ldr	r3, [r7, #12]
34180f14:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34180f18:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34180f1a:	68fb      	ldr	r3, [r7, #12]
34180f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34180f20:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34180f22:	693b      	ldr	r3, [r7, #16]
34180f24:	2b00      	cmp	r3, #0
34180f26:	d150      	bne.n	34180fca <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34180f28:	68fb      	ldr	r3, [r7, #12]
34180f2a:	0d1b      	lsrs	r3, r3, #20
34180f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34180f30:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34180f32:	68fb      	ldr	r3, [r7, #12]
34180f34:	0a1b      	lsrs	r3, r3, #8
34180f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
34180f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34180f3c:	4b3e      	ldr	r3, [pc, #248]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34180f42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34180f46:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34180f48:	4b3b      	ldr	r3, [pc, #236]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34180f4e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34180f50:	68fb      	ldr	r3, [r7, #12]
34180f52:	0edb      	lsrs	r3, r3, #27
34180f54:	f003 0307 	and.w	r3, r3, #7
34180f58:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34180f5a:	68fb      	ldr	r3, [r7, #12]
34180f5c:	0e1b      	lsrs	r3, r3, #24
34180f5e:	f003 0307 	and.w	r3, r3, #7
34180f62:	61bb      	str	r3, [r7, #24]
      break;
34180f64:	e031      	b.n	34180fca <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34180f66:	4b34      	ldr	r3, [pc, #208]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34180f6c:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34180f6e:	68fb      	ldr	r3, [r7, #12]
34180f70:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34180f74:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34180f76:	68fb      	ldr	r3, [r7, #12]
34180f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34180f7c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34180f7e:	693b      	ldr	r3, [r7, #16]
34180f80:	2b00      	cmp	r3, #0
34180f82:	d124      	bne.n	34180fce <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34180f84:	68fb      	ldr	r3, [r7, #12]
34180f86:	0d1b      	lsrs	r3, r3, #20
34180f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34180f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34180f8e:	68fb      	ldr	r3, [r7, #12]
34180f90:	0a1b      	lsrs	r3, r3, #8
34180f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
34180f96:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34180f98:	4b27      	ldr	r3, [pc, #156]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34180f9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34180fa2:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34180fa4:	4b24      	ldr	r3, [pc, #144]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34180fa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34180faa:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34180fac:	68fb      	ldr	r3, [r7, #12]
34180fae:	0edb      	lsrs	r3, r3, #27
34180fb0:	f003 0307 	and.w	r3, r3, #7
34180fb4:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34180fb6:	68fb      	ldr	r3, [r7, #12]
34180fb8:	0e1b      	lsrs	r3, r3, #24
34180fba:	f003 0307 	and.w	r3, r3, #7
34180fbe:	61bb      	str	r3, [r7, #24]
      break;
34180fc0:	e005      	b.n	34180fce <SystemCoreClockUpdate+0x222>
      break;
34180fc2:	bf00      	nop
34180fc4:	e004      	b.n	34180fd0 <SystemCoreClockUpdate+0x224>
      break;
34180fc6:	bf00      	nop
34180fc8:	e002      	b.n	34180fd0 <SystemCoreClockUpdate+0x224>
      break;
34180fca:	bf00      	nop
34180fcc:	e000      	b.n	34180fd0 <SystemCoreClockUpdate+0x224>
      break;
34180fce:	bf00      	nop
34180fd0:	697b      	ldr	r3, [r7, #20]
34180fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34180fd6:	d02c      	beq.n	34181032 <SystemCoreClockUpdate+0x286>
34180fd8:	697b      	ldr	r3, [r7, #20]
34180fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34180fde:	d839      	bhi.n	34181054 <SystemCoreClockUpdate+0x2a8>
34180fe0:	697b      	ldr	r3, [r7, #20]
34180fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34180fe6:	d021      	beq.n	3418102c <SystemCoreClockUpdate+0x280>
34180fe8:	697b      	ldr	r3, [r7, #20]
34180fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34180fee:	d831      	bhi.n	34181054 <SystemCoreClockUpdate+0x2a8>
34180ff0:	697b      	ldr	r3, [r7, #20]
34180ff2:	2b00      	cmp	r3, #0
34180ff4:	d004      	beq.n	34181000 <SystemCoreClockUpdate+0x254>
34180ff6:	697b      	ldr	r3, [r7, #20]
34180ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34180ffc:	d00a      	beq.n	34181014 <SystemCoreClockUpdate+0x268>
      break;
34180ffe:	e029      	b.n	34181054 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181000:	4b0d      	ldr	r3, [pc, #52]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34181002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181004:	09db      	lsrs	r3, r3, #7
34181006:	f003 0303 	and.w	r3, r3, #3
3418100a:	4a0c      	ldr	r2, [pc, #48]	@ (3418103c <SystemCoreClockUpdate+0x290>)
3418100c:	fa22 f303 	lsr.w	r3, r2, r3
34181010:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181012:	e020      	b.n	34181056 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181014:	4b08      	ldr	r3, [pc, #32]	@ (34181038 <SystemCoreClockUpdate+0x28c>)
34181016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418101c:	2b00      	cmp	r3, #0
3418101e:	d102      	bne.n	34181026 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34181020:	4b07      	ldr	r3, [pc, #28]	@ (34181040 <SystemCoreClockUpdate+0x294>)
34181022:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181024:	e017      	b.n	34181056 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34181026:	4b07      	ldr	r3, [pc, #28]	@ (34181044 <SystemCoreClockUpdate+0x298>)
34181028:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418102a:	e014      	b.n	34181056 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
3418102c:	4b06      	ldr	r3, [pc, #24]	@ (34181048 <SystemCoreClockUpdate+0x29c>)
3418102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181030:	e011      	b.n	34181056 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34181032:	4b06      	ldr	r3, [pc, #24]	@ (3418104c <SystemCoreClockUpdate+0x2a0>)
34181034:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181036:	e00e      	b.n	34181056 <SystemCoreClockUpdate+0x2aa>
34181038:	56028000 	.word	0x56028000
3418103c:	03d09000 	.word	0x03d09000
34181040:	003d0900 	.word	0x003d0900
34181044:	00f42400 	.word	0x00f42400
34181048:	02dc6c00 	.word	0x02dc6c00
3418104c:	00bb8000 	.word	0x00bb8000
34181050:	4b800000 	.word	0x4b800000
      break;
34181054:	bf00      	nop
    if (pllbypass == 0U)
34181056:	693b      	ldr	r3, [r7, #16]
34181058:	2b00      	cmp	r3, #0
3418105a:	d134      	bne.n	341810c6 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3418105c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418105e:	ee07 3a90 	vmov	s15, r3
34181062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34181068:	ee07 3a90 	vmov	s15, r3
3418106c:	eef8 6a67 	vcvt.f32.u32	s13, s15
34181070:	6a3b      	ldr	r3, [r7, #32]
34181072:	ee07 3a90 	vmov	s15, r3
34181076:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418107a:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34181050 <SystemCoreClockUpdate+0x2a4>
3418107e:	eec6 7a25 	vdiv.f32	s15, s12, s11
34181082:	ee76 7aa7 	vadd.f32	s15, s13, s15
34181086:	ee67 6a27 	vmul.f32	s13, s14, s15
3418108a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418108c:	ee07 3a90 	vmov	s15, r3
34181090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181094:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181098:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3418109c:	69fb      	ldr	r3, [r7, #28]
3418109e:	ee07 3a90 	vmov	s15, r3
341810a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341810a6:	69bb      	ldr	r3, [r7, #24]
341810a8:	ee07 3a90 	vmov	s15, r3
341810ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
341810b0:	ee27 7a27 	vmul.f32	s14, s14, s15
341810b4:	edd7 6a02 	vldr	s13, [r7, #8]
341810b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
341810bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341810c0:	ee17 3a90 	vmov	r3, s15
341810c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
341810c6:	4b0b      	ldr	r3, [pc, #44]	@ (341810f4 <SystemCoreClockUpdate+0x348>)
341810c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341810cc:	0c1b      	lsrs	r3, r3, #16
341810ce:	b2db      	uxtb	r3, r3
341810d0:	3301      	adds	r3, #1
341810d2:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
341810d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341810d6:	687b      	ldr	r3, [r7, #4]
341810d8:	fbb2 f3f3 	udiv	r3, r2, r3
341810dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341810de:	e000      	b.n	341810e2 <SystemCoreClockUpdate+0x336>
    break;
341810e0:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341810e2:	4a05      	ldr	r2, [pc, #20]	@ (341810f8 <SystemCoreClockUpdate+0x34c>)
341810e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341810e6:	6013      	str	r3, [r2, #0]
}
341810e8:	bf00      	nop
341810ea:	3734      	adds	r7, #52	@ 0x34
341810ec:	46bd      	mov	sp, r7
341810ee:	f85d 7b04 	ldr.w	r7, [sp], #4
341810f2:	4770      	bx	lr
341810f4:	56028000 	.word	0x56028000
341810f8:	341c0000 	.word	0x341c0000

341810fc <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
341810fc:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34181100:	b588      	push	{r3, r7, lr}
34181102:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34181104:	f7ff fe52 	bl	34180dac <SystemCoreClockUpdate>

  return SystemCoreClock;
34181108:	4b06      	ldr	r3, [pc, #24]	@ (34181124 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
3418110a:	681b      	ldr	r3, [r3, #0]
}
3418110c:	4618      	mov	r0, r3
3418110e:	46bd      	mov	sp, r7
34181110:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34181114:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34181118:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
3418111c:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34181120:	4774      	bxns	lr
34181122:	bf00      	nop
34181124:	341c0000 	.word	0x341c0000

34181128 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34181128:	480f      	ldr	r0, [pc, #60]	@ (34181168 <LoopForever+0x4>)
  msr   MSPLIM, r0
3418112a:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3418112e:	480f      	ldr	r0, [pc, #60]	@ (3418116c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34181130:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34181132:	f7ff fd55 	bl	34180be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34181136:	480e      	ldr	r0, [pc, #56]	@ (34181170 <LoopForever+0xc>)
  ldr r1, =_edata
34181138:	490e      	ldr	r1, [pc, #56]	@ (34181174 <LoopForever+0x10>)
  ldr r2, =_sidata
3418113a:	4a0f      	ldr	r2, [pc, #60]	@ (34181178 <LoopForever+0x14>)
  movs r3, #0
3418113c:	2300      	movs	r3, #0
  b LoopCopyDataInit
3418113e:	e002      	b.n	34181146 <LoopCopyDataInit>

34181140 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34181140:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34181142:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34181144:	3304      	adds	r3, #4

34181146 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34181146:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34181148:	428c      	cmp	r4, r1
  bcc CopyDataInit
3418114a:	d3f9      	bcc.n	34181140 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3418114c:	4a0b      	ldr	r2, [pc, #44]	@ (3418117c <LoopForever+0x18>)
  ldr r4, =_ebss
3418114e:	4c0c      	ldr	r4, [pc, #48]	@ (34181180 <LoopForever+0x1c>)
  movs r3, #0
34181150:	2300      	movs	r3, #0
  b LoopFillZerobss
34181152:	e001      	b.n	34181158 <LoopFillZerobss>

34181154 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34181154:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34181156:	3204      	adds	r2, #4

34181158 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34181158:	42a2      	cmp	r2, r4
  bcc FillZerobss
3418115a:	d3fb      	bcc.n	34181154 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3418115c:	f00d fdd4 	bl	3418ed08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34181160:	f7ff fb4c 	bl	341807fc <main>

34181164 <LoopForever>:

LoopForever:
  b LoopForever
34181164:	e7fe      	b.n	34181164 <LoopForever>
34181166:	0000      	.short	0x0000
  ldr   r0, =_sstack
34181168:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
3418116c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34181170:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34181174:	341c000c 	.word	0x341c000c
  ldr r2, =_sidata
34181178:	3418edd0 	.word	0x3418edd0
  ldr r2, =_sbss
3418117c:	341c0010 	.word	0x341c0010
  ldr r4, =_ebss
34181180:	341c02cc 	.word	0x341c02cc

34181184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34181184:	e7fe      	b.n	34181184 <ADC1_2_IRQHandler>

34181186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34181186:	b580      	push	{r7, lr}
34181188:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3418118a:	2003      	movs	r0, #3
3418118c:	f000 f94c 	bl	34181428 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34181190:	f7ff fe0c 	bl	34180dac <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34181194:	200f      	movs	r0, #15
34181196:	f000 f80b 	bl	341811b0 <HAL_InitTick>
3418119a:	4603      	mov	r3, r0
3418119c:	2b00      	cmp	r3, #0
3418119e:	d001      	beq.n	341811a4 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
341811a0:	2301      	movs	r3, #1
341811a2:	e002      	b.n	341811aa <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
341811a4:	f7ff fc68 	bl	34180a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
341811a8:	2300      	movs	r3, #0
}
341811aa:	4618      	mov	r0, r3
341811ac:	bd80      	pop	{r7, pc}
	...

341811b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
341811b0:	b580      	push	{r7, lr}
341811b2:	b082      	sub	sp, #8
341811b4:	af00      	add	r7, sp, #0
341811b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
341811b8:	4b15      	ldr	r3, [pc, #84]	@ (34181210 <HAL_InitTick+0x60>)
341811ba:	781b      	ldrb	r3, [r3, #0]
341811bc:	2b00      	cmp	r3, #0
341811be:	d101      	bne.n	341811c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
341811c0:	2301      	movs	r3, #1
341811c2:	e021      	b.n	34181208 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
341811c4:	4b13      	ldr	r3, [pc, #76]	@ (34181214 <HAL_InitTick+0x64>)
341811c6:	681a      	ldr	r2, [r3, #0]
341811c8:	4b11      	ldr	r3, [pc, #68]	@ (34181210 <HAL_InitTick+0x60>)
341811ca:	781b      	ldrb	r3, [r3, #0]
341811cc:	4619      	mov	r1, r3
341811ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
341811d2:	fbb3 f3f1 	udiv	r3, r3, r1
341811d6:	fbb2 f3f3 	udiv	r3, r2, r3
341811da:	4618      	mov	r0, r3
341811dc:	f000 f94c 	bl	34181478 <HAL_SYSTICK_Config>
341811e0:	4603      	mov	r3, r0
341811e2:	2b00      	cmp	r3, #0
341811e4:	d001      	beq.n	341811ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341811e6:	2301      	movs	r3, #1
341811e8:	e00e      	b.n	34181208 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341811ea:	687b      	ldr	r3, [r7, #4]
341811ec:	2b0f      	cmp	r3, #15
341811ee:	d80a      	bhi.n	34181206 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341811f0:	2200      	movs	r2, #0
341811f2:	6879      	ldr	r1, [r7, #4]
341811f4:	f04f 30ff 	mov.w	r0, #4294967295
341811f8:	f000 f921 	bl	3418143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341811fc:	4a06      	ldr	r2, [pc, #24]	@ (34181218 <HAL_InitTick+0x68>)
341811fe:	687b      	ldr	r3, [r7, #4]
34181200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34181202:	2300      	movs	r3, #0
34181204:	e000      	b.n	34181208 <HAL_InitTick+0x58>
    return HAL_ERROR;
34181206:	2301      	movs	r3, #1
}
34181208:	4618      	mov	r0, r3
3418120a:	3708      	adds	r7, #8
3418120c:	46bd      	mov	sp, r7
3418120e:	bd80      	pop	{r7, pc}
34181210:	341c0008 	.word	0x341c0008
34181214:	341c0000 	.word	0x341c0000
34181218:	341c0004 	.word	0x341c0004

3418121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
3418121c:	b480      	push	{r7}
3418121e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34181220:	4b06      	ldr	r3, [pc, #24]	@ (3418123c <HAL_IncTick+0x20>)
34181222:	781b      	ldrb	r3, [r3, #0]
34181224:	461a      	mov	r2, r3
34181226:	4b06      	ldr	r3, [pc, #24]	@ (34181240 <HAL_IncTick+0x24>)
34181228:	681b      	ldr	r3, [r3, #0]
3418122a:	4413      	add	r3, r2
3418122c:	4a04      	ldr	r2, [pc, #16]	@ (34181240 <HAL_IncTick+0x24>)
3418122e:	6013      	str	r3, [r2, #0]
}
34181230:	bf00      	nop
34181232:	46bd      	mov	sp, r7
34181234:	f85d 7b04 	ldr.w	r7, [sp], #4
34181238:	4770      	bx	lr
3418123a:	bf00      	nop
3418123c:	341c0008 	.word	0x341c0008
34181240:	341c0090 	.word	0x341c0090

34181244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34181244:	b480      	push	{r7}
34181246:	af00      	add	r7, sp, #0
  return uwTick;
34181248:	4b03      	ldr	r3, [pc, #12]	@ (34181258 <HAL_GetTick+0x14>)
3418124a:	681b      	ldr	r3, [r3, #0]
}
3418124c:	4618      	mov	r0, r3
3418124e:	46bd      	mov	sp, r7
34181250:	f85d 7b04 	ldr.w	r7, [sp], #4
34181254:	4770      	bx	lr
34181256:	bf00      	nop
34181258:	341c0090 	.word	0x341c0090

3418125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
3418125c:	b580      	push	{r7, lr}
3418125e:	b084      	sub	sp, #16
34181260:	af00      	add	r7, sp, #0
34181262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34181264:	f7ff ffee 	bl	34181244 <HAL_GetTick>
34181268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
3418126a:	687b      	ldr	r3, [r7, #4]
3418126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3418126e:	68fb      	ldr	r3, [r7, #12]
34181270:	f1b3 3fff 	cmp.w	r3, #4294967295
34181274:	d005      	beq.n	34181282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34181276:	4b0a      	ldr	r3, [pc, #40]	@ (341812a0 <HAL_Delay+0x44>)
34181278:	781b      	ldrb	r3, [r3, #0]
3418127a:	461a      	mov	r2, r3
3418127c:	68fb      	ldr	r3, [r7, #12]
3418127e:	4413      	add	r3, r2
34181280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34181282:	bf00      	nop
34181284:	f7ff ffde 	bl	34181244 <HAL_GetTick>
34181288:	4602      	mov	r2, r0
3418128a:	68bb      	ldr	r3, [r7, #8]
3418128c:	1ad3      	subs	r3, r2, r3
3418128e:	68fa      	ldr	r2, [r7, #12]
34181290:	429a      	cmp	r2, r3
34181292:	d8f7      	bhi.n	34181284 <HAL_Delay+0x28>
  {
  }
}
34181294:	bf00      	nop
34181296:	bf00      	nop
34181298:	3710      	adds	r7, #16
3418129a:	46bd      	mov	sp, r7
3418129c:	bd80      	pop	{r7, pc}
3418129e:	bf00      	nop
341812a0:	341c0008 	.word	0x341c0008

341812a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
341812a4:	b480      	push	{r7}
341812a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
341812a8:	4b05      	ldr	r3, [pc, #20]	@ (341812c0 <HAL_SuspendTick+0x1c>)
341812aa:	681b      	ldr	r3, [r3, #0]
341812ac:	4a04      	ldr	r2, [pc, #16]	@ (341812c0 <HAL_SuspendTick+0x1c>)
341812ae:	f023 0302 	bic.w	r3, r3, #2
341812b2:	6013      	str	r3, [r2, #0]
}
341812b4:	bf00      	nop
341812b6:	46bd      	mov	sp, r7
341812b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341812bc:	4770      	bx	lr
341812be:	bf00      	nop
341812c0:	e000e010 	.word	0xe000e010

341812c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341812c4:	b480      	push	{r7}
341812c6:	b085      	sub	sp, #20
341812c8:	af00      	add	r7, sp, #0
341812ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
341812cc:	687b      	ldr	r3, [r7, #4]
341812ce:	f003 0307 	and.w	r3, r3, #7
341812d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341812d4:	4b0c      	ldr	r3, [pc, #48]	@ (34181308 <__NVIC_SetPriorityGrouping+0x44>)
341812d6:	68db      	ldr	r3, [r3, #12]
341812d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341812da:	68ba      	ldr	r2, [r7, #8]
341812dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
341812e0:	4013      	ands	r3, r2
341812e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341812e4:	68fb      	ldr	r3, [r7, #12]
341812e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
341812e8:	68bb      	ldr	r3, [r7, #8]
341812ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
341812ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341812f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341812f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
341812f6:	4a04      	ldr	r2, [pc, #16]	@ (34181308 <__NVIC_SetPriorityGrouping+0x44>)
341812f8:	68bb      	ldr	r3, [r7, #8]
341812fa:	60d3      	str	r3, [r2, #12]
}
341812fc:	bf00      	nop
341812fe:	3714      	adds	r7, #20
34181300:	46bd      	mov	sp, r7
34181302:	f85d 7b04 	ldr.w	r7, [sp], #4
34181306:	4770      	bx	lr
34181308:	e000ed00 	.word	0xe000ed00

3418130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
3418130c:	b480      	push	{r7}
3418130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34181310:	4b04      	ldr	r3, [pc, #16]	@ (34181324 <__NVIC_GetPriorityGrouping+0x18>)
34181312:	68db      	ldr	r3, [r3, #12]
34181314:	0a1b      	lsrs	r3, r3, #8
34181316:	f003 0307 	and.w	r3, r3, #7
}
3418131a:	4618      	mov	r0, r3
3418131c:	46bd      	mov	sp, r7
3418131e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181322:	4770      	bx	lr
34181324:	e000ed00 	.word	0xe000ed00

34181328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34181328:	b480      	push	{r7}
3418132a:	b083      	sub	sp, #12
3418132c:	af00      	add	r7, sp, #0
3418132e:	4603      	mov	r3, r0
34181330:	6039      	str	r1, [r7, #0]
34181332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34181334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34181338:	2b00      	cmp	r3, #0
3418133a:	db0a      	blt.n	34181352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418133c:	683b      	ldr	r3, [r7, #0]
3418133e:	b2da      	uxtb	r2, r3
34181340:	490c      	ldr	r1, [pc, #48]	@ (34181374 <__NVIC_SetPriority+0x4c>)
34181342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34181346:	0112      	lsls	r2, r2, #4
34181348:	b2d2      	uxtb	r2, r2
3418134a:	440b      	add	r3, r1
3418134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34181350:	e00a      	b.n	34181368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34181352:	683b      	ldr	r3, [r7, #0]
34181354:	b2da      	uxtb	r2, r3
34181356:	4908      	ldr	r1, [pc, #32]	@ (34181378 <__NVIC_SetPriority+0x50>)
34181358:	88fb      	ldrh	r3, [r7, #6]
3418135a:	f003 030f 	and.w	r3, r3, #15
3418135e:	3b04      	subs	r3, #4
34181360:	0112      	lsls	r2, r2, #4
34181362:	b2d2      	uxtb	r2, r2
34181364:	440b      	add	r3, r1
34181366:	761a      	strb	r2, [r3, #24]
}
34181368:	bf00      	nop
3418136a:	370c      	adds	r7, #12
3418136c:	46bd      	mov	sp, r7
3418136e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181372:	4770      	bx	lr
34181374:	e000e100 	.word	0xe000e100
34181378:	e000ed00 	.word	0xe000ed00

3418137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
3418137c:	b480      	push	{r7}
3418137e:	b089      	sub	sp, #36	@ 0x24
34181380:	af00      	add	r7, sp, #0
34181382:	60f8      	str	r0, [r7, #12]
34181384:	60b9      	str	r1, [r7, #8]
34181386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34181388:	68fb      	ldr	r3, [r7, #12]
3418138a:	f003 0307 	and.w	r3, r3, #7
3418138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34181390:	69fb      	ldr	r3, [r7, #28]
34181392:	f1c3 0307 	rsb	r3, r3, #7
34181396:	2b04      	cmp	r3, #4
34181398:	bf28      	it	cs
3418139a:	2304      	movcs	r3, #4
3418139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3418139e:	69fb      	ldr	r3, [r7, #28]
341813a0:	3304      	adds	r3, #4
341813a2:	2b06      	cmp	r3, #6
341813a4:	d902      	bls.n	341813ac <NVIC_EncodePriority+0x30>
341813a6:	69fb      	ldr	r3, [r7, #28]
341813a8:	3b03      	subs	r3, #3
341813aa:	e000      	b.n	341813ae <NVIC_EncodePriority+0x32>
341813ac:	2300      	movs	r3, #0
341813ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341813b0:	f04f 32ff 	mov.w	r2, #4294967295
341813b4:	69bb      	ldr	r3, [r7, #24]
341813b6:	fa02 f303 	lsl.w	r3, r2, r3
341813ba:	43da      	mvns	r2, r3
341813bc:	68bb      	ldr	r3, [r7, #8]
341813be:	401a      	ands	r2, r3
341813c0:	697b      	ldr	r3, [r7, #20]
341813c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
341813c4:	f04f 31ff 	mov.w	r1, #4294967295
341813c8:	697b      	ldr	r3, [r7, #20]
341813ca:	fa01 f303 	lsl.w	r3, r1, r3
341813ce:	43d9      	mvns	r1, r3
341813d0:	687b      	ldr	r3, [r7, #4]
341813d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341813d4:	4313      	orrs	r3, r2
         );
}
341813d6:	4618      	mov	r0, r3
341813d8:	3724      	adds	r7, #36	@ 0x24
341813da:	46bd      	mov	sp, r7
341813dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341813e0:	4770      	bx	lr
	...

341813e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
341813e4:	b580      	push	{r7, lr}
341813e6:	b082      	sub	sp, #8
341813e8:	af00      	add	r7, sp, #0
341813ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
341813ec:	687b      	ldr	r3, [r7, #4]
341813ee:	3b01      	subs	r3, #1
341813f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341813f4:	d301      	bcc.n	341813fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
341813f6:	2301      	movs	r3, #1
341813f8:	e00f      	b.n	3418141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
341813fa:	4a0a      	ldr	r2, [pc, #40]	@ (34181424 <SysTick_Config+0x40>)
341813fc:	687b      	ldr	r3, [r7, #4]
341813fe:	3b01      	subs	r3, #1
34181400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34181402:	210f      	movs	r1, #15
34181404:	f04f 30ff 	mov.w	r0, #4294967295
34181408:	f7ff ff8e 	bl	34181328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3418140c:	4b05      	ldr	r3, [pc, #20]	@ (34181424 <SysTick_Config+0x40>)
3418140e:	2200      	movs	r2, #0
34181410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34181412:	4b04      	ldr	r3, [pc, #16]	@ (34181424 <SysTick_Config+0x40>)
34181414:	2207      	movs	r2, #7
34181416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34181418:	2300      	movs	r3, #0
}
3418141a:	4618      	mov	r0, r3
3418141c:	3708      	adds	r7, #8
3418141e:	46bd      	mov	sp, r7
34181420:	bd80      	pop	{r7, pc}
34181422:	bf00      	nop
34181424:	e000e010 	.word	0xe000e010

34181428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34181428:	b580      	push	{r7, lr}
3418142a:	b082      	sub	sp, #8
3418142c:	af00      	add	r7, sp, #0
3418142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34181430:	6878      	ldr	r0, [r7, #4]
34181432:	f7ff ff47 	bl	341812c4 <__NVIC_SetPriorityGrouping>
}
34181436:	bf00      	nop
34181438:	3708      	adds	r7, #8
3418143a:	46bd      	mov	sp, r7
3418143c:	bd80      	pop	{r7, pc}

3418143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
3418143e:	b580      	push	{r7, lr}
34181440:	b086      	sub	sp, #24
34181442:	af00      	add	r7, sp, #0
34181444:	4603      	mov	r3, r0
34181446:	60b9      	str	r1, [r7, #8]
34181448:	607a      	str	r2, [r7, #4]
3418144a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
3418144c:	f7ff ff5e 	bl	3418130c <__NVIC_GetPriorityGrouping>
34181450:	4603      	mov	r3, r0
34181452:	f003 0307 	and.w	r3, r3, #7
34181456:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34181458:	687a      	ldr	r2, [r7, #4]
3418145a:	68b9      	ldr	r1, [r7, #8]
3418145c:	6978      	ldr	r0, [r7, #20]
3418145e:	f7ff ff8d 	bl	3418137c <NVIC_EncodePriority>
34181462:	4602      	mov	r2, r0
34181464:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34181468:	4611      	mov	r1, r2
3418146a:	4618      	mov	r0, r3
3418146c:	f7ff ff5c 	bl	34181328 <__NVIC_SetPriority>
}
34181470:	bf00      	nop
34181472:	3718      	adds	r7, #24
34181474:	46bd      	mov	sp, r7
34181476:	bd80      	pop	{r7, pc}

34181478 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34181478:	b580      	push	{r7, lr}
3418147a:	b082      	sub	sp, #8
3418147c:	af00      	add	r7, sp, #0
3418147e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34181480:	6878      	ldr	r0, [r7, #4]
34181482:	f7ff ffaf 	bl	341813e4 <SysTick_Config>
34181486:	4603      	mov	r3, r0
}
34181488:	4618      	mov	r0, r3
3418148a:	3708      	adds	r7, #8
3418148c:	46bd      	mov	sp, r7
3418148e:	bd80      	pop	{r7, pc}

34181490 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
34181490:	b580      	push	{r7, lr}
34181492:	b084      	sub	sp, #16
34181494:	af00      	add	r7, sp, #0
34181496:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
34181498:	f7ff fed4 	bl	34181244 <HAL_GetTick>
3418149c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
3418149e:	687b      	ldr	r3, [r7, #4]
341814a0:	2b00      	cmp	r3, #0
341814a2:	d101      	bne.n	341814a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
341814a4:	2301      	movs	r3, #1
341814a6:	e06b      	b.n	34181580 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
341814a8:	687b      	ldr	r3, [r7, #4]
341814aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
341814ae:	b2db      	uxtb	r3, r3
341814b0:	2b02      	cmp	r3, #2
341814b2:	d008      	beq.n	341814c6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
341814b4:	687b      	ldr	r3, [r7, #4]
341814b6:	2220      	movs	r2, #32
341814b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
341814ba:	687b      	ldr	r3, [r7, #4]
341814bc:	2200      	movs	r2, #0
341814be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
341814c2:	2301      	movs	r3, #1
341814c4:	e05c      	b.n	34181580 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
341814c6:	687b      	ldr	r3, [r7, #4]
341814c8:	681b      	ldr	r3, [r3, #0]
341814ca:	695a      	ldr	r2, [r3, #20]
341814cc:	687b      	ldr	r3, [r7, #4]
341814ce:	681b      	ldr	r3, [r3, #0]
341814d0:	f042 0204 	orr.w	r2, r2, #4
341814d4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
341814d6:	687b      	ldr	r3, [r7, #4]
341814d8:	2205      	movs	r2, #5
341814da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
341814de:	e020      	b.n	34181522 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
341814e0:	f7ff feb0 	bl	34181244 <HAL_GetTick>
341814e4:	4602      	mov	r2, r0
341814e6:	68fb      	ldr	r3, [r7, #12]
341814e8:	1ad3      	subs	r3, r2, r3
341814ea:	2b05      	cmp	r3, #5
341814ec:	d919      	bls.n	34181522 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
341814ee:	687b      	ldr	r3, [r7, #4]
341814f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341814f2:	f043 0210 	orr.w	r2, r3, #16
341814f6:	687b      	ldr	r3, [r7, #4]
341814f8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
341814fa:	687b      	ldr	r3, [r7, #4]
341814fc:	2203      	movs	r2, #3
341814fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34181502:	687b      	ldr	r3, [r7, #4]
34181504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34181506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418150a:	2b00      	cmp	r3, #0
3418150c:	d003      	beq.n	34181516 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
3418150e:	687b      	ldr	r3, [r7, #4]
34181510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34181512:	2201      	movs	r2, #1
34181514:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34181516:	687b      	ldr	r3, [r7, #4]
34181518:	2200      	movs	r2, #0
3418151a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
3418151e:	2301      	movs	r3, #1
34181520:	e02e      	b.n	34181580 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34181522:	687b      	ldr	r3, [r7, #4]
34181524:	681b      	ldr	r3, [r3, #0]
34181526:	691b      	ldr	r3, [r3, #16]
34181528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418152c:	2b00      	cmp	r3, #0
3418152e:	d0d7      	beq.n	341814e0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
34181530:	687b      	ldr	r3, [r7, #4]
34181532:	681b      	ldr	r3, [r3, #0]
34181534:	695a      	ldr	r2, [r3, #20]
34181536:	687b      	ldr	r3, [r7, #4]
34181538:	681b      	ldr	r3, [r3, #0]
3418153a:	f042 0202 	orr.w	r2, r2, #2
3418153e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34181540:	687b      	ldr	r3, [r7, #4]
34181542:	2204      	movs	r2, #4
34181544:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34181548:	687b      	ldr	r3, [r7, #4]
3418154a:	681b      	ldr	r3, [r3, #0]
3418154c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34181550:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
34181552:	687b      	ldr	r3, [r7, #4]
34181554:	2201      	movs	r2, #1
34181556:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
3418155a:	687b      	ldr	r3, [r7, #4]
3418155c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34181562:	2b00      	cmp	r3, #0
34181564:	d007      	beq.n	34181576 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34181566:	687b      	ldr	r3, [r7, #4]
34181568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418156a:	2201      	movs	r2, #1
3418156c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
3418156e:	687b      	ldr	r3, [r7, #4]
34181570:	681b      	ldr	r3, [r3, #0]
34181572:	2200      	movs	r2, #0
34181574:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34181576:	687b      	ldr	r3, [r7, #4]
34181578:	2200      	movs	r2, #0
3418157a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
3418157e:	2300      	movs	r3, #0
}
34181580:	4618      	mov	r0, r3
34181582:	3710      	adds	r7, #16
34181584:	46bd      	mov	sp, r7
34181586:	bd80      	pop	{r7, pc}

34181588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34181588:	b480      	push	{r7}
3418158a:	b087      	sub	sp, #28
3418158c:	af00      	add	r7, sp, #0
3418158e:	6078      	str	r0, [r7, #4]
34181590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34181592:	2300      	movs	r3, #0
34181594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34181596:	e180      	b.n	3418189a <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34181598:	683b      	ldr	r3, [r7, #0]
3418159a:	681a      	ldr	r2, [r3, #0]
3418159c:	2101      	movs	r1, #1
3418159e:	697b      	ldr	r3, [r7, #20]
341815a0:	fa01 f303 	lsl.w	r3, r1, r3
341815a4:	4013      	ands	r3, r2
341815a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
341815a8:	68fb      	ldr	r3, [r7, #12]
341815aa:	2b00      	cmp	r3, #0
341815ac:	f000 8172 	beq.w	34181894 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
341815b0:	683b      	ldr	r3, [r7, #0]
341815b2:	685b      	ldr	r3, [r3, #4]
341815b4:	f003 0303 	and.w	r3, r3, #3
341815b8:	2b01      	cmp	r3, #1
341815ba:	d005      	beq.n	341815c8 <HAL_GPIO_Init+0x40>
341815bc:	683b      	ldr	r3, [r7, #0]
341815be:	685b      	ldr	r3, [r3, #4]
341815c0:	f003 0303 	and.w	r3, r3, #3
341815c4:	2b02      	cmp	r3, #2
341815c6:	d130      	bne.n	3418162a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
341815c8:	687b      	ldr	r3, [r7, #4]
341815ca:	689b      	ldr	r3, [r3, #8]
341815cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341815ce:	697b      	ldr	r3, [r7, #20]
341815d0:	005b      	lsls	r3, r3, #1
341815d2:	2203      	movs	r2, #3
341815d4:	fa02 f303 	lsl.w	r3, r2, r3
341815d8:	43db      	mvns	r3, r3
341815da:	693a      	ldr	r2, [r7, #16]
341815dc:	4013      	ands	r3, r2
341815de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341815e0:	683b      	ldr	r3, [r7, #0]
341815e2:	68da      	ldr	r2, [r3, #12]
341815e4:	697b      	ldr	r3, [r7, #20]
341815e6:	005b      	lsls	r3, r3, #1
341815e8:	fa02 f303 	lsl.w	r3, r2, r3
341815ec:	693a      	ldr	r2, [r7, #16]
341815ee:	4313      	orrs	r3, r2
341815f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
341815f2:	687b      	ldr	r3, [r7, #4]
341815f4:	693a      	ldr	r2, [r7, #16]
341815f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
341815f8:	687b      	ldr	r3, [r7, #4]
341815fa:	685b      	ldr	r3, [r3, #4]
341815fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
341815fe:	2201      	movs	r2, #1
34181600:	697b      	ldr	r3, [r7, #20]
34181602:	fa02 f303 	lsl.w	r3, r2, r3
34181606:	43db      	mvns	r3, r3
34181608:	693a      	ldr	r2, [r7, #16]
3418160a:	4013      	ands	r3, r2
3418160c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3418160e:	683b      	ldr	r3, [r7, #0]
34181610:	685b      	ldr	r3, [r3, #4]
34181612:	091b      	lsrs	r3, r3, #4
34181614:	f003 0201 	and.w	r2, r3, #1
34181618:	697b      	ldr	r3, [r7, #20]
3418161a:	fa02 f303 	lsl.w	r3, r2, r3
3418161e:	693a      	ldr	r2, [r7, #16]
34181620:	4313      	orrs	r3, r2
34181622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34181624:	687b      	ldr	r3, [r7, #4]
34181626:	693a      	ldr	r2, [r7, #16]
34181628:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3418162a:	683b      	ldr	r3, [r7, #0]
3418162c:	685b      	ldr	r3, [r3, #4]
3418162e:	f003 0303 	and.w	r3, r3, #3
34181632:	2b03      	cmp	r3, #3
34181634:	d109      	bne.n	3418164a <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181636:	683b      	ldr	r3, [r7, #0]
34181638:	685b      	ldr	r3, [r3, #4]
3418163a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3418163e:	2b03      	cmp	r3, #3
34181640:	d11b      	bne.n	3418167a <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181642:	683b      	ldr	r3, [r7, #0]
34181644:	689b      	ldr	r3, [r3, #8]
34181646:	2b01      	cmp	r3, #1
34181648:	d017      	beq.n	3418167a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
3418164a:	687b      	ldr	r3, [r7, #4]
3418164c:	68db      	ldr	r3, [r3, #12]
3418164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34181650:	697b      	ldr	r3, [r7, #20]
34181652:	005b      	lsls	r3, r3, #1
34181654:	2203      	movs	r2, #3
34181656:	fa02 f303 	lsl.w	r3, r2, r3
3418165a:	43db      	mvns	r3, r3
3418165c:	693a      	ldr	r2, [r7, #16]
3418165e:	4013      	ands	r3, r2
34181660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34181662:	683b      	ldr	r3, [r7, #0]
34181664:	689a      	ldr	r2, [r3, #8]
34181666:	697b      	ldr	r3, [r7, #20]
34181668:	005b      	lsls	r3, r3, #1
3418166a:	fa02 f303 	lsl.w	r3, r2, r3
3418166e:	693a      	ldr	r2, [r7, #16]
34181670:	4313      	orrs	r3, r2
34181672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34181674:	687b      	ldr	r3, [r7, #4]
34181676:	693a      	ldr	r2, [r7, #16]
34181678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3418167a:	683b      	ldr	r3, [r7, #0]
3418167c:	685b      	ldr	r3, [r3, #4]
3418167e:	f003 0303 	and.w	r3, r3, #3
34181682:	2b02      	cmp	r3, #2
34181684:	d123      	bne.n	341816ce <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34181686:	697b      	ldr	r3, [r7, #20]
34181688:	08da      	lsrs	r2, r3, #3
3418168a:	687b      	ldr	r3, [r7, #4]
3418168c:	3208      	adds	r2, #8
3418168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34181692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181694:	697b      	ldr	r3, [r7, #20]
34181696:	f003 0307 	and.w	r3, r3, #7
3418169a:	009b      	lsls	r3, r3, #2
3418169c:	220f      	movs	r2, #15
3418169e:	fa02 f303 	lsl.w	r3, r2, r3
341816a2:	43db      	mvns	r3, r3
341816a4:	693a      	ldr	r2, [r7, #16]
341816a6:	4013      	ands	r3, r2
341816a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
341816aa:	683b      	ldr	r3, [r7, #0]
341816ac:	691a      	ldr	r2, [r3, #16]
341816ae:	697b      	ldr	r3, [r7, #20]
341816b0:	f003 0307 	and.w	r3, r3, #7
341816b4:	009b      	lsls	r3, r3, #2
341816b6:	fa02 f303 	lsl.w	r3, r2, r3
341816ba:	693a      	ldr	r2, [r7, #16]
341816bc:	4313      	orrs	r3, r2
341816be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
341816c0:	697b      	ldr	r3, [r7, #20]
341816c2:	08da      	lsrs	r2, r3, #3
341816c4:	687b      	ldr	r3, [r7, #4]
341816c6:	3208      	adds	r2, #8
341816c8:	6939      	ldr	r1, [r7, #16]
341816ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
341816ce:	687b      	ldr	r3, [r7, #4]
341816d0:	681b      	ldr	r3, [r3, #0]
341816d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
341816d4:	697b      	ldr	r3, [r7, #20]
341816d6:	005b      	lsls	r3, r3, #1
341816d8:	2203      	movs	r2, #3
341816da:	fa02 f303 	lsl.w	r3, r2, r3
341816de:	43db      	mvns	r3, r3
341816e0:	693a      	ldr	r2, [r7, #16]
341816e2:	4013      	ands	r3, r2
341816e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
341816e6:	683b      	ldr	r3, [r7, #0]
341816e8:	685b      	ldr	r3, [r3, #4]
341816ea:	f003 0203 	and.w	r2, r3, #3
341816ee:	697b      	ldr	r3, [r7, #20]
341816f0:	005b      	lsls	r3, r3, #1
341816f2:	fa02 f303 	lsl.w	r3, r2, r3
341816f6:	693a      	ldr	r2, [r7, #16]
341816f8:	4313      	orrs	r3, r2
341816fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
341816fc:	687b      	ldr	r3, [r7, #4]
341816fe:	693a      	ldr	r2, [r7, #16]
34181700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34181702:	683b      	ldr	r3, [r7, #0]
34181704:	685b      	ldr	r3, [r3, #4]
34181706:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
3418170a:	2b00      	cmp	r3, #0
3418170c:	f000 80c2 	beq.w	34181894 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34181710:	4a69      	ldr	r2, [pc, #420]	@ (341818b8 <HAL_GPIO_Init+0x330>)
34181712:	697b      	ldr	r3, [r7, #20]
34181714:	089b      	lsrs	r3, r3, #2
34181716:	3318      	adds	r3, #24
34181718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3418171e:	697b      	ldr	r3, [r7, #20]
34181720:	f003 0303 	and.w	r3, r3, #3
34181724:	00db      	lsls	r3, r3, #3
34181726:	220f      	movs	r2, #15
34181728:	fa02 f303 	lsl.w	r3, r2, r3
3418172c:	43db      	mvns	r3, r3
3418172e:	693a      	ldr	r2, [r7, #16]
34181730:	4013      	ands	r3, r2
34181732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181734:	687b      	ldr	r3, [r7, #4]
34181736:	4a61      	ldr	r2, [pc, #388]	@ (341818bc <HAL_GPIO_Init+0x334>)
34181738:	4293      	cmp	r3, r2
3418173a:	d043      	beq.n	341817c4 <HAL_GPIO_Init+0x23c>
3418173c:	687b      	ldr	r3, [r7, #4]
3418173e:	4a60      	ldr	r2, [pc, #384]	@ (341818c0 <HAL_GPIO_Init+0x338>)
34181740:	4293      	cmp	r3, r2
34181742:	d03d      	beq.n	341817c0 <HAL_GPIO_Init+0x238>
34181744:	687b      	ldr	r3, [r7, #4]
34181746:	4a5f      	ldr	r2, [pc, #380]	@ (341818c4 <HAL_GPIO_Init+0x33c>)
34181748:	4293      	cmp	r3, r2
3418174a:	d037      	beq.n	341817bc <HAL_GPIO_Init+0x234>
3418174c:	687b      	ldr	r3, [r7, #4]
3418174e:	4a5e      	ldr	r2, [pc, #376]	@ (341818c8 <HAL_GPIO_Init+0x340>)
34181750:	4293      	cmp	r3, r2
34181752:	d031      	beq.n	341817b8 <HAL_GPIO_Init+0x230>
34181754:	687b      	ldr	r3, [r7, #4]
34181756:	4a5d      	ldr	r2, [pc, #372]	@ (341818cc <HAL_GPIO_Init+0x344>)
34181758:	4293      	cmp	r3, r2
3418175a:	d02b      	beq.n	341817b4 <HAL_GPIO_Init+0x22c>
3418175c:	687b      	ldr	r3, [r7, #4]
3418175e:	4a5c      	ldr	r2, [pc, #368]	@ (341818d0 <HAL_GPIO_Init+0x348>)
34181760:	4293      	cmp	r3, r2
34181762:	d025      	beq.n	341817b0 <HAL_GPIO_Init+0x228>
34181764:	687b      	ldr	r3, [r7, #4]
34181766:	4a5b      	ldr	r2, [pc, #364]	@ (341818d4 <HAL_GPIO_Init+0x34c>)
34181768:	4293      	cmp	r3, r2
3418176a:	d01f      	beq.n	341817ac <HAL_GPIO_Init+0x224>
3418176c:	687b      	ldr	r3, [r7, #4]
3418176e:	4a5a      	ldr	r2, [pc, #360]	@ (341818d8 <HAL_GPIO_Init+0x350>)
34181770:	4293      	cmp	r3, r2
34181772:	d019      	beq.n	341817a8 <HAL_GPIO_Init+0x220>
34181774:	687b      	ldr	r3, [r7, #4]
34181776:	4a59      	ldr	r2, [pc, #356]	@ (341818dc <HAL_GPIO_Init+0x354>)
34181778:	4293      	cmp	r3, r2
3418177a:	d013      	beq.n	341817a4 <HAL_GPIO_Init+0x21c>
3418177c:	687b      	ldr	r3, [r7, #4]
3418177e:	4a58      	ldr	r2, [pc, #352]	@ (341818e0 <HAL_GPIO_Init+0x358>)
34181780:	4293      	cmp	r3, r2
34181782:	d00d      	beq.n	341817a0 <HAL_GPIO_Init+0x218>
34181784:	687b      	ldr	r3, [r7, #4]
34181786:	4a57      	ldr	r2, [pc, #348]	@ (341818e4 <HAL_GPIO_Init+0x35c>)
34181788:	4293      	cmp	r3, r2
3418178a:	d007      	beq.n	3418179c <HAL_GPIO_Init+0x214>
3418178c:	687b      	ldr	r3, [r7, #4]
3418178e:	4a56      	ldr	r2, [pc, #344]	@ (341818e8 <HAL_GPIO_Init+0x360>)
34181790:	4293      	cmp	r3, r2
34181792:	d101      	bne.n	34181798 <HAL_GPIO_Init+0x210>
34181794:	230b      	movs	r3, #11
34181796:	e016      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
34181798:	2310      	movs	r3, #16
3418179a:	e014      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
3418179c:	230a      	movs	r3, #10
3418179e:	e012      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817a0:	2309      	movs	r3, #9
341817a2:	e010      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817a4:	2308      	movs	r3, #8
341817a6:	e00e      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817a8:	2307      	movs	r3, #7
341817aa:	e00c      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817ac:	2306      	movs	r3, #6
341817ae:	e00a      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817b0:	2305      	movs	r3, #5
341817b2:	e008      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817b4:	2304      	movs	r3, #4
341817b6:	e006      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817b8:	2303      	movs	r3, #3
341817ba:	e004      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817bc:	2302      	movs	r3, #2
341817be:	e002      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817c0:	2301      	movs	r3, #1
341817c2:	e000      	b.n	341817c6 <HAL_GPIO_Init+0x23e>
341817c4:	2300      	movs	r3, #0
341817c6:	697a      	ldr	r2, [r7, #20]
341817c8:	f002 0203 	and.w	r2, r2, #3
341817cc:	00d2      	lsls	r2, r2, #3
341817ce:	4093      	lsls	r3, r2
341817d0:	693a      	ldr	r2, [r7, #16]
341817d2:	4313      	orrs	r3, r2
341817d4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
341817d6:	4938      	ldr	r1, [pc, #224]	@ (341818b8 <HAL_GPIO_Init+0x330>)
341817d8:	697b      	ldr	r3, [r7, #20]
341817da:	089b      	lsrs	r3, r3, #2
341817dc:	3318      	adds	r3, #24
341817de:	693a      	ldr	r2, [r7, #16]
341817e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
341817e4:	4b34      	ldr	r3, [pc, #208]	@ (341818b8 <HAL_GPIO_Init+0x330>)
341817e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341817ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
341817ec:	68fb      	ldr	r3, [r7, #12]
341817ee:	43db      	mvns	r3, r3
341817f0:	693a      	ldr	r2, [r7, #16]
341817f2:	4013      	ands	r3, r2
341817f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
341817f6:	683b      	ldr	r3, [r7, #0]
341817f8:	685b      	ldr	r3, [r3, #4]
341817fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341817fe:	2b00      	cmp	r3, #0
34181800:	d003      	beq.n	3418180a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34181802:	693a      	ldr	r2, [r7, #16]
34181804:	68fb      	ldr	r3, [r7, #12]
34181806:	4313      	orrs	r3, r2
34181808:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
3418180a:	4a2b      	ldr	r2, [pc, #172]	@ (341818b8 <HAL_GPIO_Init+0x330>)
3418180c:	693b      	ldr	r3, [r7, #16]
3418180e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34181812:	4b29      	ldr	r3, [pc, #164]	@ (341818b8 <HAL_GPIO_Init+0x330>)
34181814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34181818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3418181a:	68fb      	ldr	r3, [r7, #12]
3418181c:	43db      	mvns	r3, r3
3418181e:	693a      	ldr	r2, [r7, #16]
34181820:	4013      	ands	r3, r2
34181822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34181824:	683b      	ldr	r3, [r7, #0]
34181826:	685b      	ldr	r3, [r3, #4]
34181828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418182c:	2b00      	cmp	r3, #0
3418182e:	d003      	beq.n	34181838 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34181830:	693a      	ldr	r2, [r7, #16]
34181832:	68fb      	ldr	r3, [r7, #12]
34181834:	4313      	orrs	r3, r2
34181836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34181838:	4a1f      	ldr	r2, [pc, #124]	@ (341818b8 <HAL_GPIO_Init+0x330>)
3418183a:	693b      	ldr	r3, [r7, #16]
3418183c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34181840:	4b1d      	ldr	r3, [pc, #116]	@ (341818b8 <HAL_GPIO_Init+0x330>)
34181842:	681b      	ldr	r3, [r3, #0]
34181844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181846:	68fb      	ldr	r3, [r7, #12]
34181848:	43db      	mvns	r3, r3
3418184a:	693a      	ldr	r2, [r7, #16]
3418184c:	4013      	ands	r3, r2
3418184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34181850:	683b      	ldr	r3, [r7, #0]
34181852:	685b      	ldr	r3, [r3, #4]
34181854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34181858:	2b00      	cmp	r3, #0
3418185a:	d003      	beq.n	34181864 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
3418185c:	693a      	ldr	r2, [r7, #16]
3418185e:	68fb      	ldr	r3, [r7, #12]
34181860:	4313      	orrs	r3, r2
34181862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34181864:	4a14      	ldr	r2, [pc, #80]	@ (341818b8 <HAL_GPIO_Init+0x330>)
34181866:	693b      	ldr	r3, [r7, #16]
34181868:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
3418186a:	4b13      	ldr	r3, [pc, #76]	@ (341818b8 <HAL_GPIO_Init+0x330>)
3418186c:	685b      	ldr	r3, [r3, #4]
3418186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181870:	68fb      	ldr	r3, [r7, #12]
34181872:	43db      	mvns	r3, r3
34181874:	693a      	ldr	r2, [r7, #16]
34181876:	4013      	ands	r3, r2
34181878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
3418187a:	683b      	ldr	r3, [r7, #0]
3418187c:	685b      	ldr	r3, [r3, #4]
3418187e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34181882:	2b00      	cmp	r3, #0
34181884:	d003      	beq.n	3418188e <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34181886:	693a      	ldr	r2, [r7, #16]
34181888:	68fb      	ldr	r3, [r7, #12]
3418188a:	4313      	orrs	r3, r2
3418188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
3418188e:	4a0a      	ldr	r2, [pc, #40]	@ (341818b8 <HAL_GPIO_Init+0x330>)
34181890:	693b      	ldr	r3, [r7, #16]
34181892:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34181894:	697b      	ldr	r3, [r7, #20]
34181896:	3301      	adds	r3, #1
34181898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3418189a:	683b      	ldr	r3, [r7, #0]
3418189c:	681a      	ldr	r2, [r3, #0]
3418189e:	697b      	ldr	r3, [r7, #20]
341818a0:	fa22 f303 	lsr.w	r3, r2, r3
341818a4:	2b00      	cmp	r3, #0
341818a6:	f47f ae77 	bne.w	34181598 <HAL_GPIO_Init+0x10>
  }
}
341818aa:	bf00      	nop
341818ac:	bf00      	nop
341818ae:	371c      	adds	r7, #28
341818b0:	46bd      	mov	sp, r7
341818b2:	f85d 7b04 	ldr.w	r7, [sp], #4
341818b6:	4770      	bx	lr
341818b8:	56025000 	.word	0x56025000
341818bc:	56020000 	.word	0x56020000
341818c0:	56020400 	.word	0x56020400
341818c4:	56020800 	.word	0x56020800
341818c8:	56020c00 	.word	0x56020c00
341818cc:	56021000 	.word	0x56021000
341818d0:	56021400 	.word	0x56021400
341818d4:	56021800 	.word	0x56021800
341818d8:	56021c00 	.word	0x56021c00
341818dc:	56023400 	.word	0x56023400
341818e0:	56023800 	.word	0x56023800
341818e4:	56023c00 	.word	0x56023c00
341818e8:	56024000 	.word	0x56024000

341818ec <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
341818ec:	b580      	push	{r7, lr}
341818ee:	b084      	sub	sp, #16
341818f0:	af00      	add	r7, sp, #0
341818f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
341818f4:	4b10      	ldr	r3, [pc, #64]	@ (34181938 <HAL_PWREx_ConfigSupply+0x4c>)
341818f6:	681b      	ldr	r3, [r3, #0]
341818f8:	f023 0204 	bic.w	r2, r3, #4
341818fc:	490e      	ldr	r1, [pc, #56]	@ (34181938 <HAL_PWREx_ConfigSupply+0x4c>)
341818fe:	687b      	ldr	r3, [r7, #4]
34181900:	4313      	orrs	r3, r2
34181902:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34181904:	f7ff fc9e 	bl	34181244 <HAL_GetTick>
34181908:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
3418190a:	e009      	b.n	34181920 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
3418190c:	f7ff fc9a 	bl	34181244 <HAL_GetTick>
34181910:	4602      	mov	r2, r0
34181912:	68fb      	ldr	r3, [r7, #12]
34181914:	1ad3      	subs	r3, r2, r3
34181916:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3418191a:	d901      	bls.n	34181920 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
3418191c:	2301      	movs	r3, #1
3418191e:	e006      	b.n	3418192e <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181920:	4b05      	ldr	r3, [pc, #20]	@ (34181938 <HAL_PWREx_ConfigSupply+0x4c>)
34181922:	6a1b      	ldr	r3, [r3, #32]
34181924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34181928:	2b00      	cmp	r3, #0
3418192a:	d0ef      	beq.n	3418190c <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
3418192c:	2300      	movs	r3, #0
}
3418192e:	4618      	mov	r0, r3
34181930:	3710      	adds	r7, #16
34181932:	46bd      	mov	sp, r7
34181934:	bd80      	pop	{r7, pc}
34181936:	bf00      	nop
34181938:	56024800 	.word	0x56024800

3418193c <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
3418193c:	b480      	push	{r7}
3418193e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34181940:	4b05      	ldr	r3, [pc, #20]	@ (34181958 <HAL_PWREx_EnableVddIO2+0x1c>)
34181942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181944:	4a04      	ldr	r2, [pc, #16]	@ (34181958 <HAL_PWREx_EnableVddIO2+0x1c>)
34181946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418194a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3418194c:	bf00      	nop
3418194e:	46bd      	mov	sp, r7
34181950:	f85d 7b04 	ldr.w	r7, [sp], #4
34181954:	4770      	bx	lr
34181956:	bf00      	nop
34181958:	56024800 	.word	0x56024800

3418195c <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
3418195c:	b480      	push	{r7}
3418195e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34181960:	4b05      	ldr	r3, [pc, #20]	@ (34181978 <HAL_PWREx_EnableVddIO3+0x1c>)
34181962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181964:	4a04      	ldr	r2, [pc, #16]	@ (34181978 <HAL_PWREx_EnableVddIO3+0x1c>)
34181966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3418196a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3418196c:	bf00      	nop
3418196e:	46bd      	mov	sp, r7
34181970:	f85d 7b04 	ldr.w	r7, [sp], #4
34181974:	4770      	bx	lr
34181976:	bf00      	nop
34181978:	56024800 	.word	0x56024800

3418197c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
3418197c:	b480      	push	{r7}
3418197e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34181980:	4b06      	ldr	r3, [pc, #24]	@ (3418199c <LL_RCC_HSE_IsReady+0x20>)
34181982:	685b      	ldr	r3, [r3, #4]
34181984:	f003 0310 	and.w	r3, r3, #16
34181988:	2b00      	cmp	r3, #0
3418198a:	d001      	beq.n	34181990 <LL_RCC_HSE_IsReady+0x14>
3418198c:	2301      	movs	r3, #1
3418198e:	e000      	b.n	34181992 <LL_RCC_HSE_IsReady+0x16>
34181990:	2300      	movs	r3, #0
}
34181992:	4618      	mov	r0, r3
34181994:	46bd      	mov	sp, r7
34181996:	f85d 7b04 	ldr.w	r7, [sp], #4
3418199a:	4770      	bx	lr
3418199c:	56028000 	.word	0x56028000

341819a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
341819a0:	b480      	push	{r7}
341819a2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
341819a4:	4b04      	ldr	r3, [pc, #16]	@ (341819b8 <LL_RCC_HSI_Enable+0x18>)
341819a6:	2208      	movs	r2, #8
341819a8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
341819ac:	bf00      	nop
341819ae:	46bd      	mov	sp, r7
341819b0:	f85d 7b04 	ldr.w	r7, [sp], #4
341819b4:	4770      	bx	lr
341819b6:	bf00      	nop
341819b8:	56028000 	.word	0x56028000

341819bc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
341819bc:	b480      	push	{r7}
341819be:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
341819c0:	4b05      	ldr	r3, [pc, #20]	@ (341819d8 <LL_RCC_HSI_Disable+0x1c>)
341819c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341819c6:	461a      	mov	r2, r3
341819c8:	2308      	movs	r3, #8
341819ca:	6013      	str	r3, [r2, #0]
}
341819cc:	bf00      	nop
341819ce:	46bd      	mov	sp, r7
341819d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341819d4:	4770      	bx	lr
341819d6:	bf00      	nop
341819d8:	56028000 	.word	0x56028000

341819dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
341819dc:	b480      	push	{r7}
341819de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
341819e0:	4b06      	ldr	r3, [pc, #24]	@ (341819fc <LL_RCC_HSI_IsReady+0x20>)
341819e2:	685b      	ldr	r3, [r3, #4]
341819e4:	f003 0308 	and.w	r3, r3, #8
341819e8:	2b00      	cmp	r3, #0
341819ea:	d001      	beq.n	341819f0 <LL_RCC_HSI_IsReady+0x14>
341819ec:	2301      	movs	r3, #1
341819ee:	e000      	b.n	341819f2 <LL_RCC_HSI_IsReady+0x16>
341819f0:	2300      	movs	r3, #0
}
341819f2:	4618      	mov	r0, r3
341819f4:	46bd      	mov	sp, r7
341819f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341819fa:	4770      	bx	lr
341819fc:	56028000 	.word	0x56028000

34181a00 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34181a00:	b480      	push	{r7}
34181a02:	b083      	sub	sp, #12
34181a04:	af00      	add	r7, sp, #0
34181a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34181a08:	4b06      	ldr	r3, [pc, #24]	@ (34181a24 <LL_RCC_HSI_SetDivider+0x24>)
34181a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181a0c:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34181a10:	4904      	ldr	r1, [pc, #16]	@ (34181a24 <LL_RCC_HSI_SetDivider+0x24>)
34181a12:	687b      	ldr	r3, [r7, #4]
34181a14:	4313      	orrs	r3, r2
34181a16:	648b      	str	r3, [r1, #72]	@ 0x48
}
34181a18:	bf00      	nop
34181a1a:	370c      	adds	r7, #12
34181a1c:	46bd      	mov	sp, r7
34181a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a22:	4770      	bx	lr
34181a24:	56028000 	.word	0x56028000

34181a28 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34181a28:	b480      	push	{r7}
34181a2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34181a2c:	4b04      	ldr	r3, [pc, #16]	@ (34181a40 <LL_RCC_HSI_GetDivider+0x18>)
34181a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181a30:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34181a34:	4618      	mov	r0, r3
34181a36:	46bd      	mov	sp, r7
34181a38:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a3c:	4770      	bx	lr
34181a3e:	bf00      	nop
34181a40:	56028000 	.word	0x56028000

34181a44 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34181a44:	b480      	push	{r7}
34181a46:	b083      	sub	sp, #12
34181a48:	af00      	add	r7, sp, #0
34181a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34181a4c:	4b07      	ldr	r3, [pc, #28]	@ (34181a6c <LL_RCC_HSI_SetCalibTrimming+0x28>)
34181a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181a50:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34181a54:	687b      	ldr	r3, [r7, #4]
34181a56:	041b      	lsls	r3, r3, #16
34181a58:	4904      	ldr	r1, [pc, #16]	@ (34181a6c <LL_RCC_HSI_SetCalibTrimming+0x28>)
34181a5a:	4313      	orrs	r3, r2
34181a5c:	648b      	str	r3, [r1, #72]	@ 0x48
}
34181a5e:	bf00      	nop
34181a60:	370c      	adds	r7, #12
34181a62:	46bd      	mov	sp, r7
34181a64:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a68:	4770      	bx	lr
34181a6a:	bf00      	nop
34181a6c:	56028000 	.word	0x56028000

34181a70 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34181a70:	b480      	push	{r7}
34181a72:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34181a74:	4b04      	ldr	r3, [pc, #16]	@ (34181a88 <LL_RCC_MSI_Enable+0x18>)
34181a76:	2204      	movs	r2, #4
34181a78:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34181a7c:	bf00      	nop
34181a7e:	46bd      	mov	sp, r7
34181a80:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a84:	4770      	bx	lr
34181a86:	bf00      	nop
34181a88:	56028000 	.word	0x56028000

34181a8c <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34181a8c:	b480      	push	{r7}
34181a8e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34181a90:	4b05      	ldr	r3, [pc, #20]	@ (34181aa8 <LL_RCC_MSI_Disable+0x1c>)
34181a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181a96:	461a      	mov	r2, r3
34181a98:	2304      	movs	r3, #4
34181a9a:	6013      	str	r3, [r2, #0]
}
34181a9c:	bf00      	nop
34181a9e:	46bd      	mov	sp, r7
34181aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34181aa4:	4770      	bx	lr
34181aa6:	bf00      	nop
34181aa8:	56028000 	.word	0x56028000

34181aac <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34181aac:	b480      	push	{r7}
34181aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34181ab0:	4b06      	ldr	r3, [pc, #24]	@ (34181acc <LL_RCC_MSI_IsReady+0x20>)
34181ab2:	685b      	ldr	r3, [r3, #4]
34181ab4:	f003 0304 	and.w	r3, r3, #4
34181ab8:	2b00      	cmp	r3, #0
34181aba:	d001      	beq.n	34181ac0 <LL_RCC_MSI_IsReady+0x14>
34181abc:	2301      	movs	r3, #1
34181abe:	e000      	b.n	34181ac2 <LL_RCC_MSI_IsReady+0x16>
34181ac0:	2300      	movs	r3, #0
}
34181ac2:	4618      	mov	r0, r3
34181ac4:	46bd      	mov	sp, r7
34181ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
34181aca:	4770      	bx	lr
34181acc:	56028000 	.word	0x56028000

34181ad0 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
34181ad0:	b480      	push	{r7}
34181ad2:	b083      	sub	sp, #12
34181ad4:	af00      	add	r7, sp, #0
34181ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34181ad8:	4b06      	ldr	r3, [pc, #24]	@ (34181af4 <LL_RCC_MSI_SetFrequency+0x24>)
34181ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181adc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34181ae0:	4904      	ldr	r1, [pc, #16]	@ (34181af4 <LL_RCC_MSI_SetFrequency+0x24>)
34181ae2:	687b      	ldr	r3, [r7, #4]
34181ae4:	4313      	orrs	r3, r2
34181ae6:	644b      	str	r3, [r1, #68]	@ 0x44
}
34181ae8:	bf00      	nop
34181aea:	370c      	adds	r7, #12
34181aec:	46bd      	mov	sp, r7
34181aee:	f85d 7b04 	ldr.w	r7, [sp], #4
34181af2:	4770      	bx	lr
34181af4:	56028000 	.word	0x56028000

34181af8 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
34181af8:	b480      	push	{r7}
34181afa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34181afc:	4b04      	ldr	r3, [pc, #16]	@ (34181b10 <LL_RCC_MSI_GetFrequency+0x18>)
34181afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34181b04:	4618      	mov	r0, r3
34181b06:	46bd      	mov	sp, r7
34181b08:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b0c:	4770      	bx	lr
34181b0e:	bf00      	nop
34181b10:	56028000 	.word	0x56028000

34181b14 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34181b14:	b480      	push	{r7}
34181b16:	b083      	sub	sp, #12
34181b18:	af00      	add	r7, sp, #0
34181b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34181b1c:	4b07      	ldr	r3, [pc, #28]	@ (34181b3c <LL_RCC_MSI_SetCalibTrimming+0x28>)
34181b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181b20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34181b24:	687b      	ldr	r3, [r7, #4]
34181b26:	041b      	lsls	r3, r3, #16
34181b28:	4904      	ldr	r1, [pc, #16]	@ (34181b3c <LL_RCC_MSI_SetCalibTrimming+0x28>)
34181b2a:	4313      	orrs	r3, r2
34181b2c:	644b      	str	r3, [r1, #68]	@ 0x44
}
34181b2e:	bf00      	nop
34181b30:	370c      	adds	r7, #12
34181b32:	46bd      	mov	sp, r7
34181b34:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b38:	4770      	bx	lr
34181b3a:	bf00      	nop
34181b3c:	56028000 	.word	0x56028000

34181b40 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34181b40:	b480      	push	{r7}
34181b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34181b44:	4b06      	ldr	r3, [pc, #24]	@ (34181b60 <LL_RCC_LSE_IsReady+0x20>)
34181b46:	685b      	ldr	r3, [r3, #4]
34181b48:	f003 0302 	and.w	r3, r3, #2
34181b4c:	2b00      	cmp	r3, #0
34181b4e:	d001      	beq.n	34181b54 <LL_RCC_LSE_IsReady+0x14>
34181b50:	2301      	movs	r3, #1
34181b52:	e000      	b.n	34181b56 <LL_RCC_LSE_IsReady+0x16>
34181b54:	2300      	movs	r3, #0
}
34181b56:	4618      	mov	r0, r3
34181b58:	46bd      	mov	sp, r7
34181b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b5e:	4770      	bx	lr
34181b60:	56028000 	.word	0x56028000

34181b64 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
34181b64:	b480      	push	{r7}
34181b66:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34181b68:	4b04      	ldr	r3, [pc, #16]	@ (34181b7c <LL_RCC_LSI_Enable+0x18>)
34181b6a:	2201      	movs	r2, #1
34181b6c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34181b70:	bf00      	nop
34181b72:	46bd      	mov	sp, r7
34181b74:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b78:	4770      	bx	lr
34181b7a:	bf00      	nop
34181b7c:	56028000 	.word	0x56028000

34181b80 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
34181b80:	b480      	push	{r7}
34181b82:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34181b84:	4b05      	ldr	r3, [pc, #20]	@ (34181b9c <LL_RCC_LSI_Disable+0x1c>)
34181b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181b8a:	461a      	mov	r2, r3
34181b8c:	2301      	movs	r3, #1
34181b8e:	6013      	str	r3, [r2, #0]
}
34181b90:	bf00      	nop
34181b92:	46bd      	mov	sp, r7
34181b94:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b98:	4770      	bx	lr
34181b9a:	bf00      	nop
34181b9c:	56028000 	.word	0x56028000

34181ba0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
34181ba0:	b480      	push	{r7}
34181ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34181ba4:	4b04      	ldr	r3, [pc, #16]	@ (34181bb8 <LL_RCC_LSI_IsReady+0x18>)
34181ba6:	685b      	ldr	r3, [r3, #4]
34181ba8:	f003 0301 	and.w	r3, r3, #1
}
34181bac:	4618      	mov	r0, r3
34181bae:	46bd      	mov	sp, r7
34181bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34181bb4:	4770      	bx	lr
34181bb6:	bf00      	nop
34181bb8:	56028000 	.word	0x56028000

34181bbc <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34181bbc:	b480      	push	{r7}
34181bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34181bc0:	4b04      	ldr	r3, [pc, #16]	@ (34181bd4 <LL_RCC_GetCpuClkSource+0x18>)
34181bc2:	6a1b      	ldr	r3, [r3, #32]
34181bc4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34181bc8:	4618      	mov	r0, r3
34181bca:	46bd      	mov	sp, r7
34181bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
34181bd0:	4770      	bx	lr
34181bd2:	bf00      	nop
34181bd4:	56028000 	.word	0x56028000

34181bd8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34181bd8:	b480      	push	{r7}
34181bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34181bdc:	4b04      	ldr	r3, [pc, #16]	@ (34181bf0 <LL_RCC_GetSysClkSource+0x18>)
34181bde:	6a1b      	ldr	r3, [r3, #32]
34181be0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34181be4:	4618      	mov	r0, r3
34181be6:	46bd      	mov	sp, r7
34181be8:	f85d 7b04 	ldr.w	r7, [sp], #4
34181bec:	4770      	bx	lr
34181bee:	bf00      	nop
34181bf0:	56028000 	.word	0x56028000

34181bf4 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34181bf4:	b480      	push	{r7}
34181bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34181bf8:	4b04      	ldr	r3, [pc, #16]	@ (34181c0c <LL_RCC_PLL1_GetSource+0x18>)
34181bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34181bfe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34181c02:	4618      	mov	r0, r3
34181c04:	46bd      	mov	sp, r7
34181c06:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c0a:	4770      	bx	lr
34181c0c:	56028000 	.word	0x56028000

34181c10 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34181c10:	b480      	push	{r7}
34181c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34181c14:	4b07      	ldr	r3, [pc, #28]	@ (34181c34 <LL_RCC_PLL1_IsReady+0x24>)
34181c16:	685b      	ldr	r3, [r3, #4]
34181c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34181c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34181c20:	d101      	bne.n	34181c26 <LL_RCC_PLL1_IsReady+0x16>
34181c22:	2301      	movs	r3, #1
34181c24:	e000      	b.n	34181c28 <LL_RCC_PLL1_IsReady+0x18>
34181c26:	2300      	movs	r3, #0
}
34181c28:	4618      	mov	r0, r3
34181c2a:	46bd      	mov	sp, r7
34181c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c30:	4770      	bx	lr
34181c32:	bf00      	nop
34181c34:	56028000 	.word	0x56028000

34181c38 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34181c38:	b480      	push	{r7}
34181c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34181c3c:	4b07      	ldr	r3, [pc, #28]	@ (34181c5c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34181c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34181c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34181c4a:	d101      	bne.n	34181c50 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34181c4c:	2301      	movs	r3, #1
34181c4e:	e000      	b.n	34181c52 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34181c50:	2300      	movs	r3, #0
}
34181c52:	4618      	mov	r0, r3
34181c54:	46bd      	mov	sp, r7
34181c56:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c5a:	4770      	bx	lr
34181c5c:	56028000 	.word	0x56028000

34181c60 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
34181c60:	b480      	push	{r7}
34181c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34181c64:	4b04      	ldr	r3, [pc, #16]	@ (34181c78 <LL_RCC_PLL2_GetSource+0x18>)
34181c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34181c6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34181c6e:	4618      	mov	r0, r3
34181c70:	46bd      	mov	sp, r7
34181c72:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c76:	4770      	bx	lr
34181c78:	56028000 	.word	0x56028000

34181c7c <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34181c7c:	b480      	push	{r7}
34181c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34181c80:	4b07      	ldr	r3, [pc, #28]	@ (34181ca0 <LL_RCC_PLL2_IsReady+0x24>)
34181c82:	685b      	ldr	r3, [r3, #4]
34181c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34181c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34181c8c:	d101      	bne.n	34181c92 <LL_RCC_PLL2_IsReady+0x16>
34181c8e:	2301      	movs	r3, #1
34181c90:	e000      	b.n	34181c94 <LL_RCC_PLL2_IsReady+0x18>
34181c92:	2300      	movs	r3, #0
}
34181c94:	4618      	mov	r0, r3
34181c96:	46bd      	mov	sp, r7
34181c98:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c9c:	4770      	bx	lr
34181c9e:	bf00      	nop
34181ca0:	56028000 	.word	0x56028000

34181ca4 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34181ca4:	b480      	push	{r7}
34181ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34181ca8:	4b07      	ldr	r3, [pc, #28]	@ (34181cc8 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34181caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34181cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34181cb6:	d101      	bne.n	34181cbc <LL_RCC_PLL2_IsEnabledBypass+0x18>
34181cb8:	2301      	movs	r3, #1
34181cba:	e000      	b.n	34181cbe <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34181cbc:	2300      	movs	r3, #0
}
34181cbe:	4618      	mov	r0, r3
34181cc0:	46bd      	mov	sp, r7
34181cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34181cc6:	4770      	bx	lr
34181cc8:	56028000 	.word	0x56028000

34181ccc <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34181ccc:	b480      	push	{r7}
34181cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34181cd0:	4b04      	ldr	r3, [pc, #16]	@ (34181ce4 <LL_RCC_PLL3_GetSource+0x18>)
34181cd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34181cd6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34181cda:	4618      	mov	r0, r3
34181cdc:	46bd      	mov	sp, r7
34181cde:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ce2:	4770      	bx	lr
34181ce4:	56028000 	.word	0x56028000

34181ce8 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34181ce8:	b480      	push	{r7}
34181cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34181cec:	4b07      	ldr	r3, [pc, #28]	@ (34181d0c <LL_RCC_PLL3_IsReady+0x24>)
34181cee:	685b      	ldr	r3, [r3, #4]
34181cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34181cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34181cf8:	d101      	bne.n	34181cfe <LL_RCC_PLL3_IsReady+0x16>
34181cfa:	2301      	movs	r3, #1
34181cfc:	e000      	b.n	34181d00 <LL_RCC_PLL3_IsReady+0x18>
34181cfe:	2300      	movs	r3, #0
}
34181d00:	4618      	mov	r0, r3
34181d02:	46bd      	mov	sp, r7
34181d04:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d08:	4770      	bx	lr
34181d0a:	bf00      	nop
34181d0c:	56028000 	.word	0x56028000

34181d10 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34181d10:	b480      	push	{r7}
34181d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34181d14:	4b07      	ldr	r3, [pc, #28]	@ (34181d34 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34181d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34181d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34181d22:	d101      	bne.n	34181d28 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34181d24:	2301      	movs	r3, #1
34181d26:	e000      	b.n	34181d2a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34181d28:	2300      	movs	r3, #0
}
34181d2a:	4618      	mov	r0, r3
34181d2c:	46bd      	mov	sp, r7
34181d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d32:	4770      	bx	lr
34181d34:	56028000 	.word	0x56028000

34181d38 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34181d38:	b480      	push	{r7}
34181d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34181d3c:	4b04      	ldr	r3, [pc, #16]	@ (34181d50 <LL_RCC_PLL4_GetSource+0x18>)
34181d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34181d42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34181d46:	4618      	mov	r0, r3
34181d48:	46bd      	mov	sp, r7
34181d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d4e:	4770      	bx	lr
34181d50:	56028000 	.word	0x56028000

34181d54 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
34181d54:	b480      	push	{r7}
34181d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34181d58:	4b07      	ldr	r3, [pc, #28]	@ (34181d78 <LL_RCC_PLL4_IsReady+0x24>)
34181d5a:	685b      	ldr	r3, [r3, #4]
34181d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34181d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34181d64:	d101      	bne.n	34181d6a <LL_RCC_PLL4_IsReady+0x16>
34181d66:	2301      	movs	r3, #1
34181d68:	e000      	b.n	34181d6c <LL_RCC_PLL4_IsReady+0x18>
34181d6a:	2300      	movs	r3, #0
}
34181d6c:	4618      	mov	r0, r3
34181d6e:	46bd      	mov	sp, r7
34181d70:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d74:	4770      	bx	lr
34181d76:	bf00      	nop
34181d78:	56028000 	.word	0x56028000

34181d7c <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34181d7c:	b480      	push	{r7}
34181d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34181d80:	4b07      	ldr	r3, [pc, #28]	@ (34181da0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34181d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34181d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34181d8e:	d101      	bne.n	34181d94 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34181d90:	2301      	movs	r3, #1
34181d92:	e000      	b.n	34181d96 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34181d94:	2300      	movs	r3, #0
}
34181d96:	4618      	mov	r0, r3
34181d98:	46bd      	mov	sp, r7
34181d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d9e:	4770      	bx	lr
34181da0:	56028000 	.word	0x56028000

34181da4 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34181da4:	b480      	push	{r7}
34181da6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34181da8:	4b04      	ldr	r3, [pc, #16]	@ (34181dbc <LL_RCC_IC1_Enable+0x18>)
34181daa:	2201      	movs	r2, #1
34181dac:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34181db0:	bf00      	nop
34181db2:	46bd      	mov	sp, r7
34181db4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181db8:	4770      	bx	lr
34181dba:	bf00      	nop
34181dbc:	56028000 	.word	0x56028000

34181dc0 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34181dc0:	b480      	push	{r7}
34181dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34181dc4:	4b04      	ldr	r3, [pc, #16]	@ (34181dd8 <LL_RCC_IC1_GetSource+0x18>)
34181dc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34181dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34181dce:	4618      	mov	r0, r3
34181dd0:	46bd      	mov	sp, r7
34181dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
34181dd6:	4770      	bx	lr
34181dd8:	56028000 	.word	0x56028000

34181ddc <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34181ddc:	b480      	push	{r7}
34181dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34181de0:	4b05      	ldr	r3, [pc, #20]	@ (34181df8 <LL_RCC_IC1_GetDivider+0x1c>)
34181de2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34181de6:	0c1b      	lsrs	r3, r3, #16
34181de8:	b2db      	uxtb	r3, r3
34181dea:	3301      	adds	r3, #1
}
34181dec:	4618      	mov	r0, r3
34181dee:	46bd      	mov	sp, r7
34181df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34181df4:	4770      	bx	lr
34181df6:	bf00      	nop
34181df8:	56028000 	.word	0x56028000

34181dfc <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34181dfc:	b480      	push	{r7}
34181dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34181e00:	4b04      	ldr	r3, [pc, #16]	@ (34181e14 <LL_RCC_IC2_GetSource+0x18>)
34181e02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34181e06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34181e0a:	4618      	mov	r0, r3
34181e0c:	46bd      	mov	sp, r7
34181e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e12:	4770      	bx	lr
34181e14:	56028000 	.word	0x56028000

34181e18 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34181e18:	b480      	push	{r7}
34181e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34181e1c:	4b05      	ldr	r3, [pc, #20]	@ (34181e34 <LL_RCC_IC2_GetDivider+0x1c>)
34181e1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34181e22:	0c1b      	lsrs	r3, r3, #16
34181e24:	b2db      	uxtb	r3, r3
34181e26:	3301      	adds	r3, #1
}
34181e28:	4618      	mov	r0, r3
34181e2a:	46bd      	mov	sp, r7
34181e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e30:	4770      	bx	lr
34181e32:	bf00      	nop
34181e34:	56028000 	.word	0x56028000

34181e38 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34181e38:	b480      	push	{r7}
34181e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34181e3c:	4b04      	ldr	r3, [pc, #16]	@ (34181e50 <LL_RCC_IC6_GetSource+0x18>)
34181e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34181e42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34181e46:	4618      	mov	r0, r3
34181e48:	46bd      	mov	sp, r7
34181e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e4e:	4770      	bx	lr
34181e50:	56028000 	.word	0x56028000

34181e54 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
34181e54:	b480      	push	{r7}
34181e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34181e58:	4b04      	ldr	r3, [pc, #16]	@ (34181e6c <LL_RCC_IC11_GetSource+0x18>)
34181e5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34181e5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34181e62:	4618      	mov	r0, r3
34181e64:	46bd      	mov	sp, r7
34181e66:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e6a:	4770      	bx	lr
34181e6c:	56028000 	.word	0x56028000

34181e70 <HAL_RCC_OscConfig>:
  * @note   This function does not protect the MCOxSEL, the PERSEL and the PPPSEL glitch-free muxes
  *         (Mux selection cannot be changed if selected input clock is inactive).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
34181e70:	b580      	push	{r7, lr}
34181e72:	b0a2      	sub	sp, #136	@ 0x88
34181e74:	af00      	add	r7, sp, #0
34181e76:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34181e78:	687b      	ldr	r3, [r7, #4]
34181e7a:	2b00      	cmp	r3, #0
34181e7c:	d101      	bne.n	34181e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
34181e7e:	2301      	movs	r3, #1
34181e80:	e3d1      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
34181e82:	f7ff fe9b 	bl	34181bbc <LL_RCC_GetCpuClkSource>
34181e86:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34181e8a:	f7ff fea5 	bl	34181bd8 <LL_RCC_GetSysClkSource>
34181e8e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
34181e92:	f7ff feaf 	bl	34181bf4 <LL_RCC_PLL1_GetSource>
34181e96:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34181e98:	f7ff fee2 	bl	34181c60 <LL_RCC_PLL2_GetSource>
34181e9c:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34181e9e:	f7ff ff15 	bl	34181ccc <LL_RCC_PLL3_GetSource>
34181ea2:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34181ea4:	f7ff ff48 	bl	34181d38 <LL_RCC_PLL4_GetSource>
34181ea8:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34181eaa:	4b91      	ldr	r3, [pc, #580]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181eac:	685b      	ldr	r3, [r3, #4]
34181eae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34181eb0:	687b      	ldr	r3, [r7, #4]
34181eb2:	681b      	ldr	r3, [r3, #0]
34181eb4:	f003 0301 	and.w	r3, r3, #1
34181eb8:	2b00      	cmp	r3, #0
34181eba:	f000 80a8 	beq.w	3418200e <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34181ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34181ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34181ec6:	d028      	beq.n	34181f1a <HAL_RCC_OscConfig+0xaa>
34181ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34181ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181ed0:	d023      	beq.n	34181f1a <HAL_RCC_OscConfig+0xaa>
34181ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34181ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181ed8:	d104      	bne.n	34181ee4 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34181eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34181edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34181ee0:	2b00      	cmp	r3, #0
34181ee2:	d11a      	bne.n	34181f1a <HAL_RCC_OscConfig+0xaa>
34181ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34181ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181eea:	d104      	bne.n	34181ef6 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34181eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34181eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34181ef2:	2b00      	cmp	r3, #0
34181ef4:	d111      	bne.n	34181f1a <HAL_RCC_OscConfig+0xaa>
34181ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34181ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181efc:	d104      	bne.n	34181f08 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34181efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34181f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34181f04:	2b00      	cmp	r3, #0
34181f06:	d108      	bne.n	34181f1a <HAL_RCC_OscConfig+0xaa>
34181f08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34181f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181f0e:	d10a      	bne.n	34181f26 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34181f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34181f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34181f16:	2b00      	cmp	r3, #0
34181f18:	d005      	beq.n	34181f26 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34181f1a:	687b      	ldr	r3, [r7, #4]
34181f1c:	685b      	ldr	r3, [r3, #4]
34181f1e:	2b00      	cmp	r3, #0
34181f20:	d175      	bne.n	3418200e <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
34181f22:	2301      	movs	r3, #1
34181f24:	e37f      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34181f26:	687b      	ldr	r3, [r7, #4]
34181f28:	685b      	ldr	r3, [r3, #4]
34181f2a:	2b10      	cmp	r3, #16
34181f2c:	d104      	bne.n	34181f38 <HAL_RCC_OscConfig+0xc8>
34181f2e:	4b70      	ldr	r3, [pc, #448]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f30:	2210      	movs	r2, #16
34181f32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34181f36:	e043      	b.n	34181fc0 <HAL_RCC_OscConfig+0x150>
34181f38:	687b      	ldr	r3, [r7, #4]
34181f3a:	685b      	ldr	r3, [r3, #4]
34181f3c:	2b00      	cmp	r3, #0
34181f3e:	d10c      	bne.n	34181f5a <HAL_RCC_OscConfig+0xea>
34181f40:	4b6b      	ldr	r3, [pc, #428]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181f46:	461a      	mov	r2, r3
34181f48:	2310      	movs	r3, #16
34181f4a:	6013      	str	r3, [r2, #0]
34181f4c:	4b68      	ldr	r3, [pc, #416]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34181f50:	4a67      	ldr	r2, [pc, #412]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f52:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34181f56:	6553      	str	r3, [r2, #84]	@ 0x54
34181f58:	e032      	b.n	34181fc0 <HAL_RCC_OscConfig+0x150>
34181f5a:	687b      	ldr	r3, [r7, #4]
34181f5c:	685b      	ldr	r3, [r3, #4]
34181f5e:	f248 0210 	movw	r2, #32784	@ 0x8010
34181f62:	4293      	cmp	r3, r2
34181f64:	d110      	bne.n	34181f88 <HAL_RCC_OscConfig+0x118>
34181f66:	4b62      	ldr	r3, [pc, #392]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34181f6a:	4a61      	ldr	r2, [pc, #388]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34181f70:	6553      	str	r3, [r2, #84]	@ 0x54
34181f72:	4b5f      	ldr	r3, [pc, #380]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34181f76:	4a5e      	ldr	r2, [pc, #376]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34181f7c:	6553      	str	r3, [r2, #84]	@ 0x54
34181f7e:	4b5c      	ldr	r3, [pc, #368]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f80:	2210      	movs	r2, #16
34181f82:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34181f86:	e01b      	b.n	34181fc0 <HAL_RCC_OscConfig+0x150>
34181f88:	687b      	ldr	r3, [r7, #4]
34181f8a:	685b      	ldr	r3, [r3, #4]
34181f8c:	4a59      	ldr	r2, [pc, #356]	@ (341820f4 <HAL_RCC_OscConfig+0x284>)
34181f8e:	4293      	cmp	r3, r2
34181f90:	d10a      	bne.n	34181fa8 <HAL_RCC_OscConfig+0x138>
34181f92:	4b57      	ldr	r3, [pc, #348]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34181f96:	4a56      	ldr	r2, [pc, #344]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181f98:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34181f9c:	6553      	str	r3, [r2, #84]	@ 0x54
34181f9e:	4b54      	ldr	r3, [pc, #336]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181fa0:	2210      	movs	r2, #16
34181fa2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34181fa6:	e00b      	b.n	34181fc0 <HAL_RCC_OscConfig+0x150>
34181fa8:	4b51      	ldr	r3, [pc, #324]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181fae:	461a      	mov	r2, r3
34181fb0:	2310      	movs	r3, #16
34181fb2:	6013      	str	r3, [r2, #0]
34181fb4:	4b4e      	ldr	r3, [pc, #312]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34181fb8:	4a4d      	ldr	r2, [pc, #308]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181fba:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34181fbe:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34181fc0:	f7ff f940 	bl	34181244 <HAL_GetTick>
34181fc4:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34181fc6:	687b      	ldr	r3, [r7, #4]
34181fc8:	685b      	ldr	r3, [r3, #4]
34181fca:	2b00      	cmp	r3, #0
34181fcc:	d019      	beq.n	34182002 <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34181fce:	e008      	b.n	34181fe2 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34181fd0:	f7ff f938 	bl	34181244 <HAL_GetTick>
34181fd4:	4602      	mov	r2, r0
34181fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34181fd8:	1ad3      	subs	r3, r2, r3
34181fda:	2b64      	cmp	r3, #100	@ 0x64
34181fdc:	d901      	bls.n	34181fe2 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
34181fde:	2303      	movs	r3, #3
34181fe0:	e321      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34181fe2:	4b43      	ldr	r3, [pc, #268]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34181fe4:	685b      	ldr	r3, [r3, #4]
34181fe6:	f003 0310 	and.w	r3, r3, #16
34181fea:	2b00      	cmp	r3, #0
34181fec:	d0f0      	beq.n	34181fd0 <HAL_RCC_OscConfig+0x160>
34181fee:	e00e      	b.n	3418200e <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34181ff0:	f7ff f928 	bl	34181244 <HAL_GetTick>
34181ff4:	4602      	mov	r2, r0
34181ff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34181ff8:	1ad3      	subs	r3, r2, r3
34181ffa:	2b64      	cmp	r3, #100	@ 0x64
34181ffc:	d901      	bls.n	34182002 <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
34181ffe:	2303      	movs	r3, #3
34182000:	e311      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34182002:	4b3b      	ldr	r3, [pc, #236]	@ (341820f0 <HAL_RCC_OscConfig+0x280>)
34182004:	685b      	ldr	r3, [r3, #4]
34182006:	f003 0310 	and.w	r3, r3, #16
3418200a:	2b00      	cmp	r3, #0
3418200c:	d1f0      	bne.n	34181ff0 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418200e:	687b      	ldr	r3, [r7, #4]
34182010:	681b      	ldr	r3, [r3, #0]
34182012:	f003 0302 	and.w	r3, r3, #2
34182016:	2b00      	cmp	r3, #0
34182018:	d073      	beq.n	34182102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418201a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418201e:	2b00      	cmp	r3, #0
34182020:	d023      	beq.n	3418206a <HAL_RCC_OscConfig+0x1fa>
34182022:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182026:	2b00      	cmp	r3, #0
34182028:	d01f      	beq.n	3418206a <HAL_RCC_OscConfig+0x1fa>
3418202a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418202c:	2b00      	cmp	r3, #0
3418202e:	d104      	bne.n	3418203a <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34182030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182036:	2b00      	cmp	r3, #0
34182038:	d117      	bne.n	3418206a <HAL_RCC_OscConfig+0x1fa>
3418203a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418203c:	2b00      	cmp	r3, #0
3418203e:	d104      	bne.n	3418204a <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182046:	2b00      	cmp	r3, #0
34182048:	d10f      	bne.n	3418206a <HAL_RCC_OscConfig+0x1fa>
3418204a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418204c:	2b00      	cmp	r3, #0
3418204e:	d104      	bne.n	3418205a <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34182050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182056:	2b00      	cmp	r3, #0
34182058:	d107      	bne.n	3418206a <HAL_RCC_OscConfig+0x1fa>
3418205a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418205c:	2b00      	cmp	r3, #0
3418205e:	d115      	bne.n	3418208c <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34182060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182066:	2b00      	cmp	r3, #0
34182068:	d010      	beq.n	3418208c <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418206a:	687b      	ldr	r3, [r7, #4]
3418206c:	68db      	ldr	r3, [r3, #12]
3418206e:	2b00      	cmp	r3, #0
34182070:	d101      	bne.n	34182076 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
34182072:	2301      	movs	r3, #1
34182074:	e2d7      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34182076:	687b      	ldr	r3, [r7, #4]
34182078:	691b      	ldr	r3, [r3, #16]
3418207a:	4618      	mov	r0, r3
3418207c:	f7ff fcc0 	bl	34181a00 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34182080:	687b      	ldr	r3, [r7, #4]
34182082:	695b      	ldr	r3, [r3, #20]
34182084:	4618      	mov	r0, r3
34182086:	f7ff fcdd 	bl	34181a44 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418208a:	e03a      	b.n	34182102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
3418208c:	687b      	ldr	r3, [r7, #4]
3418208e:	68db      	ldr	r3, [r3, #12]
34182090:	2b00      	cmp	r3, #0
34182092:	d01e      	beq.n	341820d2 <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34182094:	f7ff fc84 	bl	341819a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182098:	f7ff f8d4 	bl	34181244 <HAL_GetTick>
3418209c:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
3418209e:	e008      	b.n	341820b2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341820a0:	f7ff f8d0 	bl	34181244 <HAL_GetTick>
341820a4:	4602      	mov	r2, r0
341820a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341820a8:	1ad3      	subs	r3, r2, r3
341820aa:	2b01      	cmp	r3, #1
341820ac:	d901      	bls.n	341820b2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
341820ae:	2303      	movs	r3, #3
341820b0:	e2b9      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
341820b2:	f7ff fc93 	bl	341819dc <LL_RCC_HSI_IsReady>
341820b6:	4603      	mov	r3, r0
341820b8:	2b00      	cmp	r3, #0
341820ba:	d0f1      	beq.n	341820a0 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341820bc:	687b      	ldr	r3, [r7, #4]
341820be:	691b      	ldr	r3, [r3, #16]
341820c0:	4618      	mov	r0, r3
341820c2:	f7ff fc9d 	bl	34181a00 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341820c6:	687b      	ldr	r3, [r7, #4]
341820c8:	695b      	ldr	r3, [r3, #20]
341820ca:	4618      	mov	r0, r3
341820cc:	f7ff fcba 	bl	34181a44 <LL_RCC_HSI_SetCalibTrimming>
341820d0:	e017      	b.n	34182102 <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
341820d2:	f7ff fc73 	bl	341819bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341820d6:	f7ff f8b5 	bl	34181244 <HAL_GetTick>
341820da:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
341820dc:	e00c      	b.n	341820f8 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341820de:	f7ff f8b1 	bl	34181244 <HAL_GetTick>
341820e2:	4602      	mov	r2, r0
341820e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341820e6:	1ad3      	subs	r3, r2, r3
341820e8:	2b01      	cmp	r3, #1
341820ea:	d905      	bls.n	341820f8 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
341820ec:	2303      	movs	r3, #3
341820ee:	e29a      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
341820f0:	56028000 	.word	0x56028000
341820f4:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
341820f8:	f7ff fc70 	bl	341819dc <LL_RCC_HSI_IsReady>
341820fc:	4603      	mov	r3, r0
341820fe:	2b00      	cmp	r3, #0
34182100:	d1ed      	bne.n	341820de <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34182102:	687b      	ldr	r3, [r7, #4]
34182104:	681b      	ldr	r3, [r3, #0]
34182106:	f003 0310 	and.w	r3, r3, #16
3418210a:	2b00      	cmp	r3, #0
3418210c:	d070      	beq.n	341821f0 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418210e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34182116:	d028      	beq.n	3418216a <HAL_RCC_OscConfig+0x2fa>
34182118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418211c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182120:	d023      	beq.n	3418216a <HAL_RCC_OscConfig+0x2fa>
34182122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34182124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182128:	d104      	bne.n	34182134 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418212a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182130:	2b00      	cmp	r3, #0
34182132:	d11a      	bne.n	3418216a <HAL_RCC_OscConfig+0x2fa>
34182134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34182136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418213a:	d104      	bne.n	34182146 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418213c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418213e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182142:	2b00      	cmp	r3, #0
34182144:	d111      	bne.n	3418216a <HAL_RCC_OscConfig+0x2fa>
34182146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34182148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418214c:	d104      	bne.n	34182158 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418214e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182154:	2b00      	cmp	r3, #0
34182156:	d108      	bne.n	3418216a <HAL_RCC_OscConfig+0x2fa>
34182158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418215a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418215e:	d110      	bne.n	34182182 <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34182160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182166:	2b00      	cmp	r3, #0
34182168:	d00b      	beq.n	34182182 <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418216a:	687b      	ldr	r3, [r7, #4]
3418216c:	69db      	ldr	r3, [r3, #28]
3418216e:	2b00      	cmp	r3, #0
34182170:	d101      	bne.n	34182176 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
34182172:	2301      	movs	r3, #1
34182174:	e257      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34182176:	687b      	ldr	r3, [r7, #4]
34182178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418217a:	4618      	mov	r0, r3
3418217c:	f7ff fcca 	bl	34181b14 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34182180:	e036      	b.n	341821f0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34182182:	687b      	ldr	r3, [r7, #4]
34182184:	69db      	ldr	r3, [r3, #28]
34182186:	2b00      	cmp	r3, #0
34182188:	d01e      	beq.n	341821c8 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
3418218a:	687b      	ldr	r3, [r7, #4]
3418218c:	6a1b      	ldr	r3, [r3, #32]
3418218e:	4618      	mov	r0, r3
34182190:	f7ff fc9e 	bl	34181ad0 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34182194:	f7ff fc6c 	bl	34181a70 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182198:	f7ff f854 	bl	34181244 <HAL_GetTick>
3418219c:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3418219e:	e008      	b.n	341821b2 <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341821a0:	f7ff f850 	bl	34181244 <HAL_GetTick>
341821a4:	4602      	mov	r2, r0
341821a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341821a8:	1ad3      	subs	r3, r2, r3
341821aa:	2b01      	cmp	r3, #1
341821ac:	d901      	bls.n	341821b2 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
341821ae:	2303      	movs	r3, #3
341821b0:	e239      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
341821b2:	f7ff fc7b 	bl	34181aac <LL_RCC_MSI_IsReady>
341821b6:	4603      	mov	r3, r0
341821b8:	2b00      	cmp	r3, #0
341821ba:	d0f1      	beq.n	341821a0 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341821bc:	687b      	ldr	r3, [r7, #4]
341821be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341821c0:	4618      	mov	r0, r3
341821c2:	f7ff fca7 	bl	34181b14 <LL_RCC_MSI_SetCalibTrimming>
341821c6:	e013      	b.n	341821f0 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
341821c8:	f7ff fc60 	bl	34181a8c <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341821cc:	f7ff f83a 	bl	34181244 <HAL_GetTick>
341821d0:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
341821d2:	e008      	b.n	341821e6 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341821d4:	f7ff f836 	bl	34181244 <HAL_GetTick>
341821d8:	4602      	mov	r2, r0
341821da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341821dc:	1ad3      	subs	r3, r2, r3
341821de:	2b01      	cmp	r3, #1
341821e0:	d901      	bls.n	341821e6 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
341821e2:	2303      	movs	r3, #3
341821e4:	e21f      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
341821e6:	f7ff fc61 	bl	34181aac <LL_RCC_MSI_IsReady>
341821ea:	4603      	mov	r3, r0
341821ec:	2b00      	cmp	r3, #0
341821ee:	d1f1      	bne.n	341821d4 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
341821f0:	687b      	ldr	r3, [r7, #4]
341821f2:	681b      	ldr	r3, [r3, #0]
341821f4:	f003 0308 	and.w	r3, r3, #8
341821f8:	2b00      	cmp	r3, #0
341821fa:	d02c      	beq.n	34182256 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
341821fc:	687b      	ldr	r3, [r7, #4]
341821fe:	699b      	ldr	r3, [r3, #24]
34182200:	2b00      	cmp	r3, #0
34182202:	d014      	beq.n	3418222e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34182204:	f7ff fcae 	bl	34181b64 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182208:	f7ff f81c 	bl	34181244 <HAL_GetTick>
3418220c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418220e:	e008      	b.n	34182222 <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34182210:	f7ff f818 	bl	34181244 <HAL_GetTick>
34182214:	4602      	mov	r2, r0
34182216:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182218:	1ad3      	subs	r3, r2, r3
3418221a:	2b01      	cmp	r3, #1
3418221c:	d901      	bls.n	34182222 <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
3418221e:	2303      	movs	r3, #3
34182220:	e201      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
34182222:	f7ff fcbd 	bl	34181ba0 <LL_RCC_LSI_IsReady>
34182226:	4603      	mov	r3, r0
34182228:	2b00      	cmp	r3, #0
3418222a:	d0f1      	beq.n	34182210 <HAL_RCC_OscConfig+0x3a0>
3418222c:	e013      	b.n	34182256 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
3418222e:	f7ff fca7 	bl	34181b80 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182232:	f7ff f807 	bl	34181244 <HAL_GetTick>
34182236:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34182238:	e008      	b.n	3418224c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418223a:	f7ff f803 	bl	34181244 <HAL_GetTick>
3418223e:	4602      	mov	r2, r0
34182240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182242:	1ad3      	subs	r3, r2, r3
34182244:	2b01      	cmp	r3, #1
34182246:	d901      	bls.n	3418224c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
34182248:	2303      	movs	r3, #3
3418224a:	e1ec      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
3418224c:	f7ff fca8 	bl	34181ba0 <LL_RCC_LSI_IsReady>
34182250:	4603      	mov	r3, r0
34182252:	2b00      	cmp	r3, #0
34182254:	d1f1      	bne.n	3418223a <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34182256:	687b      	ldr	r3, [r7, #4]
34182258:	681b      	ldr	r3, [r3, #0]
3418225a:	f003 0304 	and.w	r3, r3, #4
3418225e:	2b00      	cmp	r3, #0
34182260:	f000 808c 	beq.w	3418237c <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34182264:	687b      	ldr	r3, [r7, #4]
34182266:	689b      	ldr	r3, [r3, #8]
34182268:	2b02      	cmp	r3, #2
3418226a:	d104      	bne.n	34182276 <HAL_RCC_OscConfig+0x406>
3418226c:	4b96      	ldr	r3, [pc, #600]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
3418226e:	2202      	movs	r2, #2
34182270:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182274:	e055      	b.n	34182322 <HAL_RCC_OscConfig+0x4b2>
34182276:	687b      	ldr	r3, [r7, #4]
34182278:	689b      	ldr	r3, [r3, #8]
3418227a:	2b00      	cmp	r3, #0
3418227c:	d112      	bne.n	341822a4 <HAL_RCC_OscConfig+0x434>
3418227e:	4b92      	ldr	r3, [pc, #584]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182284:	461a      	mov	r2, r3
34182286:	2302      	movs	r3, #2
34182288:	6013      	str	r3, [r2, #0]
3418228a:	4b8f      	ldr	r3, [pc, #572]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
3418228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418228e:	4a8e      	ldr	r2, [pc, #568]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182294:	6413      	str	r3, [r2, #64]	@ 0x40
34182296:	4b8c      	ldr	r3, [pc, #560]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418229a:	4a8b      	ldr	r2, [pc, #556]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
3418229c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341822a0:	6413      	str	r3, [r2, #64]	@ 0x40
341822a2:	e03e      	b.n	34182322 <HAL_RCC_OscConfig+0x4b2>
341822a4:	687b      	ldr	r3, [r7, #4]
341822a6:	689b      	ldr	r3, [r3, #8]
341822a8:	f248 0202 	movw	r2, #32770	@ 0x8002
341822ac:	4293      	cmp	r3, r2
341822ae:	d110      	bne.n	341822d2 <HAL_RCC_OscConfig+0x462>
341822b0:	4b85      	ldr	r3, [pc, #532]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341822b4:	4a84      	ldr	r2, [pc, #528]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341822ba:	6413      	str	r3, [r2, #64]	@ 0x40
341822bc:	4b82      	ldr	r3, [pc, #520]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341822c0:	4a81      	ldr	r2, [pc, #516]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341822c6:	6413      	str	r3, [r2, #64]	@ 0x40
341822c8:	4b7f      	ldr	r3, [pc, #508]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822ca:	2202      	movs	r2, #2
341822cc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341822d0:	e027      	b.n	34182322 <HAL_RCC_OscConfig+0x4b2>
341822d2:	687b      	ldr	r3, [r7, #4]
341822d4:	689b      	ldr	r3, [r3, #8]
341822d6:	4a7d      	ldr	r2, [pc, #500]	@ (341824cc <HAL_RCC_OscConfig+0x65c>)
341822d8:	4293      	cmp	r3, r2
341822da:	d110      	bne.n	341822fe <HAL_RCC_OscConfig+0x48e>
341822dc:	4b7a      	ldr	r3, [pc, #488]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341822e0:	4a79      	ldr	r2, [pc, #484]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341822e6:	6413      	str	r3, [r2, #64]	@ 0x40
341822e8:	4b77      	ldr	r3, [pc, #476]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341822ec:	4a76      	ldr	r2, [pc, #472]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341822f2:	6413      	str	r3, [r2, #64]	@ 0x40
341822f4:	4b74      	ldr	r3, [pc, #464]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
341822f6:	2202      	movs	r2, #2
341822f8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341822fc:	e011      	b.n	34182322 <HAL_RCC_OscConfig+0x4b2>
341822fe:	4b72      	ldr	r3, [pc, #456]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182304:	461a      	mov	r2, r3
34182306:	2302      	movs	r3, #2
34182308:	6013      	str	r3, [r2, #0]
3418230a:	4b6f      	ldr	r3, [pc, #444]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
3418230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418230e:	4a6e      	ldr	r2, [pc, #440]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182310:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34182314:	6413      	str	r3, [r2, #64]	@ 0x40
34182316:	4b6c      	ldr	r3, [pc, #432]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
34182318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418231a:	4a6b      	ldr	r2, [pc, #428]	@ (341824c8 <HAL_RCC_OscConfig+0x658>)
3418231c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182320:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34182322:	687b      	ldr	r3, [r7, #4]
34182324:	689b      	ldr	r3, [r3, #8]
34182326:	2b00      	cmp	r3, #0
34182328:	d014      	beq.n	34182354 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418232a:	f7fe ff8b 	bl	34181244 <HAL_GetTick>
3418232e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34182330:	e00a      	b.n	34182348 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34182332:	f7fe ff87 	bl	34181244 <HAL_GetTick>
34182336:	4602      	mov	r2, r0
34182338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418233a:	1ad3      	subs	r3, r2, r3
3418233c:	f241 3288 	movw	r2, #5000	@ 0x1388
34182340:	4293      	cmp	r3, r2
34182342:	d901      	bls.n	34182348 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
34182344:	2303      	movs	r3, #3
34182346:	e16e      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
34182348:	f7ff fbfa 	bl	34181b40 <LL_RCC_LSE_IsReady>
3418234c:	4603      	mov	r3, r0
3418234e:	2b00      	cmp	r3, #0
34182350:	d0ef      	beq.n	34182332 <HAL_RCC_OscConfig+0x4c2>
34182352:	e013      	b.n	3418237c <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182354:	f7fe ff76 	bl	34181244 <HAL_GetTick>
34182358:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
3418235a:	e00a      	b.n	34182372 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418235c:	f7fe ff72 	bl	34181244 <HAL_GetTick>
34182360:	4602      	mov	r2, r0
34182362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182364:	1ad3      	subs	r3, r2, r3
34182366:	f241 3288 	movw	r2, #5000	@ 0x1388
3418236a:	4293      	cmp	r3, r2
3418236c:	d901      	bls.n	34182372 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
3418236e:	2303      	movs	r3, #3
34182370:	e159      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
34182372:	f7ff fbe5 	bl	34181b40 <LL_RCC_LSE_IsReady>
34182376:	4603      	mov	r3, r0
34182378:	2b00      	cmp	r3, #0
3418237a:	d1ef      	bne.n	3418235c <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3418237c:	687b      	ldr	r3, [r7, #4]
3418237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182380:	2b00      	cmp	r3, #0
34182382:	d04c      	beq.n	3418241e <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34182384:	687b      	ldr	r3, [r7, #4]
34182386:	3328      	adds	r3, #40	@ 0x28
34182388:	4619      	mov	r1, r3
3418238a:	2000      	movs	r0, #0
3418238c:	f000 fe22 	bl	34182fd4 <RCC_PLL_IsNewConfig>
34182390:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34182392:	f7ff fc3d 	bl	34181c10 <LL_RCC_PLL1_IsReady>
34182396:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34182398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418239a:	2b01      	cmp	r3, #1
3418239c:	d130      	bne.n	34182400 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418239e:	f7ff fd0f 	bl	34181dc0 <LL_RCC_IC1_GetSource>
341823a2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341823a4:	f7ff fd2a 	bl	34181dfc <LL_RCC_IC2_GetSource>
341823a8:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341823aa:	f7ff fd45 	bl	34181e38 <LL_RCC_IC6_GetSource>
341823ae:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341823b0:	f7ff fd50 	bl	34181e54 <LL_RCC_IC11_GetSource>
341823b4:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
341823b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341823ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341823be:	d104      	bne.n	341823ca <HAL_RCC_OscConfig+0x55a>
341823c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
341823c2:	2b00      	cmp	r3, #0
341823c4:	d101      	bne.n	341823ca <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
341823c6:	2301      	movs	r3, #1
341823c8:	e12d      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
341823ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341823ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341823d2:	d10a      	bne.n	341823ea <HAL_RCC_OscConfig+0x57a>
341823d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
341823d6:	2b00      	cmp	r3, #0
341823d8:	d005      	beq.n	341823e6 <HAL_RCC_OscConfig+0x576>
341823da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
341823dc:	2b00      	cmp	r3, #0
341823de:	d002      	beq.n	341823e6 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
341823e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
341823e2:	2b00      	cmp	r3, #0
341823e4:	d101      	bne.n	341823ea <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
341823e6:	2301      	movs	r3, #1
341823e8:	e11d      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
341823ea:	687b      	ldr	r3, [r7, #4]
341823ec:	3328      	adds	r3, #40	@ 0x28
341823ee:	4619      	mov	r1, r3
341823f0:	2000      	movs	r0, #0
341823f2:	f000 fc93 	bl	34182d1c <RCC_PLL_Config>
341823f6:	4603      	mov	r3, r0
341823f8:	2b00      	cmp	r3, #0
341823fa:	d010      	beq.n	3418241e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
341823fc:	2301      	movs	r3, #1
341823fe:	e112      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34182400:	687b      	ldr	r3, [r7, #4]
34182402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182404:	2b02      	cmp	r3, #2
34182406:	d10a      	bne.n	3418241e <HAL_RCC_OscConfig+0x5ae>
34182408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418240a:	2b00      	cmp	r3, #0
3418240c:	d107      	bne.n	3418241e <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3418240e:	2000      	movs	r0, #0
34182410:	f000 fdb4 	bl	34182f7c <RCC_PLL_Enable>
34182414:	4603      	mov	r3, r0
34182416:	2b00      	cmp	r3, #0
34182418:	d001      	beq.n	3418241e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
3418241a:	2301      	movs	r3, #1
3418241c:	e103      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
3418241e:	687b      	ldr	r3, [r7, #4]
34182420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182422:	2b00      	cmp	r3, #0
34182424:	d054      	beq.n	341824d0 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34182426:	687b      	ldr	r3, [r7, #4]
34182428:	3344      	adds	r3, #68	@ 0x44
3418242a:	4619      	mov	r1, r3
3418242c:	2001      	movs	r0, #1
3418242e:	f000 fdd1 	bl	34182fd4 <RCC_PLL_IsNewConfig>
34182432:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34182434:	f7ff fc22 	bl	34181c7c <LL_RCC_PLL2_IsReady>
34182438:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
3418243a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418243c:	2b01      	cmp	r3, #1
3418243e:	d134      	bne.n	341824aa <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182440:	f7ff fcbe 	bl	34181dc0 <LL_RCC_IC1_GetSource>
34182444:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182446:	f7ff fcd9 	bl	34181dfc <LL_RCC_IC2_GetSource>
3418244a:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418244c:	f7ff fcf4 	bl	34181e38 <LL_RCC_IC6_GetSource>
34182450:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182452:	f7ff fcff 	bl	34181e54 <LL_RCC_IC11_GetSource>
34182456:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34182458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418245c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182460:	d105      	bne.n	3418246e <HAL_RCC_OscConfig+0x5fe>
34182462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34182464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182468:	d101      	bne.n	3418246e <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
3418246a:	2301      	movs	r3, #1
3418246c:	e0db      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418246e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182476:	d10d      	bne.n	34182494 <HAL_RCC_OscConfig+0x624>
34182478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418247a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418247e:	d007      	beq.n	34182490 <HAL_RCC_OscConfig+0x620>
34182480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34182482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182486:	d003      	beq.n	34182490 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34182488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418248a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418248e:	d101      	bne.n	34182494 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34182490:	2301      	movs	r3, #1
34182492:	e0c8      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34182494:	687b      	ldr	r3, [r7, #4]
34182496:	3344      	adds	r3, #68	@ 0x44
34182498:	4619      	mov	r1, r3
3418249a:	2001      	movs	r0, #1
3418249c:	f000 fc3e 	bl	34182d1c <RCC_PLL_Config>
341824a0:	4603      	mov	r3, r0
341824a2:	2b00      	cmp	r3, #0
341824a4:	d014      	beq.n	341824d0 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
341824a6:	2301      	movs	r3, #1
341824a8:	e0bd      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
341824aa:	687b      	ldr	r3, [r7, #4]
341824ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341824ae:	2b02      	cmp	r3, #2
341824b0:	d10e      	bne.n	341824d0 <HAL_RCC_OscConfig+0x660>
341824b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
341824b4:	2b00      	cmp	r3, #0
341824b6:	d10b      	bne.n	341824d0 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
341824b8:	2001      	movs	r0, #1
341824ba:	f000 fd5f 	bl	34182f7c <RCC_PLL_Enable>
341824be:	4603      	mov	r3, r0
341824c0:	2b00      	cmp	r3, #0
341824c2:	d005      	beq.n	341824d0 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
341824c4:	2301      	movs	r3, #1
341824c6:	e0ae      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
341824c8:	56028000 	.word	0x56028000
341824cc:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
341824d0:	687b      	ldr	r3, [r7, #4]
341824d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341824d4:	2b00      	cmp	r3, #0
341824d6:	d050      	beq.n	3418257a <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
341824d8:	687b      	ldr	r3, [r7, #4]
341824da:	3360      	adds	r3, #96	@ 0x60
341824dc:	4619      	mov	r1, r3
341824de:	2002      	movs	r0, #2
341824e0:	f000 fd78 	bl	34182fd4 <RCC_PLL_IsNewConfig>
341824e4:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
341824e6:	f7ff fb93 	bl	34181c10 <LL_RCC_PLL1_IsReady>
341824ea:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
341824ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
341824ee:	2b01      	cmp	r3, #1
341824f0:	d134      	bne.n	3418255c <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341824f2:	f7ff fc65 	bl	34181dc0 <LL_RCC_IC1_GetSource>
341824f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341824f8:	f7ff fc80 	bl	34181dfc <LL_RCC_IC2_GetSource>
341824fc:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341824fe:	f7ff fc9b 	bl	34181e38 <LL_RCC_IC6_GetSource>
34182502:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182504:	f7ff fca6 	bl	34181e54 <LL_RCC_IC11_GetSource>
34182508:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
3418250a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418250e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182512:	d105      	bne.n	34182520 <HAL_RCC_OscConfig+0x6b0>
34182514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418251a:	d101      	bne.n	34182520 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
3418251c:	2301      	movs	r3, #1
3418251e:	e082      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34182520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182524:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182528:	d10d      	bne.n	34182546 <HAL_RCC_OscConfig+0x6d6>
3418252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418252c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182530:	d007      	beq.n	34182542 <HAL_RCC_OscConfig+0x6d2>
34182532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182538:	d003      	beq.n	34182542 <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
3418253a:	6a3b      	ldr	r3, [r7, #32]
3418253c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182540:	d101      	bne.n	34182546 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34182542:	2301      	movs	r3, #1
34182544:	e06f      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34182546:	687b      	ldr	r3, [r7, #4]
34182548:	3360      	adds	r3, #96	@ 0x60
3418254a:	4619      	mov	r1, r3
3418254c:	2002      	movs	r0, #2
3418254e:	f000 fbe5 	bl	34182d1c <RCC_PLL_Config>
34182552:	4603      	mov	r3, r0
34182554:	2b00      	cmp	r3, #0
34182556:	d010      	beq.n	3418257a <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182558:	2301      	movs	r3, #1
3418255a:	e064      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
3418255c:	687b      	ldr	r3, [r7, #4]
3418255e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34182560:	2b02      	cmp	r3, #2
34182562:	d10a      	bne.n	3418257a <HAL_RCC_OscConfig+0x70a>
34182564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182566:	2b00      	cmp	r3, #0
34182568:	d107      	bne.n	3418257a <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3418256a:	2002      	movs	r0, #2
3418256c:	f000 fd06 	bl	34182f7c <RCC_PLL_Enable>
34182570:	4603      	mov	r3, r0
34182572:	2b00      	cmp	r3, #0
34182574:	d001      	beq.n	3418257a <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182576:	2301      	movs	r3, #1
34182578:	e055      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
3418257a:	687b      	ldr	r3, [r7, #4]
3418257c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418257e:	2b00      	cmp	r3, #0
34182580:	d050      	beq.n	34182624 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34182582:	687b      	ldr	r3, [r7, #4]
34182584:	337c      	adds	r3, #124	@ 0x7c
34182586:	4619      	mov	r1, r3
34182588:	2003      	movs	r0, #3
3418258a:	f000 fd23 	bl	34182fd4 <RCC_PLL_IsNewConfig>
3418258e:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34182590:	f7ff fbe0 	bl	34181d54 <LL_RCC_PLL4_IsReady>
34182594:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34182596:	69fb      	ldr	r3, [r7, #28]
34182598:	2b01      	cmp	r3, #1
3418259a:	d134      	bne.n	34182606 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418259c:	f7ff fc10 	bl	34181dc0 <LL_RCC_IC1_GetSource>
341825a0:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341825a2:	f7ff fc2b 	bl	34181dfc <LL_RCC_IC2_GetSource>
341825a6:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341825a8:	f7ff fc46 	bl	34181e38 <LL_RCC_IC6_GetSource>
341825ac:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341825ae:	f7ff fc51 	bl	34181e54 <LL_RCC_IC11_GetSource>
341825b2:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
341825b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341825b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341825bc:	d105      	bne.n	341825ca <HAL_RCC_OscConfig+0x75a>
341825be:	697b      	ldr	r3, [r7, #20]
341825c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825c4:	d101      	bne.n	341825ca <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
341825c6:	2301      	movs	r3, #1
341825c8:	e02d      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
341825ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341825ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825d2:	d10d      	bne.n	341825f0 <HAL_RCC_OscConfig+0x780>
341825d4:	693b      	ldr	r3, [r7, #16]
341825d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825da:	d007      	beq.n	341825ec <HAL_RCC_OscConfig+0x77c>
341825dc:	68fb      	ldr	r3, [r7, #12]
341825de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825e2:	d003      	beq.n	341825ec <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
341825e4:	68bb      	ldr	r3, [r7, #8]
341825e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825ea:	d101      	bne.n	341825f0 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
341825ec:	2301      	movs	r3, #1
341825ee:	e01a      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
341825f0:	687b      	ldr	r3, [r7, #4]
341825f2:	337c      	adds	r3, #124	@ 0x7c
341825f4:	4619      	mov	r1, r3
341825f6:	2003      	movs	r0, #3
341825f8:	f000 fb90 	bl	34182d1c <RCC_PLL_Config>
341825fc:	4603      	mov	r3, r0
341825fe:	2b00      	cmp	r3, #0
34182600:	d010      	beq.n	34182624 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182602:	2301      	movs	r3, #1
34182604:	e00f      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34182606:	687b      	ldr	r3, [r7, #4]
34182608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418260a:	2b02      	cmp	r3, #2
3418260c:	d10a      	bne.n	34182624 <HAL_RCC_OscConfig+0x7b4>
3418260e:	69bb      	ldr	r3, [r7, #24]
34182610:	2b00      	cmp	r3, #0
34182612:	d107      	bne.n	34182624 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34182614:	2003      	movs	r0, #3
34182616:	f000 fcb1 	bl	34182f7c <RCC_PLL_Enable>
3418261a:	4603      	mov	r3, r0
3418261c:	2b00      	cmp	r3, #0
3418261e:	d001      	beq.n	34182624 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182620:	2301      	movs	r3, #1
34182622:	e000      	b.n	34182626 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34182624:	2300      	movs	r3, #0
}
34182626:	4618      	mov	r0, r3
34182628:	3788      	adds	r7, #136	@ 0x88
3418262a:	46bd      	mov	sp, r7
3418262c:	bd80      	pop	{r7, pc}
3418262e:	bf00      	nop

34182630 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34182630:	b580      	push	{r7, lr}
34182632:	b084      	sub	sp, #16
34182634:	af00      	add	r7, sp, #0
34182636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34182638:	687b      	ldr	r3, [r7, #4]
3418263a:	2b00      	cmp	r3, #0
3418263c:	d101      	bne.n	34182642 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
3418263e:	2301      	movs	r3, #1
34182640:	e1f2      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182642:	687b      	ldr	r3, [r7, #4]
34182644:	681b      	ldr	r3, [r3, #0]
34182646:	f003 0308 	and.w	r3, r3, #8
3418264a:	2b00      	cmp	r3, #0
3418264c:	d010      	beq.n	34182670 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3418264e:	687b      	ldr	r3, [r7, #4]
34182650:	691a      	ldr	r2, [r3, #16]
34182652:	4ba3      	ldr	r3, [pc, #652]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182656:	f003 0307 	and.w	r3, r3, #7
3418265a:	429a      	cmp	r2, r3
3418265c:	d908      	bls.n	34182670 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3418265e:	4ba0      	ldr	r3, [pc, #640]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182662:	f023 0207 	bic.w	r2, r3, #7
34182666:	687b      	ldr	r3, [r7, #4]
34182668:	691b      	ldr	r3, [r3, #16]
3418266a:	499d      	ldr	r1, [pc, #628]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
3418266c:	4313      	orrs	r3, r2
3418266e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182670:	687b      	ldr	r3, [r7, #4]
34182672:	681b      	ldr	r3, [r3, #0]
34182674:	f003 0310 	and.w	r3, r3, #16
34182678:	2b00      	cmp	r3, #0
3418267a:	d010      	beq.n	3418269e <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418267c:	687b      	ldr	r3, [r7, #4]
3418267e:	695a      	ldr	r2, [r3, #20]
34182680:	4b97      	ldr	r3, [pc, #604]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182688:	429a      	cmp	r2, r3
3418268a:	d908      	bls.n	3418269e <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418268c:	4b94      	ldr	r3, [pc, #592]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
3418268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34182694:	687b      	ldr	r3, [r7, #4]
34182696:	695b      	ldr	r3, [r3, #20]
34182698:	4991      	ldr	r1, [pc, #580]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
3418269a:	4313      	orrs	r3, r2
3418269c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3418269e:	687b      	ldr	r3, [r7, #4]
341826a0:	681b      	ldr	r3, [r3, #0]
341826a2:	f003 0320 	and.w	r3, r3, #32
341826a6:	2b00      	cmp	r3, #0
341826a8:	d010      	beq.n	341826cc <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
341826aa:	687b      	ldr	r3, [r7, #4]
341826ac:	699a      	ldr	r2, [r3, #24]
341826ae:	4b8c      	ldr	r3, [pc, #560]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341826b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
341826b6:	429a      	cmp	r2, r3
341826b8:	d908      	bls.n	341826cc <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
341826ba:	4b89      	ldr	r3, [pc, #548]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341826be:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
341826c2:	687b      	ldr	r3, [r7, #4]
341826c4:	699b      	ldr	r3, [r3, #24]
341826c6:	4986      	ldr	r1, [pc, #536]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826c8:	4313      	orrs	r3, r2
341826ca:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
341826cc:	687b      	ldr	r3, [r7, #4]
341826ce:	681b      	ldr	r3, [r3, #0]
341826d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341826d4:	2b00      	cmp	r3, #0
341826d6:	d010      	beq.n	341826fa <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
341826d8:	687b      	ldr	r3, [r7, #4]
341826da:	69da      	ldr	r2, [r3, #28]
341826dc:	4b80      	ldr	r3, [pc, #512]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341826e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
341826e4:	429a      	cmp	r2, r3
341826e6:	d908      	bls.n	341826fa <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
341826e8:	4b7d      	ldr	r3, [pc, #500]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341826ec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341826f0:	687b      	ldr	r3, [r7, #4]
341826f2:	69db      	ldr	r3, [r3, #28]
341826f4:	497a      	ldr	r1, [pc, #488]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341826f6:	4313      	orrs	r3, r2
341826f8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
341826fa:	687b      	ldr	r3, [r7, #4]
341826fc:	681b      	ldr	r3, [r3, #0]
341826fe:	f003 0304 	and.w	r3, r3, #4
34182702:	2b00      	cmp	r3, #0
34182704:	d010      	beq.n	34182728 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182706:	687b      	ldr	r3, [r7, #4]
34182708:	68da      	ldr	r2, [r3, #12]
3418270a:	4b75      	ldr	r3, [pc, #468]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
3418270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418270e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182712:	429a      	cmp	r2, r3
34182714:	d908      	bls.n	34182728 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182716:	4b72      	ldr	r3, [pc, #456]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418271a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418271e:	687b      	ldr	r3, [r7, #4]
34182720:	68db      	ldr	r3, [r3, #12]
34182722:	496f      	ldr	r1, [pc, #444]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182724:	4313      	orrs	r3, r2
34182726:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34182728:	687b      	ldr	r3, [r7, #4]
3418272a:	681b      	ldr	r3, [r3, #0]
3418272c:	f003 0301 	and.w	r3, r3, #1
34182730:	2b00      	cmp	r3, #0
34182732:	d063      	beq.n	341827fc <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34182734:	687b      	ldr	r3, [r7, #4]
34182736:	685b      	ldr	r3, [r3, #4]
34182738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418273c:	d106      	bne.n	3418274c <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418273e:	f7ff f91d 	bl	3418197c <LL_RCC_HSE_IsReady>
34182742:	4603      	mov	r3, r0
34182744:	2b00      	cmp	r3, #0
34182746:	d134      	bne.n	341827b2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182748:	2301      	movs	r3, #1
3418274a:	e16d      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
3418274c:	687b      	ldr	r3, [r7, #4]
3418274e:	685b      	ldr	r3, [r3, #4]
34182750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34182754:	d11a      	bne.n	3418278c <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34182756:	f7ff fb33 	bl	34181dc0 <LL_RCC_IC1_GetSource>
3418275a:	4602      	mov	r2, r0
3418275c:	687b      	ldr	r3, [r7, #4]
3418275e:	6a1b      	ldr	r3, [r3, #32]
34182760:	4619      	mov	r1, r3
34182762:	4610      	mov	r0, r2
34182764:	f000 fcea 	bl	3418313c <RCC_IC_CheckPLLSources>
34182768:	4603      	mov	r3, r0
3418276a:	2b01      	cmp	r3, #1
3418276c:	d001      	beq.n	34182772 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
3418276e:	2301      	movs	r3, #1
34182770:	e15a      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34182772:	687b      	ldr	r3, [r7, #4]
34182774:	6a1a      	ldr	r2, [r3, #32]
34182776:	687b      	ldr	r3, [r7, #4]
34182778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418277a:	3b01      	subs	r3, #1
3418277c:	041b      	lsls	r3, r3, #16
3418277e:	4958      	ldr	r1, [pc, #352]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
34182780:	4313      	orrs	r3, r2
34182782:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34182786:	f7ff fb0d 	bl	34181da4 <LL_RCC_IC1_Enable>
3418278a:	e012      	b.n	341827b2 <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
3418278c:	687b      	ldr	r3, [r7, #4]
3418278e:	685b      	ldr	r3, [r3, #4]
34182790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34182794:	d106      	bne.n	341827a4 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34182796:	f7ff f989 	bl	34181aac <LL_RCC_MSI_IsReady>
3418279a:	4603      	mov	r3, r0
3418279c:	2b00      	cmp	r3, #0
3418279e:	d108      	bne.n	341827b2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
341827a0:	2301      	movs	r3, #1
341827a2:	e141      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
341827a4:	f7ff f91a 	bl	341819dc <LL_RCC_HSI_IsReady>
341827a8:	4603      	mov	r3, r0
341827aa:	2b00      	cmp	r3, #0
341827ac:	d101      	bne.n	341827b2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
341827ae:	2301      	movs	r3, #1
341827b0:	e13a      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
341827b2:	4b4b      	ldr	r3, [pc, #300]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341827b4:	6a1b      	ldr	r3, [r3, #32]
341827b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
341827ba:	687b      	ldr	r3, [r7, #4]
341827bc:	685b      	ldr	r3, [r3, #4]
341827be:	4948      	ldr	r1, [pc, #288]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341827c0:	4313      	orrs	r3, r2
341827c2:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341827c4:	f7fe fd3e 	bl	34181244 <HAL_GetTick>
341827c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
341827ca:	e00a      	b.n	341827e2 <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
341827cc:	f7fe fd3a 	bl	34181244 <HAL_GetTick>
341827d0:	4602      	mov	r2, r0
341827d2:	68fb      	ldr	r3, [r7, #12]
341827d4:	1ad3      	subs	r3, r2, r3
341827d6:	f241 3288 	movw	r2, #5000	@ 0x1388
341827da:	4293      	cmp	r3, r2
341827dc:	d901      	bls.n	341827e2 <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
341827de:	2303      	movs	r3, #3
341827e0:	e122      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
341827e2:	f7ff f9eb 	bl	34181bbc <LL_RCC_GetCpuClkSource>
341827e6:	4602      	mov	r2, r0
341827e8:	687b      	ldr	r3, [r7, #4]
341827ea:	685b      	ldr	r3, [r3, #4]
341827ec:	011b      	lsls	r3, r3, #4
341827ee:	429a      	cmp	r2, r3
341827f0:	d1ec      	bne.n	341827cc <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
341827f2:	f000 f921 	bl	34182a38 <HAL_RCC_GetCpuClockFreq>
341827f6:	4603      	mov	r3, r0
341827f8:	4a3a      	ldr	r2, [pc, #232]	@ (341828e4 <HAL_RCC_ClockConfig+0x2b4>)
341827fa:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
341827fc:	687b      	ldr	r3, [r7, #4]
341827fe:	681b      	ldr	r3, [r3, #0]
34182800:	f003 0302 	and.w	r3, r3, #2
34182804:	2b00      	cmp	r3, #0
34182806:	f000 8096 	beq.w	34182936 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3418280a:	687b      	ldr	r3, [r7, #4]
3418280c:	689b      	ldr	r3, [r3, #8]
3418280e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34182812:	d106      	bne.n	34182822 <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34182814:	f7ff f8b2 	bl	3418197c <LL_RCC_HSE_IsReady>
34182818:	4603      	mov	r3, r0
3418281a:	2b00      	cmp	r3, #0
3418281c:	d16b      	bne.n	341828f6 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
3418281e:	2301      	movs	r3, #1
34182820:	e102      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34182822:	687b      	ldr	r3, [r7, #4]
34182824:	689b      	ldr	r3, [r3, #8]
34182826:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418282a:	d14d      	bne.n	341828c8 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
3418282c:	f7ff fae6 	bl	34181dfc <LL_RCC_IC2_GetSource>
34182830:	4602      	mov	r2, r0
34182832:	687b      	ldr	r3, [r7, #4]
34182834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182836:	4619      	mov	r1, r3
34182838:	4610      	mov	r0, r2
3418283a:	f000 fc7f 	bl	3418313c <RCC_IC_CheckPLLSources>
3418283e:	4603      	mov	r3, r0
34182840:	2b01      	cmp	r3, #1
34182842:	d001      	beq.n	34182848 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34182844:	2301      	movs	r3, #1
34182846:	e0ef      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34182848:	f7ff faf6 	bl	34181e38 <LL_RCC_IC6_GetSource>
3418284c:	4602      	mov	r2, r0
3418284e:	687b      	ldr	r3, [r7, #4]
34182850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34182852:	4619      	mov	r1, r3
34182854:	4610      	mov	r0, r2
34182856:	f000 fc71 	bl	3418313c <RCC_IC_CheckPLLSources>
3418285a:	4603      	mov	r3, r0
3418285c:	2b01      	cmp	r3, #1
3418285e:	d001      	beq.n	34182864 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34182860:	2301      	movs	r3, #1
34182862:	e0e1      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34182864:	f7ff faf6 	bl	34181e54 <LL_RCC_IC11_GetSource>
34182868:	4602      	mov	r2, r0
3418286a:	687b      	ldr	r3, [r7, #4]
3418286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418286e:	4619      	mov	r1, r3
34182870:	4610      	mov	r0, r2
34182872:	f000 fc63 	bl	3418313c <RCC_IC_CheckPLLSources>
34182876:	4603      	mov	r3, r0
34182878:	2b01      	cmp	r3, #1
3418287a:	d001      	beq.n	34182880 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
3418287c:	2301      	movs	r3, #1
3418287e:	e0d3      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34182880:	687b      	ldr	r3, [r7, #4]
34182882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34182884:	687b      	ldr	r3, [r7, #4]
34182886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34182888:	3b01      	subs	r3, #1
3418288a:	041b      	lsls	r3, r3, #16
3418288c:	4914      	ldr	r1, [pc, #80]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
3418288e:	4313      	orrs	r3, r2
34182890:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34182894:	687b      	ldr	r3, [r7, #4]
34182896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34182898:	687b      	ldr	r3, [r7, #4]
3418289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418289c:	3b01      	subs	r3, #1
3418289e:	041b      	lsls	r3, r3, #16
341828a0:	490f      	ldr	r1, [pc, #60]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341828a2:	4313      	orrs	r3, r2
341828a4:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
341828a8:	687b      	ldr	r3, [r7, #4]
341828aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341828ac:	687b      	ldr	r3, [r7, #4]
341828ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341828b0:	3b01      	subs	r3, #1
341828b2:	041b      	lsls	r3, r3, #16
341828b4:	490a      	ldr	r1, [pc, #40]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341828b6:	4313      	orrs	r3, r2
341828b8:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
341828bc:	4b08      	ldr	r3, [pc, #32]	@ (341828e0 <HAL_RCC_ClockConfig+0x2b0>)
341828be:	f240 4222 	movw	r2, #1058	@ 0x422
341828c2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
341828c6:	e016      	b.n	341828f6 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
341828c8:	687b      	ldr	r3, [r7, #4]
341828ca:	689b      	ldr	r3, [r3, #8]
341828cc:	2b00      	cmp	r3, #0
341828ce:	d10b      	bne.n	341828e8 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
341828d0:	f7ff f884 	bl	341819dc <LL_RCC_HSI_IsReady>
341828d4:	4603      	mov	r3, r0
341828d6:	2b00      	cmp	r3, #0
341828d8:	d10d      	bne.n	341828f6 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
341828da:	2301      	movs	r3, #1
341828dc:	e0a4      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
341828de:	bf00      	nop
341828e0:	56028000 	.word	0x56028000
341828e4:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
341828e8:	f7ff f8e0 	bl	34181aac <LL_RCC_MSI_IsReady>
341828ec:	4603      	mov	r3, r0
341828ee:	2b00      	cmp	r3, #0
341828f0:	d101      	bne.n	341828f6 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
341828f2:	2301      	movs	r3, #1
341828f4:	e098      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
341828f6:	4b4e      	ldr	r3, [pc, #312]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341828f8:	6a1b      	ldr	r3, [r3, #32]
341828fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
341828fe:	687b      	ldr	r3, [r7, #4]
34182900:	689b      	ldr	r3, [r3, #8]
34182902:	494b      	ldr	r1, [pc, #300]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182904:	4313      	orrs	r3, r2
34182906:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182908:	f7fe fc9c 	bl	34181244 <HAL_GetTick>
3418290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418290e:	e00a      	b.n	34182926 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182910:	f7fe fc98 	bl	34181244 <HAL_GetTick>
34182914:	4602      	mov	r2, r0
34182916:	68fb      	ldr	r3, [r7, #12]
34182918:	1ad3      	subs	r3, r2, r3
3418291a:	f241 3288 	movw	r2, #5000	@ 0x1388
3418291e:	4293      	cmp	r3, r2
34182920:	d901      	bls.n	34182926 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34182922:	2303      	movs	r3, #3
34182924:	e080      	b.n	34182a28 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182926:	f7ff f957 	bl	34181bd8 <LL_RCC_GetSysClkSource>
3418292a:	4602      	mov	r2, r0
3418292c:	687b      	ldr	r3, [r7, #4]
3418292e:	689b      	ldr	r3, [r3, #8]
34182930:	011b      	lsls	r3, r3, #4
34182932:	429a      	cmp	r2, r3
34182934:	d1ec      	bne.n	34182910 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182936:	687b      	ldr	r3, [r7, #4]
34182938:	681b      	ldr	r3, [r3, #0]
3418293a:	f003 0304 	and.w	r3, r3, #4
3418293e:	2b00      	cmp	r3, #0
34182940:	d010      	beq.n	34182964 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182942:	687b      	ldr	r3, [r7, #4]
34182944:	68da      	ldr	r2, [r3, #12]
34182946:	4b3a      	ldr	r3, [pc, #232]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418294a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418294e:	429a      	cmp	r2, r3
34182950:	d208      	bcs.n	34182964 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182952:	4b37      	ldr	r3, [pc, #220]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182956:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418295a:	687b      	ldr	r3, [r7, #4]
3418295c:	68db      	ldr	r3, [r3, #12]
3418295e:	4934      	ldr	r1, [pc, #208]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182960:	4313      	orrs	r3, r2
34182962:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182964:	687b      	ldr	r3, [r7, #4]
34182966:	681b      	ldr	r3, [r3, #0]
34182968:	f003 0308 	and.w	r3, r3, #8
3418296c:	2b00      	cmp	r3, #0
3418296e:	d010      	beq.n	34182992 <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182970:	687b      	ldr	r3, [r7, #4]
34182972:	691a      	ldr	r2, [r3, #16]
34182974:	4b2e      	ldr	r3, [pc, #184]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182978:	f003 0307 	and.w	r3, r3, #7
3418297c:	429a      	cmp	r2, r3
3418297e:	d208      	bcs.n	34182992 <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182980:	4b2b      	ldr	r3, [pc, #172]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182984:	f023 0207 	bic.w	r2, r3, #7
34182988:	687b      	ldr	r3, [r7, #4]
3418298a:	691b      	ldr	r3, [r3, #16]
3418298c:	4928      	ldr	r1, [pc, #160]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
3418298e:	4313      	orrs	r3, r2
34182990:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182992:	687b      	ldr	r3, [r7, #4]
34182994:	681b      	ldr	r3, [r3, #0]
34182996:	f003 0310 	and.w	r3, r3, #16
3418299a:	2b00      	cmp	r3, #0
3418299c:	d010      	beq.n	341829c0 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418299e:	687b      	ldr	r3, [r7, #4]
341829a0:	695a      	ldr	r2, [r3, #20]
341829a2:	4b23      	ldr	r3, [pc, #140]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341829a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
341829aa:	429a      	cmp	r2, r3
341829ac:	d208      	bcs.n	341829c0 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
341829ae:	4b20      	ldr	r3, [pc, #128]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341829b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
341829b6:	687b      	ldr	r3, [r7, #4]
341829b8:	695b      	ldr	r3, [r3, #20]
341829ba:	491d      	ldr	r1, [pc, #116]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829bc:	4313      	orrs	r3, r2
341829be:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
341829c0:	687b      	ldr	r3, [r7, #4]
341829c2:	681b      	ldr	r3, [r3, #0]
341829c4:	f003 0320 	and.w	r3, r3, #32
341829c8:	2b00      	cmp	r3, #0
341829ca:	d010      	beq.n	341829ee <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
341829cc:	687b      	ldr	r3, [r7, #4]
341829ce:	699a      	ldr	r2, [r3, #24]
341829d0:	4b17      	ldr	r3, [pc, #92]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341829d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
341829d8:	429a      	cmp	r2, r3
341829da:	d208      	bcs.n	341829ee <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
341829dc:	4b14      	ldr	r3, [pc, #80]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341829e0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
341829e4:	687b      	ldr	r3, [r7, #4]
341829e6:	699b      	ldr	r3, [r3, #24]
341829e8:	4911      	ldr	r1, [pc, #68]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
341829ea:	4313      	orrs	r3, r2
341829ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
341829ee:	687b      	ldr	r3, [r7, #4]
341829f0:	681b      	ldr	r3, [r3, #0]
341829f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341829f6:	2b00      	cmp	r3, #0
341829f8:	d010      	beq.n	34182a1c <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
341829fa:	687b      	ldr	r3, [r7, #4]
341829fc:	69da      	ldr	r2, [r3, #28]
341829fe:	4b0c      	ldr	r3, [pc, #48]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182a02:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182a06:	429a      	cmp	r2, r3
34182a08:	d208      	bcs.n	34182a1c <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182a0a:	4b09      	ldr	r3, [pc, #36]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182a0e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34182a12:	687b      	ldr	r3, [r7, #4]
34182a14:	69db      	ldr	r3, [r3, #28]
34182a16:	4906      	ldr	r1, [pc, #24]	@ (34182a30 <HAL_RCC_ClockConfig+0x400>)
34182a18:	4313      	orrs	r3, r2
34182a1a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34182a1c:	4b05      	ldr	r3, [pc, #20]	@ (34182a34 <HAL_RCC_ClockConfig+0x404>)
34182a1e:	681b      	ldr	r3, [r3, #0]
34182a20:	4618      	mov	r0, r3
34182a22:	f7fe fbc5 	bl	341811b0 <HAL_InitTick>
34182a26:	4603      	mov	r3, r0
}
34182a28:	4618      	mov	r0, r3
34182a2a:	3710      	adds	r7, #16
34182a2c:	46bd      	mov	sp, r7
34182a2e:	bd80      	pop	{r7, pc}
34182a30:	56028000 	.word	0x56028000
34182a34:	341c0004 	.word	0x341c0004

34182a38 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34182a38:	b580      	push	{r7, lr}
34182a3a:	b082      	sub	sp, #8
34182a3c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34182a3e:	2300      	movs	r3, #0
34182a40:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34182a42:	f7ff f8bb 	bl	34181bbc <LL_RCC_GetCpuClkSource>
34182a46:	4603      	mov	r3, r0
34182a48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182a4c:	d025      	beq.n	34182a9a <HAL_RCC_GetCpuClockFreq+0x62>
34182a4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182a52:	d860      	bhi.n	34182b16 <HAL_RCC_GetCpuClockFreq+0xde>
34182a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182a58:	d01c      	beq.n	34182a94 <HAL_RCC_GetCpuClockFreq+0x5c>
34182a5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182a5e:	d85a      	bhi.n	34182b16 <HAL_RCC_GetCpuClockFreq+0xde>
34182a60:	2b00      	cmp	r3, #0
34182a62:	d003      	beq.n	34182a6c <HAL_RCC_GetCpuClockFreq+0x34>
34182a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34182a68:	d009      	beq.n	34182a7e <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34182a6a:	e054      	b.n	34182b16 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34182a6c:	f7fe ffdc 	bl	34181a28 <LL_RCC_HSI_GetDivider>
34182a70:	4603      	mov	r3, r0
34182a72:	09db      	lsrs	r3, r3, #7
34182a74:	4a2b      	ldr	r2, [pc, #172]	@ (34182b24 <HAL_RCC_GetCpuClockFreq+0xec>)
34182a76:	fa22 f303 	lsr.w	r3, r2, r3
34182a7a:	607b      	str	r3, [r7, #4]
      break;
34182a7c:	e04c      	b.n	34182b18 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34182a7e:	f7ff f83b 	bl	34181af8 <LL_RCC_MSI_GetFrequency>
34182a82:	4603      	mov	r3, r0
34182a84:	2b00      	cmp	r3, #0
34182a86:	d102      	bne.n	34182a8e <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34182a88:	4b27      	ldr	r3, [pc, #156]	@ (34182b28 <HAL_RCC_GetCpuClockFreq+0xf0>)
34182a8a:	607b      	str	r3, [r7, #4]
      break;
34182a8c:	e044      	b.n	34182b18 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34182a8e:	4b27      	ldr	r3, [pc, #156]	@ (34182b2c <HAL_RCC_GetCpuClockFreq+0xf4>)
34182a90:	607b      	str	r3, [r7, #4]
      break;
34182a92:	e041      	b.n	34182b18 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34182a94:	4b26      	ldr	r3, [pc, #152]	@ (34182b30 <HAL_RCC_GetCpuClockFreq+0xf8>)
34182a96:	607b      	str	r3, [r7, #4]
      break;
34182a98:	e03e      	b.n	34182b18 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34182a9a:	f7ff f99f 	bl	34181ddc <LL_RCC_IC1_GetDivider>
34182a9e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34182aa0:	f7ff f98e 	bl	34181dc0 <LL_RCC_IC1_GetSource>
34182aa4:	4603      	mov	r3, r0
34182aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182aaa:	d029      	beq.n	34182b00 <HAL_RCC_GetCpuClockFreq+0xc8>
34182aac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182ab0:	d82f      	bhi.n	34182b12 <HAL_RCC_GetCpuClockFreq+0xda>
34182ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ab6:	d01a      	beq.n	34182aee <HAL_RCC_GetCpuClockFreq+0xb6>
34182ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182abc:	d829      	bhi.n	34182b12 <HAL_RCC_GetCpuClockFreq+0xda>
34182abe:	2b00      	cmp	r3, #0
34182ac0:	d003      	beq.n	34182aca <HAL_RCC_GetCpuClockFreq+0x92>
34182ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182ac6:	d009      	beq.n	34182adc <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34182ac8:	e023      	b.n	34182b12 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34182aca:	f004 feab 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34182ace:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182ad0:	687a      	ldr	r2, [r7, #4]
34182ad2:	683b      	ldr	r3, [r7, #0]
34182ad4:	fbb2 f3f3 	udiv	r3, r2, r3
34182ad8:	607b      	str	r3, [r7, #4]
          break;
34182ada:	e01b      	b.n	34182b14 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34182adc:	f004 fee8 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34182ae0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182ae2:	687a      	ldr	r2, [r7, #4]
34182ae4:	683b      	ldr	r3, [r7, #0]
34182ae6:	fbb2 f3f3 	udiv	r3, r2, r3
34182aea:	607b      	str	r3, [r7, #4]
          break;
34182aec:	e012      	b.n	34182b14 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34182aee:	f004 ff25 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34182af2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182af4:	687a      	ldr	r2, [r7, #4]
34182af6:	683b      	ldr	r3, [r7, #0]
34182af8:	fbb2 f3f3 	udiv	r3, r2, r3
34182afc:	607b      	str	r3, [r7, #4]
          break;
34182afe:	e009      	b.n	34182b14 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34182b00:	f004 ff62 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34182b04:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182b06:	687a      	ldr	r2, [r7, #4]
34182b08:	683b      	ldr	r3, [r7, #0]
34182b0a:	fbb2 f3f3 	udiv	r3, r2, r3
34182b0e:	607b      	str	r3, [r7, #4]
          break;
34182b10:	e000      	b.n	34182b14 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34182b12:	bf00      	nop
      break;
34182b14:	e000      	b.n	34182b18 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34182b16:	bf00      	nop
  }

  return frequency;
34182b18:	687b      	ldr	r3, [r7, #4]
}
34182b1a:	4618      	mov	r0, r3
34182b1c:	3708      	adds	r7, #8
34182b1e:	46bd      	mov	sp, r7
34182b20:	bd80      	pop	{r7, pc}
34182b22:	bf00      	nop
34182b24:	03d09000 	.word	0x03d09000
34182b28:	003d0900 	.word	0x003d0900
34182b2c:	00f42400 	.word	0x00f42400
34182b30:	02dc6c00 	.word	0x02dc6c00

34182b34 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34182b34:	b580      	push	{r7, lr}
34182b36:	b082      	sub	sp, #8
34182b38:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34182b3a:	2300      	movs	r3, #0
34182b3c:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34182b3e:	f7ff f84b 	bl	34181bd8 <LL_RCC_GetSysClkSource>
34182b42:	4603      	mov	r3, r0
34182b44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b48:	d025      	beq.n	34182b96 <HAL_RCC_GetSysClockFreq+0x62>
34182b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b4e:	d860      	bhi.n	34182c12 <HAL_RCC_GetSysClockFreq+0xde>
34182b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182b54:	d01c      	beq.n	34182b90 <HAL_RCC_GetSysClockFreq+0x5c>
34182b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182b5a:	d85a      	bhi.n	34182c12 <HAL_RCC_GetSysClockFreq+0xde>
34182b5c:	2b00      	cmp	r3, #0
34182b5e:	d003      	beq.n	34182b68 <HAL_RCC_GetSysClockFreq+0x34>
34182b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182b64:	d009      	beq.n	34182b7a <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34182b66:	e054      	b.n	34182c12 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34182b68:	f7fe ff5e 	bl	34181a28 <LL_RCC_HSI_GetDivider>
34182b6c:	4603      	mov	r3, r0
34182b6e:	09db      	lsrs	r3, r3, #7
34182b70:	4a2b      	ldr	r2, [pc, #172]	@ (34182c20 <HAL_RCC_GetSysClockFreq+0xec>)
34182b72:	fa22 f303 	lsr.w	r3, r2, r3
34182b76:	607b      	str	r3, [r7, #4]
      break;
34182b78:	e04c      	b.n	34182c14 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34182b7a:	f7fe ffbd 	bl	34181af8 <LL_RCC_MSI_GetFrequency>
34182b7e:	4603      	mov	r3, r0
34182b80:	2b00      	cmp	r3, #0
34182b82:	d102      	bne.n	34182b8a <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34182b84:	4b27      	ldr	r3, [pc, #156]	@ (34182c24 <HAL_RCC_GetSysClockFreq+0xf0>)
34182b86:	607b      	str	r3, [r7, #4]
      break;
34182b88:	e044      	b.n	34182c14 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34182b8a:	4b27      	ldr	r3, [pc, #156]	@ (34182c28 <HAL_RCC_GetSysClockFreq+0xf4>)
34182b8c:	607b      	str	r3, [r7, #4]
      break;
34182b8e:	e041      	b.n	34182c14 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34182b90:	4b26      	ldr	r3, [pc, #152]	@ (34182c2c <HAL_RCC_GetSysClockFreq+0xf8>)
34182b92:	607b      	str	r3, [r7, #4]
      break;
34182b94:	e03e      	b.n	34182c14 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34182b96:	f7ff f93f 	bl	34181e18 <LL_RCC_IC2_GetDivider>
34182b9a:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34182b9c:	f7ff f92e 	bl	34181dfc <LL_RCC_IC2_GetSource>
34182ba0:	4603      	mov	r3, r0
34182ba2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182ba6:	d029      	beq.n	34182bfc <HAL_RCC_GetSysClockFreq+0xc8>
34182ba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182bac:	d82f      	bhi.n	34182c0e <HAL_RCC_GetSysClockFreq+0xda>
34182bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182bb2:	d01a      	beq.n	34182bea <HAL_RCC_GetSysClockFreq+0xb6>
34182bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182bb8:	d829      	bhi.n	34182c0e <HAL_RCC_GetSysClockFreq+0xda>
34182bba:	2b00      	cmp	r3, #0
34182bbc:	d003      	beq.n	34182bc6 <HAL_RCC_GetSysClockFreq+0x92>
34182bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182bc2:	d009      	beq.n	34182bd8 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34182bc4:	e023      	b.n	34182c0e <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34182bc6:	f004 fe2d 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34182bca:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182bcc:	687a      	ldr	r2, [r7, #4]
34182bce:	683b      	ldr	r3, [r7, #0]
34182bd0:	fbb2 f3f3 	udiv	r3, r2, r3
34182bd4:	607b      	str	r3, [r7, #4]
          break;
34182bd6:	e01b      	b.n	34182c10 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34182bd8:	f004 fe6a 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34182bdc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182bde:	687a      	ldr	r2, [r7, #4]
34182be0:	683b      	ldr	r3, [r7, #0]
34182be2:	fbb2 f3f3 	udiv	r3, r2, r3
34182be6:	607b      	str	r3, [r7, #4]
          break;
34182be8:	e012      	b.n	34182c10 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34182bea:	f004 fea7 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34182bee:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182bf0:	687a      	ldr	r2, [r7, #4]
34182bf2:	683b      	ldr	r3, [r7, #0]
34182bf4:	fbb2 f3f3 	udiv	r3, r2, r3
34182bf8:	607b      	str	r3, [r7, #4]
          break;
34182bfa:	e009      	b.n	34182c10 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34182bfc:	f004 fee4 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34182c00:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34182c02:	687a      	ldr	r2, [r7, #4]
34182c04:	683b      	ldr	r3, [r7, #0]
34182c06:	fbb2 f3f3 	udiv	r3, r2, r3
34182c0a:	607b      	str	r3, [r7, #4]
          break;
34182c0c:	e000      	b.n	34182c10 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34182c0e:	bf00      	nop
      break;
34182c10:	e000      	b.n	34182c14 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34182c12:	bf00      	nop
  }

  return frequency;
34182c14:	687b      	ldr	r3, [r7, #4]
}
34182c16:	4618      	mov	r0, r3
34182c18:	3708      	adds	r7, #8
34182c1a:	46bd      	mov	sp, r7
34182c1c:	bd80      	pop	{r7, pc}
34182c1e:	bf00      	nop
34182c20:	03d09000 	.word	0x03d09000
34182c24:	003d0900 	.word	0x003d0900
34182c28:	00f42400 	.word	0x00f42400
34182c2c:	02dc6c00 	.word	0x02dc6c00

34182c30 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34182c30:	b480      	push	{r7}
34182c32:	b085      	sub	sp, #20
34182c34:	af00      	add	r7, sp, #0
34182c36:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34182c38:	687b      	ldr	r3, [r7, #4]
34182c3a:	227f      	movs	r2, #127	@ 0x7f
34182c3c:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
34182c3e:	4b36      	ldr	r3, [pc, #216]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182c40:	6a1b      	ldr	r3, [r3, #32]
34182c42:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34182c44:	68fb      	ldr	r3, [r7, #12]
34182c46:	091b      	lsrs	r3, r3, #4
34182c48:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
34182c4c:	687b      	ldr	r3, [r7, #4]
34182c4e:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
34182c50:	68fb      	ldr	r3, [r7, #12]
34182c52:	091b      	lsrs	r3, r3, #4
34182c54:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
34182c58:	687b      	ldr	r3, [r7, #4]
34182c5a:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
34182c5c:	4b2e      	ldr	r3, [pc, #184]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c60:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
34182c62:	68fb      	ldr	r3, [r7, #12]
34182c64:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
34182c68:	687b      	ldr	r3, [r7, #4]
34182c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
34182c6c:	68fb      	ldr	r3, [r7, #12]
34182c6e:	f003 0207 	and.w	r2, r3, #7
34182c72:	687b      	ldr	r3, [r7, #4]
34182c74:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34182c76:	68fb      	ldr	r3, [r7, #12]
34182c78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
34182c7c:	687b      	ldr	r3, [r7, #4]
34182c7e:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
34182c80:	68fb      	ldr	r3, [r7, #12]
34182c82:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34182c86:	687b      	ldr	r3, [r7, #4]
34182c88:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34182c8a:	68fb      	ldr	r3, [r7, #12]
34182c8c:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
34182c90:	687b      	ldr	r3, [r7, #4]
34182c92:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34182c94:	4b20      	ldr	r3, [pc, #128]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34182c9a:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34182c9c:	68fb      	ldr	r3, [r7, #12]
34182c9e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34182ca2:	687b      	ldr	r3, [r7, #4]
34182ca4:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34182ca6:	68fb      	ldr	r3, [r7, #12]
34182ca8:	0c1b      	lsrs	r3, r3, #16
34182caa:	b2db      	uxtb	r3, r3
34182cac:	1c5a      	adds	r2, r3, #1
34182cae:	687b      	ldr	r3, [r7, #4]
34182cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
34182cb2:	4b19      	ldr	r3, [pc, #100]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182cb4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34182cb8:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34182cba:	68fb      	ldr	r3, [r7, #12]
34182cbc:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34182cc0:	687b      	ldr	r3, [r7, #4]
34182cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34182cc4:	68fb      	ldr	r3, [r7, #12]
34182cc6:	0c1b      	lsrs	r3, r3, #16
34182cc8:	b2db      	uxtb	r3, r3
34182cca:	1c5a      	adds	r2, r3, #1
34182ccc:	687b      	ldr	r3, [r7, #4]
34182cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
34182cd0:	4b11      	ldr	r3, [pc, #68]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34182cd6:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34182cd8:	68fb      	ldr	r3, [r7, #12]
34182cda:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34182cde:	687b      	ldr	r3, [r7, #4]
34182ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34182ce2:	68fb      	ldr	r3, [r7, #12]
34182ce4:	0c1b      	lsrs	r3, r3, #16
34182ce6:	b2db      	uxtb	r3, r3
34182ce8:	1c5a      	adds	r2, r3, #1
34182cea:	687b      	ldr	r3, [r7, #4]
34182cec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
34182cee:	4b0a      	ldr	r3, [pc, #40]	@ (34182d18 <HAL_RCC_GetClockConfig+0xe8>)
34182cf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34182cf4:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34182cf6:	68fb      	ldr	r3, [r7, #12]
34182cf8:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34182cfc:	687b      	ldr	r3, [r7, #4]
34182cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34182d00:	68fb      	ldr	r3, [r7, #12]
34182d02:	0c1b      	lsrs	r3, r3, #16
34182d04:	b2db      	uxtb	r3, r3
34182d06:	1c5a      	adds	r2, r3, #1
34182d08:	687b      	ldr	r3, [r7, #4]
34182d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34182d0c:	bf00      	nop
34182d0e:	3714      	adds	r7, #20
34182d10:	46bd      	mov	sp, r7
34182d12:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d16:	4770      	bx	lr
34182d18:	56028000 	.word	0x56028000

34182d1c <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34182d1c:	b580      	push	{r7, lr}
34182d1e:	b088      	sub	sp, #32
34182d20:	af00      	add	r7, sp, #0
34182d22:	6078      	str	r0, [r7, #4]
34182d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34182d26:	2300      	movs	r3, #0
34182d28:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34182d2a:	687b      	ldr	r3, [r7, #4]
34182d2c:	011a      	lsls	r2, r3, #4
34182d2e:	4b8e      	ldr	r3, [pc, #568]	@ (34182f68 <RCC_PLL_Config+0x24c>)
34182d30:	4413      	add	r3, r2
34182d32:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34182d34:	687b      	ldr	r3, [r7, #4]
34182d36:	011a      	lsls	r2, r3, #4
34182d38:	4b8c      	ldr	r3, [pc, #560]	@ (34182f6c <RCC_PLL_Config+0x250>)
34182d3a:	4413      	add	r3, r2
34182d3c:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34182d3e:	687b      	ldr	r3, [r7, #4]
34182d40:	011a      	lsls	r2, r3, #4
34182d42:	4b8b      	ldr	r3, [pc, #556]	@ (34182f70 <RCC_PLL_Config+0x254>)
34182d44:	4413      	add	r3, r2
34182d46:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34182d48:	683b      	ldr	r3, [r7, #0]
34182d4a:	681b      	ldr	r3, [r3, #0]
34182d4c:	2b02      	cmp	r3, #2
34182d4e:	f040 8091 	bne.w	34182e74 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34182d52:	4a88      	ldr	r2, [pc, #544]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182d58:	687b      	ldr	r3, [r7, #4]
34182d5a:	fa01 f303 	lsl.w	r3, r1, r3
34182d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182d64:	f7fe fa6e 	bl	34181244 <HAL_GetTick>
34182d68:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182d6a:	e008      	b.n	34182d7e <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34182d6c:	f7fe fa6a 	bl	34181244 <HAL_GetTick>
34182d70:	4602      	mov	r2, r0
34182d72:	68fb      	ldr	r3, [r7, #12]
34182d74:	1ad3      	subs	r3, r2, r3
34182d76:	2b01      	cmp	r3, #1
34182d78:	d901      	bls.n	34182d7e <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
34182d7a:	2303      	movs	r3, #3
34182d7c:	e0f0      	b.n	34182f60 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182d7e:	4b7d      	ldr	r3, [pc, #500]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182d80:	685a      	ldr	r2, [r3, #4]
34182d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182d86:	687b      	ldr	r3, [r7, #4]
34182d88:	fa01 f303 	lsl.w	r3, r1, r3
34182d8c:	401a      	ands	r2, r3
34182d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182d92:	687b      	ldr	r3, [r7, #4]
34182d94:	fa01 f303 	lsl.w	r3, r1, r3
34182d98:	429a      	cmp	r2, r3
34182d9a:	d0e7      	beq.n	34182d6c <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34182d9c:	693b      	ldr	r3, [r7, #16]
34182d9e:	681b      	ldr	r3, [r3, #0]
34182da0:	f043 0204 	orr.w	r2, r3, #4
34182da4:	693b      	ldr	r3, [r7, #16]
34182da6:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34182da8:	69bb      	ldr	r3, [r7, #24]
34182daa:	681b      	ldr	r3, [r3, #0]
34182dac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34182db0:	69bb      	ldr	r3, [r7, #24]
34182db2:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34182db4:	69bb      	ldr	r3, [r7, #24]
34182db6:	681a      	ldr	r2, [r3, #0]
34182db8:	4b6f      	ldr	r3, [pc, #444]	@ (34182f78 <RCC_PLL_Config+0x25c>)
34182dba:	4013      	ands	r3, r2
34182dbc:	683a      	ldr	r2, [r7, #0]
34182dbe:	6851      	ldr	r1, [r2, #4]
34182dc0:	683a      	ldr	r2, [r7, #0]
34182dc2:	6892      	ldr	r2, [r2, #8]
34182dc4:	0512      	lsls	r2, r2, #20
34182dc6:	4311      	orrs	r1, r2
34182dc8:	683a      	ldr	r2, [r7, #0]
34182dca:	6912      	ldr	r2, [r2, #16]
34182dcc:	0212      	lsls	r2, r2, #8
34182dce:	430a      	orrs	r2, r1
34182dd0:	431a      	orrs	r2, r3
34182dd2:	69bb      	ldr	r3, [r7, #24]
34182dd4:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34182dd6:	693b      	ldr	r3, [r7, #16]
34182dd8:	681b      	ldr	r3, [r3, #0]
34182dda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34182dde:	683b      	ldr	r3, [r7, #0]
34182de0:	695b      	ldr	r3, [r3, #20]
34182de2:	06d9      	lsls	r1, r3, #27
34182de4:	683b      	ldr	r3, [r7, #0]
34182de6:	699b      	ldr	r3, [r3, #24]
34182de8:	061b      	lsls	r3, r3, #24
34182dea:	430b      	orrs	r3, r1
34182dec:	431a      	orrs	r2, r3
34182dee:	693b      	ldr	r3, [r7, #16]
34182df0:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34182df2:	697b      	ldr	r3, [r7, #20]
34182df4:	681b      	ldr	r3, [r3, #0]
34182df6:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34182dfa:	683b      	ldr	r3, [r7, #0]
34182dfc:	68db      	ldr	r3, [r3, #12]
34182dfe:	431a      	orrs	r2, r3
34182e00:	697b      	ldr	r3, [r7, #20]
34182e02:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34182e04:	693b      	ldr	r3, [r7, #16]
34182e06:	681b      	ldr	r3, [r3, #0]
34182e08:	f023 0208 	bic.w	r2, r3, #8
34182e0c:	693b      	ldr	r3, [r7, #16]
34182e0e:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34182e10:	683b      	ldr	r3, [r7, #0]
34182e12:	68db      	ldr	r3, [r3, #12]
34182e14:	2b00      	cmp	r3, #0
34182e16:	d005      	beq.n	34182e24 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34182e18:	693b      	ldr	r3, [r7, #16]
34182e1a:	681b      	ldr	r3, [r3, #0]
34182e1c:	f043 020a 	orr.w	r2, r3, #10
34182e20:	693b      	ldr	r3, [r7, #16]
34182e22:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34182e24:	693b      	ldr	r3, [r7, #16]
34182e26:	681b      	ldr	r3, [r3, #0]
34182e28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34182e2c:	f043 0301 	orr.w	r3, r3, #1
34182e30:	693a      	ldr	r2, [r7, #16]
34182e32:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34182e34:	4a4f      	ldr	r2, [pc, #316]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182e3a:	687b      	ldr	r3, [r7, #4]
34182e3c:	fa01 f303 	lsl.w	r3, r1, r3
34182e40:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182e44:	f7fe f9fe 	bl	34181244 <HAL_GetTick>
34182e48:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34182e4a:	e008      	b.n	34182e5e <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34182e4c:	f7fe f9fa 	bl	34181244 <HAL_GetTick>
34182e50:	4602      	mov	r2, r0
34182e52:	68fb      	ldr	r3, [r7, #12]
34182e54:	1ad3      	subs	r3, r2, r3
34182e56:	2b01      	cmp	r3, #1
34182e58:	d901      	bls.n	34182e5e <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
34182e5a:	2303      	movs	r3, #3
34182e5c:	e080      	b.n	34182f60 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34182e5e:	4b45      	ldr	r3, [pc, #276]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182e60:	685a      	ldr	r2, [r3, #4]
34182e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182e66:	687b      	ldr	r3, [r7, #4]
34182e68:	fa01 f303 	lsl.w	r3, r1, r3
34182e6c:	4013      	ands	r3, r2
34182e6e:	2b00      	cmp	r3, #0
34182e70:	d0ec      	beq.n	34182e4c <RCC_PLL_Config+0x130>
34182e72:	e074      	b.n	34182f5e <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34182e74:	683b      	ldr	r3, [r7, #0]
34182e76:	681b      	ldr	r3, [r3, #0]
34182e78:	2b03      	cmp	r3, #3
34182e7a:	d13b      	bne.n	34182ef4 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34182e7c:	683b      	ldr	r3, [r7, #0]
34182e7e:	685b      	ldr	r3, [r3, #4]
34182e80:	4618      	mov	r0, r3
34182e82:	f000 f921 	bl	341830c8 <RCC_PLL_Source_IsReady>
34182e86:	4603      	mov	r3, r0
34182e88:	2b01      	cmp	r3, #1
34182e8a:	d130      	bne.n	34182eee <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34182e8c:	4a39      	ldr	r2, [pc, #228]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182e8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182e92:	687b      	ldr	r3, [r7, #4]
34182e94:	fa01 f303 	lsl.w	r3, r1, r3
34182e98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182e9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182e9e:	f7fe f9d1 	bl	34181244 <HAL_GetTick>
34182ea2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182ea4:	e008      	b.n	34182eb8 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34182ea6:	f7fe f9cd 	bl	34181244 <HAL_GetTick>
34182eaa:	4602      	mov	r2, r0
34182eac:	68fb      	ldr	r3, [r7, #12]
34182eae:	1ad3      	subs	r3, r2, r3
34182eb0:	2b01      	cmp	r3, #1
34182eb2:	d901      	bls.n	34182eb8 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34182eb4:	2303      	movs	r3, #3
34182eb6:	e053      	b.n	34182f60 <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182eb8:	4b2e      	ldr	r3, [pc, #184]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182eba:	685a      	ldr	r2, [r3, #4]
34182ebc:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182ec0:	687b      	ldr	r3, [r7, #4]
34182ec2:	fa01 f303 	lsl.w	r3, r1, r3
34182ec6:	401a      	ands	r2, r3
34182ec8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182ecc:	687b      	ldr	r3, [r7, #4]
34182ece:	fa01 f303 	lsl.w	r3, r1, r3
34182ed2:	429a      	cmp	r2, r3
34182ed4:	d0e7      	beq.n	34182ea6 <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34182ed6:	69bb      	ldr	r3, [r7, #24]
34182ed8:	681b      	ldr	r3, [r3, #0]
34182eda:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34182ede:	683b      	ldr	r3, [r7, #0]
34182ee0:	685b      	ldr	r3, [r3, #4]
34182ee2:	4313      	orrs	r3, r2
34182ee4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34182ee8:	69bb      	ldr	r3, [r7, #24]
34182eea:	601a      	str	r2, [r3, #0]
34182eec:	e037      	b.n	34182f5e <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34182eee:	2301      	movs	r3, #1
34182ef0:	77fb      	strb	r3, [r7, #31]
34182ef2:	e034      	b.n	34182f5e <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34182ef4:	683b      	ldr	r3, [r7, #0]
34182ef6:	681b      	ldr	r3, [r3, #0]
34182ef8:	2b01      	cmp	r3, #1
34182efa:	d130      	bne.n	34182f5e <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34182efc:	693b      	ldr	r3, [r7, #16]
34182efe:	681b      	ldr	r3, [r3, #0]
34182f00:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34182f04:	693b      	ldr	r3, [r7, #16]
34182f06:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34182f08:	4a1a      	ldr	r2, [pc, #104]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182f0e:	687b      	ldr	r3, [r7, #4]
34182f10:	fa01 f303 	lsl.w	r3, r1, r3
34182f14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182f1a:	f7fe f993 	bl	34181244 <HAL_GetTick>
34182f1e:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182f20:	e008      	b.n	34182f34 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34182f22:	f7fe f98f 	bl	34181244 <HAL_GetTick>
34182f26:	4602      	mov	r2, r0
34182f28:	68fb      	ldr	r3, [r7, #12]
34182f2a:	1ad3      	subs	r3, r2, r3
34182f2c:	2b01      	cmp	r3, #1
34182f2e:	d901      	bls.n	34182f34 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
34182f30:	2303      	movs	r3, #3
34182f32:	e015      	b.n	34182f60 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34182f34:	4b0f      	ldr	r3, [pc, #60]	@ (34182f74 <RCC_PLL_Config+0x258>)
34182f36:	685a      	ldr	r2, [r3, #4]
34182f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182f3c:	687b      	ldr	r3, [r7, #4]
34182f3e:	fa01 f303 	lsl.w	r3, r1, r3
34182f42:	401a      	ands	r2, r3
34182f44:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182f48:	687b      	ldr	r3, [r7, #4]
34182f4a:	fa01 f303 	lsl.w	r3, r1, r3
34182f4e:	429a      	cmp	r2, r3
34182f50:	d0e7      	beq.n	34182f22 <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34182f52:	69bb      	ldr	r3, [r7, #24]
34182f54:	681b      	ldr	r3, [r3, #0]
34182f56:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34182f5a:	69bb      	ldr	r3, [r7, #24]
34182f5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34182f5e:	7ffb      	ldrb	r3, [r7, #31]
}
34182f60:	4618      	mov	r0, r3
34182f62:	3720      	adds	r7, #32
34182f64:	46bd      	mov	sp, r7
34182f66:	bd80      	pop	{r7, pc}
34182f68:	56028080 	.word	0x56028080
34182f6c:	56028084 	.word	0x56028084
34182f70:	56028088 	.word	0x56028088
34182f74:	56028000 	.word	0x56028000
34182f78:	8c0000ff 	.word	0x8c0000ff

34182f7c <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34182f7c:	b580      	push	{r7, lr}
34182f7e:	b084      	sub	sp, #16
34182f80:	af00      	add	r7, sp, #0
34182f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34182f84:	2300      	movs	r3, #0
34182f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34182f88:	4a11      	ldr	r2, [pc, #68]	@ (34182fd0 <RCC_PLL_Enable+0x54>)
34182f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182f8e:	687b      	ldr	r3, [r7, #4]
34182f90:	fa01 f303 	lsl.w	r3, r1, r3
34182f94:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34182f98:	f7fe f954 	bl	34181244 <HAL_GetTick>
34182f9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34182f9e:	e008      	b.n	34182fb2 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34182fa0:	f7fe f950 	bl	34181244 <HAL_GetTick>
34182fa4:	4602      	mov	r2, r0
34182fa6:	68bb      	ldr	r3, [r7, #8]
34182fa8:	1ad3      	subs	r3, r2, r3
34182faa:	2b01      	cmp	r3, #1
34182fac:	d901      	bls.n	34182fb2 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34182fae:	2303      	movs	r3, #3
34182fb0:	e00a      	b.n	34182fc8 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34182fb2:	4b07      	ldr	r3, [pc, #28]	@ (34182fd0 <RCC_PLL_Enable+0x54>)
34182fb4:	685a      	ldr	r2, [r3, #4]
34182fb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
34182fba:	687b      	ldr	r3, [r7, #4]
34182fbc:	fa01 f303 	lsl.w	r3, r1, r3
34182fc0:	4013      	ands	r3, r2
34182fc2:	2b00      	cmp	r3, #0
34182fc4:	d0ec      	beq.n	34182fa0 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34182fc6:	7bfb      	ldrb	r3, [r7, #15]
}
34182fc8:	4618      	mov	r0, r3
34182fca:	3710      	adds	r7, #16
34182fcc:	46bd      	mov	sp, r7
34182fce:	bd80      	pop	{r7, pc}
34182fd0:	56028000 	.word	0x56028000

34182fd4 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34182fd4:	b480      	push	{r7}
34182fd6:	b089      	sub	sp, #36	@ 0x24
34182fd8:	af00      	add	r7, sp, #0
34182fda:	6078      	str	r0, [r7, #4]
34182fdc:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
34182fde:	2300      	movs	r3, #0
34182fe0:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34182fe2:	687b      	ldr	r3, [r7, #4]
34182fe4:	011a      	lsls	r2, r3, #4
34182fe6:	4b34      	ldr	r3, [pc, #208]	@ (341830b8 <RCC_PLL_IsNewConfig+0xe4>)
34182fe8:	4413      	add	r3, r2
34182fea:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34182fec:	687b      	ldr	r3, [r7, #4]
34182fee:	011a      	lsls	r2, r3, #4
34182ff0:	4b32      	ldr	r3, [pc, #200]	@ (341830bc <RCC_PLL_IsNewConfig+0xe8>)
34182ff2:	4413      	add	r3, r2
34182ff4:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34182ff6:	687b      	ldr	r3, [r7, #4]
34182ff8:	011a      	lsls	r2, r3, #4
34182ffa:	4b31      	ldr	r3, [pc, #196]	@ (341830c0 <RCC_PLL_IsNewConfig+0xec>)
34182ffc:	4413      	add	r3, r2
34182ffe:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34183000:	697b      	ldr	r3, [r7, #20]
34183002:	681b      	ldr	r3, [r3, #0]
34183004:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
34183008:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
3418300c:	683a      	ldr	r2, [r7, #0]
3418300e:	6851      	ldr	r1, [r2, #4]
34183010:	683a      	ldr	r2, [r7, #0]
34183012:	6892      	ldr	r2, [r2, #8]
34183014:	0512      	lsls	r2, r2, #20
34183016:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34183018:	683a      	ldr	r2, [r7, #0]
3418301a:	6912      	ldr	r2, [r2, #16]
3418301c:	0212      	lsls	r2, r2, #8
3418301e:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34183020:	4293      	cmp	r3, r2
34183022:	d002      	beq.n	3418302a <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
34183024:	2301      	movs	r3, #1
34183026:	61fb      	str	r3, [r7, #28]
34183028:	e03e      	b.n	341830a8 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418302a:	693b      	ldr	r3, [r7, #16]
3418302c:	681b      	ldr	r3, [r3, #0]
3418302e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
34183032:	683b      	ldr	r3, [r7, #0]
34183034:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34183036:	429a      	cmp	r2, r3
34183038:	d002      	beq.n	34183040 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3418303a:	2301      	movs	r3, #1
3418303c:	61fb      	str	r3, [r7, #28]
3418303e:	e033      	b.n	341830a8 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34183040:	68fb      	ldr	r3, [r7, #12]
34183042:	681b      	ldr	r3, [r3, #0]
34183044:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34183048:	683b      	ldr	r3, [r7, #0]
3418304a:	695b      	ldr	r3, [r3, #20]
3418304c:	06d9      	lsls	r1, r3, #27
3418304e:	683b      	ldr	r3, [r7, #0]
34183050:	699b      	ldr	r3, [r3, #24]
34183052:	061b      	lsls	r3, r3, #24
34183054:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34183056:	429a      	cmp	r2, r3
34183058:	d002      	beq.n	34183060 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3418305a:	2301      	movs	r3, #1
3418305c:	61fb      	str	r3, [r7, #28]
3418305e:	e023      	b.n	341830a8 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183060:	4b18      	ldr	r3, [pc, #96]	@ (341830c4 <RCC_PLL_IsNewConfig+0xf0>)
34183062:	685a      	ldr	r2, [r3, #4]
34183064:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183068:	687b      	ldr	r3, [r7, #4]
3418306a:	fa01 f303 	lsl.w	r3, r1, r3
3418306e:	401a      	ands	r2, r3
34183070:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183074:	687b      	ldr	r3, [r7, #4]
34183076:	fa01 f303 	lsl.w	r3, r1, r3
3418307a:	429a      	cmp	r2, r3
3418307c:	d102      	bne.n	34183084 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3418307e:	2302      	movs	r3, #2
34183080:	61bb      	str	r3, [r7, #24]
34183082:	e00a      	b.n	3418309a <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34183084:	697b      	ldr	r3, [r7, #20]
34183086:	681b      	ldr	r3, [r3, #0]
34183088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418308c:	2b00      	cmp	r3, #0
3418308e:	d002      	beq.n	34183096 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34183090:	2303      	movs	r3, #3
34183092:	61bb      	str	r3, [r7, #24]
34183094:	e001      	b.n	3418309a <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34183096:	2301      	movs	r3, #1
34183098:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3418309a:	683b      	ldr	r3, [r7, #0]
3418309c:	681b      	ldr	r3, [r3, #0]
3418309e:	69ba      	ldr	r2, [r7, #24]
341830a0:	429a      	cmp	r2, r3
341830a2:	d001      	beq.n	341830a8 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
341830a4:	2301      	movs	r3, #1
341830a6:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
341830a8:	69fb      	ldr	r3, [r7, #28]
}
341830aa:	4618      	mov	r0, r3
341830ac:	3724      	adds	r7, #36	@ 0x24
341830ae:	46bd      	mov	sp, r7
341830b0:	f85d 7b04 	ldr.w	r7, [sp], #4
341830b4:	4770      	bx	lr
341830b6:	bf00      	nop
341830b8:	56028080 	.word	0x56028080
341830bc:	56028084 	.word	0x56028084
341830c0:	56028088 	.word	0x56028088
341830c4:	56028000 	.word	0x56028000

341830c8 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
341830c8:	b580      	push	{r7, lr}
341830ca:	b084      	sub	sp, #16
341830cc:	af00      	add	r7, sp, #0
341830ce:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
341830d0:	2301      	movs	r3, #1
341830d2:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
341830d4:	687b      	ldr	r3, [r7, #4]
341830d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341830da:	d01b      	beq.n	34183114 <RCC_PLL_Source_IsReady+0x4c>
341830dc:	687b      	ldr	r3, [r7, #4]
341830de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341830e2:	d81f      	bhi.n	34183124 <RCC_PLL_Source_IsReady+0x5c>
341830e4:	687b      	ldr	r3, [r7, #4]
341830e6:	2b00      	cmp	r3, #0
341830e8:	d004      	beq.n	341830f4 <RCC_PLL_Source_IsReady+0x2c>
341830ea:	687b      	ldr	r3, [r7, #4]
341830ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341830f0:	d008      	beq.n	34183104 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
341830f2:	e017      	b.n	34183124 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
341830f4:	f7fe fc72 	bl	341819dc <LL_RCC_HSI_IsReady>
341830f8:	4603      	mov	r3, r0
341830fa:	2b00      	cmp	r3, #0
341830fc:	d114      	bne.n	34183128 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
341830fe:	2300      	movs	r3, #0
34183100:	60fb      	str	r3, [r7, #12]
      break;
34183102:	e011      	b.n	34183128 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34183104:	f7fe fcd2 	bl	34181aac <LL_RCC_MSI_IsReady>
34183108:	4603      	mov	r3, r0
3418310a:	2b00      	cmp	r3, #0
3418310c:	d10e      	bne.n	3418312c <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418310e:	2300      	movs	r3, #0
34183110:	60fb      	str	r3, [r7, #12]
      break;
34183112:	e00b      	b.n	3418312c <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34183114:	f7fe fc32 	bl	3418197c <LL_RCC_HSE_IsReady>
34183118:	4603      	mov	r3, r0
3418311a:	2b00      	cmp	r3, #0
3418311c:	d108      	bne.n	34183130 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3418311e:	2300      	movs	r3, #0
34183120:	60fb      	str	r3, [r7, #12]
      break;
34183122:	e005      	b.n	34183130 <RCC_PLL_Source_IsReady+0x68>
      break;
34183124:	bf00      	nop
34183126:	e004      	b.n	34183132 <RCC_PLL_Source_IsReady+0x6a>
      break;
34183128:	bf00      	nop
3418312a:	e002      	b.n	34183132 <RCC_PLL_Source_IsReady+0x6a>
      break;
3418312c:	bf00      	nop
3418312e:	e000      	b.n	34183132 <RCC_PLL_Source_IsReady+0x6a>
      break;
34183130:	bf00      	nop
  }

  return ret;
34183132:	68fb      	ldr	r3, [r7, #12]
}
34183134:	4618      	mov	r0, r3
34183136:	3710      	adds	r7, #16
34183138:	46bd      	mov	sp, r7
3418313a:	bd80      	pop	{r7, pc}

3418313c <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
3418313c:	b580      	push	{r7, lr}
3418313e:	b084      	sub	sp, #16
34183140:	af00      	add	r7, sp, #0
34183142:	6078      	str	r0, [r7, #4]
34183144:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
34183146:	2301      	movs	r3, #1
34183148:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3418314a:	687b      	ldr	r3, [r7, #4]
3418314c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183150:	d03a      	beq.n	341831c8 <RCC_IC_CheckPLLSources+0x8c>
34183152:	687b      	ldr	r3, [r7, #4]
34183154:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183158:	d843      	bhi.n	341831e2 <RCC_IC_CheckPLLSources+0xa6>
3418315a:	687b      	ldr	r3, [r7, #4]
3418315c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183160:	d025      	beq.n	341831ae <RCC_IC_CheckPLLSources+0x72>
34183162:	687b      	ldr	r3, [r7, #4]
34183164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183168:	d83b      	bhi.n	341831e2 <RCC_IC_CheckPLLSources+0xa6>
3418316a:	687b      	ldr	r3, [r7, #4]
3418316c:	2b00      	cmp	r3, #0
3418316e:	d004      	beq.n	3418317a <RCC_IC_CheckPLLSources+0x3e>
34183170:	687b      	ldr	r3, [r7, #4]
34183172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183176:	d00d      	beq.n	34183194 <RCC_IC_CheckPLLSources+0x58>
34183178:	e033      	b.n	341831e2 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418317a:	f7fe fd49 	bl	34181c10 <LL_RCC_PLL1_IsReady>
3418317e:	4603      	mov	r3, r0
34183180:	2b00      	cmp	r3, #0
34183182:	d131      	bne.n	341831e8 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34183184:	f7fe fd58 	bl	34181c38 <LL_RCC_PLL1_IsEnabledBypass>
34183188:	4603      	mov	r3, r0
3418318a:	2b00      	cmp	r3, #0
3418318c:	d12c      	bne.n	341831e8 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418318e:	2300      	movs	r3, #0
34183190:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183192:	e029      	b.n	341831e8 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34183194:	f7fe fd72 	bl	34181c7c <LL_RCC_PLL2_IsReady>
34183198:	4603      	mov	r3, r0
3418319a:	2b00      	cmp	r3, #0
3418319c:	d126      	bne.n	341831ec <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418319e:	f7fe fd81 	bl	34181ca4 <LL_RCC_PLL2_IsEnabledBypass>
341831a2:	4603      	mov	r3, r0
341831a4:	2b00      	cmp	r3, #0
341831a6:	d121      	bne.n	341831ec <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
341831a8:	2300      	movs	r3, #0
341831aa:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341831ac:	e01e      	b.n	341831ec <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341831ae:	f7fe fd9b 	bl	34181ce8 <LL_RCC_PLL3_IsReady>
341831b2:	4603      	mov	r3, r0
341831b4:	2b00      	cmp	r3, #0
341831b6:	d11b      	bne.n	341831f0 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341831b8:	f7fe fdaa 	bl	34181d10 <LL_RCC_PLL3_IsEnabledBypass>
341831bc:	4603      	mov	r3, r0
341831be:	2b00      	cmp	r3, #0
341831c0:	d116      	bne.n	341831f0 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
341831c2:	2300      	movs	r3, #0
341831c4:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341831c6:	e013      	b.n	341831f0 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
341831c8:	f7fe fdc4 	bl	34181d54 <LL_RCC_PLL4_IsReady>
341831cc:	4603      	mov	r3, r0
341831ce:	2b00      	cmp	r3, #0
341831d0:	d110      	bne.n	341831f4 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
341831d2:	f7fe fdd3 	bl	34181d7c <LL_RCC_PLL4_IsEnabledBypass>
341831d6:	4603      	mov	r3, r0
341831d8:	2b00      	cmp	r3, #0
341831da:	d10b      	bne.n	341831f4 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
341831dc:	2300      	movs	r3, #0
341831de:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341831e0:	e008      	b.n	341831f4 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
341831e2:	2300      	movs	r3, #0
341831e4:	60fb      	str	r3, [r7, #12]
      break;
341831e6:	e006      	b.n	341831f6 <RCC_IC_CheckPLLSources+0xba>
      break;
341831e8:	bf00      	nop
341831ea:	e004      	b.n	341831f6 <RCC_IC_CheckPLLSources+0xba>
      break;
341831ec:	bf00      	nop
341831ee:	e002      	b.n	341831f6 <RCC_IC_CheckPLLSources+0xba>
      break;
341831f0:	bf00      	nop
341831f2:	e000      	b.n	341831f6 <RCC_IC_CheckPLLSources+0xba>
      break;
341831f4:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
341831f6:	683b      	ldr	r3, [r7, #0]
341831f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341831fc:	d03a      	beq.n	34183274 <RCC_IC_CheckPLLSources+0x138>
341831fe:	683b      	ldr	r3, [r7, #0]
34183200:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183204:	d843      	bhi.n	3418328e <RCC_IC_CheckPLLSources+0x152>
34183206:	683b      	ldr	r3, [r7, #0]
34183208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418320c:	d025      	beq.n	3418325a <RCC_IC_CheckPLLSources+0x11e>
3418320e:	683b      	ldr	r3, [r7, #0]
34183210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183214:	d83b      	bhi.n	3418328e <RCC_IC_CheckPLLSources+0x152>
34183216:	683b      	ldr	r3, [r7, #0]
34183218:	2b00      	cmp	r3, #0
3418321a:	d004      	beq.n	34183226 <RCC_IC_CheckPLLSources+0xea>
3418321c:	683b      	ldr	r3, [r7, #0]
3418321e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183222:	d00d      	beq.n	34183240 <RCC_IC_CheckPLLSources+0x104>
34183224:	e033      	b.n	3418328e <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34183226:	f7fe fcf3 	bl	34181c10 <LL_RCC_PLL1_IsReady>
3418322a:	4603      	mov	r3, r0
3418322c:	2b00      	cmp	r3, #0
3418322e:	d131      	bne.n	34183294 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34183230:	f7fe fd02 	bl	34181c38 <LL_RCC_PLL1_IsEnabledBypass>
34183234:	4603      	mov	r3, r0
34183236:	2b00      	cmp	r3, #0
34183238:	d12c      	bne.n	34183294 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3418323a:	2300      	movs	r3, #0
3418323c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418323e:	e029      	b.n	34183294 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34183240:	f7fe fd1c 	bl	34181c7c <LL_RCC_PLL2_IsReady>
34183244:	4603      	mov	r3, r0
34183246:	2b00      	cmp	r3, #0
34183248:	d126      	bne.n	34183298 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418324a:	f7fe fd2b 	bl	34181ca4 <LL_RCC_PLL2_IsEnabledBypass>
3418324e:	4603      	mov	r3, r0
34183250:	2b00      	cmp	r3, #0
34183252:	d121      	bne.n	34183298 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34183254:	2300      	movs	r3, #0
34183256:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183258:	e01e      	b.n	34183298 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418325a:	f7fe fd45 	bl	34181ce8 <LL_RCC_PLL3_IsReady>
3418325e:	4603      	mov	r3, r0
34183260:	2b00      	cmp	r3, #0
34183262:	d11b      	bne.n	3418329c <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34183264:	f7fe fd54 	bl	34181d10 <LL_RCC_PLL3_IsEnabledBypass>
34183268:	4603      	mov	r3, r0
3418326a:	2b00      	cmp	r3, #0
3418326c:	d116      	bne.n	3418329c <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3418326e:	2300      	movs	r3, #0
34183270:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183272:	e013      	b.n	3418329c <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34183274:	f7fe fd6e 	bl	34181d54 <LL_RCC_PLL4_IsReady>
34183278:	4603      	mov	r3, r0
3418327a:	2b00      	cmp	r3, #0
3418327c:	d110      	bne.n	341832a0 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418327e:	f7fe fd7d 	bl	34181d7c <LL_RCC_PLL4_IsEnabledBypass>
34183282:	4603      	mov	r3, r0
34183284:	2b00      	cmp	r3, #0
34183286:	d10b      	bne.n	341832a0 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34183288:	2300      	movs	r3, #0
3418328a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418328c:	e008      	b.n	341832a0 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418328e:	2300      	movs	r3, #0
34183290:	60fb      	str	r3, [r7, #12]
      break;
34183292:	e006      	b.n	341832a2 <RCC_IC_CheckPLLSources+0x166>
      break;
34183294:	bf00      	nop
34183296:	e004      	b.n	341832a2 <RCC_IC_CheckPLLSources+0x166>
      break;
34183298:	bf00      	nop
3418329a:	e002      	b.n	341832a2 <RCC_IC_CheckPLLSources+0x166>
      break;
3418329c:	bf00      	nop
3418329e:	e000      	b.n	341832a2 <RCC_IC_CheckPLLSources+0x166>
      break;
341832a0:	bf00      	nop
  }

  return ret;
341832a2:	68fb      	ldr	r3, [r7, #12]
}
341832a4:	4618      	mov	r0, r3
341832a6:	3710      	adds	r7, #16
341832a8:	46bd      	mov	sp, r7
341832aa:	bd80      	pop	{r7, pc}

341832ac <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
341832ac:	b480      	push	{r7}
341832ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
341832b0:	4b05      	ldr	r3, [pc, #20]	@ (341832c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
341832b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341832b4:	4a04      	ldr	r2, [pc, #16]	@ (341832c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
341832b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
341832ba:	6553      	str	r3, [r2, #84]	@ 0x54
}
341832bc:	bf00      	nop
341832be:	46bd      	mov	sp, r7
341832c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341832c4:	4770      	bx	lr
341832c6:	bf00      	nop
341832c8:	56028000 	.word	0x56028000

341832cc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
341832cc:	b480      	push	{r7}
341832ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
341832d0:	4b05      	ldr	r3, [pc, #20]	@ (341832e8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
341832d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341832d4:	4a04      	ldr	r2, [pc, #16]	@ (341832e8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
341832d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341832da:	6553      	str	r3, [r2, #84]	@ 0x54
}
341832dc:	bf00      	nop
341832de:	46bd      	mov	sp, r7
341832e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341832e4:	4770      	bx	lr
341832e6:	bf00      	nop
341832e8:	56028000 	.word	0x56028000

341832ec <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
341832ec:	b480      	push	{r7}
341832ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
341832f0:	4b06      	ldr	r3, [pc, #24]	@ (3418330c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
341832f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341832f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341832f8:	2b40      	cmp	r3, #64	@ 0x40
341832fa:	d101      	bne.n	34183300 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
341832fc:	2301      	movs	r3, #1
341832fe:	e000      	b.n	34183302 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34183300:	2300      	movs	r3, #0
}
34183302:	4618      	mov	r0, r3
34183304:	46bd      	mov	sp, r7
34183306:	f85d 7b04 	ldr.w	r7, [sp], #4
3418330a:	4770      	bx	lr
3418330c:	56028000 	.word	0x56028000

34183310 <LL_RCC_HSE_IsReady>:
{
34183310:	b480      	push	{r7}
34183312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34183314:	4b06      	ldr	r3, [pc, #24]	@ (34183330 <LL_RCC_HSE_IsReady+0x20>)
34183316:	685b      	ldr	r3, [r3, #4]
34183318:	f003 0310 	and.w	r3, r3, #16
3418331c:	2b00      	cmp	r3, #0
3418331e:	d001      	beq.n	34183324 <LL_RCC_HSE_IsReady+0x14>
34183320:	2301      	movs	r3, #1
34183322:	e000      	b.n	34183326 <LL_RCC_HSE_IsReady+0x16>
34183324:	2300      	movs	r3, #0
}
34183326:	4618      	mov	r0, r3
34183328:	46bd      	mov	sp, r7
3418332a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418332e:	4770      	bx	lr
34183330:	56028000 	.word	0x56028000

34183334 <LL_RCC_HSI_IsReady>:
{
34183334:	b480      	push	{r7}
34183336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34183338:	4b06      	ldr	r3, [pc, #24]	@ (34183354 <LL_RCC_HSI_IsReady+0x20>)
3418333a:	685b      	ldr	r3, [r3, #4]
3418333c:	f003 0308 	and.w	r3, r3, #8
34183340:	2b00      	cmp	r3, #0
34183342:	d001      	beq.n	34183348 <LL_RCC_HSI_IsReady+0x14>
34183344:	2301      	movs	r3, #1
34183346:	e000      	b.n	3418334a <LL_RCC_HSI_IsReady+0x16>
34183348:	2300      	movs	r3, #0
}
3418334a:	4618      	mov	r0, r3
3418334c:	46bd      	mov	sp, r7
3418334e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183352:	4770      	bx	lr
34183354:	56028000 	.word	0x56028000

34183358 <LL_RCC_HSI_GetDivider>:
{
34183358:	b480      	push	{r7}
3418335a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418335c:	4b04      	ldr	r3, [pc, #16]	@ (34183370 <LL_RCC_HSI_GetDivider+0x18>)
3418335e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34183360:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34183364:	4618      	mov	r0, r3
34183366:	46bd      	mov	sp, r7
34183368:	f85d 7b04 	ldr.w	r7, [sp], #4
3418336c:	4770      	bx	lr
3418336e:	bf00      	nop
34183370:	56028000 	.word	0x56028000

34183374 <LL_RCC_MSI_IsReady>:
{
34183374:	b480      	push	{r7}
34183376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34183378:	4b06      	ldr	r3, [pc, #24]	@ (34183394 <LL_RCC_MSI_IsReady+0x20>)
3418337a:	685b      	ldr	r3, [r3, #4]
3418337c:	f003 0304 	and.w	r3, r3, #4
34183380:	2b00      	cmp	r3, #0
34183382:	d001      	beq.n	34183388 <LL_RCC_MSI_IsReady+0x14>
34183384:	2301      	movs	r3, #1
34183386:	e000      	b.n	3418338a <LL_RCC_MSI_IsReady+0x16>
34183388:	2300      	movs	r3, #0
}
3418338a:	4618      	mov	r0, r3
3418338c:	46bd      	mov	sp, r7
3418338e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183392:	4770      	bx	lr
34183394:	56028000 	.word	0x56028000

34183398 <LL_RCC_MSI_GetFrequency>:
{
34183398:	b480      	push	{r7}
3418339a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418339c:	4b04      	ldr	r3, [pc, #16]	@ (341833b0 <LL_RCC_MSI_GetFrequency+0x18>)
3418339e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341833a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
341833a4:	4618      	mov	r0, r3
341833a6:	46bd      	mov	sp, r7
341833a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341833ac:	4770      	bx	lr
341833ae:	bf00      	nop
341833b0:	56028000 	.word	0x56028000

341833b4 <LL_RCC_LSE_IsReady>:
{
341833b4:	b480      	push	{r7}
341833b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
341833b8:	4b06      	ldr	r3, [pc, #24]	@ (341833d4 <LL_RCC_LSE_IsReady+0x20>)
341833ba:	685b      	ldr	r3, [r3, #4]
341833bc:	f003 0302 	and.w	r3, r3, #2
341833c0:	2b00      	cmp	r3, #0
341833c2:	d001      	beq.n	341833c8 <LL_RCC_LSE_IsReady+0x14>
341833c4:	2301      	movs	r3, #1
341833c6:	e000      	b.n	341833ca <LL_RCC_LSE_IsReady+0x16>
341833c8:	2300      	movs	r3, #0
}
341833ca:	4618      	mov	r0, r3
341833cc:	46bd      	mov	sp, r7
341833ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341833d2:	4770      	bx	lr
341833d4:	56028000 	.word	0x56028000

341833d8 <LL_RCC_LSI_IsReady>:
{
341833d8:	b480      	push	{r7}
341833da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341833dc:	4b04      	ldr	r3, [pc, #16]	@ (341833f0 <LL_RCC_LSI_IsReady+0x18>)
341833de:	685b      	ldr	r3, [r3, #4]
341833e0:	f003 0301 	and.w	r3, r3, #1
}
341833e4:	4618      	mov	r0, r3
341833e6:	46bd      	mov	sp, r7
341833e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341833ec:	4770      	bx	lr
341833ee:	bf00      	nop
341833f0:	56028000 	.word	0x56028000

341833f4 <LL_RCC_GetAHBPrescaler>:
{
341833f4:	b480      	push	{r7}
341833f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
341833f8:	4b04      	ldr	r3, [pc, #16]	@ (3418340c <LL_RCC_GetAHBPrescaler+0x18>)
341833fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341833fc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34183400:	4618      	mov	r0, r3
34183402:	46bd      	mov	sp, r7
34183404:	f85d 7b04 	ldr.w	r7, [sp], #4
34183408:	4770      	bx	lr
3418340a:	bf00      	nop
3418340c:	56028000 	.word	0x56028000

34183410 <LL_RCC_GetAPB1Prescaler>:
{
34183410:	b480      	push	{r7}
34183412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34183414:	4b04      	ldr	r3, [pc, #16]	@ (34183428 <LL_RCC_GetAPB1Prescaler+0x18>)
34183416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183418:	f003 0307 	and.w	r3, r3, #7
}
3418341c:	4618      	mov	r0, r3
3418341e:	46bd      	mov	sp, r7
34183420:	f85d 7b04 	ldr.w	r7, [sp], #4
34183424:	4770      	bx	lr
34183426:	bf00      	nop
34183428:	56028000 	.word	0x56028000

3418342c <LL_RCC_GetAPB2Prescaler>:
{
3418342c:	b480      	push	{r7}
3418342e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34183430:	4b04      	ldr	r3, [pc, #16]	@ (34183444 <LL_RCC_GetAPB2Prescaler+0x18>)
34183432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34183438:	4618      	mov	r0, r3
3418343a:	46bd      	mov	sp, r7
3418343c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183440:	4770      	bx	lr
34183442:	bf00      	nop
34183444:	56028000 	.word	0x56028000

34183448 <LL_RCC_GetAPB4Prescaler>:
{
34183448:	b480      	push	{r7}
3418344a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3418344c:	4b04      	ldr	r3, [pc, #16]	@ (34183460 <LL_RCC_GetAPB4Prescaler+0x18>)
3418344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183450:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34183454:	4618      	mov	r0, r3
34183456:	46bd      	mov	sp, r7
34183458:	f85d 7b04 	ldr.w	r7, [sp], #4
3418345c:	4770      	bx	lr
3418345e:	bf00      	nop
34183460:	56028000 	.word	0x56028000

34183464 <LL_RCC_GetAPB5Prescaler>:
{
34183464:	b480      	push	{r7}
34183466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34183468:	4b04      	ldr	r3, [pc, #16]	@ (3418347c <LL_RCC_GetAPB5Prescaler+0x18>)
3418346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418346c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34183470:	4618      	mov	r0, r3
34183472:	46bd      	mov	sp, r7
34183474:	f85d 7b04 	ldr.w	r7, [sp], #4
34183478:	4770      	bx	lr
3418347a:	bf00      	nop
3418347c:	56028000 	.word	0x56028000

34183480 <LL_RCC_SetClockSource>:
{
34183480:	b480      	push	{r7}
34183482:	b085      	sub	sp, #20
34183484:	af00      	add	r7, sp, #0
34183486:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34183488:	687b      	ldr	r3, [r7, #4]
3418348a:	b2da      	uxtb	r2, r3
3418348c:	4b10      	ldr	r3, [pc, #64]	@ (341834d0 <LL_RCC_SetClockSource+0x50>)
3418348e:	4413      	add	r3, r2
34183490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34183492:	68fb      	ldr	r3, [r7, #12]
34183494:	681a      	ldr	r2, [r3, #0]
34183496:	687b      	ldr	r3, [r7, #4]
34183498:	0e19      	lsrs	r1, r3, #24
3418349a:	687b      	ldr	r3, [r7, #4]
3418349c:	0a1b      	lsrs	r3, r3, #8
3418349e:	f003 031f 	and.w	r3, r3, #31
341834a2:	fa01 f303 	lsl.w	r3, r1, r3
341834a6:	43db      	mvns	r3, r3
341834a8:	401a      	ands	r2, r3
341834aa:	687b      	ldr	r3, [r7, #4]
341834ac:	0c1b      	lsrs	r3, r3, #16
341834ae:	b2d9      	uxtb	r1, r3
341834b0:	687b      	ldr	r3, [r7, #4]
341834b2:	0a1b      	lsrs	r3, r3, #8
341834b4:	f003 031f 	and.w	r3, r3, #31
341834b8:	fa01 f303 	lsl.w	r3, r1, r3
341834bc:	431a      	orrs	r2, r3
341834be:	68fb      	ldr	r3, [r7, #12]
341834c0:	601a      	str	r2, [r3, #0]
}
341834c2:	bf00      	nop
341834c4:	3714      	adds	r7, #20
341834c6:	46bd      	mov	sp, r7
341834c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341834cc:	4770      	bx	lr
341834ce:	bf00      	nop
341834d0:	56028144 	.word	0x56028144

341834d4 <LL_RCC_GetADCPrescaler>:
{
341834d4:	b480      	push	{r7}
341834d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
341834d8:	4b04      	ldr	r3, [pc, #16]	@ (341834ec <LL_RCC_GetADCPrescaler+0x18>)
341834da:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341834de:	0a1b      	lsrs	r3, r3, #8
341834e0:	b2db      	uxtb	r3, r3
}
341834e2:	4618      	mov	r0, r3
341834e4:	46bd      	mov	sp, r7
341834e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341834ea:	4770      	bx	lr
341834ec:	56028000 	.word	0x56028000

341834f0 <LL_RCC_SetADFClockSource>:
{
341834f0:	b480      	push	{r7}
341834f2:	b083      	sub	sp, #12
341834f4:	af00      	add	r7, sp, #0
341834f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
341834f8:	4b07      	ldr	r3, [pc, #28]	@ (34183518 <LL_RCC_SetADFClockSource+0x28>)
341834fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341834fe:	f023 0207 	bic.w	r2, r3, #7
34183502:	4905      	ldr	r1, [pc, #20]	@ (34183518 <LL_RCC_SetADFClockSource+0x28>)
34183504:	687b      	ldr	r3, [r7, #4]
34183506:	4313      	orrs	r3, r2
34183508:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3418350c:	bf00      	nop
3418350e:	370c      	adds	r7, #12
34183510:	46bd      	mov	sp, r7
34183512:	f85d 7b04 	ldr.w	r7, [sp], #4
34183516:	4770      	bx	lr
34183518:	56028000 	.word	0x56028000

3418351c <LL_RCC_SetCLKPClockSource>:
{
3418351c:	b480      	push	{r7}
3418351e:	b083      	sub	sp, #12
34183520:	af00      	add	r7, sp, #0
34183522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34183524:	4b07      	ldr	r3, [pc, #28]	@ (34183544 <LL_RCC_SetCLKPClockSource+0x28>)
34183526:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418352a:	f023 0207 	bic.w	r2, r3, #7
3418352e:	4905      	ldr	r1, [pc, #20]	@ (34183544 <LL_RCC_SetCLKPClockSource+0x28>)
34183530:	687b      	ldr	r3, [r7, #4]
34183532:	4313      	orrs	r3, r2
34183534:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183538:	bf00      	nop
3418353a:	370c      	adds	r7, #12
3418353c:	46bd      	mov	sp, r7
3418353e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183542:	4770      	bx	lr
34183544:	56028000 	.word	0x56028000

34183548 <LL_RCC_SetDCMIPPClockSource>:
{
34183548:	b480      	push	{r7}
3418354a:	b083      	sub	sp, #12
3418354c:	af00      	add	r7, sp, #0
3418354e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34183550:	4b07      	ldr	r3, [pc, #28]	@ (34183570 <LL_RCC_SetDCMIPPClockSource+0x28>)
34183552:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3418355a:	4905      	ldr	r1, [pc, #20]	@ (34183570 <LL_RCC_SetDCMIPPClockSource+0x28>)
3418355c:	687b      	ldr	r3, [r7, #4]
3418355e:	4313      	orrs	r3, r2
34183560:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34183564:	bf00      	nop
34183566:	370c      	adds	r7, #12
34183568:	46bd      	mov	sp, r7
3418356a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418356e:	4770      	bx	lr
34183570:	56028000 	.word	0x56028000

34183574 <LL_RCC_SetETHClockSource>:
{
34183574:	b480      	push	{r7}
34183576:	b083      	sub	sp, #12
34183578:	af00      	add	r7, sp, #0
3418357a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3418357c:	4b07      	ldr	r3, [pc, #28]	@ (3418359c <LL_RCC_SetETHClockSource+0x28>)
3418357e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183582:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34183586:	4905      	ldr	r1, [pc, #20]	@ (3418359c <LL_RCC_SetETHClockSource+0x28>)
34183588:	687b      	ldr	r3, [r7, #4]
3418358a:	4313      	orrs	r3, r2
3418358c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183590:	bf00      	nop
34183592:	370c      	adds	r7, #12
34183594:	46bd      	mov	sp, r7
34183596:	f85d 7b04 	ldr.w	r7, [sp], #4
3418359a:	4770      	bx	lr
3418359c:	56028000 	.word	0x56028000

341835a0 <LL_RCC_SetETHPHYInterface>:
{
341835a0:	b480      	push	{r7}
341835a2:	b083      	sub	sp, #12
341835a4:	af00      	add	r7, sp, #0
341835a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
341835a8:	4b07      	ldr	r3, [pc, #28]	@ (341835c8 <LL_RCC_SetETHPHYInterface+0x28>)
341835aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341835ae:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341835b2:	4905      	ldr	r1, [pc, #20]	@ (341835c8 <LL_RCC_SetETHPHYInterface+0x28>)
341835b4:	687b      	ldr	r3, [r7, #4]
341835b6:	4313      	orrs	r3, r2
341835b8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
341835bc:	bf00      	nop
341835be:	370c      	adds	r7, #12
341835c0:	46bd      	mov	sp, r7
341835c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341835c6:	4770      	bx	lr
341835c8:	56028000 	.word	0x56028000

341835cc <LL_RCC_GetETH1PTPDivider>:
{
341835cc:	b480      	push	{r7}
341835ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
341835d0:	4b04      	ldr	r3, [pc, #16]	@ (341835e4 <LL_RCC_GetETH1PTPDivider+0x18>)
341835d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341835d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
341835da:	4618      	mov	r0, r3
341835dc:	46bd      	mov	sp, r7
341835de:	f85d 7b04 	ldr.w	r7, [sp], #4
341835e2:	4770      	bx	lr
341835e4:	56028000 	.word	0x56028000

341835e8 <LL_RCC_SetETHREFRXClockSource>:
{
341835e8:	b480      	push	{r7}
341835ea:	b083      	sub	sp, #12
341835ec:	af00      	add	r7, sp, #0
341835ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
341835f0:	4b07      	ldr	r3, [pc, #28]	@ (34183610 <LL_RCC_SetETHREFRXClockSource+0x28>)
341835f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341835f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
341835fa:	4905      	ldr	r1, [pc, #20]	@ (34183610 <LL_RCC_SetETHREFRXClockSource+0x28>)
341835fc:	687b      	ldr	r3, [r7, #4]
341835fe:	4313      	orrs	r3, r2
34183600:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183604:	bf00      	nop
34183606:	370c      	adds	r7, #12
34183608:	46bd      	mov	sp, r7
3418360a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418360e:	4770      	bx	lr
34183610:	56028000 	.word	0x56028000

34183614 <LL_RCC_SetETHREFTXClockSource>:
{
34183614:	b480      	push	{r7}
34183616:	b083      	sub	sp, #12
34183618:	af00      	add	r7, sp, #0
3418361a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
3418361c:	4b07      	ldr	r3, [pc, #28]	@ (3418363c <LL_RCC_SetETHREFTXClockSource+0x28>)
3418361e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183622:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183626:	4905      	ldr	r1, [pc, #20]	@ (3418363c <LL_RCC_SetETHREFTXClockSource+0x28>)
34183628:	687b      	ldr	r3, [r7, #4]
3418362a:	4313      	orrs	r3, r2
3418362c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183630:	bf00      	nop
34183632:	370c      	adds	r7, #12
34183634:	46bd      	mov	sp, r7
34183636:	f85d 7b04 	ldr.w	r7, [sp], #4
3418363a:	4770      	bx	lr
3418363c:	56028000 	.word	0x56028000

34183640 <LL_RCC_SetFDCANClockSource>:
{
34183640:	b480      	push	{r7}
34183642:	b083      	sub	sp, #12
34183644:	af00      	add	r7, sp, #0
34183646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34183648:	4b07      	ldr	r3, [pc, #28]	@ (34183668 <LL_RCC_SetFDCANClockSource+0x28>)
3418364a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418364e:	f023 0203 	bic.w	r2, r3, #3
34183652:	4905      	ldr	r1, [pc, #20]	@ (34183668 <LL_RCC_SetFDCANClockSource+0x28>)
34183654:	687b      	ldr	r3, [r7, #4]
34183656:	4313      	orrs	r3, r2
34183658:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418365c:	bf00      	nop
3418365e:	370c      	adds	r7, #12
34183660:	46bd      	mov	sp, r7
34183662:	f85d 7b04 	ldr.w	r7, [sp], #4
34183666:	4770      	bx	lr
34183668:	56028000 	.word	0x56028000

3418366c <LL_RCC_SetFMCClockSource>:
{
3418366c:	b480      	push	{r7}
3418366e:	b083      	sub	sp, #12
34183670:	af00      	add	r7, sp, #0
34183672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34183674:	4b07      	ldr	r3, [pc, #28]	@ (34183694 <LL_RCC_SetFMCClockSource+0x28>)
34183676:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418367a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418367e:	4905      	ldr	r1, [pc, #20]	@ (34183694 <LL_RCC_SetFMCClockSource+0x28>)
34183680:	687b      	ldr	r3, [r7, #4]
34183682:	4313      	orrs	r3, r2
34183684:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34183688:	bf00      	nop
3418368a:	370c      	adds	r7, #12
3418368c:	46bd      	mov	sp, r7
3418368e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183692:	4770      	bx	lr
34183694:	56028000 	.word	0x56028000

34183698 <LL_RCC_SetI2CClockSource>:
{
34183698:	b580      	push	{r7, lr}
3418369a:	b082      	sub	sp, #8
3418369c:	af00      	add	r7, sp, #0
3418369e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341836a0:	6878      	ldr	r0, [r7, #4]
341836a2:	f7ff feed 	bl	34183480 <LL_RCC_SetClockSource>
}
341836a6:	bf00      	nop
341836a8:	3708      	adds	r7, #8
341836aa:	46bd      	mov	sp, r7
341836ac:	bd80      	pop	{r7, pc}

341836ae <LL_RCC_SetI3CClockSource>:
{
341836ae:	b580      	push	{r7, lr}
341836b0:	b082      	sub	sp, #8
341836b2:	af00      	add	r7, sp, #0
341836b4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341836b6:	6878      	ldr	r0, [r7, #4]
341836b8:	f7ff fee2 	bl	34183480 <LL_RCC_SetClockSource>
}
341836bc:	bf00      	nop
341836be:	3708      	adds	r7, #8
341836c0:	46bd      	mov	sp, r7
341836c2:	bd80      	pop	{r7, pc}

341836c4 <LL_RCC_SetLPTIMClockSource>:
{
341836c4:	b580      	push	{r7, lr}
341836c6:	b082      	sub	sp, #8
341836c8:	af00      	add	r7, sp, #0
341836ca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341836cc:	6878      	ldr	r0, [r7, #4]
341836ce:	f7ff fed7 	bl	34183480 <LL_RCC_SetClockSource>
}
341836d2:	bf00      	nop
341836d4:	3708      	adds	r7, #8
341836d6:	46bd      	mov	sp, r7
341836d8:	bd80      	pop	{r7, pc}
	...

341836dc <LL_RCC_SetLPUARTClockSource>:
{
341836dc:	b480      	push	{r7}
341836de:	b083      	sub	sp, #12
341836e0:	af00      	add	r7, sp, #0
341836e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
341836e4:	4b07      	ldr	r3, [pc, #28]	@ (34183704 <LL_RCC_SetLPUARTClockSource+0x28>)
341836e6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
341836ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
341836ee:	4905      	ldr	r1, [pc, #20]	@ (34183704 <LL_RCC_SetLPUARTClockSource+0x28>)
341836f0:	687b      	ldr	r3, [r7, #4]
341836f2:	4313      	orrs	r3, r2
341836f4:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
341836f8:	bf00      	nop
341836fa:	370c      	adds	r7, #12
341836fc:	46bd      	mov	sp, r7
341836fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34183702:	4770      	bx	lr
34183704:	56028000 	.word	0x56028000

34183708 <LL_RCC_SetLTDCClockSource>:
{
34183708:	b480      	push	{r7}
3418370a:	b083      	sub	sp, #12
3418370c:	af00      	add	r7, sp, #0
3418370e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34183710:	4b07      	ldr	r3, [pc, #28]	@ (34183730 <LL_RCC_SetLTDCClockSource+0x28>)
34183712:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34183716:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418371a:	4905      	ldr	r1, [pc, #20]	@ (34183730 <LL_RCC_SetLTDCClockSource+0x28>)
3418371c:	687b      	ldr	r3, [r7, #4]
3418371e:	4313      	orrs	r3, r2
34183720:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34183724:	bf00      	nop
34183726:	370c      	adds	r7, #12
34183728:	46bd      	mov	sp, r7
3418372a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418372e:	4770      	bx	lr
34183730:	56028000 	.word	0x56028000

34183734 <LL_RCC_SetMDFClockSource>:
{
34183734:	b480      	push	{r7}
34183736:	b083      	sub	sp, #12
34183738:	af00      	add	r7, sp, #0
3418373a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3418373c:	4b07      	ldr	r3, [pc, #28]	@ (3418375c <LL_RCC_SetMDFClockSource+0x28>)
3418373e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34183742:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183746:	4905      	ldr	r1, [pc, #20]	@ (3418375c <LL_RCC_SetMDFClockSource+0x28>)
34183748:	687b      	ldr	r3, [r7, #4]
3418374a:	4313      	orrs	r3, r2
3418374c:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34183750:	bf00      	nop
34183752:	370c      	adds	r7, #12
34183754:	46bd      	mov	sp, r7
34183756:	f85d 7b04 	ldr.w	r7, [sp], #4
3418375a:	4770      	bx	lr
3418375c:	56028000 	.word	0x56028000

34183760 <LL_RCC_SetOTGPHYClockSource>:
{
34183760:	b580      	push	{r7, lr}
34183762:	b082      	sub	sp, #8
34183764:	af00      	add	r7, sp, #0
34183766:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183768:	6878      	ldr	r0, [r7, #4]
3418376a:	f7ff fe89 	bl	34183480 <LL_RCC_SetClockSource>
}
3418376e:	bf00      	nop
34183770:	3708      	adds	r7, #8
34183772:	46bd      	mov	sp, r7
34183774:	bd80      	pop	{r7, pc}

34183776 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34183776:	b580      	push	{r7, lr}
34183778:	b082      	sub	sp, #8
3418377a:	af00      	add	r7, sp, #0
3418377c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418377e:	6878      	ldr	r0, [r7, #4]
34183780:	f7ff fe7e 	bl	34183480 <LL_RCC_SetClockSource>
}
34183784:	bf00      	nop
34183786:	3708      	adds	r7, #8
34183788:	46bd      	mov	sp, r7
3418378a:	bd80      	pop	{r7, pc}

3418378c <LL_RCC_SetPSSIClockSource>:
{
3418378c:	b480      	push	{r7}
3418378e:	b083      	sub	sp, #12
34183790:	af00      	add	r7, sp, #0
34183792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34183794:	4b07      	ldr	r3, [pc, #28]	@ (341837b4 <LL_RCC_SetPSSIClockSource+0x28>)
34183796:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418379a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418379e:	4905      	ldr	r1, [pc, #20]	@ (341837b4 <LL_RCC_SetPSSIClockSource+0x28>)
341837a0:	687b      	ldr	r3, [r7, #4]
341837a2:	4313      	orrs	r3, r2
341837a4:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341837a8:	bf00      	nop
341837aa:	370c      	adds	r7, #12
341837ac:	46bd      	mov	sp, r7
341837ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341837b2:	4770      	bx	lr
341837b4:	56028000 	.word	0x56028000

341837b8 <LL_RCC_SetSAIClockSource>:
{
341837b8:	b580      	push	{r7, lr}
341837ba:	b082      	sub	sp, #8
341837bc:	af00      	add	r7, sp, #0
341837be:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341837c0:	6878      	ldr	r0, [r7, #4]
341837c2:	f7ff fe5d 	bl	34183480 <LL_RCC_SetClockSource>
}
341837c6:	bf00      	nop
341837c8:	3708      	adds	r7, #8
341837ca:	46bd      	mov	sp, r7
341837cc:	bd80      	pop	{r7, pc}

341837ce <LL_RCC_SetSDMMCClockSource>:
{
341837ce:	b580      	push	{r7, lr}
341837d0:	b082      	sub	sp, #8
341837d2:	af00      	add	r7, sp, #0
341837d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341837d6:	6878      	ldr	r0, [r7, #4]
341837d8:	f7ff fe52 	bl	34183480 <LL_RCC_SetClockSource>
}
341837dc:	bf00      	nop
341837de:	3708      	adds	r7, #8
341837e0:	46bd      	mov	sp, r7
341837e2:	bd80      	pop	{r7, pc}

341837e4 <LL_RCC_SetSPDIFRXClockSource>:
{
341837e4:	b480      	push	{r7}
341837e6:	b083      	sub	sp, #12
341837e8:	af00      	add	r7, sp, #0
341837ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
341837ec:	4b07      	ldr	r3, [pc, #28]	@ (3418380c <LL_RCC_SetSPDIFRXClockSource+0x28>)
341837ee:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
341837f2:	f023 0207 	bic.w	r2, r3, #7
341837f6:	4905      	ldr	r1, [pc, #20]	@ (3418380c <LL_RCC_SetSPDIFRXClockSource+0x28>)
341837f8:	687b      	ldr	r3, [r7, #4]
341837fa:	4313      	orrs	r3, r2
341837fc:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34183800:	bf00      	nop
34183802:	370c      	adds	r7, #12
34183804:	46bd      	mov	sp, r7
34183806:	f85d 7b04 	ldr.w	r7, [sp], #4
3418380a:	4770      	bx	lr
3418380c:	56028000 	.word	0x56028000

34183810 <LL_RCC_SetSPIClockSource>:
{
34183810:	b580      	push	{r7, lr}
34183812:	b082      	sub	sp, #8
34183814:	af00      	add	r7, sp, #0
34183816:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183818:	6878      	ldr	r0, [r7, #4]
3418381a:	f7ff fe31 	bl	34183480 <LL_RCC_SetClockSource>
}
3418381e:	bf00      	nop
34183820:	3708      	adds	r7, #8
34183822:	46bd      	mov	sp, r7
34183824:	bd80      	pop	{r7, pc}

34183826 <LL_RCC_SetUSARTClockSource>:
{
34183826:	b580      	push	{r7, lr}
34183828:	b082      	sub	sp, #8
3418382a:	af00      	add	r7, sp, #0
3418382c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418382e:	6878      	ldr	r0, [r7, #4]
34183830:	f7ff fe26 	bl	34183480 <LL_RCC_SetClockSource>
}
34183834:	bf00      	nop
34183836:	3708      	adds	r7, #8
34183838:	46bd      	mov	sp, r7
3418383a:	bd80      	pop	{r7, pc}

3418383c <LL_RCC_SetXSPIClockSource>:
{
3418383c:	b580      	push	{r7, lr}
3418383e:	b082      	sub	sp, #8
34183840:	af00      	add	r7, sp, #0
34183842:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183844:	6878      	ldr	r0, [r7, #4]
34183846:	f7ff fe1b 	bl	34183480 <LL_RCC_SetClockSource>
}
3418384a:	bf00      	nop
3418384c:	3708      	adds	r7, #8
3418384e:	46bd      	mov	sp, r7
34183850:	bd80      	pop	{r7, pc}
	...

34183854 <LL_RCC_GetClockSource>:
{
34183854:	b480      	push	{r7}
34183856:	b085      	sub	sp, #20
34183858:	af00      	add	r7, sp, #0
3418385a:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3418385c:	687b      	ldr	r3, [r7, #4]
3418385e:	b2da      	uxtb	r2, r3
34183860:	4b0e      	ldr	r3, [pc, #56]	@ (3418389c <LL_RCC_GetClockSource+0x48>)
34183862:	4413      	add	r3, r2
34183864:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34183866:	68fb      	ldr	r3, [r7, #12]
34183868:	681a      	ldr	r2, [r3, #0]
3418386a:	687b      	ldr	r3, [r7, #4]
3418386c:	0e19      	lsrs	r1, r3, #24
3418386e:	687b      	ldr	r3, [r7, #4]
34183870:	0a1b      	lsrs	r3, r3, #8
34183872:	f003 031f 	and.w	r3, r3, #31
34183876:	fa01 f303 	lsl.w	r3, r1, r3
3418387a:	401a      	ands	r2, r3
3418387c:	687b      	ldr	r3, [r7, #4]
3418387e:	0a1b      	lsrs	r3, r3, #8
34183880:	f003 031f 	and.w	r3, r3, #31
34183884:	fa22 f303 	lsr.w	r3, r2, r3
34183888:	041a      	lsls	r2, r3, #16
3418388a:	687b      	ldr	r3, [r7, #4]
3418388c:	4313      	orrs	r3, r2
}
3418388e:	4618      	mov	r0, r3
34183890:	3714      	adds	r7, #20
34183892:	46bd      	mov	sp, r7
34183894:	f85d 7b04 	ldr.w	r7, [sp], #4
34183898:	4770      	bx	lr
3418389a:	bf00      	nop
3418389c:	56028144 	.word	0x56028144

341838a0 <LL_RCC_GetADCClockSource>:
{
341838a0:	b480      	push	{r7}
341838a2:	b083      	sub	sp, #12
341838a4:	af00      	add	r7, sp, #0
341838a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
341838a8:	4b05      	ldr	r3, [pc, #20]	@ (341838c0 <LL_RCC_GetADCClockSource+0x20>)
341838aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341838ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
341838b2:	4618      	mov	r0, r3
341838b4:	370c      	adds	r7, #12
341838b6:	46bd      	mov	sp, r7
341838b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341838bc:	4770      	bx	lr
341838be:	bf00      	nop
341838c0:	56028000 	.word	0x56028000

341838c4 <LL_RCC_GetADFClockSource>:
{
341838c4:	b480      	push	{r7}
341838c6:	b083      	sub	sp, #12
341838c8:	af00      	add	r7, sp, #0
341838ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
341838cc:	4b05      	ldr	r3, [pc, #20]	@ (341838e4 <LL_RCC_GetADFClockSource+0x20>)
341838ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341838d2:	f003 0307 	and.w	r3, r3, #7
}
341838d6:	4618      	mov	r0, r3
341838d8:	370c      	adds	r7, #12
341838da:	46bd      	mov	sp, r7
341838dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341838e0:	4770      	bx	lr
341838e2:	bf00      	nop
341838e4:	56028000 	.word	0x56028000

341838e8 <LL_RCC_GetCLKPClockSource>:
{
341838e8:	b480      	push	{r7}
341838ea:	b083      	sub	sp, #12
341838ec:	af00      	add	r7, sp, #0
341838ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
341838f0:	4b05      	ldr	r3, [pc, #20]	@ (34183908 <LL_RCC_GetCLKPClockSource+0x20>)
341838f2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341838f6:	f003 0307 	and.w	r3, r3, #7
}
341838fa:	4618      	mov	r0, r3
341838fc:	370c      	adds	r7, #12
341838fe:	46bd      	mov	sp, r7
34183900:	f85d 7b04 	ldr.w	r7, [sp], #4
34183904:	4770      	bx	lr
34183906:	bf00      	nop
34183908:	56028000 	.word	0x56028000

3418390c <LL_RCC_GetDCMIPPClockSource>:
{
3418390c:	b480      	push	{r7}
3418390e:	b083      	sub	sp, #12
34183910:	af00      	add	r7, sp, #0
34183912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34183914:	4b05      	ldr	r3, [pc, #20]	@ (3418392c <LL_RCC_GetDCMIPPClockSource+0x20>)
34183916:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418391a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418391e:	4618      	mov	r0, r3
34183920:	370c      	adds	r7, #12
34183922:	46bd      	mov	sp, r7
34183924:	f85d 7b04 	ldr.w	r7, [sp], #4
34183928:	4770      	bx	lr
3418392a:	bf00      	nop
3418392c:	56028000 	.word	0x56028000

34183930 <LL_RCC_GetETHClockSource>:
{
34183930:	b480      	push	{r7}
34183932:	b083      	sub	sp, #12
34183934:	af00      	add	r7, sp, #0
34183936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34183938:	4b05      	ldr	r3, [pc, #20]	@ (34183950 <LL_RCC_GetETHClockSource+0x20>)
3418393a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418393e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34183942:	4618      	mov	r0, r3
34183944:	370c      	adds	r7, #12
34183946:	46bd      	mov	sp, r7
34183948:	f85d 7b04 	ldr.w	r7, [sp], #4
3418394c:	4770      	bx	lr
3418394e:	bf00      	nop
34183950:	56028000 	.word	0x56028000

34183954 <LL_RCC_GetETHPTPClockSource>:
{
34183954:	b480      	push	{r7}
34183956:	b083      	sub	sp, #12
34183958:	af00      	add	r7, sp, #0
3418395a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3418395c:	4b05      	ldr	r3, [pc, #20]	@ (34183974 <LL_RCC_GetETHPTPClockSource+0x20>)
3418395e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183962:	f003 0303 	and.w	r3, r3, #3
}
34183966:	4618      	mov	r0, r3
34183968:	370c      	adds	r7, #12
3418396a:	46bd      	mov	sp, r7
3418396c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183970:	4770      	bx	lr
34183972:	bf00      	nop
34183974:	56028000 	.word	0x56028000

34183978 <LL_RCC_GetFDCANClockSource>:
{
34183978:	b480      	push	{r7}
3418397a:	b083      	sub	sp, #12
3418397c:	af00      	add	r7, sp, #0
3418397e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34183980:	4b05      	ldr	r3, [pc, #20]	@ (34183998 <LL_RCC_GetFDCANClockSource+0x20>)
34183982:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183986:	f003 0303 	and.w	r3, r3, #3
}
3418398a:	4618      	mov	r0, r3
3418398c:	370c      	adds	r7, #12
3418398e:	46bd      	mov	sp, r7
34183990:	f85d 7b04 	ldr.w	r7, [sp], #4
34183994:	4770      	bx	lr
34183996:	bf00      	nop
34183998:	56028000 	.word	0x56028000

3418399c <LL_RCC_GetFMCClockSource>:
{
3418399c:	b480      	push	{r7}
3418399e:	b083      	sub	sp, #12
341839a0:	af00      	add	r7, sp, #0
341839a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
341839a4:	4b05      	ldr	r3, [pc, #20]	@ (341839bc <LL_RCC_GetFMCClockSource+0x20>)
341839a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341839aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
341839ae:	4618      	mov	r0, r3
341839b0:	370c      	adds	r7, #12
341839b2:	46bd      	mov	sp, r7
341839b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341839b8:	4770      	bx	lr
341839ba:	bf00      	nop
341839bc:	56028000 	.word	0x56028000

341839c0 <LL_RCC_GetI2CClockSource>:
{
341839c0:	b580      	push	{r7, lr}
341839c2:	b082      	sub	sp, #8
341839c4:	af00      	add	r7, sp, #0
341839c6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341839c8:	6878      	ldr	r0, [r7, #4]
341839ca:	f7ff ff43 	bl	34183854 <LL_RCC_GetClockSource>
341839ce:	4603      	mov	r3, r0
}
341839d0:	4618      	mov	r0, r3
341839d2:	3708      	adds	r7, #8
341839d4:	46bd      	mov	sp, r7
341839d6:	bd80      	pop	{r7, pc}

341839d8 <LL_RCC_GetI3CClockSource>:
{
341839d8:	b580      	push	{r7, lr}
341839da:	b082      	sub	sp, #8
341839dc:	af00      	add	r7, sp, #0
341839de:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341839e0:	6878      	ldr	r0, [r7, #4]
341839e2:	f7ff ff37 	bl	34183854 <LL_RCC_GetClockSource>
341839e6:	4603      	mov	r3, r0
}
341839e8:	4618      	mov	r0, r3
341839ea:	3708      	adds	r7, #8
341839ec:	46bd      	mov	sp, r7
341839ee:	bd80      	pop	{r7, pc}

341839f0 <LL_RCC_GetLPTIMClockSource>:
{
341839f0:	b580      	push	{r7, lr}
341839f2:	b082      	sub	sp, #8
341839f4:	af00      	add	r7, sp, #0
341839f6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341839f8:	6878      	ldr	r0, [r7, #4]
341839fa:	f7ff ff2b 	bl	34183854 <LL_RCC_GetClockSource>
341839fe:	4603      	mov	r3, r0
}
34183a00:	4618      	mov	r0, r3
34183a02:	3708      	adds	r7, #8
34183a04:	46bd      	mov	sp, r7
34183a06:	bd80      	pop	{r7, pc}

34183a08 <LL_RCC_GetLPUARTClockSource>:
{
34183a08:	b480      	push	{r7}
34183a0a:	b083      	sub	sp, #12
34183a0c:	af00      	add	r7, sp, #0
34183a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34183a10:	4b05      	ldr	r3, [pc, #20]	@ (34183a28 <LL_RCC_GetLPUARTClockSource+0x20>)
34183a12:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34183a16:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34183a1a:	4618      	mov	r0, r3
34183a1c:	370c      	adds	r7, #12
34183a1e:	46bd      	mov	sp, r7
34183a20:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a24:	4770      	bx	lr
34183a26:	bf00      	nop
34183a28:	56028000 	.word	0x56028000

34183a2c <LL_RCC_GetLTDCClockSource>:
{
34183a2c:	b480      	push	{r7}
34183a2e:	b083      	sub	sp, #12
34183a30:	af00      	add	r7, sp, #0
34183a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34183a34:	4b05      	ldr	r3, [pc, #20]	@ (34183a4c <LL_RCC_GetLTDCClockSource+0x20>)
34183a36:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34183a3a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34183a3e:	4618      	mov	r0, r3
34183a40:	370c      	adds	r7, #12
34183a42:	46bd      	mov	sp, r7
34183a44:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a48:	4770      	bx	lr
34183a4a:	bf00      	nop
34183a4c:	56028000 	.word	0x56028000

34183a50 <LL_RCC_GetMDFClockSource>:
{
34183a50:	b480      	push	{r7}
34183a52:	b083      	sub	sp, #12
34183a54:	af00      	add	r7, sp, #0
34183a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34183a58:	4b05      	ldr	r3, [pc, #20]	@ (34183a70 <LL_RCC_GetMDFClockSource+0x20>)
34183a5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34183a5e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34183a62:	4618      	mov	r0, r3
34183a64:	370c      	adds	r7, #12
34183a66:	46bd      	mov	sp, r7
34183a68:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a6c:	4770      	bx	lr
34183a6e:	bf00      	nop
34183a70:	56028000 	.word	0x56028000

34183a74 <LL_RCC_GetPSSIClockSource>:
{
34183a74:	b480      	push	{r7}
34183a76:	b083      	sub	sp, #12
34183a78:	af00      	add	r7, sp, #0
34183a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34183a7c:	4b05      	ldr	r3, [pc, #20]	@ (34183a94 <LL_RCC_GetPSSIClockSource+0x20>)
34183a7e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183a82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34183a86:	4618      	mov	r0, r3
34183a88:	370c      	adds	r7, #12
34183a8a:	46bd      	mov	sp, r7
34183a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a90:	4770      	bx	lr
34183a92:	bf00      	nop
34183a94:	56028000 	.word	0x56028000

34183a98 <LL_RCC_GetSAIClockSource>:
{
34183a98:	b580      	push	{r7, lr}
34183a9a:	b082      	sub	sp, #8
34183a9c:	af00      	add	r7, sp, #0
34183a9e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183aa0:	6878      	ldr	r0, [r7, #4]
34183aa2:	f7ff fed7 	bl	34183854 <LL_RCC_GetClockSource>
34183aa6:	4603      	mov	r3, r0
}
34183aa8:	4618      	mov	r0, r3
34183aaa:	3708      	adds	r7, #8
34183aac:	46bd      	mov	sp, r7
34183aae:	bd80      	pop	{r7, pc}

34183ab0 <LL_RCC_GetSDMMCClockSource>:
{
34183ab0:	b580      	push	{r7, lr}
34183ab2:	b082      	sub	sp, #8
34183ab4:	af00      	add	r7, sp, #0
34183ab6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183ab8:	6878      	ldr	r0, [r7, #4]
34183aba:	f7ff fecb 	bl	34183854 <LL_RCC_GetClockSource>
34183abe:	4603      	mov	r3, r0
}
34183ac0:	4618      	mov	r0, r3
34183ac2:	3708      	adds	r7, #8
34183ac4:	46bd      	mov	sp, r7
34183ac6:	bd80      	pop	{r7, pc}

34183ac8 <LL_RCC_GetSPDIFRXClockSource>:
{
34183ac8:	b480      	push	{r7}
34183aca:	b083      	sub	sp, #12
34183acc:	af00      	add	r7, sp, #0
34183ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34183ad0:	4b05      	ldr	r3, [pc, #20]	@ (34183ae8 <LL_RCC_GetSPDIFRXClockSource+0x20>)
34183ad2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34183ad6:	f003 0307 	and.w	r3, r3, #7
}
34183ada:	4618      	mov	r0, r3
34183adc:	370c      	adds	r7, #12
34183ade:	46bd      	mov	sp, r7
34183ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ae4:	4770      	bx	lr
34183ae6:	bf00      	nop
34183ae8:	56028000 	.word	0x56028000

34183aec <LL_RCC_GetSPIClockSource>:
{
34183aec:	b580      	push	{r7, lr}
34183aee:	b082      	sub	sp, #8
34183af0:	af00      	add	r7, sp, #0
34183af2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183af4:	6878      	ldr	r0, [r7, #4]
34183af6:	f7ff fead 	bl	34183854 <LL_RCC_GetClockSource>
34183afa:	4603      	mov	r3, r0
}
34183afc:	4618      	mov	r0, r3
34183afe:	3708      	adds	r7, #8
34183b00:	46bd      	mov	sp, r7
34183b02:	bd80      	pop	{r7, pc}

34183b04 <LL_RCC_GetUSARTClockSource>:
{
34183b04:	b580      	push	{r7, lr}
34183b06:	b082      	sub	sp, #8
34183b08:	af00      	add	r7, sp, #0
34183b0a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183b0c:	6878      	ldr	r0, [r7, #4]
34183b0e:	f7ff fea1 	bl	34183854 <LL_RCC_GetClockSource>
34183b12:	4603      	mov	r3, r0
}
34183b14:	4618      	mov	r0, r3
34183b16:	3708      	adds	r7, #8
34183b18:	46bd      	mov	sp, r7
34183b1a:	bd80      	pop	{r7, pc}

34183b1c <LL_RCC_GetUARTClockSource>:
{
34183b1c:	b580      	push	{r7, lr}
34183b1e:	b082      	sub	sp, #8
34183b20:	af00      	add	r7, sp, #0
34183b22:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183b24:	6878      	ldr	r0, [r7, #4]
34183b26:	f7ff fe95 	bl	34183854 <LL_RCC_GetClockSource>
34183b2a:	4603      	mov	r3, r0
}
34183b2c:	4618      	mov	r0, r3
34183b2e:	3708      	adds	r7, #8
34183b30:	46bd      	mov	sp, r7
34183b32:	bd80      	pop	{r7, pc}

34183b34 <LL_RCC_GetUSBClockSource>:
{
34183b34:	b580      	push	{r7, lr}
34183b36:	b082      	sub	sp, #8
34183b38:	af00      	add	r7, sp, #0
34183b3a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183b3c:	6878      	ldr	r0, [r7, #4]
34183b3e:	f7ff fe89 	bl	34183854 <LL_RCC_GetClockSource>
34183b42:	4603      	mov	r3, r0
}
34183b44:	4618      	mov	r0, r3
34183b46:	3708      	adds	r7, #8
34183b48:	46bd      	mov	sp, r7
34183b4a:	bd80      	pop	{r7, pc}

34183b4c <LL_RCC_GetXSPIClockSource>:
{
34183b4c:	b580      	push	{r7, lr}
34183b4e:	b082      	sub	sp, #8
34183b50:	af00      	add	r7, sp, #0
34183b52:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183b54:	6878      	ldr	r0, [r7, #4]
34183b56:	f7ff fe7d 	bl	34183854 <LL_RCC_GetClockSource>
34183b5a:	4603      	mov	r3, r0
}
34183b5c:	4618      	mov	r0, r3
34183b5e:	3708      	adds	r7, #8
34183b60:	46bd      	mov	sp, r7
34183b62:	bd80      	pop	{r7, pc}

34183b64 <LL_RCC_SetRTCClockSource>:
{
34183b64:	b480      	push	{r7}
34183b66:	b083      	sub	sp, #12
34183b68:	af00      	add	r7, sp, #0
34183b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34183b6c:	4b07      	ldr	r3, [pc, #28]	@ (34183b8c <LL_RCC_SetRTCClockSource+0x28>)
34183b6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183b72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34183b76:	4905      	ldr	r1, [pc, #20]	@ (34183b8c <LL_RCC_SetRTCClockSource+0x28>)
34183b78:	687b      	ldr	r3, [r7, #4]
34183b7a:	4313      	orrs	r3, r2
34183b7c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183b80:	bf00      	nop
34183b82:	370c      	adds	r7, #12
34183b84:	46bd      	mov	sp, r7
34183b86:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b8a:	4770      	bx	lr
34183b8c:	56028000 	.word	0x56028000

34183b90 <LL_RCC_GetRTCClockSource>:
{
34183b90:	b480      	push	{r7}
34183b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34183b94:	4b04      	ldr	r3, [pc, #16]	@ (34183ba8 <LL_RCC_GetRTCClockSource+0x18>)
34183b96:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34183b9e:	4618      	mov	r0, r3
34183ba0:	46bd      	mov	sp, r7
34183ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ba6:	4770      	bx	lr
34183ba8:	56028000 	.word	0x56028000

34183bac <LL_RCC_SetRTC_HSEPrescaler>:
{
34183bac:	b480      	push	{r7}
34183bae:	b083      	sub	sp, #12
34183bb0:	af00      	add	r7, sp, #0
34183bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34183bb4:	4b07      	ldr	r3, [pc, #28]	@ (34183bd4 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34183bb6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183bba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34183bbe:	4905      	ldr	r1, [pc, #20]	@ (34183bd4 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34183bc0:	687b      	ldr	r3, [r7, #4]
34183bc2:	4313      	orrs	r3, r2
34183bc4:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183bc8:	bf00      	nop
34183bca:	370c      	adds	r7, #12
34183bcc:	46bd      	mov	sp, r7
34183bce:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bd2:	4770      	bx	lr
34183bd4:	56028000 	.word	0x56028000

34183bd8 <LL_RCC_SetTIMPrescaler>:
{
34183bd8:	b480      	push	{r7}
34183bda:	b083      	sub	sp, #12
34183bdc:	af00      	add	r7, sp, #0
34183bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34183be0:	4b07      	ldr	r3, [pc, #28]	@ (34183c00 <LL_RCC_SetTIMPrescaler+0x28>)
34183be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183be4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34183be8:	687b      	ldr	r3, [r7, #4]
34183bea:	061b      	lsls	r3, r3, #24
34183bec:	4904      	ldr	r1, [pc, #16]	@ (34183c00 <LL_RCC_SetTIMPrescaler+0x28>)
34183bee:	4313      	orrs	r3, r2
34183bf0:	624b      	str	r3, [r1, #36]	@ 0x24
}
34183bf2:	bf00      	nop
34183bf4:	370c      	adds	r7, #12
34183bf6:	46bd      	mov	sp, r7
34183bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bfc:	4770      	bx	lr
34183bfe:	bf00      	nop
34183c00:	56028000 	.word	0x56028000

34183c04 <LL_RCC_GetTIMPrescaler>:
{
34183c04:	b480      	push	{r7}
34183c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34183c08:	4b04      	ldr	r3, [pc, #16]	@ (34183c1c <LL_RCC_GetTIMPrescaler+0x18>)
34183c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183c0c:	0e1b      	lsrs	r3, r3, #24
34183c0e:	f003 0303 	and.w	r3, r3, #3
}
34183c12:	4618      	mov	r0, r3
34183c14:	46bd      	mov	sp, r7
34183c16:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c1a:	4770      	bx	lr
34183c1c:	56028000 	.word	0x56028000

34183c20 <LL_RCC_PLL1_GetSource>:
{
34183c20:	b480      	push	{r7}
34183c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34183c24:	4b04      	ldr	r3, [pc, #16]	@ (34183c38 <LL_RCC_PLL1_GetSource+0x18>)
34183c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183c2e:	4618      	mov	r0, r3
34183c30:	46bd      	mov	sp, r7
34183c32:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c36:	4770      	bx	lr
34183c38:	56028000 	.word	0x56028000

34183c3c <LL_RCC_PLL1_IsReady>:
{
34183c3c:	b480      	push	{r7}
34183c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34183c40:	4b07      	ldr	r3, [pc, #28]	@ (34183c60 <LL_RCC_PLL1_IsReady+0x24>)
34183c42:	685b      	ldr	r3, [r3, #4]
34183c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34183c4c:	d101      	bne.n	34183c52 <LL_RCC_PLL1_IsReady+0x16>
34183c4e:	2301      	movs	r3, #1
34183c50:	e000      	b.n	34183c54 <LL_RCC_PLL1_IsReady+0x18>
34183c52:	2300      	movs	r3, #0
}
34183c54:	4618      	mov	r0, r3
34183c56:	46bd      	mov	sp, r7
34183c58:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c5c:	4770      	bx	lr
34183c5e:	bf00      	nop
34183c60:	56028000 	.word	0x56028000

34183c64 <LL_RCC_PLL1_IsEnabledBypass>:
{
34183c64:	b480      	push	{r7}
34183c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34183c68:	4b07      	ldr	r3, [pc, #28]	@ (34183c88 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34183c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34183c76:	d101      	bne.n	34183c7c <LL_RCC_PLL1_IsEnabledBypass+0x18>
34183c78:	2301      	movs	r3, #1
34183c7a:	e000      	b.n	34183c7e <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34183c7c:	2300      	movs	r3, #0
}
34183c7e:	4618      	mov	r0, r3
34183c80:	46bd      	mov	sp, r7
34183c82:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c86:	4770      	bx	lr
34183c88:	56028000 	.word	0x56028000

34183c8c <LL_RCC_PLL1_GetN>:
{
34183c8c:	b480      	push	{r7}
34183c8e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34183c90:	4b05      	ldr	r3, [pc, #20]	@ (34183ca8 <LL_RCC_PLL1_GetN+0x1c>)
34183c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c96:	0a1b      	lsrs	r3, r3, #8
34183c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34183c9c:	4618      	mov	r0, r3
34183c9e:	46bd      	mov	sp, r7
34183ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ca4:	4770      	bx	lr
34183ca6:	bf00      	nop
34183ca8:	56028000 	.word	0x56028000

34183cac <LL_RCC_PLL1_GetM>:
{
34183cac:	b480      	push	{r7}
34183cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34183cb0:	4b05      	ldr	r3, [pc, #20]	@ (34183cc8 <LL_RCC_PLL1_GetM+0x1c>)
34183cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183cb6:	0d1b      	lsrs	r3, r3, #20
34183cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34183cbc:	4618      	mov	r0, r3
34183cbe:	46bd      	mov	sp, r7
34183cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183cc4:	4770      	bx	lr
34183cc6:	bf00      	nop
34183cc8:	56028000 	.word	0x56028000

34183ccc <LL_RCC_PLL1_GetP1>:
{
34183ccc:	b480      	push	{r7}
34183cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34183cd0:	4b05      	ldr	r3, [pc, #20]	@ (34183ce8 <LL_RCC_PLL1_GetP1+0x1c>)
34183cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34183cd6:	0edb      	lsrs	r3, r3, #27
34183cd8:	f003 0307 	and.w	r3, r3, #7
}
34183cdc:	4618      	mov	r0, r3
34183cde:	46bd      	mov	sp, r7
34183ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ce4:	4770      	bx	lr
34183ce6:	bf00      	nop
34183ce8:	56028000 	.word	0x56028000

34183cec <LL_RCC_PLL1_GetP2>:
{
34183cec:	b480      	push	{r7}
34183cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34183cf0:	4b05      	ldr	r3, [pc, #20]	@ (34183d08 <LL_RCC_PLL1_GetP2+0x1c>)
34183cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34183cf6:	0e1b      	lsrs	r3, r3, #24
34183cf8:	f003 0307 	and.w	r3, r3, #7
}
34183cfc:	4618      	mov	r0, r3
34183cfe:	46bd      	mov	sp, r7
34183d00:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d04:	4770      	bx	lr
34183d06:	bf00      	nop
34183d08:	56028000 	.word	0x56028000

34183d0c <LL_RCC_PLL1P_IsEnabled>:
{
34183d0c:	b480      	push	{r7}
34183d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34183d10:	4b07      	ldr	r3, [pc, #28]	@ (34183d30 <LL_RCC_PLL1P_IsEnabled+0x24>)
34183d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34183d16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34183d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34183d1e:	d101      	bne.n	34183d24 <LL_RCC_PLL1P_IsEnabled+0x18>
34183d20:	2301      	movs	r3, #1
34183d22:	e000      	b.n	34183d26 <LL_RCC_PLL1P_IsEnabled+0x1a>
34183d24:	2300      	movs	r3, #0
}
34183d26:	4618      	mov	r0, r3
34183d28:	46bd      	mov	sp, r7
34183d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d2e:	4770      	bx	lr
34183d30:	56028000 	.word	0x56028000

34183d34 <LL_RCC_PLL1_GetFRACN>:
{
34183d34:	b480      	push	{r7}
34183d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34183d38:	4b04      	ldr	r3, [pc, #16]	@ (34183d4c <LL_RCC_PLL1_GetFRACN+0x18>)
34183d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34183d3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34183d42:	4618      	mov	r0, r3
34183d44:	46bd      	mov	sp, r7
34183d46:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d4a:	4770      	bx	lr
34183d4c:	56028000 	.word	0x56028000

34183d50 <LL_RCC_PLL2_GetSource>:
{
34183d50:	b480      	push	{r7}
34183d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34183d54:	4b04      	ldr	r3, [pc, #16]	@ (34183d68 <LL_RCC_PLL2_GetSource+0x18>)
34183d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34183d5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183d5e:	4618      	mov	r0, r3
34183d60:	46bd      	mov	sp, r7
34183d62:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d66:	4770      	bx	lr
34183d68:	56028000 	.word	0x56028000

34183d6c <LL_RCC_PLL2_IsReady>:
{
34183d6c:	b480      	push	{r7}
34183d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34183d70:	4b07      	ldr	r3, [pc, #28]	@ (34183d90 <LL_RCC_PLL2_IsReady+0x24>)
34183d72:	685b      	ldr	r3, [r3, #4]
34183d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34183d7c:	d101      	bne.n	34183d82 <LL_RCC_PLL2_IsReady+0x16>
34183d7e:	2301      	movs	r3, #1
34183d80:	e000      	b.n	34183d84 <LL_RCC_PLL2_IsReady+0x18>
34183d82:	2300      	movs	r3, #0
}
34183d84:	4618      	mov	r0, r3
34183d86:	46bd      	mov	sp, r7
34183d88:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d8c:	4770      	bx	lr
34183d8e:	bf00      	nop
34183d90:	56028000 	.word	0x56028000

34183d94 <LL_RCC_PLL2_IsEnabledBypass>:
{
34183d94:	b480      	push	{r7}
34183d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34183d98:	4b07      	ldr	r3, [pc, #28]	@ (34183db8 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34183d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34183d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34183da6:	d101      	bne.n	34183dac <LL_RCC_PLL2_IsEnabledBypass+0x18>
34183da8:	2301      	movs	r3, #1
34183daa:	e000      	b.n	34183dae <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34183dac:	2300      	movs	r3, #0
}
34183dae:	4618      	mov	r0, r3
34183db0:	46bd      	mov	sp, r7
34183db2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183db6:	4770      	bx	lr
34183db8:	56028000 	.word	0x56028000

34183dbc <LL_RCC_PLL2_GetN>:
{
34183dbc:	b480      	push	{r7}
34183dbe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34183dc0:	4b05      	ldr	r3, [pc, #20]	@ (34183dd8 <LL_RCC_PLL2_GetN+0x1c>)
34183dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34183dc6:	0a1b      	lsrs	r3, r3, #8
34183dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34183dcc:	4618      	mov	r0, r3
34183dce:	46bd      	mov	sp, r7
34183dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183dd4:	4770      	bx	lr
34183dd6:	bf00      	nop
34183dd8:	56028000 	.word	0x56028000

34183ddc <LL_RCC_PLL2_GetM>:
{
34183ddc:	b480      	push	{r7}
34183dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34183de0:	4b05      	ldr	r3, [pc, #20]	@ (34183df8 <LL_RCC_PLL2_GetM+0x1c>)
34183de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34183de6:	0d1b      	lsrs	r3, r3, #20
34183de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34183dec:	4618      	mov	r0, r3
34183dee:	46bd      	mov	sp, r7
34183df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183df4:	4770      	bx	lr
34183df6:	bf00      	nop
34183df8:	56028000 	.word	0x56028000

34183dfc <LL_RCC_PLL2_GetP1>:
{
34183dfc:	b480      	push	{r7}
34183dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34183e00:	4b05      	ldr	r3, [pc, #20]	@ (34183e18 <LL_RCC_PLL2_GetP1+0x1c>)
34183e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34183e06:	0edb      	lsrs	r3, r3, #27
34183e08:	f003 0307 	and.w	r3, r3, #7
}
34183e0c:	4618      	mov	r0, r3
34183e0e:	46bd      	mov	sp, r7
34183e10:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e14:	4770      	bx	lr
34183e16:	bf00      	nop
34183e18:	56028000 	.word	0x56028000

34183e1c <LL_RCC_PLL2_GetP2>:
{
34183e1c:	b480      	push	{r7}
34183e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34183e20:	4b05      	ldr	r3, [pc, #20]	@ (34183e38 <LL_RCC_PLL2_GetP2+0x1c>)
34183e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34183e26:	0e1b      	lsrs	r3, r3, #24
34183e28:	f003 0307 	and.w	r3, r3, #7
}
34183e2c:	4618      	mov	r0, r3
34183e2e:	46bd      	mov	sp, r7
34183e30:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e34:	4770      	bx	lr
34183e36:	bf00      	nop
34183e38:	56028000 	.word	0x56028000

34183e3c <LL_RCC_PLL2P_IsEnabled>:
{
34183e3c:	b480      	push	{r7}
34183e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34183e40:	4b07      	ldr	r3, [pc, #28]	@ (34183e60 <LL_RCC_PLL2P_IsEnabled+0x24>)
34183e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34183e46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34183e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34183e4e:	d101      	bne.n	34183e54 <LL_RCC_PLL2P_IsEnabled+0x18>
34183e50:	2301      	movs	r3, #1
34183e52:	e000      	b.n	34183e56 <LL_RCC_PLL2P_IsEnabled+0x1a>
34183e54:	2300      	movs	r3, #0
}
34183e56:	4618      	mov	r0, r3
34183e58:	46bd      	mov	sp, r7
34183e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e5e:	4770      	bx	lr
34183e60:	56028000 	.word	0x56028000

34183e64 <LL_RCC_PLL2_GetFRACN>:
{
34183e64:	b480      	push	{r7}
34183e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34183e68:	4b04      	ldr	r3, [pc, #16]	@ (34183e7c <LL_RCC_PLL2_GetFRACN+0x18>)
34183e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34183e6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34183e72:	4618      	mov	r0, r3
34183e74:	46bd      	mov	sp, r7
34183e76:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e7a:	4770      	bx	lr
34183e7c:	56028000 	.word	0x56028000

34183e80 <LL_RCC_PLL3_GetSource>:
{
34183e80:	b480      	push	{r7}
34183e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34183e84:	4b04      	ldr	r3, [pc, #16]	@ (34183e98 <LL_RCC_PLL3_GetSource+0x18>)
34183e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34183e8a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183e8e:	4618      	mov	r0, r3
34183e90:	46bd      	mov	sp, r7
34183e92:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e96:	4770      	bx	lr
34183e98:	56028000 	.word	0x56028000

34183e9c <LL_RCC_PLL3_IsReady>:
{
34183e9c:	b480      	push	{r7}
34183e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34183ea0:	4b07      	ldr	r3, [pc, #28]	@ (34183ec0 <LL_RCC_PLL3_IsReady+0x24>)
34183ea2:	685b      	ldr	r3, [r3, #4]
34183ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34183eac:	d101      	bne.n	34183eb2 <LL_RCC_PLL3_IsReady+0x16>
34183eae:	2301      	movs	r3, #1
34183eb0:	e000      	b.n	34183eb4 <LL_RCC_PLL3_IsReady+0x18>
34183eb2:	2300      	movs	r3, #0
}
34183eb4:	4618      	mov	r0, r3
34183eb6:	46bd      	mov	sp, r7
34183eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ebc:	4770      	bx	lr
34183ebe:	bf00      	nop
34183ec0:	56028000 	.word	0x56028000

34183ec4 <LL_RCC_PLL3_IsEnabledBypass>:
{
34183ec4:	b480      	push	{r7}
34183ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34183ec8:	4b07      	ldr	r3, [pc, #28]	@ (34183ee8 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34183eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34183ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34183ed6:	d101      	bne.n	34183edc <LL_RCC_PLL3_IsEnabledBypass+0x18>
34183ed8:	2301      	movs	r3, #1
34183eda:	e000      	b.n	34183ede <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34183edc:	2300      	movs	r3, #0
}
34183ede:	4618      	mov	r0, r3
34183ee0:	46bd      	mov	sp, r7
34183ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ee6:	4770      	bx	lr
34183ee8:	56028000 	.word	0x56028000

34183eec <LL_RCC_PLL3_GetN>:
{
34183eec:	b480      	push	{r7}
34183eee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34183ef0:	4b05      	ldr	r3, [pc, #20]	@ (34183f08 <LL_RCC_PLL3_GetN+0x1c>)
34183ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34183ef6:	0a1b      	lsrs	r3, r3, #8
34183ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34183efc:	4618      	mov	r0, r3
34183efe:	46bd      	mov	sp, r7
34183f00:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f04:	4770      	bx	lr
34183f06:	bf00      	nop
34183f08:	56028000 	.word	0x56028000

34183f0c <LL_RCC_PLL3_GetM>:
{
34183f0c:	b480      	push	{r7}
34183f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34183f10:	4b05      	ldr	r3, [pc, #20]	@ (34183f28 <LL_RCC_PLL3_GetM+0x1c>)
34183f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34183f16:	0d1b      	lsrs	r3, r3, #20
34183f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34183f1c:	4618      	mov	r0, r3
34183f1e:	46bd      	mov	sp, r7
34183f20:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f24:	4770      	bx	lr
34183f26:	bf00      	nop
34183f28:	56028000 	.word	0x56028000

34183f2c <LL_RCC_PLL3_GetP1>:
{
34183f2c:	b480      	push	{r7}
34183f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34183f30:	4b05      	ldr	r3, [pc, #20]	@ (34183f48 <LL_RCC_PLL3_GetP1+0x1c>)
34183f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34183f36:	0edb      	lsrs	r3, r3, #27
34183f38:	f003 0307 	and.w	r3, r3, #7
}
34183f3c:	4618      	mov	r0, r3
34183f3e:	46bd      	mov	sp, r7
34183f40:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f44:	4770      	bx	lr
34183f46:	bf00      	nop
34183f48:	56028000 	.word	0x56028000

34183f4c <LL_RCC_PLL3_GetP2>:
{
34183f4c:	b480      	push	{r7}
34183f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34183f50:	4b05      	ldr	r3, [pc, #20]	@ (34183f68 <LL_RCC_PLL3_GetP2+0x1c>)
34183f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34183f56:	0e1b      	lsrs	r3, r3, #24
34183f58:	f003 0307 	and.w	r3, r3, #7
}
34183f5c:	4618      	mov	r0, r3
34183f5e:	46bd      	mov	sp, r7
34183f60:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f64:	4770      	bx	lr
34183f66:	bf00      	nop
34183f68:	56028000 	.word	0x56028000

34183f6c <LL_RCC_PLL3P_IsEnabled>:
{
34183f6c:	b480      	push	{r7}
34183f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34183f70:	4b07      	ldr	r3, [pc, #28]	@ (34183f90 <LL_RCC_PLL3P_IsEnabled+0x24>)
34183f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34183f76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34183f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34183f7e:	d101      	bne.n	34183f84 <LL_RCC_PLL3P_IsEnabled+0x18>
34183f80:	2301      	movs	r3, #1
34183f82:	e000      	b.n	34183f86 <LL_RCC_PLL3P_IsEnabled+0x1a>
34183f84:	2300      	movs	r3, #0
}
34183f86:	4618      	mov	r0, r3
34183f88:	46bd      	mov	sp, r7
34183f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f8e:	4770      	bx	lr
34183f90:	56028000 	.word	0x56028000

34183f94 <LL_RCC_PLL3_GetFRACN>:
{
34183f94:	b480      	push	{r7}
34183f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34183f98:	4b04      	ldr	r3, [pc, #16]	@ (34183fac <LL_RCC_PLL3_GetFRACN+0x18>)
34183f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34183f9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34183fa2:	4618      	mov	r0, r3
34183fa4:	46bd      	mov	sp, r7
34183fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34183faa:	4770      	bx	lr
34183fac:	56028000 	.word	0x56028000

34183fb0 <LL_RCC_PLL4_GetSource>:
{
34183fb0:	b480      	push	{r7}
34183fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34183fb4:	4b04      	ldr	r3, [pc, #16]	@ (34183fc8 <LL_RCC_PLL4_GetSource+0x18>)
34183fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34183fba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183fbe:	4618      	mov	r0, r3
34183fc0:	46bd      	mov	sp, r7
34183fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fc6:	4770      	bx	lr
34183fc8:	56028000 	.word	0x56028000

34183fcc <LL_RCC_PLL4_IsReady>:
{
34183fcc:	b480      	push	{r7}
34183fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34183fd0:	4b07      	ldr	r3, [pc, #28]	@ (34183ff0 <LL_RCC_PLL4_IsReady+0x24>)
34183fd2:	685b      	ldr	r3, [r3, #4]
34183fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34183fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34183fdc:	d101      	bne.n	34183fe2 <LL_RCC_PLL4_IsReady+0x16>
34183fde:	2301      	movs	r3, #1
34183fe0:	e000      	b.n	34183fe4 <LL_RCC_PLL4_IsReady+0x18>
34183fe2:	2300      	movs	r3, #0
}
34183fe4:	4618      	mov	r0, r3
34183fe6:	46bd      	mov	sp, r7
34183fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fec:	4770      	bx	lr
34183fee:	bf00      	nop
34183ff0:	56028000 	.word	0x56028000

34183ff4 <LL_RCC_PLL4_IsEnabledBypass>:
{
34183ff4:	b480      	push	{r7}
34183ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34183ff8:	4b07      	ldr	r3, [pc, #28]	@ (34184018 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34183ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34183ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184006:	d101      	bne.n	3418400c <LL_RCC_PLL4_IsEnabledBypass+0x18>
34184008:	2301      	movs	r3, #1
3418400a:	e000      	b.n	3418400e <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418400c:	2300      	movs	r3, #0
}
3418400e:	4618      	mov	r0, r3
34184010:	46bd      	mov	sp, r7
34184012:	f85d 7b04 	ldr.w	r7, [sp], #4
34184016:	4770      	bx	lr
34184018:	56028000 	.word	0x56028000

3418401c <LL_RCC_PLL4_GetN>:
{
3418401c:	b480      	push	{r7}
3418401e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34184020:	4b05      	ldr	r3, [pc, #20]	@ (34184038 <LL_RCC_PLL4_GetN+0x1c>)
34184022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184026:	0a1b      	lsrs	r3, r3, #8
34184028:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418402c:	4618      	mov	r0, r3
3418402e:	46bd      	mov	sp, r7
34184030:	f85d 7b04 	ldr.w	r7, [sp], #4
34184034:	4770      	bx	lr
34184036:	bf00      	nop
34184038:	56028000 	.word	0x56028000

3418403c <LL_RCC_PLL4_GetM>:
{
3418403c:	b480      	push	{r7}
3418403e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34184040:	4b05      	ldr	r3, [pc, #20]	@ (34184058 <LL_RCC_PLL4_GetM+0x1c>)
34184042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184046:	0d1b      	lsrs	r3, r3, #20
34184048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418404c:	4618      	mov	r0, r3
3418404e:	46bd      	mov	sp, r7
34184050:	f85d 7b04 	ldr.w	r7, [sp], #4
34184054:	4770      	bx	lr
34184056:	bf00      	nop
34184058:	56028000 	.word	0x56028000

3418405c <LL_RCC_PLL4_GetP1>:
{
3418405c:	b480      	push	{r7}
3418405e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34184060:	4b05      	ldr	r3, [pc, #20]	@ (34184078 <LL_RCC_PLL4_GetP1+0x1c>)
34184062:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184066:	0edb      	lsrs	r3, r3, #27
34184068:	f003 0307 	and.w	r3, r3, #7
}
3418406c:	4618      	mov	r0, r3
3418406e:	46bd      	mov	sp, r7
34184070:	f85d 7b04 	ldr.w	r7, [sp], #4
34184074:	4770      	bx	lr
34184076:	bf00      	nop
34184078:	56028000 	.word	0x56028000

3418407c <LL_RCC_PLL4_GetP2>:
{
3418407c:	b480      	push	{r7}
3418407e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34184080:	4b05      	ldr	r3, [pc, #20]	@ (34184098 <LL_RCC_PLL4_GetP2+0x1c>)
34184082:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184086:	0e1b      	lsrs	r3, r3, #24
34184088:	f003 0307 	and.w	r3, r3, #7
}
3418408c:	4618      	mov	r0, r3
3418408e:	46bd      	mov	sp, r7
34184090:	f85d 7b04 	ldr.w	r7, [sp], #4
34184094:	4770      	bx	lr
34184096:	bf00      	nop
34184098:	56028000 	.word	0x56028000

3418409c <LL_RCC_PLL4P_IsEnabled>:
{
3418409c:	b480      	push	{r7}
3418409e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
341840a0:	4b07      	ldr	r3, [pc, #28]	@ (341840c0 <LL_RCC_PLL4P_IsEnabled+0x24>)
341840a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341840a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341840aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341840ae:	d101      	bne.n	341840b4 <LL_RCC_PLL4P_IsEnabled+0x18>
341840b0:	2301      	movs	r3, #1
341840b2:	e000      	b.n	341840b6 <LL_RCC_PLL4P_IsEnabled+0x1a>
341840b4:	2300      	movs	r3, #0
}
341840b6:	4618      	mov	r0, r3
341840b8:	46bd      	mov	sp, r7
341840ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341840be:	4770      	bx	lr
341840c0:	56028000 	.word	0x56028000

341840c4 <LL_RCC_PLL4_GetFRACN>:
{
341840c4:	b480      	push	{r7}
341840c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
341840c8:	4b04      	ldr	r3, [pc, #16]	@ (341840dc <LL_RCC_PLL4_GetFRACN+0x18>)
341840ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341840ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341840d2:	4618      	mov	r0, r3
341840d4:	46bd      	mov	sp, r7
341840d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341840da:	4770      	bx	lr
341840dc:	56028000 	.word	0x56028000

341840e0 <LL_RCC_IC3_Enable>:
{
341840e0:	b480      	push	{r7}
341840e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
341840e4:	4b04      	ldr	r3, [pc, #16]	@ (341840f8 <LL_RCC_IC3_Enable+0x18>)
341840e6:	2204      	movs	r2, #4
341840e8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341840ec:	bf00      	nop
341840ee:	46bd      	mov	sp, r7
341840f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341840f4:	4770      	bx	lr
341840f6:	bf00      	nop
341840f8:	56028000 	.word	0x56028000

341840fc <LL_RCC_IC3_IsEnabled>:
{
341840fc:	b480      	push	{r7}
341840fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34184100:	4b07      	ldr	r3, [pc, #28]	@ (34184120 <LL_RCC_IC3_IsEnabled+0x24>)
34184102:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184106:	f003 0304 	and.w	r3, r3, #4
3418410a:	2b04      	cmp	r3, #4
3418410c:	d101      	bne.n	34184112 <LL_RCC_IC3_IsEnabled+0x16>
3418410e:	2301      	movs	r3, #1
34184110:	e000      	b.n	34184114 <LL_RCC_IC3_IsEnabled+0x18>
34184112:	2300      	movs	r3, #0
}
34184114:	4618      	mov	r0, r3
34184116:	46bd      	mov	sp, r7
34184118:	f85d 7b04 	ldr.w	r7, [sp], #4
3418411c:	4770      	bx	lr
3418411e:	bf00      	nop
34184120:	56028000 	.word	0x56028000

34184124 <LL_RCC_IC3_GetSource>:
{
34184124:	b480      	push	{r7}
34184126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34184128:	4b04      	ldr	r3, [pc, #16]	@ (3418413c <LL_RCC_IC3_GetSource+0x18>)
3418412a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418412e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184132:	4618      	mov	r0, r3
34184134:	46bd      	mov	sp, r7
34184136:	f85d 7b04 	ldr.w	r7, [sp], #4
3418413a:	4770      	bx	lr
3418413c:	56028000 	.word	0x56028000

34184140 <LL_RCC_IC3_GetDivider>:
{
34184140:	b480      	push	{r7}
34184142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34184144:	4b05      	ldr	r3, [pc, #20]	@ (3418415c <LL_RCC_IC3_GetDivider+0x1c>)
34184146:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418414a:	0c1b      	lsrs	r3, r3, #16
3418414c:	b2db      	uxtb	r3, r3
3418414e:	3301      	adds	r3, #1
}
34184150:	4618      	mov	r0, r3
34184152:	46bd      	mov	sp, r7
34184154:	f85d 7b04 	ldr.w	r7, [sp], #4
34184158:	4770      	bx	lr
3418415a:	bf00      	nop
3418415c:	56028000 	.word	0x56028000

34184160 <LL_RCC_IC4_Enable>:
{
34184160:	b480      	push	{r7}
34184162:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34184164:	4b04      	ldr	r3, [pc, #16]	@ (34184178 <LL_RCC_IC4_Enable+0x18>)
34184166:	2208      	movs	r2, #8
34184168:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418416c:	bf00      	nop
3418416e:	46bd      	mov	sp, r7
34184170:	f85d 7b04 	ldr.w	r7, [sp], #4
34184174:	4770      	bx	lr
34184176:	bf00      	nop
34184178:	56028000 	.word	0x56028000

3418417c <LL_RCC_IC4_IsEnabled>:
{
3418417c:	b480      	push	{r7}
3418417e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34184180:	4b07      	ldr	r3, [pc, #28]	@ (341841a0 <LL_RCC_IC4_IsEnabled+0x24>)
34184182:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184186:	f003 0308 	and.w	r3, r3, #8
3418418a:	2b08      	cmp	r3, #8
3418418c:	d101      	bne.n	34184192 <LL_RCC_IC4_IsEnabled+0x16>
3418418e:	2301      	movs	r3, #1
34184190:	e000      	b.n	34184194 <LL_RCC_IC4_IsEnabled+0x18>
34184192:	2300      	movs	r3, #0
}
34184194:	4618      	mov	r0, r3
34184196:	46bd      	mov	sp, r7
34184198:	f85d 7b04 	ldr.w	r7, [sp], #4
3418419c:	4770      	bx	lr
3418419e:	bf00      	nop
341841a0:	56028000 	.word	0x56028000

341841a4 <LL_RCC_IC4_GetSource>:
{
341841a4:	b480      	push	{r7}
341841a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341841a8:	4b04      	ldr	r3, [pc, #16]	@ (341841bc <LL_RCC_IC4_GetSource+0x18>)
341841aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341841ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341841b2:	4618      	mov	r0, r3
341841b4:	46bd      	mov	sp, r7
341841b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341841ba:	4770      	bx	lr
341841bc:	56028000 	.word	0x56028000

341841c0 <LL_RCC_IC4_GetDivider>:
{
341841c0:	b480      	push	{r7}
341841c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341841c4:	4b05      	ldr	r3, [pc, #20]	@ (341841dc <LL_RCC_IC4_GetDivider+0x1c>)
341841c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341841ca:	0c1b      	lsrs	r3, r3, #16
341841cc:	b2db      	uxtb	r3, r3
341841ce:	3301      	adds	r3, #1
}
341841d0:	4618      	mov	r0, r3
341841d2:	46bd      	mov	sp, r7
341841d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341841d8:	4770      	bx	lr
341841da:	bf00      	nop
341841dc:	56028000 	.word	0x56028000

341841e0 <LL_RCC_IC5_Enable>:
{
341841e0:	b480      	push	{r7}
341841e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
341841e4:	4b04      	ldr	r3, [pc, #16]	@ (341841f8 <LL_RCC_IC5_Enable+0x18>)
341841e6:	2210      	movs	r2, #16
341841e8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341841ec:	bf00      	nop
341841ee:	46bd      	mov	sp, r7
341841f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341841f4:	4770      	bx	lr
341841f6:	bf00      	nop
341841f8:	56028000 	.word	0x56028000

341841fc <LL_RCC_IC5_IsEnabled>:
{
341841fc:	b480      	push	{r7}
341841fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34184200:	4b07      	ldr	r3, [pc, #28]	@ (34184220 <LL_RCC_IC5_IsEnabled+0x24>)
34184202:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184206:	f003 0310 	and.w	r3, r3, #16
3418420a:	2b10      	cmp	r3, #16
3418420c:	d101      	bne.n	34184212 <LL_RCC_IC5_IsEnabled+0x16>
3418420e:	2301      	movs	r3, #1
34184210:	e000      	b.n	34184214 <LL_RCC_IC5_IsEnabled+0x18>
34184212:	2300      	movs	r3, #0
}
34184214:	4618      	mov	r0, r3
34184216:	46bd      	mov	sp, r7
34184218:	f85d 7b04 	ldr.w	r7, [sp], #4
3418421c:	4770      	bx	lr
3418421e:	bf00      	nop
34184220:	56028000 	.word	0x56028000

34184224 <LL_RCC_IC5_GetSource>:
{
34184224:	b480      	push	{r7}
34184226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34184228:	4b04      	ldr	r3, [pc, #16]	@ (3418423c <LL_RCC_IC5_GetSource+0x18>)
3418422a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418422e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184232:	4618      	mov	r0, r3
34184234:	46bd      	mov	sp, r7
34184236:	f85d 7b04 	ldr.w	r7, [sp], #4
3418423a:	4770      	bx	lr
3418423c:	56028000 	.word	0x56028000

34184240 <LL_RCC_IC5_GetDivider>:
{
34184240:	b480      	push	{r7}
34184242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34184244:	4b05      	ldr	r3, [pc, #20]	@ (3418425c <LL_RCC_IC5_GetDivider+0x1c>)
34184246:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418424a:	0c1b      	lsrs	r3, r3, #16
3418424c:	b2db      	uxtb	r3, r3
3418424e:	3301      	adds	r3, #1
}
34184250:	4618      	mov	r0, r3
34184252:	46bd      	mov	sp, r7
34184254:	f85d 7b04 	ldr.w	r7, [sp], #4
34184258:	4770      	bx	lr
3418425a:	bf00      	nop
3418425c:	56028000 	.word	0x56028000

34184260 <LL_RCC_IC7_Enable>:
{
34184260:	b480      	push	{r7}
34184262:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34184264:	4b04      	ldr	r3, [pc, #16]	@ (34184278 <LL_RCC_IC7_Enable+0x18>)
34184266:	2240      	movs	r2, #64	@ 0x40
34184268:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418426c:	bf00      	nop
3418426e:	46bd      	mov	sp, r7
34184270:	f85d 7b04 	ldr.w	r7, [sp], #4
34184274:	4770      	bx	lr
34184276:	bf00      	nop
34184278:	56028000 	.word	0x56028000

3418427c <LL_RCC_IC7_IsEnabled>:
{
3418427c:	b480      	push	{r7}
3418427e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34184280:	4b07      	ldr	r3, [pc, #28]	@ (341842a0 <LL_RCC_IC7_IsEnabled+0x24>)
34184282:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418428a:	2b40      	cmp	r3, #64	@ 0x40
3418428c:	d101      	bne.n	34184292 <LL_RCC_IC7_IsEnabled+0x16>
3418428e:	2301      	movs	r3, #1
34184290:	e000      	b.n	34184294 <LL_RCC_IC7_IsEnabled+0x18>
34184292:	2300      	movs	r3, #0
}
34184294:	4618      	mov	r0, r3
34184296:	46bd      	mov	sp, r7
34184298:	f85d 7b04 	ldr.w	r7, [sp], #4
3418429c:	4770      	bx	lr
3418429e:	bf00      	nop
341842a0:	56028000 	.word	0x56028000

341842a4 <LL_RCC_IC7_GetSource>:
{
341842a4:	b480      	push	{r7}
341842a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
341842a8:	4b04      	ldr	r3, [pc, #16]	@ (341842bc <LL_RCC_IC7_GetSource+0x18>)
341842aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341842ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341842b2:	4618      	mov	r0, r3
341842b4:	46bd      	mov	sp, r7
341842b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341842ba:	4770      	bx	lr
341842bc:	56028000 	.word	0x56028000

341842c0 <LL_RCC_IC7_GetDivider>:
{
341842c0:	b480      	push	{r7}
341842c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
341842c4:	4b05      	ldr	r3, [pc, #20]	@ (341842dc <LL_RCC_IC7_GetDivider+0x1c>)
341842c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341842ca:	0c1b      	lsrs	r3, r3, #16
341842cc:	b2db      	uxtb	r3, r3
341842ce:	3301      	adds	r3, #1
}
341842d0:	4618      	mov	r0, r3
341842d2:	46bd      	mov	sp, r7
341842d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341842d8:	4770      	bx	lr
341842da:	bf00      	nop
341842dc:	56028000 	.word	0x56028000

341842e0 <LL_RCC_IC8_Enable>:
{
341842e0:	b480      	push	{r7}
341842e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341842e4:	4b04      	ldr	r3, [pc, #16]	@ (341842f8 <LL_RCC_IC8_Enable+0x18>)
341842e6:	2280      	movs	r2, #128	@ 0x80
341842e8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341842ec:	bf00      	nop
341842ee:	46bd      	mov	sp, r7
341842f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341842f4:	4770      	bx	lr
341842f6:	bf00      	nop
341842f8:	56028000 	.word	0x56028000

341842fc <LL_RCC_IC8_IsEnabled>:
{
341842fc:	b480      	push	{r7}
341842fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34184300:	4b07      	ldr	r3, [pc, #28]	@ (34184320 <LL_RCC_IC8_IsEnabled+0x24>)
34184302:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418430a:	2b80      	cmp	r3, #128	@ 0x80
3418430c:	d101      	bne.n	34184312 <LL_RCC_IC8_IsEnabled+0x16>
3418430e:	2301      	movs	r3, #1
34184310:	e000      	b.n	34184314 <LL_RCC_IC8_IsEnabled+0x18>
34184312:	2300      	movs	r3, #0
}
34184314:	4618      	mov	r0, r3
34184316:	46bd      	mov	sp, r7
34184318:	f85d 7b04 	ldr.w	r7, [sp], #4
3418431c:	4770      	bx	lr
3418431e:	bf00      	nop
34184320:	56028000 	.word	0x56028000

34184324 <LL_RCC_IC8_GetSource>:
{
34184324:	b480      	push	{r7}
34184326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34184328:	4b04      	ldr	r3, [pc, #16]	@ (3418433c <LL_RCC_IC8_GetSource+0x18>)
3418432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418432e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184332:	4618      	mov	r0, r3
34184334:	46bd      	mov	sp, r7
34184336:	f85d 7b04 	ldr.w	r7, [sp], #4
3418433a:	4770      	bx	lr
3418433c:	56028000 	.word	0x56028000

34184340 <LL_RCC_IC8_GetDivider>:
{
34184340:	b480      	push	{r7}
34184342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34184344:	4b05      	ldr	r3, [pc, #20]	@ (3418435c <LL_RCC_IC8_GetDivider+0x1c>)
34184346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418434a:	0c1b      	lsrs	r3, r3, #16
3418434c:	b2db      	uxtb	r3, r3
3418434e:	3301      	adds	r3, #1
}
34184350:	4618      	mov	r0, r3
34184352:	46bd      	mov	sp, r7
34184354:	f85d 7b04 	ldr.w	r7, [sp], #4
34184358:	4770      	bx	lr
3418435a:	bf00      	nop
3418435c:	56028000 	.word	0x56028000

34184360 <LL_RCC_IC9_Enable>:
{
34184360:	b480      	push	{r7}
34184362:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184364:	4b04      	ldr	r3, [pc, #16]	@ (34184378 <LL_RCC_IC9_Enable+0x18>)
34184366:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418436a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418436e:	bf00      	nop
34184370:	46bd      	mov	sp, r7
34184372:	f85d 7b04 	ldr.w	r7, [sp], #4
34184376:	4770      	bx	lr
34184378:	56028000 	.word	0x56028000

3418437c <LL_RCC_IC9_IsEnabled>:
{
3418437c:	b480      	push	{r7}
3418437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34184380:	4b07      	ldr	r3, [pc, #28]	@ (341843a0 <LL_RCC_IC9_IsEnabled+0x24>)
34184382:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418438a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418438e:	d101      	bne.n	34184394 <LL_RCC_IC9_IsEnabled+0x18>
34184390:	2301      	movs	r3, #1
34184392:	e000      	b.n	34184396 <LL_RCC_IC9_IsEnabled+0x1a>
34184394:	2300      	movs	r3, #0
}
34184396:	4618      	mov	r0, r3
34184398:	46bd      	mov	sp, r7
3418439a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418439e:	4770      	bx	lr
341843a0:	56028000 	.word	0x56028000

341843a4 <LL_RCC_IC9_GetSource>:
{
341843a4:	b480      	push	{r7}
341843a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
341843a8:	4b04      	ldr	r3, [pc, #16]	@ (341843bc <LL_RCC_IC9_GetSource+0x18>)
341843aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341843ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341843b2:	4618      	mov	r0, r3
341843b4:	46bd      	mov	sp, r7
341843b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341843ba:	4770      	bx	lr
341843bc:	56028000 	.word	0x56028000

341843c0 <LL_RCC_IC9_GetDivider>:
{
341843c0:	b480      	push	{r7}
341843c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
341843c4:	4b05      	ldr	r3, [pc, #20]	@ (341843dc <LL_RCC_IC9_GetDivider+0x1c>)
341843c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341843ca:	0c1b      	lsrs	r3, r3, #16
341843cc:	b2db      	uxtb	r3, r3
341843ce:	3301      	adds	r3, #1
}
341843d0:	4618      	mov	r0, r3
341843d2:	46bd      	mov	sp, r7
341843d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341843d8:	4770      	bx	lr
341843da:	bf00      	nop
341843dc:	56028000 	.word	0x56028000

341843e0 <LL_RCC_IC10_Enable>:
{
341843e0:	b480      	push	{r7}
341843e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
341843e4:	4b04      	ldr	r3, [pc, #16]	@ (341843f8 <LL_RCC_IC10_Enable+0x18>)
341843e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
341843ea:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341843ee:	bf00      	nop
341843f0:	46bd      	mov	sp, r7
341843f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341843f6:	4770      	bx	lr
341843f8:	56028000 	.word	0x56028000

341843fc <LL_RCC_IC10_IsEnabled>:
{
341843fc:	b480      	push	{r7}
341843fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34184400:	4b07      	ldr	r3, [pc, #28]	@ (34184420 <LL_RCC_IC10_IsEnabled+0x24>)
34184402:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418440a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418440e:	d101      	bne.n	34184414 <LL_RCC_IC10_IsEnabled+0x18>
34184410:	2301      	movs	r3, #1
34184412:	e000      	b.n	34184416 <LL_RCC_IC10_IsEnabled+0x1a>
34184414:	2300      	movs	r3, #0
}
34184416:	4618      	mov	r0, r3
34184418:	46bd      	mov	sp, r7
3418441a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418441e:	4770      	bx	lr
34184420:	56028000 	.word	0x56028000

34184424 <LL_RCC_IC10_GetSource>:
{
34184424:	b480      	push	{r7}
34184426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34184428:	4b04      	ldr	r3, [pc, #16]	@ (3418443c <LL_RCC_IC10_GetSource+0x18>)
3418442a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418442e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184432:	4618      	mov	r0, r3
34184434:	46bd      	mov	sp, r7
34184436:	f85d 7b04 	ldr.w	r7, [sp], #4
3418443a:	4770      	bx	lr
3418443c:	56028000 	.word	0x56028000

34184440 <LL_RCC_IC10_GetDivider>:
{
34184440:	b480      	push	{r7}
34184442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34184444:	4b05      	ldr	r3, [pc, #20]	@ (3418445c <LL_RCC_IC10_GetDivider+0x1c>)
34184446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418444a:	0c1b      	lsrs	r3, r3, #16
3418444c:	b2db      	uxtb	r3, r3
3418444e:	3301      	adds	r3, #1
}
34184450:	4618      	mov	r0, r3
34184452:	46bd      	mov	sp, r7
34184454:	f85d 7b04 	ldr.w	r7, [sp], #4
34184458:	4770      	bx	lr
3418445a:	bf00      	nop
3418445c:	56028000 	.word	0x56028000

34184460 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34184460:	b480      	push	{r7}
34184462:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34184464:	4b04      	ldr	r3, [pc, #16]	@ (34184478 <LL_RCC_IC12_Enable+0x18>)
34184466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418446a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418446e:	bf00      	nop
34184470:	46bd      	mov	sp, r7
34184472:	f85d 7b04 	ldr.w	r7, [sp], #4
34184476:	4770      	bx	lr
34184478:	56028000 	.word	0x56028000

3418447c <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
3418447c:	b480      	push	{r7}
3418447e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34184480:	4b07      	ldr	r3, [pc, #28]	@ (341844a0 <LL_RCC_IC12_IsEnabled+0x24>)
34184482:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418448a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418448e:	d101      	bne.n	34184494 <LL_RCC_IC12_IsEnabled+0x18>
34184490:	2301      	movs	r3, #1
34184492:	e000      	b.n	34184496 <LL_RCC_IC12_IsEnabled+0x1a>
34184494:	2300      	movs	r3, #0
}
34184496:	4618      	mov	r0, r3
34184498:	46bd      	mov	sp, r7
3418449a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418449e:	4770      	bx	lr
341844a0:	56028000 	.word	0x56028000

341844a4 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
341844a4:	b480      	push	{r7}
341844a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
341844a8:	4b04      	ldr	r3, [pc, #16]	@ (341844bc <LL_RCC_IC12_GetSource+0x18>)
341844aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341844ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341844b2:	4618      	mov	r0, r3
341844b4:	46bd      	mov	sp, r7
341844b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341844ba:	4770      	bx	lr
341844bc:	56028000 	.word	0x56028000

341844c0 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
341844c0:	b480      	push	{r7}
341844c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
341844c4:	4b05      	ldr	r3, [pc, #20]	@ (341844dc <LL_RCC_IC12_GetDivider+0x1c>)
341844c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341844ca:	0c1b      	lsrs	r3, r3, #16
341844cc:	b2db      	uxtb	r3, r3
341844ce:	3301      	adds	r3, #1
}
341844d0:	4618      	mov	r0, r3
341844d2:	46bd      	mov	sp, r7
341844d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341844d8:	4770      	bx	lr
341844da:	bf00      	nop
341844dc:	56028000 	.word	0x56028000

341844e0 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
341844e0:	b480      	push	{r7}
341844e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
341844e4:	4b04      	ldr	r3, [pc, #16]	@ (341844f8 <LL_RCC_IC13_Enable+0x18>)
341844e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
341844ea:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341844ee:	bf00      	nop
341844f0:	46bd      	mov	sp, r7
341844f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341844f6:	4770      	bx	lr
341844f8:	56028000 	.word	0x56028000

341844fc <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
341844fc:	b480      	push	{r7}
341844fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34184500:	4b07      	ldr	r3, [pc, #28]	@ (34184520 <LL_RCC_IC13_IsEnabled+0x24>)
34184502:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418450a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418450e:	d101      	bne.n	34184514 <LL_RCC_IC13_IsEnabled+0x18>
34184510:	2301      	movs	r3, #1
34184512:	e000      	b.n	34184516 <LL_RCC_IC13_IsEnabled+0x1a>
34184514:	2300      	movs	r3, #0
}
34184516:	4618      	mov	r0, r3
34184518:	46bd      	mov	sp, r7
3418451a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418451e:	4770      	bx	lr
34184520:	56028000 	.word	0x56028000

34184524 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34184524:	b480      	push	{r7}
34184526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34184528:	4b04      	ldr	r3, [pc, #16]	@ (3418453c <LL_RCC_IC13_GetSource+0x18>)
3418452a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418452e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184532:	4618      	mov	r0, r3
34184534:	46bd      	mov	sp, r7
34184536:	f85d 7b04 	ldr.w	r7, [sp], #4
3418453a:	4770      	bx	lr
3418453c:	56028000 	.word	0x56028000

34184540 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34184540:	b480      	push	{r7}
34184542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34184544:	4b05      	ldr	r3, [pc, #20]	@ (3418455c <LL_RCC_IC13_GetDivider+0x1c>)
34184546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418454a:	0c1b      	lsrs	r3, r3, #16
3418454c:	b2db      	uxtb	r3, r3
3418454e:	3301      	adds	r3, #1
}
34184550:	4618      	mov	r0, r3
34184552:	46bd      	mov	sp, r7
34184554:	f85d 7b04 	ldr.w	r7, [sp], #4
34184558:	4770      	bx	lr
3418455a:	bf00      	nop
3418455c:	56028000 	.word	0x56028000

34184560 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34184560:	b480      	push	{r7}
34184562:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184564:	4b04      	ldr	r3, [pc, #16]	@ (34184578 <LL_RCC_IC14_Enable+0x18>)
34184566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418456a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418456e:	bf00      	nop
34184570:	46bd      	mov	sp, r7
34184572:	f85d 7b04 	ldr.w	r7, [sp], #4
34184576:	4770      	bx	lr
34184578:	56028000 	.word	0x56028000

3418457c <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
3418457c:	b480      	push	{r7}
3418457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34184580:	4b07      	ldr	r3, [pc, #28]	@ (341845a0 <LL_RCC_IC14_IsEnabled+0x24>)
34184582:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418458a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418458e:	d101      	bne.n	34184594 <LL_RCC_IC14_IsEnabled+0x18>
34184590:	2301      	movs	r3, #1
34184592:	e000      	b.n	34184596 <LL_RCC_IC14_IsEnabled+0x1a>
34184594:	2300      	movs	r3, #0
}
34184596:	4618      	mov	r0, r3
34184598:	46bd      	mov	sp, r7
3418459a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418459e:	4770      	bx	lr
341845a0:	56028000 	.word	0x56028000

341845a4 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
341845a4:	b480      	push	{r7}
341845a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
341845a8:	4b04      	ldr	r3, [pc, #16]	@ (341845bc <LL_RCC_IC14_GetSource+0x18>)
341845aa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341845ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341845b2:	4618      	mov	r0, r3
341845b4:	46bd      	mov	sp, r7
341845b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341845ba:	4770      	bx	lr
341845bc:	56028000 	.word	0x56028000

341845c0 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
341845c0:	b480      	push	{r7}
341845c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
341845c4:	4b05      	ldr	r3, [pc, #20]	@ (341845dc <LL_RCC_IC14_GetDivider+0x1c>)
341845c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341845ca:	0c1b      	lsrs	r3, r3, #16
341845cc:	b2db      	uxtb	r3, r3
341845ce:	3301      	adds	r3, #1
}
341845d0:	4618      	mov	r0, r3
341845d2:	46bd      	mov	sp, r7
341845d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341845d8:	4770      	bx	lr
341845da:	bf00      	nop
341845dc:	56028000 	.word	0x56028000

341845e0 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
341845e0:	b480      	push	{r7}
341845e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
341845e4:	4b04      	ldr	r3, [pc, #16]	@ (341845f8 <LL_RCC_IC15_Enable+0x18>)
341845e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
341845ea:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341845ee:	bf00      	nop
341845f0:	46bd      	mov	sp, r7
341845f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341845f6:	4770      	bx	lr
341845f8:	56028000 	.word	0x56028000

341845fc <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
341845fc:	b480      	push	{r7}
341845fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34184600:	4b07      	ldr	r3, [pc, #28]	@ (34184620 <LL_RCC_IC15_IsEnabled+0x24>)
34184602:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418460a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418460e:	d101      	bne.n	34184614 <LL_RCC_IC15_IsEnabled+0x18>
34184610:	2301      	movs	r3, #1
34184612:	e000      	b.n	34184616 <LL_RCC_IC15_IsEnabled+0x1a>
34184614:	2300      	movs	r3, #0
}
34184616:	4618      	mov	r0, r3
34184618:	46bd      	mov	sp, r7
3418461a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418461e:	4770      	bx	lr
34184620:	56028000 	.word	0x56028000

34184624 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34184624:	b480      	push	{r7}
34184626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34184628:	4b04      	ldr	r3, [pc, #16]	@ (3418463c <LL_RCC_IC15_GetSource+0x18>)
3418462a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418462e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184632:	4618      	mov	r0, r3
34184634:	46bd      	mov	sp, r7
34184636:	f85d 7b04 	ldr.w	r7, [sp], #4
3418463a:	4770      	bx	lr
3418463c:	56028000 	.word	0x56028000

34184640 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34184640:	b480      	push	{r7}
34184642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34184644:	4b05      	ldr	r3, [pc, #20]	@ (3418465c <LL_RCC_IC15_GetDivider+0x1c>)
34184646:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418464a:	0c1b      	lsrs	r3, r3, #16
3418464c:	b2db      	uxtb	r3, r3
3418464e:	3301      	adds	r3, #1
}
34184650:	4618      	mov	r0, r3
34184652:	46bd      	mov	sp, r7
34184654:	f85d 7b04 	ldr.w	r7, [sp], #4
34184658:	4770      	bx	lr
3418465a:	bf00      	nop
3418465c:	56028000 	.word	0x56028000

34184660 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34184660:	b480      	push	{r7}
34184662:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34184664:	4b04      	ldr	r3, [pc, #16]	@ (34184678 <LL_RCC_IC16_Enable+0x18>)
34184666:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418466a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418466e:	bf00      	nop
34184670:	46bd      	mov	sp, r7
34184672:	f85d 7b04 	ldr.w	r7, [sp], #4
34184676:	4770      	bx	lr
34184678:	56028000 	.word	0x56028000

3418467c <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
3418467c:	b480      	push	{r7}
3418467e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34184680:	4b07      	ldr	r3, [pc, #28]	@ (341846a0 <LL_RCC_IC16_IsEnabled+0x24>)
34184682:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418468a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418468e:	d101      	bne.n	34184694 <LL_RCC_IC16_IsEnabled+0x18>
34184690:	2301      	movs	r3, #1
34184692:	e000      	b.n	34184696 <LL_RCC_IC16_IsEnabled+0x1a>
34184694:	2300      	movs	r3, #0
}
34184696:	4618      	mov	r0, r3
34184698:	46bd      	mov	sp, r7
3418469a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418469e:	4770      	bx	lr
341846a0:	56028000 	.word	0x56028000

341846a4 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
341846a4:	b480      	push	{r7}
341846a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
341846a8:	4b04      	ldr	r3, [pc, #16]	@ (341846bc <LL_RCC_IC16_GetSource+0x18>)
341846aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
341846ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341846b2:	4618      	mov	r0, r3
341846b4:	46bd      	mov	sp, r7
341846b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341846ba:	4770      	bx	lr
341846bc:	56028000 	.word	0x56028000

341846c0 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
341846c0:	b480      	push	{r7}
341846c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
341846c4:	4b05      	ldr	r3, [pc, #20]	@ (341846dc <LL_RCC_IC16_GetDivider+0x1c>)
341846c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
341846ca:	0c1b      	lsrs	r3, r3, #16
341846cc:	b2db      	uxtb	r3, r3
341846ce:	3301      	adds	r3, #1
}
341846d0:	4618      	mov	r0, r3
341846d2:	46bd      	mov	sp, r7
341846d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341846d8:	4770      	bx	lr
341846da:	bf00      	nop
341846dc:	56028000 	.word	0x56028000

341846e0 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
341846e0:	b480      	push	{r7}
341846e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
341846e4:	4b04      	ldr	r3, [pc, #16]	@ (341846f8 <LL_RCC_IC17_Enable+0x18>)
341846e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
341846ea:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341846ee:	bf00      	nop
341846f0:	46bd      	mov	sp, r7
341846f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341846f6:	4770      	bx	lr
341846f8:	56028000 	.word	0x56028000

341846fc <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
341846fc:	b480      	push	{r7}
341846fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34184700:	4b07      	ldr	r3, [pc, #28]	@ (34184720 <LL_RCC_IC17_IsEnabled+0x24>)
34184702:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418470a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418470e:	d101      	bne.n	34184714 <LL_RCC_IC17_IsEnabled+0x18>
34184710:	2301      	movs	r3, #1
34184712:	e000      	b.n	34184716 <LL_RCC_IC17_IsEnabled+0x1a>
34184714:	2300      	movs	r3, #0
}
34184716:	4618      	mov	r0, r3
34184718:	46bd      	mov	sp, r7
3418471a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418471e:	4770      	bx	lr
34184720:	56028000 	.word	0x56028000

34184724 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34184724:	b480      	push	{r7}
34184726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34184728:	4b04      	ldr	r3, [pc, #16]	@ (3418473c <LL_RCC_IC17_GetSource+0x18>)
3418472a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418472e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184732:	4618      	mov	r0, r3
34184734:	46bd      	mov	sp, r7
34184736:	f85d 7b04 	ldr.w	r7, [sp], #4
3418473a:	4770      	bx	lr
3418473c:	56028000 	.word	0x56028000

34184740 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34184740:	b480      	push	{r7}
34184742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34184744:	4b05      	ldr	r3, [pc, #20]	@ (3418475c <LL_RCC_IC17_GetDivider+0x1c>)
34184746:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418474a:	0c1b      	lsrs	r3, r3, #16
3418474c:	b2db      	uxtb	r3, r3
3418474e:	3301      	adds	r3, #1
}
34184750:	4618      	mov	r0, r3
34184752:	46bd      	mov	sp, r7
34184754:	f85d 7b04 	ldr.w	r7, [sp], #4
34184758:	4770      	bx	lr
3418475a:	bf00      	nop
3418475c:	56028000 	.word	0x56028000

34184760 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34184760:	b480      	push	{r7}
34184762:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34184764:	4b04      	ldr	r3, [pc, #16]	@ (34184778 <LL_RCC_IC18_Enable+0x18>)
34184766:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418476a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418476e:	bf00      	nop
34184770:	46bd      	mov	sp, r7
34184772:	f85d 7b04 	ldr.w	r7, [sp], #4
34184776:	4770      	bx	lr
34184778:	56028000 	.word	0x56028000

3418477c <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
3418477c:	b480      	push	{r7}
3418477e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34184780:	4b07      	ldr	r3, [pc, #28]	@ (341847a0 <LL_RCC_IC18_IsEnabled+0x24>)
34184782:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418478a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418478e:	d101      	bne.n	34184794 <LL_RCC_IC18_IsEnabled+0x18>
34184790:	2301      	movs	r3, #1
34184792:	e000      	b.n	34184796 <LL_RCC_IC18_IsEnabled+0x1a>
34184794:	2300      	movs	r3, #0
}
34184796:	4618      	mov	r0, r3
34184798:	46bd      	mov	sp, r7
3418479a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418479e:	4770      	bx	lr
341847a0:	56028000 	.word	0x56028000

341847a4 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
341847a4:	b480      	push	{r7}
341847a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
341847a8:	4b04      	ldr	r3, [pc, #16]	@ (341847bc <LL_RCC_IC18_GetSource+0x18>)
341847aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341847ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341847b2:	4618      	mov	r0, r3
341847b4:	46bd      	mov	sp, r7
341847b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341847ba:	4770      	bx	lr
341847bc:	56028000 	.word	0x56028000

341847c0 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
341847c0:	b480      	push	{r7}
341847c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
341847c4:	4b05      	ldr	r3, [pc, #20]	@ (341847dc <LL_RCC_IC18_GetDivider+0x1c>)
341847c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341847ca:	0c1b      	lsrs	r3, r3, #16
341847cc:	b2db      	uxtb	r3, r3
341847ce:	3301      	adds	r3, #1
}
341847d0:	4618      	mov	r0, r3
341847d2:	46bd      	mov	sp, r7
341847d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341847d8:	4770      	bx	lr
341847da:	bf00      	nop
341847dc:	56028000 	.word	0x56028000

341847e0 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
341847e0:	b480      	push	{r7}
341847e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
341847e4:	4b04      	ldr	r3, [pc, #16]	@ (341847f8 <LL_RCC_IC19_Enable+0x18>)
341847e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
341847ea:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341847ee:	bf00      	nop
341847f0:	46bd      	mov	sp, r7
341847f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341847f6:	4770      	bx	lr
341847f8:	56028000 	.word	0x56028000

341847fc <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
341847fc:	b480      	push	{r7}
341847fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34184800:	4b07      	ldr	r3, [pc, #28]	@ (34184820 <LL_RCC_IC19_IsEnabled+0x24>)
34184802:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418480a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418480e:	d101      	bne.n	34184814 <LL_RCC_IC19_IsEnabled+0x18>
34184810:	2301      	movs	r3, #1
34184812:	e000      	b.n	34184816 <LL_RCC_IC19_IsEnabled+0x1a>
34184814:	2300      	movs	r3, #0
}
34184816:	4618      	mov	r0, r3
34184818:	46bd      	mov	sp, r7
3418481a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418481e:	4770      	bx	lr
34184820:	56028000 	.word	0x56028000

34184824 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34184824:	b480      	push	{r7}
34184826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34184828:	4b04      	ldr	r3, [pc, #16]	@ (3418483c <LL_RCC_IC19_GetSource+0x18>)
3418482a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418482e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184832:	4618      	mov	r0, r3
34184834:	46bd      	mov	sp, r7
34184836:	f85d 7b04 	ldr.w	r7, [sp], #4
3418483a:	4770      	bx	lr
3418483c:	56028000 	.word	0x56028000

34184840 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34184840:	b480      	push	{r7}
34184842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34184844:	4b05      	ldr	r3, [pc, #20]	@ (3418485c <LL_RCC_IC19_GetDivider+0x1c>)
34184846:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418484a:	0c1b      	lsrs	r3, r3, #16
3418484c:	b2db      	uxtb	r3, r3
3418484e:	3301      	adds	r3, #1
}
34184850:	4618      	mov	r0, r3
34184852:	46bd      	mov	sp, r7
34184854:	f85d 7b04 	ldr.w	r7, [sp], #4
34184858:	4770      	bx	lr
3418485a:	bf00      	nop
3418485c:	56028000 	.word	0x56028000

34184860 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34184860:	b480      	push	{r7}
34184862:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34184864:	4b04      	ldr	r3, [pc, #16]	@ (34184878 <LL_RCC_IC20_Enable+0x18>)
34184866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3418486a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418486e:	bf00      	nop
34184870:	46bd      	mov	sp, r7
34184872:	f85d 7b04 	ldr.w	r7, [sp], #4
34184876:	4770      	bx	lr
34184878:	56028000 	.word	0x56028000

3418487c <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
3418487c:	b480      	push	{r7}
3418487e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34184880:	4b07      	ldr	r3, [pc, #28]	@ (341848a0 <LL_RCC_IC20_IsEnabled+0x24>)
34184882:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418488a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3418488e:	d101      	bne.n	34184894 <LL_RCC_IC20_IsEnabled+0x18>
34184890:	2301      	movs	r3, #1
34184892:	e000      	b.n	34184896 <LL_RCC_IC20_IsEnabled+0x1a>
34184894:	2300      	movs	r3, #0
}
34184896:	4618      	mov	r0, r3
34184898:	46bd      	mov	sp, r7
3418489a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418489e:	4770      	bx	lr
341848a0:	56028000 	.word	0x56028000

341848a4 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
341848a4:	b480      	push	{r7}
341848a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
341848a8:	4b04      	ldr	r3, [pc, #16]	@ (341848bc <LL_RCC_IC20_GetSource+0x18>)
341848aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341848ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341848b2:	4618      	mov	r0, r3
341848b4:	46bd      	mov	sp, r7
341848b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341848ba:	4770      	bx	lr
341848bc:	56028000 	.word	0x56028000

341848c0 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
341848c0:	b480      	push	{r7}
341848c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
341848c4:	4b05      	ldr	r3, [pc, #20]	@ (341848dc <LL_RCC_IC20_GetDivider+0x1c>)
341848c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341848ca:	0c1b      	lsrs	r3, r3, #16
341848cc:	b2db      	uxtb	r3, r3
341848ce:	3301      	adds	r3, #1
}
341848d0:	4618      	mov	r0, r3
341848d2:	46bd      	mov	sp, r7
341848d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341848d8:	4770      	bx	lr
341848da:	bf00      	nop
341848dc:	56028000 	.word	0x56028000

341848e0 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
341848e0:	b480      	push	{r7}
341848e2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341848e4:	4b04      	ldr	r3, [pc, #16]	@ (341848f8 <LL_RCC_CLKP_Enable+0x18>)
341848e6:	2240      	movs	r2, #64	@ 0x40
341848e8:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
341848ec:	bf00      	nop
341848ee:	46bd      	mov	sp, r7
341848f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341848f4:	4770      	bx	lr
341848f6:	bf00      	nop
341848f8:	56028000 	.word	0x56028000

341848fc <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
341848fc:	b480      	push	{r7}
341848fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34184900:	4b07      	ldr	r3, [pc, #28]	@ (34184920 <LL_RCC_CLKP_IsEnabled+0x24>)
34184902:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34184906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418490a:	2b40      	cmp	r3, #64	@ 0x40
3418490c:	d101      	bne.n	34184912 <LL_RCC_CLKP_IsEnabled+0x16>
3418490e:	2301      	movs	r3, #1
34184910:	e000      	b.n	34184914 <LL_RCC_CLKP_IsEnabled+0x18>
34184912:	2300      	movs	r3, #0
}
34184914:	4618      	mov	r0, r3
34184916:	46bd      	mov	sp, r7
34184918:	f85d 7b04 	ldr.w	r7, [sp], #4
3418491c:	4770      	bx	lr
3418491e:	bf00      	nop
34184920:	56028000 	.word	0x56028000

34184924 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34184924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34184928:	b0f2      	sub	sp, #456	@ 0x1c8
3418492a:	af00      	add	r7, sp, #0
3418492c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34184930:	2300      	movs	r3, #0
34184932:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34184936:	2300      	movs	r3, #0
34184938:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3418493c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184940:	e9d3 2300 	ldrd	r2, r3, [r3]
34184944:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
34184948:	2500      	movs	r5, #0
3418494a:	ea54 0305 	orrs.w	r3, r4, r5
3418494e:	d06c      	beq.n	34184a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34184950:	f7ff f91e 	bl	34183b90 <LL_RCC_GetRTCClockSource>
34184954:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34184958:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
3418495c:	2b00      	cmp	r3, #0
3418495e:	d018      	beq.n	34184992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
34184960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184964:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184968:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3418496c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34184970:	4293      	cmp	r3, r2
34184972:	d00e      	beq.n	34184992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34184974:	4bc3      	ldr	r3, [pc, #780]	@ (34184c84 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184978:	4ac2      	ldr	r2, [pc, #776]	@ (34184c84 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418497a:	f043 0301 	orr.w	r3, r3, #1
3418497e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34184980:	4bc0      	ldr	r3, [pc, #768]	@ (34184c84 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184984:	f003 0301 	and.w	r3, r3, #1
34184988:	2b00      	cmp	r3, #0
3418498a:	d102      	bne.n	34184992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
3418498c:	2301      	movs	r3, #1
3418498e:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34184992:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184996:	2b00      	cmp	r3, #0
34184998:	d143      	bne.n	34184a22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3418499a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418499e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341849a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341849a6:	d117      	bne.n	341849d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341849a8:	f7fc fc4c 	bl	34181244 <HAL_GetTick>
341849ac:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
341849b0:	e00d      	b.n	341849ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341849b2:	f7fc fc47 	bl	34181244 <HAL_GetTick>
341849b6:	4602      	mov	r2, r0
341849b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
341849bc:	1ad2      	subs	r2, r2, r3
341849be:	f241 3388 	movw	r3, #5000	@ 0x1388
341849c2:	429a      	cmp	r2, r3
341849c4:	d903      	bls.n	341849ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
341849c6:	2303      	movs	r3, #3
341849c8:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
341849cc:	e004      	b.n	341849d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
341849ce:	f7fe fcf1 	bl	341833b4 <LL_RCC_LSE_IsReady>
341849d2:	4603      	mov	r3, r0
341849d4:	2b00      	cmp	r3, #0
341849d6:	d0ec      	beq.n	341849b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
341849d8:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
341849dc:	2b00      	cmp	r3, #0
341849de:	d11b      	bne.n	34184a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
341849e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341849e4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341849e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
341849ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341849f0:	d108      	bne.n	34184a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
341849f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341849f6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341849fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
341849fe:	4618      	mov	r0, r3
34184a00:	f7ff f8d4 	bl	34183bac <LL_RCC_SetRTC_HSEPrescaler>
34184a04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a08:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34184a10:	4618      	mov	r0, r3
34184a12:	f7ff f8a7 	bl	34183b64 <LL_RCC_SetRTCClockSource>
34184a16:	e008      	b.n	34184a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34184a18:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184a1c:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34184a20:	e003      	b.n	34184a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34184a22:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184a26:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34184a2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
34184a32:	f002 0804 	and.w	r8, r2, #4
34184a36:	f04f 0900 	mov.w	r9, #0
34184a3a:	ea58 0309 	orrs.w	r3, r8, r9
34184a3e:	f000 809b 	beq.w	34184b78 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34184a42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184a4a:	2b04      	cmp	r3, #4
34184a4c:	d116      	bne.n	34184a7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34184a4e:	4b8e      	ldr	r3, [pc, #568]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184a50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34184a54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184a58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184a5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34184a62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184a68:	3b01      	subs	r3, #1
34184a6a:	041b      	lsls	r3, r3, #16
34184a6c:	4313      	orrs	r3, r2
34184a6e:	4a86      	ldr	r2, [pc, #536]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184a70:	430b      	orrs	r3, r1
34184a72:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34184a76:	f7ff fbb3 	bl	341841e0 <LL_RCC_IC5_Enable>
34184a7a:	e076      	b.n	34184b6a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34184a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184a84:	2b05      	cmp	r3, #5
34184a86:	d116      	bne.n	34184ab6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34184a88:	4b7f      	ldr	r3, [pc, #508]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34184a8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184a92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184a96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184a9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34184a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34184aa2:	3b01      	subs	r3, #1
34184aa4:	041b      	lsls	r3, r3, #16
34184aa6:	4313      	orrs	r3, r2
34184aa8:	4a77      	ldr	r2, [pc, #476]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184aaa:	430b      	orrs	r3, r1
34184aac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34184ab0:	f7ff fc96 	bl	341843e0 <LL_RCC_IC10_Enable>
34184ab4:	e059      	b.n	34184b6a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34184ab6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184aba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184abe:	2b06      	cmp	r3, #6
34184ac0:	d116      	bne.n	34184af0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34184ac2:	4b71      	ldr	r3, [pc, #452]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184ac4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34184ac8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184acc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ad4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34184ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34184adc:	3b01      	subs	r3, #1
34184ade:	041b      	lsls	r3, r3, #16
34184ae0:	4313      	orrs	r3, r2
34184ae2:	4a69      	ldr	r2, [pc, #420]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184ae4:	430b      	orrs	r3, r1
34184ae6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34184aea:	f7ff fd79 	bl	341845e0 <LL_RCC_IC15_Enable>
34184aee:	e03c      	b.n	34184b6a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34184af0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184af4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184af8:	2b03      	cmp	r3, #3
34184afa:	d118      	bne.n	34184b2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34184afc:	4b62      	ldr	r3, [pc, #392]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184afe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34184b02:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184b06:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184b0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34184b12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34184b1a:	3b01      	subs	r3, #1
34184b1c:	041b      	lsls	r3, r3, #16
34184b1e:	4313      	orrs	r3, r2
34184b20:	4a59      	ldr	r2, [pc, #356]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184b22:	430b      	orrs	r3, r1
34184b24:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34184b28:	f7ff fe5a 	bl	341847e0 <LL_RCC_IC19_Enable>
34184b2c:	e01d      	b.n	34184b6a <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
34184b2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184b36:	2b07      	cmp	r3, #7
34184b38:	d117      	bne.n	34184b6a <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34184b3a:	4b53      	ldr	r3, [pc, #332]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184b3c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34184b40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184b44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184b48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34184b50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34184b58:	3b01      	subs	r3, #1
34184b5a:	041b      	lsls	r3, r3, #16
34184b5c:	4313      	orrs	r3, r2
34184b5e:	4a4a      	ldr	r2, [pc, #296]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184b60:	430b      	orrs	r3, r1
34184b62:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34184b66:	f7ff fe7b 	bl	34184860 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34184b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184b72:	4618      	mov	r0, r3
34184b74:	f7fe fcd2 	bl	3418351c <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34184b78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
34184b80:	f04f 0a00 	mov.w	sl, #0
34184b84:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34184b88:	ea5a 030b 	orrs.w	r3, sl, fp
34184b8c:	d04b      	beq.n	34184c26 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34184b8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184b92:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34184b96:	4b3d      	ldr	r3, [pc, #244]	@ (34184c8c <HAL_RCCEx_PeriphCLKConfig+0x368>)
34184b98:	429a      	cmp	r2, r3
34184b9a:	d116      	bne.n	34184bca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34184b9c:	4b3a      	ldr	r3, [pc, #232]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184b9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34184ba2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184ba6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184baa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184bae:	699a      	ldr	r2, [r3, #24]
34184bb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184bb4:	69db      	ldr	r3, [r3, #28]
34184bb6:	3b01      	subs	r3, #1
34184bb8:	041b      	lsls	r3, r3, #16
34184bba:	4313      	orrs	r3, r2
34184bbc:	4a32      	ldr	r2, [pc, #200]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184bbe:	430b      	orrs	r3, r1
34184bc0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34184bc4:	f7ff fa8c 	bl	341840e0 <LL_RCC_IC3_Enable>
34184bc8:	e026      	b.n	34184c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34184bca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184bce:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34184bd2:	4b2f      	ldr	r3, [pc, #188]	@ (34184c90 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34184bd4:	429a      	cmp	r2, r3
34184bd6:	d116      	bne.n	34184c06 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184bd8:	4b2b      	ldr	r3, [pc, #172]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184bda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184bde:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184be2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184be6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184bea:	6a1a      	ldr	r2, [r3, #32]
34184bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184bf2:	3b01      	subs	r3, #1
34184bf4:	041b      	lsls	r3, r3, #16
34184bf6:	4313      	orrs	r3, r2
34184bf8:	4a23      	ldr	r2, [pc, #140]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184bfa:	430b      	orrs	r3, r1
34184bfc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184c00:	f7ff faae 	bl	34184160 <LL_RCC_IC4_Enable>
34184c04:	e008      	b.n	34184c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34184c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c0a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34184c0e:	4b21      	ldr	r3, [pc, #132]	@ (34184c94 <HAL_RCCEx_PeriphCLKConfig+0x370>)
34184c10:	429a      	cmp	r2, r3
34184c12:	d101      	bne.n	34184c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
34184c14:	f7ff fe64 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
34184c18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34184c20:	4618      	mov	r0, r3
34184c22:	f7fe fe0b 	bl	3418383c <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34184c26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
34184c2e:	2100      	movs	r1, #0
34184c30:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
34184c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34184c38:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
34184c3c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
34184c40:	4603      	mov	r3, r0
34184c42:	460a      	mov	r2, r1
34184c44:	4313      	orrs	r3, r2
34184c46:	d057      	beq.n	34184cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34184c48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34184c50:	4b11      	ldr	r3, [pc, #68]	@ (34184c98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
34184c52:	429a      	cmp	r2, r3
34184c54:	d122      	bne.n	34184c9c <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34184c56:	4b0c      	ldr	r3, [pc, #48]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184c58:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34184c5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184c60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184c64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c68:	699a      	ldr	r2, [r3, #24]
34184c6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184c6e:	69db      	ldr	r3, [r3, #28]
34184c70:	3b01      	subs	r3, #1
34184c72:	041b      	lsls	r3, r3, #16
34184c74:	4313      	orrs	r3, r2
34184c76:	4a04      	ldr	r2, [pc, #16]	@ (34184c88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184c78:	430b      	orrs	r3, r1
34184c7a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34184c7e:	f7ff fa2f 	bl	341840e0 <LL_RCC_IC3_Enable>
34184c82:	e032      	b.n	34184cea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34184c84:	56024800 	.word	0x56024800
34184c88:	56028000 	.word	0x56028000
34184c8c:	03020014 	.word	0x03020014
34184c90:	03030014 	.word	0x03030014
34184c94:	03010014 	.word	0x03010014
34184c98:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34184c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ca0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34184ca4:	4bc5      	ldr	r3, [pc, #788]	@ (34184fbc <HAL_RCCEx_PeriphCLKConfig+0x698>)
34184ca6:	429a      	cmp	r2, r3
34184ca8:	d116      	bne.n	34184cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184caa:	4bc5      	ldr	r3, [pc, #788]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184cac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184cb0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184cb4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184cb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184cbc:	6a1a      	ldr	r2, [r3, #32]
34184cbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184cc4:	3b01      	subs	r3, #1
34184cc6:	041b      	lsls	r3, r3, #16
34184cc8:	4313      	orrs	r3, r2
34184cca:	4abd      	ldr	r2, [pc, #756]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184ccc:	430b      	orrs	r3, r1
34184cce:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184cd2:	f7ff fa45 	bl	34184160 <LL_RCC_IC4_Enable>
34184cd6:	e008      	b.n	34184cea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34184cd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184cdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34184ce0:	4bb8      	ldr	r3, [pc, #736]	@ (34184fc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
34184ce2:	429a      	cmp	r2, r3
34184ce4:	d101      	bne.n	34184cea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
34184ce6:	f7ff fdfb 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34184cea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184cf2:	4618      	mov	r0, r3
34184cf4:	f7fe fda2 	bl	3418383c <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34184cf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
34184d00:	2100      	movs	r1, #0
34184d02:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
34184d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34184d0a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
34184d0e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
34184d12:	4603      	mov	r3, r0
34184d14:	460a      	mov	r2, r1
34184d16:	4313      	orrs	r3, r2
34184d18:	d04b      	beq.n	34184db2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34184d1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d1e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34184d22:	4ba9      	ldr	r3, [pc, #676]	@ (34184fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
34184d24:	429a      	cmp	r2, r3
34184d26:	d116      	bne.n	34184d56 <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34184d28:	4ba5      	ldr	r3, [pc, #660]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184d2a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34184d2e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184d32:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184d36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d3a:	699a      	ldr	r2, [r3, #24]
34184d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d40:	69db      	ldr	r3, [r3, #28]
34184d42:	3b01      	subs	r3, #1
34184d44:	041b      	lsls	r3, r3, #16
34184d46:	4313      	orrs	r3, r2
34184d48:	4a9d      	ldr	r2, [pc, #628]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184d4a:	430b      	orrs	r3, r1
34184d4c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34184d50:	f7ff f9c6 	bl	341840e0 <LL_RCC_IC3_Enable>
34184d54:	e026      	b.n	34184da4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34184d56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d5a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34184d5e:	4b9b      	ldr	r3, [pc, #620]	@ (34184fcc <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
34184d60:	429a      	cmp	r2, r3
34184d62:	d116      	bne.n	34184d92 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184d64:	4b96      	ldr	r3, [pc, #600]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184d66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184d6a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184d6e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184d72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d76:	6a1a      	ldr	r2, [r3, #32]
34184d78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184d7e:	3b01      	subs	r3, #1
34184d80:	041b      	lsls	r3, r3, #16
34184d82:	4313      	orrs	r3, r2
34184d84:	4a8e      	ldr	r2, [pc, #568]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184d86:	430b      	orrs	r3, r1
34184d88:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184d8c:	f7ff f9e8 	bl	34184160 <LL_RCC_IC4_Enable>
34184d90:	e008      	b.n	34184da4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34184d92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184d96:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34184d9a:	4b8d      	ldr	r3, [pc, #564]	@ (34184fd0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34184d9c:	429a      	cmp	r2, r3
34184d9e:	d101      	bne.n	34184da4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
34184da0:	f7ff fd9e 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34184da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184da8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34184dac:	4618      	mov	r0, r3
34184dae:	f7fe fd45 	bl	3418383c <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34184db2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184db6:	e9d3 2300 	ldrd	r2, r3, [r3]
34184dba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
34184dbe:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
34184dc2:	2300      	movs	r3, #0
34184dc4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34184dc8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34184dcc:	4603      	mov	r3, r0
34184dce:	460a      	mov	r2, r1
34184dd0:	4313      	orrs	r3, r2
34184dd2:	d048      	beq.n	34184e66 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34184dd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184ddc:	2b20      	cmp	r3, #32
34184dde:	d116      	bne.n	34184e0e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34184de0:	4b77      	ldr	r3, [pc, #476]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184de2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34184de6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184dea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184dee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184df2:	699a      	ldr	r2, [r3, #24]
34184df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184df8:	69db      	ldr	r3, [r3, #28]
34184dfa:	3b01      	subs	r3, #1
34184dfc:	041b      	lsls	r3, r3, #16
34184dfe:	4313      	orrs	r3, r2
34184e00:	4a6f      	ldr	r2, [pc, #444]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184e02:	430b      	orrs	r3, r1
34184e04:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34184e08:	f7ff f96a 	bl	341840e0 <LL_RCC_IC3_Enable>
34184e0c:	e024      	b.n	34184e58 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34184e0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184e16:	2b30      	cmp	r3, #48	@ 0x30
34184e18:	d116      	bne.n	34184e48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184e1a:	4b69      	ldr	r3, [pc, #420]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184e1c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184e20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184e24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e2c:	6a1a      	ldr	r2, [r3, #32]
34184e2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184e34:	3b01      	subs	r3, #1
34184e36:	041b      	lsls	r3, r3, #16
34184e38:	4313      	orrs	r3, r2
34184e3a:	4a61      	ldr	r2, [pc, #388]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184e3c:	430b      	orrs	r3, r1
34184e3e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184e42:	f7ff f98d 	bl	34184160 <LL_RCC_IC4_Enable>
34184e46:	e007      	b.n	34184e58 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34184e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184e50:	2b10      	cmp	r3, #16
34184e52:	d101      	bne.n	34184e58 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
34184e54:	f7ff fd44 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34184e58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184e60:	4618      	mov	r0, r3
34184e62:	f7fe fc03 	bl	3418366c <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34184e66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
34184e6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34184e72:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34184e76:	2300      	movs	r3, #0
34184e78:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34184e7c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
34184e80:	4603      	mov	r3, r0
34184e82:	460a      	mov	r2, r1
34184e84:	4313      	orrs	r3, r2
34184e86:	d04b      	beq.n	34184f20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34184e88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184e8c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34184e90:	4b50      	ldr	r3, [pc, #320]	@ (34184fd4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
34184e92:	429a      	cmp	r2, r3
34184e94:	d116      	bne.n	34184ec4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184e96:	4b4a      	ldr	r3, [pc, #296]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184e98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184e9c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184ea0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184ea4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ea8:	6a1a      	ldr	r2, [r3, #32]
34184eaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184eb0:	3b01      	subs	r3, #1
34184eb2:	041b      	lsls	r3, r3, #16
34184eb4:	4313      	orrs	r3, r2
34184eb6:	4a42      	ldr	r2, [pc, #264]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184eb8:	430b      	orrs	r3, r1
34184eba:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184ebe:	f7ff f94f 	bl	34184160 <LL_RCC_IC4_Enable>
34184ec2:	e026      	b.n	34184f12 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34184ec4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ec8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34184ecc:	4b42      	ldr	r3, [pc, #264]	@ (34184fd8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
34184ece:	429a      	cmp	r2, r3
34184ed0:	d116      	bne.n	34184f00 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34184ed2:	4b3b      	ldr	r3, [pc, #236]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184ed4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34184ed8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184edc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184ee0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34184ee6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184eec:	3b01      	subs	r3, #1
34184eee:	041b      	lsls	r3, r3, #16
34184ef0:	4313      	orrs	r3, r2
34184ef2:	4a33      	ldr	r2, [pc, #204]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184ef4:	430b      	orrs	r3, r1
34184ef6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34184efa:	f7ff f971 	bl	341841e0 <LL_RCC_IC5_Enable>
34184efe:	e008      	b.n	34184f12 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34184f00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f04:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34184f08:	4b34      	ldr	r3, [pc, #208]	@ (34184fdc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
34184f0a:	429a      	cmp	r2, r3
34184f0c:	d101      	bne.n	34184f12 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
34184f0e:	f7ff fce7 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
34184f12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f16:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
34184f1a:	4618      	mov	r0, r3
34184f1c:	f7fe fc57 	bl	341837ce <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34184f20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f24:	e9d3 2300 	ldrd	r2, r3, [r3]
34184f28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34184f2c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
34184f30:	2300      	movs	r3, #0
34184f32:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
34184f36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
34184f3a:	4603      	mov	r3, r0
34184f3c:	460a      	mov	r2, r1
34184f3e:	4313      	orrs	r3, r2
34184f40:	d062      	beq.n	34185008 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34184f42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f46:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34184f4a:	4b25      	ldr	r3, [pc, #148]	@ (34184fe0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
34184f4c:	429a      	cmp	r2, r3
34184f4e:	d116      	bne.n	34184f7e <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34184f50:	4b1b      	ldr	r3, [pc, #108]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184f52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184f56:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184f5a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184f5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f62:	6a1a      	ldr	r2, [r3, #32]
34184f64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184f6a:	3b01      	subs	r3, #1
34184f6c:	041b      	lsls	r3, r3, #16
34184f6e:	4313      	orrs	r3, r2
34184f70:	4a13      	ldr	r2, [pc, #76]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184f72:	430b      	orrs	r3, r1
34184f74:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34184f78:	f7ff f8f2 	bl	34184160 <LL_RCC_IC4_Enable>
34184f7c:	e03d      	b.n	34184ffa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34184f7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f82:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34184f86:	4b17      	ldr	r3, [pc, #92]	@ (34184fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34184f88:	429a      	cmp	r2, r3
34184f8a:	d12d      	bne.n	34184fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34184f8c:	4b0c      	ldr	r3, [pc, #48]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34184f92:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184f96:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184f9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34184fa0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184fa6:	3b01      	subs	r3, #1
34184fa8:	041b      	lsls	r3, r3, #16
34184faa:	4313      	orrs	r3, r2
34184fac:	4a04      	ldr	r2, [pc, #16]	@ (34184fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34184fae:	430b      	orrs	r3, r1
34184fb0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34184fb4:	f7ff f914 	bl	341841e0 <LL_RCC_IC5_Enable>
34184fb8:	e01f      	b.n	34184ffa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34184fba:	bf00      	nop
34184fbc:	03030414 	.word	0x03030414
34184fc0:	56028000 	.word	0x56028000
34184fc4:	03010414 	.word	0x03010414
34184fc8:	03020814 	.word	0x03020814
34184fcc:	03030814 	.word	0x03030814
34184fd0:	03010814 	.word	0x03010814
34184fd4:	0302001c 	.word	0x0302001c
34184fd8:	0303001c 	.word	0x0303001c
34184fdc:	0301001c 	.word	0x0301001c
34184fe0:	0302041c 	.word	0x0302041c
34184fe4:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34184fe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fec:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34184ff0:	4bb3      	ldr	r3, [pc, #716]	@ (341852c0 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
34184ff2:	429a      	cmp	r2, r3
34184ff4:	d101      	bne.n	34184ffa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
34184ff6:	f7ff fc73 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
34184ffa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ffe:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
34185002:	4618      	mov	r0, r3
34185004:	f7fe fbe3 	bl	341837ce <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34185008:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418500c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185010:	f002 0301 	and.w	r3, r2, #1
34185014:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
34185018:	2300      	movs	r3, #0
3418501a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3418501e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
34185022:	4603      	mov	r3, r0
34185024:	460a      	mov	r2, r1
34185026:	4313      	orrs	r3, r2
34185028:	d057      	beq.n	341850da <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3418502a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418502e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34185032:	2b20      	cmp	r3, #32
34185034:	d116      	bne.n	34185064 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185036:	4ba3      	ldr	r3, [pc, #652]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418503c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185040:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418504a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185050:	3b01      	subs	r3, #1
34185052:	041b      	lsls	r3, r3, #16
34185054:	4313      	orrs	r3, r2
34185056:	4a9b      	ldr	r2, [pc, #620]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185058:	430b      	orrs	r3, r1
3418505a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418505e:	f7ff f8ff 	bl	34184260 <LL_RCC_IC7_Enable>
34185062:	e024      	b.n	341850ae <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34185064:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185068:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418506c:	2b30      	cmp	r3, #48	@ 0x30
3418506e:	d116      	bne.n	3418509e <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185070:	4b94      	ldr	r3, [pc, #592]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185076:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418507a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418507e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185082:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185084:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418508a:	3b01      	subs	r3, #1
3418508c:	041b      	lsls	r3, r3, #16
3418508e:	4313      	orrs	r3, r2
34185090:	4a8c      	ldr	r2, [pc, #560]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185092:	430b      	orrs	r3, r1
34185094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185098:	f7ff f922 	bl	341842e0 <LL_RCC_IC8_Enable>
3418509c:	e007      	b.n	341850ae <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418509e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341850a6:	2b10      	cmp	r3, #16
341850a8:	d101      	bne.n	341850ae <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
341850aa:	f7ff fc19 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
341850ae:	4b85      	ldr	r3, [pc, #532]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341850b0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341850b4:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
341850b8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
341850bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
341850c4:	3b01      	subs	r3, #1
341850c6:	021a      	lsls	r2, r3, #8
341850c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341850d0:	4313      	orrs	r3, r2
341850d2:	4a7c      	ldr	r2, [pc, #496]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341850d4:	430b      	orrs	r3, r1
341850d6:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
341850da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850de:	e9d3 2300 	ldrd	r2, r3, [r3]
341850e2:	f002 0302 	and.w	r3, r2, #2
341850e6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
341850ea:	2300      	movs	r3, #0
341850ec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
341850f0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
341850f4:	4603      	mov	r3, r0
341850f6:	460a      	mov	r2, r1
341850f8:	4313      	orrs	r3, r2
341850fa:	d048      	beq.n	3418518e <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
341850fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185100:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185104:	2b02      	cmp	r3, #2
34185106:	d116      	bne.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185108:	4b6e      	ldr	r3, [pc, #440]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418510a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418510e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185112:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185116:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418511a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418511c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185122:	3b01      	subs	r3, #1
34185124:	041b      	lsls	r3, r3, #16
34185126:	4313      	orrs	r3, r2
34185128:	4a66      	ldr	r2, [pc, #408]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418512a:	430b      	orrs	r3, r1
3418512c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34185130:	f7ff f896 	bl	34184260 <LL_RCC_IC7_Enable>
34185134:	e024      	b.n	34185180 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34185136:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418513a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418513e:	2b03      	cmp	r3, #3
34185140:	d116      	bne.n	34185170 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185142:	4b60      	ldr	r3, [pc, #384]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185148:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418514c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185156:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418515c:	3b01      	subs	r3, #1
3418515e:	041b      	lsls	r3, r3, #16
34185160:	4313      	orrs	r3, r2
34185162:	4a58      	ldr	r2, [pc, #352]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185164:	430b      	orrs	r3, r1
34185166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418516a:	f7ff f8b9 	bl	341842e0 <LL_RCC_IC8_Enable>
3418516e:	e007      	b.n	34185180 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34185170:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185174:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185178:	2b01      	cmp	r3, #1
3418517a:	d101      	bne.n	34185180 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
3418517c:	f7ff fbb0 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
34185180:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185184:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185188:	4618      	mov	r0, r3
3418518a:	f7fe f9b1 	bl	341834f0 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418518e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185192:	e9d3 2300 	ldrd	r2, r3, [r3]
34185196:	f002 0308 	and.w	r3, r2, #8
3418519a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418519e:	2300      	movs	r3, #0
341851a0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
341851a4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
341851a8:	4603      	mov	r3, r0
341851aa:	460a      	mov	r2, r1
341851ac:	4313      	orrs	r3, r2
341851ae:	d017      	beq.n	341851e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
341851b0:	4b44      	ldr	r3, [pc, #272]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341851b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341851b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341851ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341851be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
341851c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341851ce:	3b01      	subs	r3, #1
341851d0:	041b      	lsls	r3, r3, #16
341851d2:	4313      	orrs	r3, r2
341851d4:	4a3b      	ldr	r2, [pc, #236]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341851d6:	430b      	orrs	r3, r1
341851d8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
341851dc:	f7ff fac0 	bl	34184760 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
341851e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851e4:	e9d3 2300 	ldrd	r2, r3, [r3]
341851e8:	f002 0310 	and.w	r3, r2, #16
341851ec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
341851f0:	2300      	movs	r3, #0
341851f2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
341851f6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
341851fa:	4603      	mov	r3, r0
341851fc:	460a      	mov	r2, r1
341851fe:	4313      	orrs	r3, r2
34185200:	d02f      	beq.n	34185262 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34185202:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185206:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418520a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418520e:	d118      	bne.n	34185242 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34185210:	4b2c      	ldr	r3, [pc, #176]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185212:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185216:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418521a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418521e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185222:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34185226:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3418522e:	3b01      	subs	r3, #1
34185230:	041b      	lsls	r3, r3, #16
34185232:	4313      	orrs	r3, r2
34185234:	4a23      	ldr	r2, [pc, #140]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185236:	430b      	orrs	r3, r1
34185238:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3418523c:	f7ff fa50 	bl	341846e0 <LL_RCC_IC17_Enable>
34185240:	e008      	b.n	34185254 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34185242:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185246:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418524a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418524e:	d101      	bne.n	34185254 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
34185250:	f7ff fb46 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
34185254:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185258:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418525c:	4618      	mov	r0, r3
3418525e:	f7fe f973 	bl	34183548 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34185262:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185266:	e9d3 2300 	ldrd	r2, r3, [r3]
3418526a:	f002 0320 	and.w	r3, r2, #32
3418526e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
34185272:	2300      	movs	r3, #0
34185274:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
34185278:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3418527c:	4603      	mov	r3, r0
3418527e:	460a      	mov	r2, r1
34185280:	4313      	orrs	r3, r2
34185282:	d031      	beq.n	341852e8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34185284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185288:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418528c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34185290:	d11a      	bne.n	341852c8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34185292:	4b0c      	ldr	r3, [pc, #48]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185298:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418529c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341852a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
341852a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341852ac:	3b01      	subs	r3, #1
341852ae:	041b      	lsls	r3, r3, #16
341852b0:	4313      	orrs	r3, r2
341852b2:	4a04      	ldr	r2, [pc, #16]	@ (341852c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341852b4:	430b      	orrs	r3, r1
341852b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
341852ba:	f7ff f8d1 	bl	34184460 <LL_RCC_IC12_Enable>
341852be:	e00c      	b.n	341852da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
341852c0:	0301041c 	.word	0x0301041c
341852c4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
341852c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341852d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341852d4:	d101      	bne.n	341852da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
341852d6:	f7ff fb03 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
341852da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341852e2:	4618      	mov	r0, r3
341852e4:	f7fe f946 	bl	34183574 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
341852e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ec:	e9d3 2300 	ldrd	r2, r3, [r3]
341852f0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
341852f4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
341852f8:	2300      	movs	r3, #0
341852fa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
341852fe:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
34185302:	4603      	mov	r3, r0
34185304:	460a      	mov	r2, r1
34185306:	4313      	orrs	r3, r2
34185308:	d006      	beq.n	34185318 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3418530a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418530e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185312:	4618      	mov	r0, r3
34185314:	f7fe f944 	bl	341835a0 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34185318:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418531c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185320:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34185324:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
34185328:	2300      	movs	r3, #0
3418532a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3418532e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
34185332:	4603      	mov	r3, r0
34185334:	460a      	mov	r2, r1
34185336:	4313      	orrs	r3, r2
34185338:	d006      	beq.n	34185348 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3418533a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418533e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185342:	4618      	mov	r0, r3
34185344:	f7fe f950 	bl	341835e8 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34185348:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418534c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185350:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34185354:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
34185358:	2300      	movs	r3, #0
3418535a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3418535e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
34185362:	4603      	mov	r3, r0
34185364:	460a      	mov	r2, r1
34185366:	4313      	orrs	r3, r2
34185368:	d006      	beq.n	34185378 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3418536a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418536e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34185372:	4618      	mov	r0, r3
34185374:	f7fe f94e 	bl	34183614 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34185378:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418537c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185380:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34185384:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
34185388:	2300      	movs	r3, #0
3418538a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3418538e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
34185392:	4603      	mov	r3, r0
34185394:	460a      	mov	r2, r1
34185396:	4313      	orrs	r3, r2
34185398:	d038      	beq.n	3418540c <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3418539a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418539e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341853a2:	2b02      	cmp	r3, #2
341853a4:	d116      	bne.n	341853d4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
341853a6:	4bbc      	ldr	r3, [pc, #752]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341853a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341853ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341853b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341853b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
341853ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341853c0:	3b01      	subs	r3, #1
341853c2:	041b      	lsls	r3, r3, #16
341853c4:	4313      	orrs	r3, r2
341853c6:	4ab4      	ldr	r2, [pc, #720]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341853c8:	430b      	orrs	r3, r1
341853ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
341853ce:	f7ff f887 	bl	341844e0 <LL_RCC_IC13_Enable>
341853d2:	e007      	b.n	341853e4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
341853d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341853dc:	2b01      	cmp	r3, #1
341853de:	d101      	bne.n	341853e4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
341853e0:	f7ff fa7e 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
341853e4:	4bac      	ldr	r3, [pc, #688]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341853e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341853ea:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
341853ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341853f6:	3b01      	subs	r3, #1
341853f8:	011a      	lsls	r2, r3, #4
341853fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185402:	4313      	orrs	r3, r2
34185404:	4aa4      	ldr	r2, [pc, #656]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185406:	430b      	orrs	r3, r1
34185408:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3418540c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185410:	e9d3 2300 	ldrd	r2, r3, [r3]
34185414:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
34185418:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3418541c:	2300      	movs	r3, #0
3418541e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
34185422:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
34185426:	4603      	mov	r3, r0
34185428:	460a      	mov	r2, r1
3418542a:	4313      	orrs	r3, r2
3418542c:	d02d      	beq.n	3418548a <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3418542e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185436:	2b02      	cmp	r3, #2
34185438:	d118      	bne.n	3418546c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418543a:	4b97      	ldr	r3, [pc, #604]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418543c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185440:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185444:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185448:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418544c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34185450:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185454:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34185458:	3b01      	subs	r3, #1
3418545a:	041b      	lsls	r3, r3, #16
3418545c:	4313      	orrs	r3, r2
3418545e:	4a8e      	ldr	r2, [pc, #568]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185460:	430b      	orrs	r3, r1
34185462:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34185466:	f7ff f9bb 	bl	341847e0 <LL_RCC_IC19_Enable>
3418546a:	e007      	b.n	3418547c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3418546c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185474:	2b01      	cmp	r3, #1
34185476:	d101      	bne.n	3418547c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
34185478:	f7ff fa32 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3418547c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185484:	4618      	mov	r0, r3
34185486:	f7fe f8db 	bl	34183640 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3418548a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418548e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185492:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34185496:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3418549a:	2300      	movs	r3, #0
3418549c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
341854a0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
341854a4:	4603      	mov	r3, r0
341854a6:	460a      	mov	r2, r1
341854a8:	4313      	orrs	r3, r2
341854aa:	d04b      	beq.n	34185544 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
341854ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341854b4:	4b79      	ldr	r3, [pc, #484]	@ (3418569c <HAL_RCCEx_PeriphCLKConfig+0xd78>)
341854b6:	429a      	cmp	r2, r3
341854b8:	d116      	bne.n	341854e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341854ba:	4b77      	ldr	r3, [pc, #476]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341854bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341854c0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341854c4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341854c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341854ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341854d4:	3b01      	subs	r3, #1
341854d6:	041b      	lsls	r3, r3, #16
341854d8:	4313      	orrs	r3, r2
341854da:	4a6f      	ldr	r2, [pc, #444]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341854dc:	430b      	orrs	r3, r1
341854de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341854e2:	f7fe ff7d 	bl	341843e0 <LL_RCC_IC10_Enable>
341854e6:	e026      	b.n	34185536 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
341854e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341854f0:	4b6b      	ldr	r3, [pc, #428]	@ (341856a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
341854f2:	429a      	cmp	r2, r3
341854f4:	d116      	bne.n	34185524 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341854f6:	4b68      	ldr	r3, [pc, #416]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341854f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341854fc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185500:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185504:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185508:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418550a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418550e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185510:	3b01      	subs	r3, #1
34185512:	041b      	lsls	r3, r3, #16
34185514:	4313      	orrs	r3, r2
34185516:	4a60      	ldr	r2, [pc, #384]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185518:	430b      	orrs	r3, r1
3418551a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418551e:	f7ff f85f 	bl	341845e0 <LL_RCC_IC15_Enable>
34185522:	e008      	b.n	34185536 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34185524:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185528:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418552c:	4b5d      	ldr	r3, [pc, #372]	@ (341856a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
3418552e:	429a      	cmp	r2, r3
34185530:	d101      	bne.n	34185536 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
34185532:	f7ff f9d5 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
34185536:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418553a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418553e:	4618      	mov	r0, r3
34185540:	f7fe f8aa 	bl	34183698 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34185544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185548:	e9d3 2300 	ldrd	r2, r3, [r3]
3418554c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34185550:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34185554:	2300      	movs	r3, #0
34185556:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3418555a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3418555e:	4603      	mov	r3, r0
34185560:	460a      	mov	r2, r1
34185562:	4313      	orrs	r3, r2
34185564:	d04b      	beq.n	341855fe <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34185566:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418556a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418556e:	4b4e      	ldr	r3, [pc, #312]	@ (341856a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34185570:	429a      	cmp	r2, r3
34185572:	d116      	bne.n	341855a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185574:	4b48      	ldr	r3, [pc, #288]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418557a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418557e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185582:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418558e:	3b01      	subs	r3, #1
34185590:	041b      	lsls	r3, r3, #16
34185592:	4313      	orrs	r3, r2
34185594:	4a40      	ldr	r2, [pc, #256]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185596:	430b      	orrs	r3, r1
34185598:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418559c:	f7fe ff20 	bl	341843e0 <LL_RCC_IC10_Enable>
341855a0:	e026      	b.n	341855f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
341855a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855a6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
341855aa:	4b40      	ldr	r3, [pc, #256]	@ (341856ac <HAL_RCCEx_PeriphCLKConfig+0xd88>)
341855ac:	429a      	cmp	r2, r3
341855ae:	d116      	bne.n	341855de <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341855b0:	4b39      	ldr	r3, [pc, #228]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341855b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341855b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341855ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341855be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855c2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341855c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341855ca:	3b01      	subs	r3, #1
341855cc:	041b      	lsls	r3, r3, #16
341855ce:	4313      	orrs	r3, r2
341855d0:	4a31      	ldr	r2, [pc, #196]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341855d2:	430b      	orrs	r3, r1
341855d4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341855d8:	f7ff f802 	bl	341845e0 <LL_RCC_IC15_Enable>
341855dc:	e008      	b.n	341855f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
341855de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855e2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
341855e6:	4b32      	ldr	r3, [pc, #200]	@ (341856b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
341855e8:	429a      	cmp	r2, r3
341855ea:	d101      	bne.n	341855f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
341855ec:	f7ff f978 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
341855f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341855f8:	4618      	mov	r0, r3
341855fa:	f7fe f84d 	bl	34183698 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
341855fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185602:	e9d3 2300 	ldrd	r2, r3, [r3]
34185606:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3418560a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3418560e:	2300      	movs	r3, #0
34185610:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34185614:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34185618:	4603      	mov	r3, r0
3418561a:	460a      	mov	r2, r1
3418561c:	4313      	orrs	r3, r2
3418561e:	d05d      	beq.n	341856dc <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34185620:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185624:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185628:	4b22      	ldr	r3, [pc, #136]	@ (341856b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
3418562a:	429a      	cmp	r2, r3
3418562c:	d116      	bne.n	3418565c <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418562e:	4b1a      	ldr	r3, [pc, #104]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185634:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185638:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418563c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185642:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185648:	3b01      	subs	r3, #1
3418564a:	041b      	lsls	r3, r3, #16
3418564c:	4313      	orrs	r3, r2
3418564e:	4a12      	ldr	r2, [pc, #72]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185650:	430b      	orrs	r3, r1
34185652:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185656:	f7fe fec3 	bl	341843e0 <LL_RCC_IC10_Enable>
3418565a:	e038      	b.n	341856ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3418565c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185660:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185664:	4b14      	ldr	r3, [pc, #80]	@ (341856b8 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
34185666:	429a      	cmp	r2, r3
34185668:	d128      	bne.n	341856bc <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418566a:	4b0b      	ldr	r3, [pc, #44]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418566c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185670:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185674:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185678:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418567c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418567e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185684:	3b01      	subs	r3, #1
34185686:	041b      	lsls	r3, r3, #16
34185688:	4313      	orrs	r3, r2
3418568a:	4a03      	ldr	r2, [pc, #12]	@ (34185698 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418568c:	430b      	orrs	r3, r1
3418568e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185692:	f7fe ffa5 	bl	341845e0 <LL_RCC_IC15_Enable>
34185696:	e01a      	b.n	341856ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34185698:	56028000 	.word	0x56028000
3418569c:	0702000c 	.word	0x0702000c
341856a0:	0703000c 	.word	0x0703000c
341856a4:	0701000c 	.word	0x0701000c
341856a8:	0702040c 	.word	0x0702040c
341856ac:	0703040c 	.word	0x0703040c
341856b0:	0701040c 	.word	0x0701040c
341856b4:	0702080c 	.word	0x0702080c
341856b8:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
341856bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
341856c4:	4bc8      	ldr	r3, [pc, #800]	@ (341859e8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
341856c6:	429a      	cmp	r2, r3
341856c8:	d101      	bne.n	341856ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
341856ca:	f7ff f909 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
341856ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341856d6:	4618      	mov	r0, r3
341856d8:	f7fd ffde 	bl	34183698 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
341856dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856e0:	e9d3 2300 	ldrd	r2, r3, [r3]
341856e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
341856e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
341856ec:	2300      	movs	r3, #0
341856ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
341856f2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
341856f6:	4603      	mov	r3, r0
341856f8:	460a      	mov	r2, r1
341856fa:	4313      	orrs	r3, r2
341856fc:	d04b      	beq.n	34185796 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
341856fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185702:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185706:	4bb9      	ldr	r3, [pc, #740]	@ (341859ec <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34185708:	429a      	cmp	r2, r3
3418570a:	d116      	bne.n	3418573a <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418570c:	4bb8      	ldr	r3, [pc, #736]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418570e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185712:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185716:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418571a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418571e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185720:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185726:	3b01      	subs	r3, #1
34185728:	041b      	lsls	r3, r3, #16
3418572a:	4313      	orrs	r3, r2
3418572c:	4ab0      	ldr	r2, [pc, #704]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418572e:	430b      	orrs	r3, r1
34185730:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185734:	f7fe fe54 	bl	341843e0 <LL_RCC_IC10_Enable>
34185738:	e026      	b.n	34185788 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3418573a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418573e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185742:	4bac      	ldr	r3, [pc, #688]	@ (341859f4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34185744:	429a      	cmp	r2, r3
34185746:	d116      	bne.n	34185776 <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185748:	4ba9      	ldr	r3, [pc, #676]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418574a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418574e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185752:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185756:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418575a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418575c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185762:	3b01      	subs	r3, #1
34185764:	041b      	lsls	r3, r3, #16
34185766:	4313      	orrs	r3, r2
34185768:	4aa1      	ldr	r2, [pc, #644]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418576a:	430b      	orrs	r3, r1
3418576c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185770:	f7fe ff36 	bl	341845e0 <LL_RCC_IC15_Enable>
34185774:	e008      	b.n	34185788 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34185776:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418577a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418577e:	4b9e      	ldr	r3, [pc, #632]	@ (341859f8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34185780:	429a      	cmp	r2, r3
34185782:	d101      	bne.n	34185788 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34185784:	f7ff f8ac 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34185788:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418578c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185790:	4618      	mov	r0, r3
34185792:	f7fd ff81 	bl	34183698 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34185796:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418579a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418579e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
341857a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
341857a6:	2300      	movs	r3, #0
341857a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
341857ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
341857b0:	4603      	mov	r3, r0
341857b2:	460a      	mov	r2, r1
341857b4:	4313      	orrs	r3, r2
341857b6:	d04b      	beq.n	34185850 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
341857b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857bc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341857c0:	4b8e      	ldr	r3, [pc, #568]	@ (341859fc <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
341857c2:	429a      	cmp	r2, r3
341857c4:	d116      	bne.n	341857f4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341857c6:	4b8a      	ldr	r3, [pc, #552]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341857c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341857cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341857d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341857d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341857da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341857e0:	3b01      	subs	r3, #1
341857e2:	041b      	lsls	r3, r3, #16
341857e4:	4313      	orrs	r3, r2
341857e6:	4a82      	ldr	r2, [pc, #520]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341857e8:	430b      	orrs	r3, r1
341857ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341857ee:	f7fe fdf7 	bl	341843e0 <LL_RCC_IC10_Enable>
341857f2:	e026      	b.n	34185842 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
341857f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857f8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341857fc:	4b80      	ldr	r3, [pc, #512]	@ (34185a00 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
341857fe:	429a      	cmp	r2, r3
34185800:	d116      	bne.n	34185830 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185802:	4b7b      	ldr	r3, [pc, #492]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185804:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185808:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418580c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185810:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185814:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185816:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418581a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418581c:	3b01      	subs	r3, #1
3418581e:	041b      	lsls	r3, r3, #16
34185820:	4313      	orrs	r3, r2
34185822:	4a73      	ldr	r2, [pc, #460]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185824:	430b      	orrs	r3, r1
34185826:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418582a:	f7fe fed9 	bl	341845e0 <LL_RCC_IC15_Enable>
3418582e:	e008      	b.n	34185842 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34185830:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185834:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185838:	4b72      	ldr	r3, [pc, #456]	@ (34185a04 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
3418583a:	429a      	cmp	r2, r3
3418583c:	d101      	bne.n	34185842 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
3418583e:	f7ff f84f 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34185842:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185846:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418584a:	4618      	mov	r0, r3
3418584c:	f7fd ff2f 	bl	341836ae <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34185850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185854:	e9d3 2300 	ldrd	r2, r3, [r3]
34185858:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3418585c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34185860:	2300      	movs	r3, #0
34185862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34185866:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3418586a:	4603      	mov	r3, r0
3418586c:	460a      	mov	r2, r1
3418586e:	4313      	orrs	r3, r2
34185870:	d04b      	beq.n	3418590a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34185872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185876:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418587a:	4b63      	ldr	r3, [pc, #396]	@ (34185a08 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
3418587c:	429a      	cmp	r2, r3
3418587e:	d116      	bne.n	341858ae <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185880:	4b5b      	ldr	r3, [pc, #364]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185886:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418588a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418588e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185894:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418589a:	3b01      	subs	r3, #1
3418589c:	041b      	lsls	r3, r3, #16
3418589e:	4313      	orrs	r3, r2
341858a0:	4a53      	ldr	r2, [pc, #332]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341858a2:	430b      	orrs	r3, r1
341858a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341858a8:	f7fe fd9a 	bl	341843e0 <LL_RCC_IC10_Enable>
341858ac:	e026      	b.n	341858fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
341858ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858b2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
341858b6:	4b55      	ldr	r3, [pc, #340]	@ (34185a0c <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
341858b8:	429a      	cmp	r2, r3
341858ba:	d116      	bne.n	341858ea <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341858bc:	4b4c      	ldr	r3, [pc, #304]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341858be:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341858c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341858c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341858ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858ce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341858d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341858d6:	3b01      	subs	r3, #1
341858d8:	041b      	lsls	r3, r3, #16
341858da:	4313      	orrs	r3, r2
341858dc:	4a44      	ldr	r2, [pc, #272]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341858de:	430b      	orrs	r3, r1
341858e0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341858e4:	f7fe fe7c 	bl	341845e0 <LL_RCC_IC15_Enable>
341858e8:	e008      	b.n	341858fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
341858ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858ee:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
341858f2:	4b47      	ldr	r3, [pc, #284]	@ (34185a10 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
341858f4:	429a      	cmp	r2, r3
341858f6:	d101      	bne.n	341858fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
341858f8:	f7fe fff2 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
341858fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185900:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185904:	4618      	mov	r0, r3
34185906:	f7fd fed2 	bl	341836ae <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3418590a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418590e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185912:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34185916:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3418591a:	2300      	movs	r3, #0
3418591c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34185920:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34185924:	4603      	mov	r3, r0
34185926:	460a      	mov	r2, r1
34185928:	4313      	orrs	r3, r2
3418592a:	d02d      	beq.n	34185988 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3418592c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185930:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185934:	4b37      	ldr	r3, [pc, #220]	@ (34185a14 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
34185936:	429a      	cmp	r2, r3
34185938:	d116      	bne.n	34185968 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418593a:	4b2d      	ldr	r3, [pc, #180]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418593c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185940:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185944:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185948:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418594c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418594e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185954:	3b01      	subs	r3, #1
34185956:	041b      	lsls	r3, r3, #16
34185958:	4313      	orrs	r3, r2
3418595a:	4a25      	ldr	r2, [pc, #148]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418595c:	430b      	orrs	r3, r1
3418595e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185962:	f7fe fe3d 	bl	341845e0 <LL_RCC_IC15_Enable>
34185966:	e008      	b.n	3418597a <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34185968:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418596c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185970:	4b29      	ldr	r3, [pc, #164]	@ (34185a18 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34185972:	429a      	cmp	r2, r3
34185974:	d101      	bne.n	3418597a <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
34185976:	f7fe ffb3 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3418597a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418597e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185982:	4618      	mov	r0, r3
34185984:	f7fd fe9e 	bl	341836c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34185988:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418598c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185990:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34185994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34185998:	2300      	movs	r3, #0
3418599a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3418599e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
341859a2:	4603      	mov	r3, r0
341859a4:	460a      	mov	r2, r1
341859a6:	4313      	orrs	r3, r2
341859a8:	d04a      	beq.n	34185a40 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
341859aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
341859b2:	4b1a      	ldr	r3, [pc, #104]	@ (34185a1c <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
341859b4:	429a      	cmp	r2, r3
341859b6:	d133      	bne.n	34185a20 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341859b8:	4b0d      	ldr	r3, [pc, #52]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341859ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341859be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341859c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341859c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859ca:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341859cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341859d2:	3b01      	subs	r3, #1
341859d4:	041b      	lsls	r3, r3, #16
341859d6:	4313      	orrs	r3, r2
341859d8:	4a05      	ldr	r2, [pc, #20]	@ (341859f0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341859da:	430b      	orrs	r3, r1
341859dc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341859e0:	f7fe fdfe 	bl	341845e0 <LL_RCC_IC15_Enable>
341859e4:	e025      	b.n	34185a32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
341859e6:	bf00      	nop
341859e8:	0701080c 	.word	0x0701080c
341859ec:	07020c0c 	.word	0x07020c0c
341859f0:	56028000 	.word	0x56028000
341859f4:	07030c0c 	.word	0x07030c0c
341859f8:	07010c0c 	.word	0x07010c0c
341859fc:	0702100c 	.word	0x0702100c
34185a00:	0703100c 	.word	0x0703100c
34185a04:	0701100c 	.word	0x0701100c
34185a08:	0702140c 	.word	0x0702140c
34185a0c:	0703140c 	.word	0x0703140c
34185a10:	0701140c 	.word	0x0701140c
34185a14:	0702082c 	.word	0x0702082c
34185a18:	0701082c 	.word	0x0701082c
34185a1c:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34185a20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a24:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34185a28:	4bca      	ldr	r3, [pc, #808]	@ (34185d54 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34185a2a:	429a      	cmp	r2, r3
34185a2c:	d101      	bne.n	34185a32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34185a2e:	f7fe ff57 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34185a32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a36:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185a3a:	4618      	mov	r0, r3
34185a3c:	f7fd fe42 	bl	341836c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34185a40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a44:	e9d3 2300 	ldrd	r2, r3, [r3]
34185a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34185a4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
34185a50:	2300      	movs	r3, #0
34185a52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34185a56:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34185a5a:	4603      	mov	r3, r0
34185a5c:	460a      	mov	r2, r1
34185a5e:	4313      	orrs	r3, r2
34185a60:	d02d      	beq.n	34185abe <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34185a62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a66:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34185a6a:	4bbb      	ldr	r3, [pc, #748]	@ (34185d58 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34185a6c:	429a      	cmp	r2, r3
34185a6e:	d116      	bne.n	34185a9e <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185a70:	4bba      	ldr	r3, [pc, #744]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185a72:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185a76:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a7a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a82:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185a84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185a8a:	3b01      	subs	r3, #1
34185a8c:	041b      	lsls	r3, r3, #16
34185a8e:	4313      	orrs	r3, r2
34185a90:	4ab2      	ldr	r2, [pc, #712]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185a92:	430b      	orrs	r3, r1
34185a94:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185a98:	f7fe fda2 	bl	341845e0 <LL_RCC_IC15_Enable>
34185a9c:	e008      	b.n	34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34185a9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185aa2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34185aa6:	4bae      	ldr	r3, [pc, #696]	@ (34185d60 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34185aa8:	429a      	cmp	r2, r3
34185aaa:	d101      	bne.n	34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34185aac:	f7fe ff18 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34185ab0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ab4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34185ab8:	4618      	mov	r0, r3
34185aba:	f7fd fe03 	bl	341836c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34185abe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
34185ac6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34185aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34185ace:	2300      	movs	r3, #0
34185ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34185ad4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34185ad8:	4603      	mov	r3, r0
34185ada:	460a      	mov	r2, r1
34185adc:	4313      	orrs	r3, r2
34185ade:	d02d      	beq.n	34185b3c <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34185ae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ae4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34185ae8:	4b9e      	ldr	r3, [pc, #632]	@ (34185d64 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34185aea:	429a      	cmp	r2, r3
34185aec:	d116      	bne.n	34185b1c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185aee:	4b9b      	ldr	r3, [pc, #620]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185af0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185af4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185af8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185afc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b00:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185b02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185b08:	3b01      	subs	r3, #1
34185b0a:	041b      	lsls	r3, r3, #16
34185b0c:	4313      	orrs	r3, r2
34185b0e:	4a93      	ldr	r2, [pc, #588]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185b10:	430b      	orrs	r3, r1
34185b12:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185b16:	f7fe fd63 	bl	341845e0 <LL_RCC_IC15_Enable>
34185b1a:	e008      	b.n	34185b2e <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34185b1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b20:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34185b24:	4b90      	ldr	r3, [pc, #576]	@ (34185d68 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
34185b26:	429a      	cmp	r2, r3
34185b28:	d101      	bne.n	34185b2e <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
34185b2a:	f7fe fed9 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
34185b2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b32:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185b36:	4618      	mov	r0, r3
34185b38:	f7fd fdc4 	bl	341836c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34185b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b40:	e9d3 2300 	ldrd	r2, r3, [r3]
34185b44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34185b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34185b4c:	2300      	movs	r3, #0
34185b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
34185b52:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34185b56:	4603      	mov	r3, r0
34185b58:	460a      	mov	r2, r1
34185b5a:	4313      	orrs	r3, r2
34185b5c:	d02d      	beq.n	34185bba <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34185b5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b62:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34185b66:	4b81      	ldr	r3, [pc, #516]	@ (34185d6c <HAL_RCCEx_PeriphCLKConfig+0x1448>)
34185b68:	429a      	cmp	r2, r3
34185b6a:	d116      	bne.n	34185b9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185b6c:	4b7b      	ldr	r3, [pc, #492]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185b6e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185b72:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b76:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b7e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185b80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185b86:	3b01      	subs	r3, #1
34185b88:	041b      	lsls	r3, r3, #16
34185b8a:	4313      	orrs	r3, r2
34185b8c:	4a73      	ldr	r2, [pc, #460]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185b8e:	430b      	orrs	r3, r1
34185b90:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185b94:	f7fe fd24 	bl	341845e0 <LL_RCC_IC15_Enable>
34185b98:	e008      	b.n	34185bac <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34185b9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34185ba2:	4b73      	ldr	r3, [pc, #460]	@ (34185d70 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34185ba4:	429a      	cmp	r2, r3
34185ba6:	d101      	bne.n	34185bac <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34185ba8:	f7fe fe9a 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34185bac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bb0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34185bb4:	4618      	mov	r0, r3
34185bb6:	f7fd fd85 	bl	341836c4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34185bba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
34185bc2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34185bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34185bca:	2300      	movs	r3, #0
34185bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34185bd0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34185bd4:	4603      	mov	r3, r0
34185bd6:	460a      	mov	r2, r1
34185bd8:	4313      	orrs	r3, r2
34185bda:	d04b      	beq.n	34185c74 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34185bdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185be0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34185be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34185be8:	d116      	bne.n	34185c18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34185bea:	4b5c      	ldr	r3, [pc, #368]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185bf0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185bf4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185bf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34185bfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34185c04:	3b01      	subs	r3, #1
34185c06:	041b      	lsls	r3, r3, #16
34185c08:	4313      	orrs	r3, r2
34185c0a:	4a54      	ldr	r2, [pc, #336]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185c0c:	430b      	orrs	r3, r1
34185c0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34185c12:	f7fe fba5 	bl	34184360 <LL_RCC_IC9_Enable>
34185c16:	e026      	b.n	34185c66 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34185c18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34185c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34185c24:	d116      	bne.n	34185c54 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185c26:	4b4d      	ldr	r3, [pc, #308]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185c28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34185c2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185c30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185c34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34185c3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34185c40:	3b01      	subs	r3, #1
34185c42:	041b      	lsls	r3, r3, #16
34185c44:	4313      	orrs	r3, r2
34185c46:	4a45      	ldr	r2, [pc, #276]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185c48:	430b      	orrs	r3, r1
34185c4a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34185c4e:	f7fe fc87 	bl	34184560 <LL_RCC_IC14_Enable>
34185c52:	e008      	b.n	34185c66 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34185c54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c58:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34185c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34185c60:	d101      	bne.n	34185c66 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
34185c62:	f7fe fe3d 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
34185c66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34185c6e:	4618      	mov	r0, r3
34185c70:	f7fd fd34 	bl	341836dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34185c74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c78:	e9d3 2300 	ldrd	r2, r3, [r3]
34185c7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34185c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34185c84:	2300      	movs	r3, #0
34185c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34185c8a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34185c8e:	4603      	mov	r3, r0
34185c90:	460a      	mov	r2, r1
34185c92:	4313      	orrs	r3, r2
34185c94:	d02f      	beq.n	34185cf6 <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34185c96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c9a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34185c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34185ca2:	d118      	bne.n	34185cd6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34185ca4:	4b2d      	ldr	r3, [pc, #180]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185ca6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185caa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185cae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185cb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34185cba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34185cc2:	3b01      	subs	r3, #1
34185cc4:	041b      	lsls	r3, r3, #16
34185cc6:	4313      	orrs	r3, r2
34185cc8:	4a24      	ldr	r2, [pc, #144]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185cca:	430b      	orrs	r3, r1
34185ccc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34185cd0:	f7fe fcc6 	bl	34184660 <LL_RCC_IC16_Enable>
34185cd4:	e008      	b.n	34185ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34185cd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cda:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34185cde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34185ce2:	d101      	bne.n	34185ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34185ce4:	f7fe fdfc 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34185ce8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cec:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34185cf0:	4618      	mov	r0, r3
34185cf2:	f7fd fd09 	bl	34183708 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34185cf6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
34185cfe:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34185d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34185d06:	2300      	movs	r3, #0
34185d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34185d0c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34185d10:	4603      	mov	r3, r0
34185d12:	460a      	mov	r2, r1
34185d14:	4313      	orrs	r3, r2
34185d16:	d05b      	beq.n	34185dd0 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34185d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34185d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34185d24:	d126      	bne.n	34185d74 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185d26:	4b0d      	ldr	r3, [pc, #52]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185d28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185d2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185d40:	3b01      	subs	r3, #1
34185d42:	041b      	lsls	r3, r3, #16
34185d44:	4313      	orrs	r3, r2
34185d46:	4a05      	ldr	r2, [pc, #20]	@ (34185d5c <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185d48:	430b      	orrs	r3, r1
34185d4a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34185d4e:	f7fe fa87 	bl	34184260 <LL_RCC_IC7_Enable>
34185d52:	e036      	b.n	34185dc2 <HAL_RCCEx_PeriphCLKConfig+0x149e>
34185d54:	07010c2c 	.word	0x07010c2c
34185d58:	0702102c 	.word	0x0702102c
34185d5c:	56028000 	.word	0x56028000
34185d60:	0701102c 	.word	0x0701102c
34185d64:	0702142c 	.word	0x0702142c
34185d68:	0701142c 	.word	0x0701142c
34185d6c:	0702182c 	.word	0x0702182c
34185d70:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34185d74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d78:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34185d7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34185d80:	d116      	bne.n	34185db0 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185d82:	4bb5      	ldr	r3, [pc, #724]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185d88:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d8c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185d96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185d9c:	3b01      	subs	r3, #1
34185d9e:	041b      	lsls	r3, r3, #16
34185da0:	4313      	orrs	r3, r2
34185da2:	4aad      	ldr	r2, [pc, #692]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185da4:	430b      	orrs	r3, r1
34185da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185daa:	f7fe fa99 	bl	341842e0 <LL_RCC_IC8_Enable>
34185dae:	e008      	b.n	34185dc2 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34185db0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185db4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34185db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34185dbc:	d101      	bne.n	34185dc2 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
34185dbe:	f7fe fd8f 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
34185dc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dc6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34185dca:	4618      	mov	r0, r3
34185dcc:	f7fd fcb2 	bl	34183734 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34185dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
34185dd8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34185ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34185de0:	2300      	movs	r3, #0
34185de2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34185de6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34185dea:	4603      	mov	r3, r0
34185dec:	460a      	mov	r2, r1
34185dee:	4313      	orrs	r3, r2
34185df0:	d02d      	beq.n	34185e4e <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34185df2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185df6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34185dfa:	2b20      	cmp	r3, #32
34185dfc:	d118      	bne.n	34185e30 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34185dfe:	4b96      	ldr	r3, [pc, #600]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185e00:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34185e04:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e08:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34185e14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34185e1c:	3b01      	subs	r3, #1
34185e1e:	041b      	lsls	r3, r3, #16
34185e20:	4313      	orrs	r3, r2
34185e22:	4a8d      	ldr	r2, [pc, #564]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185e24:	430b      	orrs	r3, r1
34185e26:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34185e2a:	f7fe fd19 	bl	34184860 <LL_RCC_IC20_Enable>
34185e2e:	e007      	b.n	34185e40 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34185e30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e34:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34185e38:	2b10      	cmp	r3, #16
34185e3a:	d101      	bne.n	34185e40 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
34185e3c:	f7fe fd50 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
34185e40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e44:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34185e48:	4618      	mov	r0, r3
34185e4a:	f7fd fc9f 	bl	3418378c <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34185e4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e52:	e9d3 2300 	ldrd	r2, r3, [r3]
34185e56:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34185e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
34185e5e:	2300      	movs	r3, #0
34185e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
34185e64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
34185e68:	4603      	mov	r3, r0
34185e6a:	460a      	mov	r2, r1
34185e6c:	4313      	orrs	r3, r2
34185e6e:	d04b      	beq.n	34185f08 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34185e70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e74:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34185e78:	4b78      	ldr	r3, [pc, #480]	@ (3418605c <HAL_RCCEx_PeriphCLKConfig+0x1738>)
34185e7a:	429a      	cmp	r2, r3
34185e7c:	d116      	bne.n	34185eac <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185e7e:	4b76      	ldr	r3, [pc, #472]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185e80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185e84:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e88:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185e92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185e98:	3b01      	subs	r3, #1
34185e9a:	041b      	lsls	r3, r3, #16
34185e9c:	4313      	orrs	r3, r2
34185e9e:	4a6e      	ldr	r2, [pc, #440]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185ea0:	430b      	orrs	r3, r1
34185ea2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34185ea6:	f7fe f9db 	bl	34184260 <LL_RCC_IC7_Enable>
34185eaa:	e026      	b.n	34185efa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34185eac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185eb0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34185eb4:	4b6a      	ldr	r3, [pc, #424]	@ (34186060 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34185eb6:	429a      	cmp	r2, r3
34185eb8:	d116      	bne.n	34185ee8 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185eba:	4b67      	ldr	r3, [pc, #412]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185ec0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185ec4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ec8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185ece:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185ed4:	3b01      	subs	r3, #1
34185ed6:	041b      	lsls	r3, r3, #16
34185ed8:	4313      	orrs	r3, r2
34185eda:	4a5f      	ldr	r2, [pc, #380]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185edc:	430b      	orrs	r3, r1
34185ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185ee2:	f7fe f9fd 	bl	341842e0 <LL_RCC_IC8_Enable>
34185ee6:	e008      	b.n	34185efa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34185ee8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185eec:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34185ef0:	4b5c      	ldr	r3, [pc, #368]	@ (34186064 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
34185ef2:	429a      	cmp	r2, r3
34185ef4:	d101      	bne.n	34185efa <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
34185ef6:	f7fe fcf3 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34185efa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185efe:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
34185f02:	4618      	mov	r0, r3
34185f04:	f7fd fc58 	bl	341837b8 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34185f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34185f10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34185f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
34185f18:	2300      	movs	r3, #0
34185f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34185f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
34185f22:	4603      	mov	r3, r0
34185f24:	460a      	mov	r2, r1
34185f26:	4313      	orrs	r3, r2
34185f28:	d04b      	beq.n	34185fc2 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34185f2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f2e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34185f32:	4b4d      	ldr	r3, [pc, #308]	@ (34186068 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
34185f34:	429a      	cmp	r2, r3
34185f36:	d116      	bne.n	34185f66 <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185f38:	4b47      	ldr	r3, [pc, #284]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185f3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185f3e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f42:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185f4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185f52:	3b01      	subs	r3, #1
34185f54:	041b      	lsls	r3, r3, #16
34185f56:	4313      	orrs	r3, r2
34185f58:	4a3f      	ldr	r2, [pc, #252]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185f5a:	430b      	orrs	r3, r1
34185f5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34185f60:	f7fe f97e 	bl	34184260 <LL_RCC_IC7_Enable>
34185f64:	e026      	b.n	34185fb4 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34185f66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f6a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34185f6e:	4b3f      	ldr	r3, [pc, #252]	@ (3418606c <HAL_RCCEx_PeriphCLKConfig+0x1748>)
34185f70:	429a      	cmp	r2, r3
34185f72:	d116      	bne.n	34185fa2 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185f74:	4b38      	ldr	r3, [pc, #224]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185f7a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f7e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185f88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185f8e:	3b01      	subs	r3, #1
34185f90:	041b      	lsls	r3, r3, #16
34185f92:	4313      	orrs	r3, r2
34185f94:	4a30      	ldr	r2, [pc, #192]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185f96:	430b      	orrs	r3, r1
34185f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185f9c:	f7fe f9a0 	bl	341842e0 <LL_RCC_IC8_Enable>
34185fa0:	e008      	b.n	34185fb4 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34185fa2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fa6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34185faa:	4b31      	ldr	r3, [pc, #196]	@ (34186070 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34185fac:	429a      	cmp	r2, r3
34185fae:	d101      	bne.n	34185fb4 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
34185fb0:	f7fe fc96 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34185fb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fb8:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34185fbc:	4618      	mov	r0, r3
34185fbe:	f7fd fbfb 	bl	341837b8 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34185fc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
34185fca:	2100      	movs	r1, #0
34185fcc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34185fd0:	f003 0301 	and.w	r3, r3, #1
34185fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
34185fd8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34185fdc:	4603      	mov	r3, r0
34185fde:	460a      	mov	r2, r1
34185fe0:	4313      	orrs	r3, r2
34185fe2:	d056      	beq.n	34186092 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34185fe4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fe8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34185fec:	2b02      	cmp	r3, #2
34185fee:	d116      	bne.n	3418601e <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185ff0:	4b19      	ldr	r3, [pc, #100]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34185ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185ff6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185ffa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ffe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186004:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418600a:	3b01      	subs	r3, #1
3418600c:	041b      	lsls	r3, r3, #16
3418600e:	4313      	orrs	r3, r2
34186010:	4a11      	ldr	r2, [pc, #68]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186012:	430b      	orrs	r3, r1
34186014:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186018:	f7fe f922 	bl	34184260 <LL_RCC_IC7_Enable>
3418601c:	e032      	b.n	34186084 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3418601e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186022:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186026:	2b03      	cmp	r3, #3
34186028:	d124      	bne.n	34186074 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418602a:	4b0b      	ldr	r3, [pc, #44]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418602c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186030:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186034:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186038:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418603c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418603e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186044:	3b01      	subs	r3, #1
34186046:	041b      	lsls	r3, r3, #16
34186048:	4313      	orrs	r3, r2
3418604a:	4a03      	ldr	r2, [pc, #12]	@ (34186058 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418604c:	430b      	orrs	r3, r1
3418604e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186052:	f7fe f945 	bl	341842e0 <LL_RCC_IC8_Enable>
34186056:	e015      	b.n	34186084 <HAL_RCCEx_PeriphCLKConfig+0x1760>
34186058:	56028000 	.word	0x56028000
3418605c:	07021418 	.word	0x07021418
34186060:	07031418 	.word	0x07031418
34186064:	07011418 	.word	0x07011418
34186068:	07021818 	.word	0x07021818
3418606c:	07031818 	.word	0x07031818
34186070:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34186074:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186078:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418607c:	2b01      	cmp	r3, #1
3418607e:	d101      	bne.n	34186084 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
34186080:	f7fe fc2e 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34186084:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186088:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418608c:	4618      	mov	r0, r3
3418608e:	f7fd fba9 	bl	341837e4 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34186092:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186096:	e9d3 2300 	ldrd	r2, r3, [r3]
3418609a:	2100      	movs	r1, #0
3418609c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
341860a0:	f003 0302 	and.w	r3, r3, #2
341860a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
341860a8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
341860ac:	4603      	mov	r3, r0
341860ae:	460a      	mov	r2, r1
341860b0:	4313      	orrs	r3, r2
341860b2:	d04b      	beq.n	3418614c <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
341860b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341860bc:	4bc6      	ldr	r3, [pc, #792]	@ (341863d8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
341860be:	429a      	cmp	r2, r3
341860c0:	d116      	bne.n	341860f0 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341860c2:	4bc6      	ldr	r3, [pc, #792]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341860c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341860c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341860cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341860d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341860d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341860dc:	3b01      	subs	r3, #1
341860de:	041b      	lsls	r3, r3, #16
341860e0:	4313      	orrs	r3, r2
341860e2:	4abe      	ldr	r2, [pc, #760]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341860e4:	430b      	orrs	r3, r1
341860e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341860ea:	f7fe f8f9 	bl	341842e0 <LL_RCC_IC8_Enable>
341860ee:	e026      	b.n	3418613e <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
341860f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860f4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341860f8:	4bb9      	ldr	r3, [pc, #740]	@ (341863e0 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
341860fa:	429a      	cmp	r2, r3
341860fc:	d116      	bne.n	3418612c <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341860fe:	4bb7      	ldr	r3, [pc, #732]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186104:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186108:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418610c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186112:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186118:	3b01      	subs	r3, #1
3418611a:	041b      	lsls	r3, r3, #16
3418611c:	4313      	orrs	r3, r2
3418611e:	4aaf      	ldr	r2, [pc, #700]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186120:	430b      	orrs	r3, r1
34186122:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186126:	f7fe f91b 	bl	34184360 <LL_RCC_IC9_Enable>
3418612a:	e008      	b.n	3418613e <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3418612c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186130:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34186134:	4bab      	ldr	r3, [pc, #684]	@ (341863e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
34186136:	429a      	cmp	r2, r3
34186138:	d101      	bne.n	3418613e <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
3418613a:	f7fe fbd1 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3418613e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186142:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
34186146:	4618      	mov	r0, r3
34186148:	f7fd fb62 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3418614c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186150:	e9d3 2300 	ldrd	r2, r3, [r3]
34186154:	2100      	movs	r1, #0
34186156:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3418615a:	f003 0304 	and.w	r3, r3, #4
3418615e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34186162:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
34186166:	4603      	mov	r3, r0
34186168:	460a      	mov	r2, r1
3418616a:	4313      	orrs	r3, r2
3418616c:	d04b      	beq.n	34186206 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3418616e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186172:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34186176:	4b9c      	ldr	r3, [pc, #624]	@ (341863e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
34186178:	429a      	cmp	r2, r3
3418617a:	d116      	bne.n	341861aa <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418617c:	4b97      	ldr	r3, [pc, #604]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418617e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186182:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186186:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418618a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418618e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186190:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186196:	3b01      	subs	r3, #1
34186198:	041b      	lsls	r3, r3, #16
3418619a:	4313      	orrs	r3, r2
3418619c:	4a8f      	ldr	r2, [pc, #572]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418619e:	430b      	orrs	r3, r1
341861a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341861a4:	f7fe f89c 	bl	341842e0 <LL_RCC_IC8_Enable>
341861a8:	e026      	b.n	341861f8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
341861aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ae:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341861b2:	4b8e      	ldr	r3, [pc, #568]	@ (341863ec <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
341861b4:	429a      	cmp	r2, r3
341861b6:	d116      	bne.n	341861e6 <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341861b8:	4b88      	ldr	r3, [pc, #544]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341861ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341861be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341861c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341861cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341861d2:	3b01      	subs	r3, #1
341861d4:	041b      	lsls	r3, r3, #16
341861d6:	4313      	orrs	r3, r2
341861d8:	4a80      	ldr	r2, [pc, #512]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341861da:	430b      	orrs	r3, r1
341861dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341861e0:	f7fe f8be 	bl	34184360 <LL_RCC_IC9_Enable>
341861e4:	e008      	b.n	341861f8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
341861e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ea:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341861ee:	4b80      	ldr	r3, [pc, #512]	@ (341863f0 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
341861f0:	429a      	cmp	r2, r3
341861f2:	d101      	bne.n	341861f8 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
341861f4:	f7fe fb74 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
341861f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
34186200:	4618      	mov	r0, r3
34186202:	f7fd fb05 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34186206:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418620a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418620e:	2100      	movs	r1, #0
34186210:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34186214:	f003 0308 	and.w	r3, r3, #8
34186218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3418621c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
34186220:	4603      	mov	r3, r0
34186222:	460a      	mov	r2, r1
34186224:	4313      	orrs	r3, r2
34186226:	d04b      	beq.n	341862c0 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34186228:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418622c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34186230:	4b70      	ldr	r3, [pc, #448]	@ (341863f4 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
34186232:	429a      	cmp	r2, r3
34186234:	d116      	bne.n	34186264 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186236:	4b69      	ldr	r3, [pc, #420]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418623c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186240:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186244:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418624a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418624e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186250:	3b01      	subs	r3, #1
34186252:	041b      	lsls	r3, r3, #16
34186254:	4313      	orrs	r3, r2
34186256:	4a61      	ldr	r2, [pc, #388]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186258:	430b      	orrs	r3, r1
3418625a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418625e:	f7fe f83f 	bl	341842e0 <LL_RCC_IC8_Enable>
34186262:	e026      	b.n	341862b2 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34186264:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186268:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418626c:	4b62      	ldr	r3, [pc, #392]	@ (341863f8 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
3418626e:	429a      	cmp	r2, r3
34186270:	d116      	bne.n	341862a0 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186272:	4b5a      	ldr	r3, [pc, #360]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186274:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186278:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418627c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186280:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186286:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418628a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418628c:	3b01      	subs	r3, #1
3418628e:	041b      	lsls	r3, r3, #16
34186290:	4313      	orrs	r3, r2
34186292:	4a52      	ldr	r2, [pc, #328]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186294:	430b      	orrs	r3, r1
34186296:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418629a:	f7fe f861 	bl	34184360 <LL_RCC_IC9_Enable>
3418629e:	e008      	b.n	341862b2 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
341862a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862a4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341862a8:	4b54      	ldr	r3, [pc, #336]	@ (341863fc <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
341862aa:	429a      	cmp	r2, r3
341862ac:	d101      	bne.n	341862b2 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
341862ae:	f7fe fb17 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
341862b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862b6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
341862ba:	4618      	mov	r0, r3
341862bc:	f7fd faa8 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
341862c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862c4:	e9d3 2300 	ldrd	r2, r3, [r3]
341862c8:	2100      	movs	r1, #0
341862ca:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
341862ce:	f003 0310 	and.w	r3, r3, #16
341862d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
341862d6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
341862da:	4603      	mov	r3, r0
341862dc:	460a      	mov	r2, r1
341862de:	4313      	orrs	r3, r2
341862e0:	d04b      	beq.n	3418637a <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
341862e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862e6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341862ea:	4b45      	ldr	r3, [pc, #276]	@ (34186400 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
341862ec:	429a      	cmp	r2, r3
341862ee:	d116      	bne.n	3418631e <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341862f0:	4b3a      	ldr	r3, [pc, #232]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341862f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341862f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341862fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341862fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186304:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418630a:	3b01      	subs	r3, #1
3418630c:	041b      	lsls	r3, r3, #16
3418630e:	4313      	orrs	r3, r2
34186310:	4a32      	ldr	r2, [pc, #200]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186312:	430b      	orrs	r3, r1
34186314:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186318:	f7fe f822 	bl	34184360 <LL_RCC_IC9_Enable>
3418631c:	e026      	b.n	3418636c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3418631e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186322:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34186326:	4b37      	ldr	r3, [pc, #220]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
34186328:	429a      	cmp	r2, r3
3418632a:	d116      	bne.n	3418635a <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418632c:	4b2b      	ldr	r3, [pc, #172]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418632e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186332:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186336:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418633a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418633e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186346:	3b01      	subs	r3, #1
34186348:	041b      	lsls	r3, r3, #16
3418634a:	4313      	orrs	r3, r2
3418634c:	4a23      	ldr	r2, [pc, #140]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418634e:	430b      	orrs	r3, r1
34186350:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186354:	f7fe f904 	bl	34184560 <LL_RCC_IC14_Enable>
34186358:	e008      	b.n	3418636c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3418635a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418635e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34186362:	4b29      	ldr	r3, [pc, #164]	@ (34186408 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34186364:	429a      	cmp	r2, r3
34186366:	d101      	bne.n	3418636c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
34186368:	f7fe faba 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3418636c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186370:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34186374:	4618      	mov	r0, r3
34186376:	f7fd fa4b 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3418637a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418637e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186382:	2100      	movs	r1, #0
34186384:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34186388:	f003 0320 	and.w	r3, r3, #32
3418638c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34186390:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34186394:	4603      	mov	r3, r0
34186396:	460a      	mov	r2, r1
34186398:	4313      	orrs	r3, r2
3418639a:	d067      	beq.n	3418646c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3418639c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863a0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341863a4:	4b19      	ldr	r3, [pc, #100]	@ (3418640c <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
341863a6:	429a      	cmp	r2, r3
341863a8:	d132      	bne.n	34186410 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341863aa:	4b0c      	ldr	r3, [pc, #48]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341863ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341863b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341863b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341863b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341863be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341863c4:	3b01      	subs	r3, #1
341863c6:	041b      	lsls	r3, r3, #16
341863c8:	4313      	orrs	r3, r2
341863ca:	4a04      	ldr	r2, [pc, #16]	@ (341863dc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341863cc:	430b      	orrs	r3, r1
341863ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341863d2:	f7fd ffc5 	bl	34184360 <LL_RCC_IC9_Enable>
341863d6:	e042      	b.n	3418645e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
341863d8:	07020420 	.word	0x07020420
341863dc:	56028000 	.word	0x56028000
341863e0:	07030420 	.word	0x07030420
341863e4:	07010420 	.word	0x07010420
341863e8:	07020820 	.word	0x07020820
341863ec:	07030820 	.word	0x07030820
341863f0:	07010820 	.word	0x07010820
341863f4:	07020c20 	.word	0x07020c20
341863f8:	07030c20 	.word	0x07030c20
341863fc:	07010c20 	.word	0x07010c20
34186400:	07021020 	.word	0x07021020
34186404:	07031020 	.word	0x07031020
34186408:	07011020 	.word	0x07011020
3418640c:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34186410:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186414:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34186418:	4bc2      	ldr	r3, [pc, #776]	@ (34186724 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
3418641a:	429a      	cmp	r2, r3
3418641c:	d116      	bne.n	3418644c <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418641e:	4bc2      	ldr	r3, [pc, #776]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186420:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186424:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186428:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418642c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186430:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186432:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186438:	3b01      	subs	r3, #1
3418643a:	041b      	lsls	r3, r3, #16
3418643c:	4313      	orrs	r3, r2
3418643e:	4aba      	ldr	r2, [pc, #744]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186440:	430b      	orrs	r3, r1
34186442:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186446:	f7fe f88b 	bl	34184560 <LL_RCC_IC14_Enable>
3418644a:	e008      	b.n	3418645e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3418644c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186450:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34186454:	4bb5      	ldr	r3, [pc, #724]	@ (3418672c <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
34186456:	429a      	cmp	r2, r3
34186458:	d101      	bne.n	3418645e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
3418645a:	f7fe fa41 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3418645e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186462:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186466:	4618      	mov	r0, r3
34186468:	f7fd f9d2 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3418646c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186470:	e9d3 2300 	ldrd	r2, r3, [r3]
34186474:	2100      	movs	r1, #0
34186476:	67b9      	str	r1, [r7, #120]	@ 0x78
34186478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418647c:	67fb      	str	r3, [r7, #124]	@ 0x7c
3418647e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34186482:	4603      	mov	r3, r0
34186484:	460a      	mov	r2, r1
34186486:	4313      	orrs	r3, r2
34186488:	d04b      	beq.n	34186522 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3418648a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418648e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186492:	4ba7      	ldr	r3, [pc, #668]	@ (34186730 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34186494:	429a      	cmp	r2, r3
34186496:	d116      	bne.n	341864c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186498:	4ba3      	ldr	r3, [pc, #652]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418649a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418649e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864a2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341864ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341864b2:	3b01      	subs	r3, #1
341864b4:	041b      	lsls	r3, r3, #16
341864b6:	4313      	orrs	r3, r2
341864b8:	4a9b      	ldr	r2, [pc, #620]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341864ba:	430b      	orrs	r3, r1
341864bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341864c0:	f7fd ff0e 	bl	341842e0 <LL_RCC_IC8_Enable>
341864c4:	e026      	b.n	34186514 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
341864c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864ca:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341864ce:	4b99      	ldr	r3, [pc, #612]	@ (34186734 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
341864d0:	429a      	cmp	r2, r3
341864d2:	d116      	bne.n	34186502 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341864d4:	4b94      	ldr	r3, [pc, #592]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341864d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341864da:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864de:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341864e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341864ee:	3b01      	subs	r3, #1
341864f0:	041b      	lsls	r3, r3, #16
341864f2:	4313      	orrs	r3, r2
341864f4:	4a8c      	ldr	r2, [pc, #560]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341864f6:	430b      	orrs	r3, r1
341864f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341864fc:	f7fd ff30 	bl	34184360 <LL_RCC_IC9_Enable>
34186500:	e008      	b.n	34186514 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34186502:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186506:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418650a:	4b8b      	ldr	r3, [pc, #556]	@ (34186738 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
3418650c:	429a      	cmp	r2, r3
3418650e:	d101      	bne.n	34186514 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34186510:	f7fe f9e6 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34186514:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186518:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418651c:	4618      	mov	r0, r3
3418651e:	f7fd f977 	bl	34183810 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34186522:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186526:	e9d3 2300 	ldrd	r2, r3, [r3]
3418652a:	2100      	movs	r1, #0
3418652c:	6739      	str	r1, [r7, #112]	@ 0x70
3418652e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34186532:	677b      	str	r3, [r7, #116]	@ 0x74
34186534:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34186538:	4603      	mov	r3, r0
3418653a:	460a      	mov	r2, r1
3418653c:	4313      	orrs	r3, r2
3418653e:	d04b      	beq.n	341865d8 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34186540:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186544:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186548:	4b7c      	ldr	r3, [pc, #496]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
3418654a:	429a      	cmp	r2, r3
3418654c:	d116      	bne.n	3418657c <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418654e:	4b76      	ldr	r3, [pc, #472]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186554:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186558:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418655c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186568:	3b01      	subs	r3, #1
3418656a:	041b      	lsls	r3, r3, #16
3418656c:	4313      	orrs	r3, r2
3418656e:	4a6e      	ldr	r2, [pc, #440]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186570:	430b      	orrs	r3, r1
34186572:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186576:	f7fd fef3 	bl	34184360 <LL_RCC_IC9_Enable>
3418657a:	e026      	b.n	341865ca <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3418657c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186580:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186584:	4b6e      	ldr	r3, [pc, #440]	@ (34186740 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
34186586:	429a      	cmp	r2, r3
34186588:	d116      	bne.n	341865b8 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418658a:	4b67      	ldr	r3, [pc, #412]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418658c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186590:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186594:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186598:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418659c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418659e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341865a4:	3b01      	subs	r3, #1
341865a6:	041b      	lsls	r3, r3, #16
341865a8:	4313      	orrs	r3, r2
341865aa:	4a5f      	ldr	r2, [pc, #380]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341865ac:	430b      	orrs	r3, r1
341865ae:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341865b2:	f7fd ffd5 	bl	34184560 <LL_RCC_IC14_Enable>
341865b6:	e008      	b.n	341865ca <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
341865b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865bc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341865c0:	4b60      	ldr	r3, [pc, #384]	@ (34186744 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
341865c2:	429a      	cmp	r2, r3
341865c4:	d101      	bne.n	341865ca <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
341865c6:	f7fe f98b 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
341865ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
341865d2:	4618      	mov	r0, r3
341865d4:	f7fd f927 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
341865d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341865e0:	2100      	movs	r1, #0
341865e2:	66b9      	str	r1, [r7, #104]	@ 0x68
341865e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341865e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
341865ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
341865ee:	4603      	mov	r3, r0
341865f0:	460a      	mov	r2, r1
341865f2:	4313      	orrs	r3, r2
341865f4:	d04b      	beq.n	3418668e <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
341865f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865fa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341865fe:	4b52      	ldr	r3, [pc, #328]	@ (34186748 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34186600:	429a      	cmp	r2, r3
34186602:	d116      	bne.n	34186632 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186604:	4b48      	ldr	r3, [pc, #288]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418660a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418660e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186616:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186618:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418661e:	3b01      	subs	r3, #1
34186620:	041b      	lsls	r3, r3, #16
34186622:	4313      	orrs	r3, r2
34186624:	4a40      	ldr	r2, [pc, #256]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186626:	430b      	orrs	r3, r1
34186628:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418662c:	f7fd fe98 	bl	34184360 <LL_RCC_IC9_Enable>
34186630:	e026      	b.n	34186680 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34186632:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186636:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418663a:	4b44      	ldr	r3, [pc, #272]	@ (3418674c <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
3418663c:	429a      	cmp	r2, r3
3418663e:	d116      	bne.n	3418666e <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186640:	4b39      	ldr	r3, [pc, #228]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186642:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186646:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418664a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418664e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186652:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186654:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418665a:	3b01      	subs	r3, #1
3418665c:	041b      	lsls	r3, r3, #16
3418665e:	4313      	orrs	r3, r2
34186660:	4a31      	ldr	r2, [pc, #196]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186662:	430b      	orrs	r3, r1
34186664:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186668:	f7fd ff7a 	bl	34184560 <LL_RCC_IC14_Enable>
3418666c:	e008      	b.n	34186680 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3418666e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186672:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186676:	4b36      	ldr	r3, [pc, #216]	@ (34186750 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34186678:	429a      	cmp	r2, r3
3418667a:	d101      	bne.n	34186680 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
3418667c:	f7fe f930 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34186680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186684:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186688:	4618      	mov	r0, r3
3418668a:	f7fd f8cc 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3418668e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186692:	e9d3 2300 	ldrd	r2, r3, [r3]
34186696:	2100      	movs	r1, #0
34186698:	6639      	str	r1, [r7, #96]	@ 0x60
3418669a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418669e:	667b      	str	r3, [r7, #100]	@ 0x64
341866a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
341866a4:	4603      	mov	r3, r0
341866a6:	460a      	mov	r2, r1
341866a8:	4313      	orrs	r3, r2
341866aa:	d067      	beq.n	3418677c <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
341866ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866b0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341866b4:	4b27      	ldr	r3, [pc, #156]	@ (34186754 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
341866b6:	429a      	cmp	r2, r3
341866b8:	d116      	bne.n	341866e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341866ba:	4b1b      	ldr	r3, [pc, #108]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341866bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341866c0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341866c4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341866c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341866ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341866d4:	3b01      	subs	r3, #1
341866d6:	041b      	lsls	r3, r3, #16
341866d8:	4313      	orrs	r3, r2
341866da:	4a13      	ldr	r2, [pc, #76]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341866dc:	430b      	orrs	r3, r1
341866de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341866e2:	f7fd fe3d 	bl	34184360 <LL_RCC_IC9_Enable>
341866e6:	e042      	b.n	3418676e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
341866e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866ec:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341866f0:	4b19      	ldr	r3, [pc, #100]	@ (34186758 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
341866f2:	429a      	cmp	r2, r3
341866f4:	d132      	bne.n	3418675c <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341866f6:	4b0c      	ldr	r3, [pc, #48]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341866f8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341866fc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186700:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186704:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186708:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418670a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418670e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186710:	3b01      	subs	r3, #1
34186712:	041b      	lsls	r3, r3, #16
34186714:	4313      	orrs	r3, r2
34186716:	4a04      	ldr	r2, [pc, #16]	@ (34186728 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186718:	430b      	orrs	r3, r1
3418671a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418671e:	f7fd ff1f 	bl	34184560 <LL_RCC_IC14_Enable>
34186722:	e024      	b.n	3418676e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34186724:	07031420 	.word	0x07031420
34186728:	56028000 	.word	0x56028000
3418672c:	07011420 	.word	0x07011420
34186730:	07021820 	.word	0x07021820
34186734:	07031820 	.word	0x07031820
34186738:	07011820 	.word	0x07011820
3418673c:	07020030 	.word	0x07020030
34186740:	07030030 	.word	0x07030030
34186744:	07010030 	.word	0x07010030
34186748:	07020430 	.word	0x07020430
3418674c:	07030430 	.word	0x07030430
34186750:	07010430 	.word	0x07010430
34186754:	07020830 	.word	0x07020830
34186758:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3418675c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186760:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186764:	4bb3      	ldr	r3, [pc, #716]	@ (34186a34 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
34186766:	429a      	cmp	r2, r3
34186768:	d101      	bne.n	3418676e <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
3418676a:	f7fe f8b9 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3418676e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186772:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
34186776:	4618      	mov	r0, r3
34186778:	f7fd f855 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3418677c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186780:	e9d3 2300 	ldrd	r2, r3, [r3]
34186784:	2100      	movs	r1, #0
34186786:	65b9      	str	r1, [r7, #88]	@ 0x58
34186788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418678c:	65fb      	str	r3, [r7, #92]	@ 0x5c
3418678e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34186792:	4603      	mov	r3, r0
34186794:	460a      	mov	r2, r1
34186796:	4313      	orrs	r3, r2
34186798:	d04b      	beq.n	34186832 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3418679a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418679e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341867a2:	4ba5      	ldr	r3, [pc, #660]	@ (34186a38 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
341867a4:	429a      	cmp	r2, r3
341867a6:	d116      	bne.n	341867d6 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341867a8:	4ba4      	ldr	r3, [pc, #656]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341867aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341867ae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867b2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341867bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341867c2:	3b01      	subs	r3, #1
341867c4:	041b      	lsls	r3, r3, #16
341867c6:	4313      	orrs	r3, r2
341867c8:	4a9c      	ldr	r2, [pc, #624]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341867ca:	430b      	orrs	r3, r1
341867cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341867d0:	f7fd fdc6 	bl	34184360 <LL_RCC_IC9_Enable>
341867d4:	e026      	b.n	34186824 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
341867d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867da:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341867de:	4b98      	ldr	r3, [pc, #608]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
341867e0:	429a      	cmp	r2, r3
341867e2:	d116      	bne.n	34186812 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341867e4:	4b95      	ldr	r3, [pc, #596]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341867e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341867ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341867f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341867fe:	3b01      	subs	r3, #1
34186800:	041b      	lsls	r3, r3, #16
34186802:	4313      	orrs	r3, r2
34186804:	4a8d      	ldr	r2, [pc, #564]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186806:	430b      	orrs	r3, r1
34186808:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418680c:	f7fd fea8 	bl	34184560 <LL_RCC_IC14_Enable>
34186810:	e008      	b.n	34186824 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34186812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186816:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418681a:	4b8a      	ldr	r3, [pc, #552]	@ (34186a44 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
3418681c:	429a      	cmp	r2, r3
3418681e:	d101      	bne.n	34186824 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34186820:	f7fe f85e 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34186824:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186828:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418682c:	4618      	mov	r0, r3
3418682e:	f7fc fffa 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34186832:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186836:	e9d3 2300 	ldrd	r2, r3, [r3]
3418683a:	2100      	movs	r1, #0
3418683c:	6539      	str	r1, [r7, #80]	@ 0x50
3418683e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34186842:	657b      	str	r3, [r7, #84]	@ 0x54
34186844:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34186848:	4603      	mov	r3, r0
3418684a:	460a      	mov	r2, r1
3418684c:	4313      	orrs	r3, r2
3418684e:	d04b      	beq.n	341868e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34186850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186854:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186858:	4b7b      	ldr	r3, [pc, #492]	@ (34186a48 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
3418685a:	429a      	cmp	r2, r3
3418685c:	d116      	bne.n	3418688c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418685e:	4b77      	ldr	r3, [pc, #476]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186860:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186864:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186868:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418686c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186878:	3b01      	subs	r3, #1
3418687a:	041b      	lsls	r3, r3, #16
3418687c:	4313      	orrs	r3, r2
3418687e:	4a6f      	ldr	r2, [pc, #444]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186880:	430b      	orrs	r3, r1
34186882:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186886:	f7fd fd6b 	bl	34184360 <LL_RCC_IC9_Enable>
3418688a:	e026      	b.n	341868da <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3418688c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186890:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186894:	4b6d      	ldr	r3, [pc, #436]	@ (34186a4c <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34186896:	429a      	cmp	r2, r3
34186898:	d116      	bne.n	341868c8 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418689a:	4b68      	ldr	r3, [pc, #416]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418689c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341868a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341868a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341868ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341868b4:	3b01      	subs	r3, #1
341868b6:	041b      	lsls	r3, r3, #16
341868b8:	4313      	orrs	r3, r2
341868ba:	4a60      	ldr	r2, [pc, #384]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341868bc:	430b      	orrs	r3, r1
341868be:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341868c2:	f7fd fe4d 	bl	34184560 <LL_RCC_IC14_Enable>
341868c6:	e008      	b.n	341868da <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
341868c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868cc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
341868d0:	4b5f      	ldr	r3, [pc, #380]	@ (34186a50 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
341868d2:	429a      	cmp	r2, r3
341868d4:	d101      	bne.n	341868da <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
341868d6:	f7fe f803 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
341868da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868de:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
341868e2:	4618      	mov	r0, r3
341868e4:	f7fc ff9f 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
341868e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868ec:	e9d3 2300 	ldrd	r2, r3, [r3]
341868f0:	2100      	movs	r1, #0
341868f2:	64b9      	str	r1, [r7, #72]	@ 0x48
341868f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
341868f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
341868fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
341868fe:	4603      	mov	r3, r0
34186900:	460a      	mov	r2, r1
34186902:	4313      	orrs	r3, r2
34186904:	d04b      	beq.n	3418699e <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34186906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418690a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418690e:	4b51      	ldr	r3, [pc, #324]	@ (34186a54 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34186910:	429a      	cmp	r2, r3
34186912:	d116      	bne.n	34186942 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186914:	4b49      	ldr	r3, [pc, #292]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186916:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418691a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418691e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186922:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186926:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186928:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418692c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418692e:	3b01      	subs	r3, #1
34186930:	041b      	lsls	r3, r3, #16
34186932:	4313      	orrs	r3, r2
34186934:	4a41      	ldr	r2, [pc, #260]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186936:	430b      	orrs	r3, r1
34186938:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418693c:	f7fd fd10 	bl	34184360 <LL_RCC_IC9_Enable>
34186940:	e026      	b.n	34186990 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34186942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186946:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418694a:	4b43      	ldr	r3, [pc, #268]	@ (34186a58 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
3418694c:	429a      	cmp	r2, r3
3418694e:	d116      	bne.n	3418697e <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186950:	4b3a      	ldr	r3, [pc, #232]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186952:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186956:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418695a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418695e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186962:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186964:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418696a:	3b01      	subs	r3, #1
3418696c:	041b      	lsls	r3, r3, #16
3418696e:	4313      	orrs	r3, r2
34186970:	4a32      	ldr	r2, [pc, #200]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186972:	430b      	orrs	r3, r1
34186974:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186978:	f7fd fdf2 	bl	34184560 <LL_RCC_IC14_Enable>
3418697c:	e008      	b.n	34186990 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3418697e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186982:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186986:	4b35      	ldr	r3, [pc, #212]	@ (34186a5c <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34186988:	429a      	cmp	r2, r3
3418698a:	d101      	bne.n	34186990 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
3418698c:	f7fd ffa8 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34186990:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186994:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186998:	4618      	mov	r0, r3
3418699a:	f7fc ff44 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3418699e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869a2:	e9d3 2300 	ldrd	r2, r3, [r3]
341869a6:	2100      	movs	r1, #0
341869a8:	6439      	str	r1, [r7, #64]	@ 0x40
341869aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341869ae:	647b      	str	r3, [r7, #68]	@ 0x44
341869b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
341869b4:	4603      	mov	r3, r0
341869b6:	460a      	mov	r2, r1
341869b8:	4313      	orrs	r3, r2
341869ba:	d065      	beq.n	34186a88 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
341869bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869c0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
341869c4:	4b26      	ldr	r3, [pc, #152]	@ (34186a60 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
341869c6:	429a      	cmp	r2, r3
341869c8:	d116      	bne.n	341869f8 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341869ca:	4b1c      	ldr	r3, [pc, #112]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341869cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341869d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341869d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341869d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341869de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341869e4:	3b01      	subs	r3, #1
341869e6:	041b      	lsls	r3, r3, #16
341869e8:	4313      	orrs	r3, r2
341869ea:	4a14      	ldr	r2, [pc, #80]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341869ec:	430b      	orrs	r3, r1
341869ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341869f2:	f7fd fcb5 	bl	34184360 <LL_RCC_IC9_Enable>
341869f6:	e040      	b.n	34186a7a <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
341869f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869fc:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186a00:	4b18      	ldr	r3, [pc, #96]	@ (34186a64 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34186a02:	429a      	cmp	r2, r3
34186a04:	d130      	bne.n	34186a68 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186a06:	4b0d      	ldr	r3, [pc, #52]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186a08:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186a0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186a1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186a20:	3b01      	subs	r3, #1
34186a22:	041b      	lsls	r3, r3, #16
34186a24:	4313      	orrs	r3, r2
34186a26:	4a05      	ldr	r2, [pc, #20]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186a28:	430b      	orrs	r3, r1
34186a2a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186a2e:	f7fd fd97 	bl	34184560 <LL_RCC_IC14_Enable>
34186a32:	e022      	b.n	34186a7a <HAL_RCCEx_PeriphCLKConfig+0x2156>
34186a34:	07010830 	.word	0x07010830
34186a38:	07020c30 	.word	0x07020c30
34186a3c:	56028000 	.word	0x56028000
34186a40:	07030c30 	.word	0x07030c30
34186a44:	07010c30 	.word	0x07010c30
34186a48:	07021030 	.word	0x07021030
34186a4c:	07031030 	.word	0x07031030
34186a50:	07011030 	.word	0x07011030
34186a54:	07021430 	.word	0x07021430
34186a58:	07031430 	.word	0x07031430
34186a5c:	07011430 	.word	0x07011430
34186a60:	07021830 	.word	0x07021830
34186a64:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34186a68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a6c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186a70:	4bc8      	ldr	r3, [pc, #800]	@ (34186d94 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34186a72:	429a      	cmp	r2, r3
34186a74:	d101      	bne.n	34186a7a <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34186a76:	f7fd ff33 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34186a7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a7e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34186a82:	4618      	mov	r0, r3
34186a84:	f7fc fecf 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34186a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a90:	2100      	movs	r1, #0
34186a92:	63b9      	str	r1, [r7, #56]	@ 0x38
34186a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34186a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
34186a9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34186a9e:	4603      	mov	r3, r0
34186aa0:	460a      	mov	r2, r1
34186aa2:	4313      	orrs	r3, r2
34186aa4:	d04b      	beq.n	34186b3e <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34186aa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186aaa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34186aae:	4bba      	ldr	r3, [pc, #744]	@ (34186d98 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34186ab0:	429a      	cmp	r2, r3
34186ab2:	d116      	bne.n	34186ae2 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186ab4:	4bb9      	ldr	r3, [pc, #740]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186aba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186abe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186ac2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186ace:	3b01      	subs	r3, #1
34186ad0:	041b      	lsls	r3, r3, #16
34186ad2:	4313      	orrs	r3, r2
34186ad4:	4ab1      	ldr	r2, [pc, #708]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186ad6:	430b      	orrs	r3, r1
34186ad8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186adc:	f7fd fc40 	bl	34184360 <LL_RCC_IC9_Enable>
34186ae0:	e026      	b.n	34186b30 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34186ae2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ae6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34186aea:	4bad      	ldr	r3, [pc, #692]	@ (34186da0 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34186aec:	429a      	cmp	r2, r3
34186aee:	d116      	bne.n	34186b1e <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186af0:	4baa      	ldr	r3, [pc, #680]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186af2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186af6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186afa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186afe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186b04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186b0a:	3b01      	subs	r3, #1
34186b0c:	041b      	lsls	r3, r3, #16
34186b0e:	4313      	orrs	r3, r2
34186b10:	4aa2      	ldr	r2, [pc, #648]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186b12:	430b      	orrs	r3, r1
34186b14:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186b18:	f7fd fd22 	bl	34184560 <LL_RCC_IC14_Enable>
34186b1c:	e008      	b.n	34186b30 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34186b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b22:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34186b26:	4b9f      	ldr	r3, [pc, #636]	@ (34186da4 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34186b28:	429a      	cmp	r2, r3
34186b2a:	d101      	bne.n	34186b30 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
34186b2c:	f7fd fed8 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34186b30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b34:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34186b38:	4618      	mov	r0, r3
34186b3a:	f7fc fe74 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34186b3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b42:	e9d3 2300 	ldrd	r2, r3, [r3]
34186b46:	2100      	movs	r1, #0
34186b48:	6339      	str	r1, [r7, #48]	@ 0x30
34186b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34186b4e:	637b      	str	r3, [r7, #52]	@ 0x34
34186b50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34186b54:	4603      	mov	r3, r0
34186b56:	460a      	mov	r2, r1
34186b58:	4313      	orrs	r3, r2
34186b5a:	d04b      	beq.n	34186bf4 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34186b5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b60:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34186b64:	4a90      	ldr	r2, [pc, #576]	@ (34186da8 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34186b66:	4293      	cmp	r3, r2
34186b68:	d116      	bne.n	34186b98 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186b6a:	4b8c      	ldr	r3, [pc, #560]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186b6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186b70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186b7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186b84:	3b01      	subs	r3, #1
34186b86:	041b      	lsls	r3, r3, #16
34186b88:	4313      	orrs	r3, r2
34186b8a:	4a84      	ldr	r2, [pc, #528]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186b8c:	430b      	orrs	r3, r1
34186b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186b92:	f7fd fbe5 	bl	34184360 <LL_RCC_IC9_Enable>
34186b96:	e026      	b.n	34186be6 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34186b98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b9c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34186ba0:	4a82      	ldr	r2, [pc, #520]	@ (34186dac <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34186ba2:	4293      	cmp	r3, r2
34186ba4:	d116      	bne.n	34186bd4 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186ba6:	4b7d      	ldr	r3, [pc, #500]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186ba8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186bac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186bb0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186bb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186bba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186bc0:	3b01      	subs	r3, #1
34186bc2:	041b      	lsls	r3, r3, #16
34186bc4:	4313      	orrs	r3, r2
34186bc6:	4a75      	ldr	r2, [pc, #468]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186bc8:	430b      	orrs	r3, r1
34186bca:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186bce:	f7fd fcc7 	bl	34184560 <LL_RCC_IC14_Enable>
34186bd2:	e008      	b.n	34186be6 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34186bd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bd8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34186bdc:	4a74      	ldr	r2, [pc, #464]	@ (34186db0 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34186bde:	4293      	cmp	r3, r2
34186be0:	d101      	bne.n	34186be6 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
34186be2:	f7fd fe7d 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
34186be6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bea:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34186bee:	4618      	mov	r0, r3
34186bf0:	f7fc fe19 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34186bf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186bfc:	2100      	movs	r1, #0
34186bfe:	62b9      	str	r1, [r7, #40]	@ 0x28
34186c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34186c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
34186c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34186c0a:	4603      	mov	r3, r0
34186c0c:	460a      	mov	r2, r1
34186c0e:	4313      	orrs	r3, r2
34186c10:	d04b      	beq.n	34186caa <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34186c12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c16:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34186c1a:	4a66      	ldr	r2, [pc, #408]	@ (34186db4 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34186c1c:	4293      	cmp	r3, r2
34186c1e:	d116      	bne.n	34186c4e <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186c20:	4b5e      	ldr	r3, [pc, #376]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186c22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186c26:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34186c2a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34186c2e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186c32:	6c91      	ldr	r1, [r2, #72]	@ 0x48
34186c34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186c38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
34186c3a:	3a01      	subs	r2, #1
34186c3c:	0412      	lsls	r2, r2, #16
34186c3e:	430a      	orrs	r2, r1
34186c40:	4956      	ldr	r1, [pc, #344]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186c42:	4313      	orrs	r3, r2
34186c44:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186c48:	f7fd fb8a 	bl	34184360 <LL_RCC_IC9_Enable>
34186c4c:	e026      	b.n	34186c9c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34186c4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c52:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34186c56:	4a58      	ldr	r2, [pc, #352]	@ (34186db8 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34186c58:	4293      	cmp	r3, r2
34186c5a:	d116      	bne.n	34186c8a <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186c5c:	4b4f      	ldr	r3, [pc, #316]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186c5e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186c62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34186c66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34186c6a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186c6e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
34186c70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186c74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
34186c76:	3a01      	subs	r2, #1
34186c78:	0412      	lsls	r2, r2, #16
34186c7a:	430a      	orrs	r2, r1
34186c7c:	4947      	ldr	r1, [pc, #284]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186c7e:	4313      	orrs	r3, r2
34186c80:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186c84:	f7fd fc6c 	bl	34184560 <LL_RCC_IC14_Enable>
34186c88:	e008      	b.n	34186c9c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34186c8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c8e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34186c92:	4a4a      	ldr	r2, [pc, #296]	@ (34186dbc <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34186c94:	4293      	cmp	r3, r2
34186c96:	d101      	bne.n	34186c9c <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34186c98:	f7fd fe22 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34186c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ca0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34186ca4:	4618      	mov	r0, r3
34186ca6:	f7fc fdbe 	bl	34183826 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34186caa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cae:	e9d3 2300 	ldrd	r2, r3, [r3]
34186cb2:	2100      	movs	r1, #0
34186cb4:	6239      	str	r1, [r7, #32]
34186cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34186cba:	627b      	str	r3, [r7, #36]	@ 0x24
34186cbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34186cc0:	4603      	mov	r3, r0
34186cc2:	460a      	mov	r2, r1
34186cc4:	4313      	orrs	r3, r2
34186cc6:	d014      	beq.n	34186cf2 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34186cc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ccc:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34186cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34186cd4:	4618      	mov	r0, r3
34186cd6:	f7fc fd4e 	bl	34183776 <LL_RCC_SetOTGPHYCKREFClockSource>
34186cda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cde:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34186ce2:	0fdb      	lsrs	r3, r3, #31
34186ce4:	2b01      	cmp	r3, #1
34186ce6:	d102      	bne.n	34186cee <HAL_RCCEx_PeriphCLKConfig+0x23ca>
34186ce8:	f7fc faf0 	bl	341832cc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34186cec:	e001      	b.n	34186cf2 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
34186cee:	f7fc fadd 	bl	341832ac <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34186cf2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
34186cfa:	2100      	movs	r1, #0
34186cfc:	61b9      	str	r1, [r7, #24]
34186cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34186d02:	61fb      	str	r3, [r7, #28]
34186d04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
34186d08:	4603      	mov	r3, r0
34186d0a:	460a      	mov	r2, r1
34186d0c:	4313      	orrs	r3, r2
34186d0e:	d014      	beq.n	34186d3a <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34186d10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d14:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34186d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34186d1c:	4618      	mov	r0, r3
34186d1e:	f7fc fd2a 	bl	34183776 <LL_RCC_SetOTGPHYCKREFClockSource>
34186d22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d26:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34186d2a:	0fdb      	lsrs	r3, r3, #31
34186d2c:	2b01      	cmp	r3, #1
34186d2e:	d102      	bne.n	34186d36 <HAL_RCCEx_PeriphCLKConfig+0x2412>
34186d30:	f7fc facc 	bl	341832cc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34186d34:	e001      	b.n	34186d3a <HAL_RCCEx_PeriphCLKConfig+0x2416>
34186d36:	f7fc fab9 	bl	341832ac <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34186d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186d42:	2100      	movs	r1, #0
34186d44:	6139      	str	r1, [r7, #16]
34186d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34186d4a:	617b      	str	r3, [r7, #20]
34186d4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
34186d50:	4603      	mov	r3, r0
34186d52:	460a      	mov	r2, r1
34186d54:	4313      	orrs	r3, r2
34186d56:	d053      	beq.n	34186e00 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34186d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d5c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34186d60:	4a17      	ldr	r2, [pc, #92]	@ (34186dc0 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
34186d62:	4293      	cmp	r3, r2
34186d64:	d12e      	bne.n	34186dc4 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186d66:	4b0d      	ldr	r3, [pc, #52]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186d68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186d6c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34186d70:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34186d74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186d78:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34186d7a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186d7e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34186d80:	3a01      	subs	r2, #1
34186d82:	0412      	lsls	r2, r2, #16
34186d84:	430a      	orrs	r2, r1
34186d86:	4905      	ldr	r1, [pc, #20]	@ (34186d9c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34186d88:	4313      	orrs	r3, r2
34186d8a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186d8e:	f7fd fc27 	bl	341845e0 <LL_RCC_IC15_Enable>
34186d92:	e020      	b.n	34186dd6 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34186d94:	07011830 	.word	0x07011830
34186d98:	07021c30 	.word	0x07021c30
34186d9c:	56028000 	.word	0x56028000
34186da0:	07031c30 	.word	0x07031c30
34186da4:	07011c30 	.word	0x07011c30
34186da8:	07020034 	.word	0x07020034
34186dac:	07030034 	.word	0x07030034
34186db0:	07010034 	.word	0x07010034
34186db4:	07020434 	.word	0x07020434
34186db8:	07030434 	.word	0x07030434
34186dbc:	07010434 	.word	0x07010434
34186dc0:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34186dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34186dcc:	4a43      	ldr	r2, [pc, #268]	@ (34186edc <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
34186dce:	4293      	cmp	r3, r2
34186dd0:	d101      	bne.n	34186dd6 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
34186dd2:	f7fd fd85 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34186dd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dda:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34186dde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34186de2:	4618      	mov	r0, r3
34186de4:	f7fc fcbc 	bl	34183760 <LL_RCC_SetOTGPHYClockSource>
34186de8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dec:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34186df0:	0fdb      	lsrs	r3, r3, #31
34186df2:	2b01      	cmp	r3, #1
34186df4:	d102      	bne.n	34186dfc <HAL_RCCEx_PeriphCLKConfig+0x24d8>
34186df6:	f7fc fa69 	bl	341832cc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34186dfa:	e001      	b.n	34186e00 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34186dfc:	f7fc fa56 	bl	341832ac <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34186e00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e04:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e08:	2100      	movs	r1, #0
34186e0a:	60b9      	str	r1, [r7, #8]
34186e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34186e10:	60fb      	str	r3, [r7, #12]
34186e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34186e16:	4603      	mov	r3, r0
34186e18:	460a      	mov	r2, r1
34186e1a:	4313      	orrs	r3, r2
34186e1c:	d03b      	beq.n	34186e96 <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34186e1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e22:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34186e26:	4a2e      	ldr	r2, [pc, #184]	@ (34186ee0 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
34186e28:	4293      	cmp	r3, r2
34186e2a:	d116      	bne.n	34186e5a <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186e2c:	4b2d      	ldr	r3, [pc, #180]	@ (34186ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34186e2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186e32:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34186e36:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34186e3a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186e3e:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34186e40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34186e44:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34186e46:	3a01      	subs	r2, #1
34186e48:	0412      	lsls	r2, r2, #16
34186e4a:	430a      	orrs	r2, r1
34186e4c:	4925      	ldr	r1, [pc, #148]	@ (34186ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34186e4e:	4313      	orrs	r3, r2
34186e50:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186e54:	f7fd fbc4 	bl	341845e0 <LL_RCC_IC15_Enable>
34186e58:	e008      	b.n	34186e6c <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34186e5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e5e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34186e62:	4a21      	ldr	r2, [pc, #132]	@ (34186ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
34186e64:	4293      	cmp	r3, r2
34186e66:	d101      	bne.n	34186e6c <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
34186e68:	f7fd fd3a 	bl	341848e0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34186e6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e70:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34186e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34186e78:	4618      	mov	r0, r3
34186e7a:	f7fc fc71 	bl	34183760 <LL_RCC_SetOTGPHYClockSource>
34186e7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e82:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34186e86:	0fdb      	lsrs	r3, r3, #31
34186e88:	2b01      	cmp	r3, #1
34186e8a:	d102      	bne.n	34186e92 <HAL_RCCEx_PeriphCLKConfig+0x256e>
34186e8c:	f7fc fa1e 	bl	341832cc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34186e90:	e001      	b.n	34186e96 <HAL_RCCEx_PeriphCLKConfig+0x2572>
34186e92:	f7fc fa0b 	bl	341832ac <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34186e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e9e:	2100      	movs	r1, #0
34186ea0:	6039      	str	r1, [r7, #0]
34186ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34186ea6:	607b      	str	r3, [r7, #4]
34186ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
34186eac:	4603      	mov	r3, r0
34186eae:	460a      	mov	r2, r1
34186eb0:	4313      	orrs	r3, r2
34186eb2:	d006      	beq.n	34186ec2 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34186eb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eb8:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34186ebc:	4618      	mov	r0, r3
34186ebe:	f7fc fe8b 	bl	34183bd8 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34186ec2:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
34186ec6:	2b00      	cmp	r3, #0
34186ec8:	d101      	bne.n	34186ece <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
34186eca:	2300      	movs	r3, #0
34186ecc:	e000      	b.n	34186ed0 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
34186ece:	2301      	movs	r3, #1
}
34186ed0:	4618      	mov	r0, r3
34186ed2:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
34186ed6:	46bd      	mov	sp, r7
34186ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34186edc:	03010c14 	.word	0x03010c14
34186ee0:	03021414 	.word	0x03021414
34186ee4:	56028000 	.word	0x56028000
34186ee8:	03011414 	.word	0x03011414

34186eec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34186eec:	b590      	push	{r4, r7, lr}
34186eee:	b085      	sub	sp, #20
34186ef0:	af00      	add	r7, sp, #0
34186ef2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34186ef6:	2100      	movs	r1, #0
34186ef8:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34186efa:	e9d7 0100 	ldrd	r0, r1, [r7]
34186efe:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34186f02:	ea50 0104 	orrs.w	r1, r0, r4
34186f06:	f000 8436 	beq.w	34187776 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
34186f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f0e:	2801      	cmp	r0, #1
34186f10:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34186f14:	f080 8434 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186f18:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f1c:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34186f20:	ea50 0104 	orrs.w	r1, r0, r4
34186f24:	f000 8422 	beq.w	3418776c <HAL_RCCEx_GetPeriphCLKFreq+0x880>
34186f28:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f2c:	2801      	cmp	r0, #1
34186f2e:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
34186f32:	f080 8425 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186f36:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f3a:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
34186f3e:	ea50 0104 	orrs.w	r1, r0, r4
34186f42:	f000 840e 	beq.w	34187762 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
34186f46:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f4a:	2801      	cmp	r0, #1
34186f4c:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
34186f50:	f080 8416 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186f54:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f58:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34186f5c:	ea50 0104 	orrs.w	r1, r0, r4
34186f60:	f000 83fa 	beq.w	34187758 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34186f64:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f68:	2801      	cmp	r0, #1
34186f6a:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34186f6e:	f080 8407 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186f72:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f76:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34186f7a:	ea50 0104 	orrs.w	r1, r0, r4
34186f7e:	f000 83e6 	beq.w	3418774e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34186f82:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f86:	2801      	cmp	r0, #1
34186f88:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34186f8c:	f080 83f8 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186f90:	e9d7 0100 	ldrd	r0, r1, [r7]
34186f94:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34186f98:	ea50 0104 	orrs.w	r1, r0, r4
34186f9c:	f000 83d2 	beq.w	34187744 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34186fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fa4:	2801      	cmp	r0, #1
34186fa6:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34186faa:	f080 83e9 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186fae:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fb2:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34186fb6:	ea50 0104 	orrs.w	r1, r0, r4
34186fba:	f000 83be 	beq.w	3418773a <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34186fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fc2:	2801      	cmp	r0, #1
34186fc4:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34186fc8:	f080 83da 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fd0:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34186fd4:	ea50 0104 	orrs.w	r1, r0, r4
34186fd8:	f000 83aa 	beq.w	34187730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34186fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fe0:	2801      	cmp	r0, #1
34186fe2:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34186fe6:	f080 83cb 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34186fea:	e9d7 0100 	ldrd	r0, r1, [r7]
34186fee:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34186ff2:	ea50 0104 	orrs.w	r1, r0, r4
34186ff6:	f000 8396 	beq.w	34187726 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
34186ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
34186ffe:	2801      	cmp	r0, #1
34187000:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34187004:	f080 83bc 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187008:	e9d7 0100 	ldrd	r0, r1, [r7]
3418700c:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34187010:	ea50 0104 	orrs.w	r1, r0, r4
34187014:	f000 8382 	beq.w	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
34187018:	e9d7 0100 	ldrd	r0, r1, [r7]
3418701c:	2801      	cmp	r0, #1
3418701e:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
34187022:	f080 83ad 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187026:	e9d7 0100 	ldrd	r0, r1, [r7]
3418702a:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
3418702e:	ea50 0104 	orrs.w	r1, r0, r4
34187032:	f000 836e 	beq.w	34187712 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
34187036:	e9d7 0100 	ldrd	r0, r1, [r7]
3418703a:	2801      	cmp	r0, #1
3418703c:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
34187040:	f080 839e 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187044:	e9d7 0100 	ldrd	r0, r1, [r7]
34187048:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
3418704c:	ea50 0104 	orrs.w	r1, r0, r4
34187050:	f000 835a 	beq.w	34187708 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
34187054:	e9d7 0100 	ldrd	r0, r1, [r7]
34187058:	2801      	cmp	r0, #1
3418705a:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
3418705e:	f080 838f 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187062:	e9d7 0100 	ldrd	r0, r1, [r7]
34187066:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3418706a:	ea50 0104 	orrs.w	r1, r0, r4
3418706e:	f000 8346 	beq.w	341876fe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
34187072:	e9d7 0100 	ldrd	r0, r1, [r7]
34187076:	2801      	cmp	r0, #1
34187078:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
3418707c:	f080 8380 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187080:	e9d7 0100 	ldrd	r0, r1, [r7]
34187084:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34187088:	ea50 0104 	orrs.w	r1, r0, r4
3418708c:	f000 8332 	beq.w	341876f4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34187090:	e9d7 0100 	ldrd	r0, r1, [r7]
34187094:	2801      	cmp	r0, #1
34187096:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3418709a:	f080 8371 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418709e:	e9d7 0100 	ldrd	r0, r1, [r7]
341870a2:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
341870a6:	ea50 0104 	orrs.w	r1, r0, r4
341870aa:	f000 831e 	beq.w	341876ea <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
341870ae:	e9d7 0100 	ldrd	r0, r1, [r7]
341870b2:	2801      	cmp	r0, #1
341870b4:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
341870b8:	f080 8362 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341870bc:	e9d7 0100 	ldrd	r0, r1, [r7]
341870c0:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
341870c4:	ea50 0104 	orrs.w	r1, r0, r4
341870c8:	f000 830a 	beq.w	341876e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
341870cc:	e9d7 0100 	ldrd	r0, r1, [r7]
341870d0:	2801      	cmp	r0, #1
341870d2:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
341870d6:	f080 8353 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341870da:	e9d7 0100 	ldrd	r0, r1, [r7]
341870de:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
341870e2:	ea50 0104 	orrs.w	r1, r0, r4
341870e6:	f000 82f6 	beq.w	341876d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
341870ea:	e9d7 0100 	ldrd	r0, r1, [r7]
341870ee:	2801      	cmp	r0, #1
341870f0:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
341870f4:	f080 8344 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341870f8:	e9d7 0100 	ldrd	r0, r1, [r7]
341870fc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34187100:	ea50 0104 	orrs.w	r1, r0, r4
34187104:	f000 82e2 	beq.w	341876cc <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
34187108:	e9d7 0100 	ldrd	r0, r1, [r7]
3418710c:	2801      	cmp	r0, #1
3418710e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34187112:	f080 8335 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187116:	e9d7 0100 	ldrd	r0, r1, [r7]
3418711a:	f1a1 0420 	sub.w	r4, r1, #32
3418711e:	ea50 0104 	orrs.w	r1, r0, r4
34187122:	f000 82ce 	beq.w	341876c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
34187126:	e9d7 0100 	ldrd	r0, r1, [r7]
3418712a:	2801      	cmp	r0, #1
3418712c:	f171 0120 	sbcs.w	r1, r1, #32
34187130:	f080 8326 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187134:	e9d7 0100 	ldrd	r0, r1, [r7]
34187138:	f1a1 0410 	sub.w	r4, r1, #16
3418713c:	ea50 0104 	orrs.w	r1, r0, r4
34187140:	f000 82ba 	beq.w	341876b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
34187144:	e9d7 0100 	ldrd	r0, r1, [r7]
34187148:	2801      	cmp	r0, #1
3418714a:	f171 0110 	sbcs.w	r1, r1, #16
3418714e:	f080 8317 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187152:	e9d7 0100 	ldrd	r0, r1, [r7]
34187156:	f1a1 0408 	sub.w	r4, r1, #8
3418715a:	ea50 0104 	orrs.w	r1, r0, r4
3418715e:	f000 82a6 	beq.w	341876ae <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
34187162:	e9d7 0100 	ldrd	r0, r1, [r7]
34187166:	2801      	cmp	r0, #1
34187168:	f171 0108 	sbcs.w	r1, r1, #8
3418716c:	f080 8308 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187170:	e9d7 0100 	ldrd	r0, r1, [r7]
34187174:	1f0c      	subs	r4, r1, #4
34187176:	ea50 0104 	orrs.w	r1, r0, r4
3418717a:	f000 8293 	beq.w	341876a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3418717e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187182:	2801      	cmp	r0, #1
34187184:	f171 0104 	sbcs.w	r1, r1, #4
34187188:	f080 82fa 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418718c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187190:	1e8c      	subs	r4, r1, #2
34187192:	ea50 0104 	orrs.w	r1, r0, r4
34187196:	f000 8280 	beq.w	3418769a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3418719a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418719e:	2801      	cmp	r0, #1
341871a0:	f171 0102 	sbcs.w	r1, r1, #2
341871a4:	f080 82ec 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341871a8:	e9d7 0100 	ldrd	r0, r1, [r7]
341871ac:	1e4c      	subs	r4, r1, #1
341871ae:	ea50 0104 	orrs.w	r1, r0, r4
341871b2:	f000 826d 	beq.w	34187690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
341871b6:	e9d7 0100 	ldrd	r0, r1, [r7]
341871ba:	2801      	cmp	r0, #1
341871bc:	f171 0101 	sbcs.w	r1, r1, #1
341871c0:	f080 82de 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341871c4:	e9d7 0100 	ldrd	r0, r1, [r7]
341871c8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
341871cc:	4321      	orrs	r1, r4
341871ce:	f000 825a 	beq.w	34187686 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
341871d2:	e9d7 0100 	ldrd	r0, r1, [r7]
341871d6:	4cda      	ldr	r4, [pc, #872]	@ (34187540 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
341871d8:	42a0      	cmp	r0, r4
341871da:	f171 0100 	sbcs.w	r1, r1, #0
341871de:	f080 82cf 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341871e2:	e9d7 0100 	ldrd	r0, r1, [r7]
341871e6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
341871ea:	4321      	orrs	r1, r4
341871ec:	f000 8246 	beq.w	3418767c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
341871f0:	e9d7 0100 	ldrd	r0, r1, [r7]
341871f4:	4cd3      	ldr	r4, [pc, #844]	@ (34187544 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
341871f6:	42a0      	cmp	r0, r4
341871f8:	f171 0100 	sbcs.w	r1, r1, #0
341871fc:	f080 82c0 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187200:	e9d7 0100 	ldrd	r0, r1, [r7]
34187204:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
34187208:	4321      	orrs	r1, r4
3418720a:	f000 8232 	beq.w	34187672 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
3418720e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187212:	4ccd      	ldr	r4, [pc, #820]	@ (34187548 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34187214:	42a0      	cmp	r0, r4
34187216:	f171 0100 	sbcs.w	r1, r1, #0
3418721a:	f080 82b1 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418721e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187222:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
34187226:	4321      	orrs	r1, r4
34187228:	f000 821e 	beq.w	34187668 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
3418722c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187230:	4cc6      	ldr	r4, [pc, #792]	@ (3418754c <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
34187232:	42a0      	cmp	r0, r4
34187234:	f171 0100 	sbcs.w	r1, r1, #0
34187238:	f080 82a2 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418723c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187240:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
34187244:	4321      	orrs	r1, r4
34187246:	f000 820b 	beq.w	34187660 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
3418724a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418724e:	4cc0      	ldr	r4, [pc, #768]	@ (34187550 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
34187250:	42a0      	cmp	r0, r4
34187252:	f171 0100 	sbcs.w	r1, r1, #0
34187256:	f080 8293 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418725a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418725e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
34187262:	4321      	orrs	r1, r4
34187264:	f000 81f7 	beq.w	34187656 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34187268:	e9d7 0100 	ldrd	r0, r1, [r7]
3418726c:	4cb9      	ldr	r4, [pc, #740]	@ (34187554 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3418726e:	42a0      	cmp	r0, r4
34187270:	f171 0100 	sbcs.w	r1, r1, #0
34187274:	f080 8284 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187278:	e9d7 0100 	ldrd	r0, r1, [r7]
3418727c:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34187280:	4321      	orrs	r1, r4
34187282:	f000 81e2 	beq.w	3418764a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34187286:	e9d7 0100 	ldrd	r0, r1, [r7]
3418728a:	4cb3      	ldr	r4, [pc, #716]	@ (34187558 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
3418728c:	42a0      	cmp	r0, r4
3418728e:	f171 0100 	sbcs.w	r1, r1, #0
34187292:	f080 8275 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187296:	e9d7 0100 	ldrd	r0, r1, [r7]
3418729a:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3418729e:	4321      	orrs	r1, r4
341872a0:	f000 81cd 	beq.w	3418763e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
341872a4:	e9d7 0100 	ldrd	r0, r1, [r7]
341872a8:	4cac      	ldr	r4, [pc, #688]	@ (3418755c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
341872aa:	42a0      	cmp	r0, r4
341872ac:	f171 0100 	sbcs.w	r1, r1, #0
341872b0:	f080 8266 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341872b4:	e9d7 0100 	ldrd	r0, r1, [r7]
341872b8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
341872bc:	4321      	orrs	r1, r4
341872be:	f000 81b8 	beq.w	34187632 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
341872c2:	e9d7 0100 	ldrd	r0, r1, [r7]
341872c6:	4ca6      	ldr	r4, [pc, #664]	@ (34187560 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
341872c8:	42a0      	cmp	r0, r4
341872ca:	f171 0100 	sbcs.w	r1, r1, #0
341872ce:	f080 8257 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341872d2:	e9d7 0100 	ldrd	r0, r1, [r7]
341872d6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
341872da:	4321      	orrs	r1, r4
341872dc:	f000 81a4 	beq.w	34187628 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
341872e0:	e9d7 0100 	ldrd	r0, r1, [r7]
341872e4:	4c9f      	ldr	r4, [pc, #636]	@ (34187564 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
341872e6:	42a0      	cmp	r0, r4
341872e8:	f171 0100 	sbcs.w	r1, r1, #0
341872ec:	f080 8248 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341872f0:	e9d7 0100 	ldrd	r0, r1, [r7]
341872f4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
341872f8:	4321      	orrs	r1, r4
341872fa:	f000 8190 	beq.w	3418761e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
341872fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34187302:	4c99      	ldr	r4, [pc, #612]	@ (34187568 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34187304:	42a0      	cmp	r0, r4
34187306:	f171 0100 	sbcs.w	r1, r1, #0
3418730a:	f080 8239 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418730e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187312:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
34187316:	4321      	orrs	r1, r4
34187318:	f000 817c 	beq.w	34187614 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
3418731c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187320:	4c92      	ldr	r4, [pc, #584]	@ (3418756c <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34187322:	42a0      	cmp	r0, r4
34187324:	f171 0100 	sbcs.w	r1, r1, #0
34187328:	f080 822a 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418732c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187330:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34187334:	4321      	orrs	r1, r4
34187336:	f000 8168 	beq.w	3418760a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
3418733a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418733e:	4c8c      	ldr	r4, [pc, #560]	@ (34187570 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34187340:	42a0      	cmp	r0, r4
34187342:	f171 0100 	sbcs.w	r1, r1, #0
34187346:	f080 821b 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418734a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418734e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34187352:	4321      	orrs	r1, r4
34187354:	f000 8154 	beq.w	34187600 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34187358:	e9d7 0100 	ldrd	r0, r1, [r7]
3418735c:	4c85      	ldr	r4, [pc, #532]	@ (34187574 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
3418735e:	42a0      	cmp	r0, r4
34187360:	f171 0100 	sbcs.w	r1, r1, #0
34187364:	f080 820c 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187368:	e9d7 0100 	ldrd	r0, r1, [r7]
3418736c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34187370:	4321      	orrs	r1, r4
34187372:	f000 8140 	beq.w	341875f6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34187376:	e9d7 0100 	ldrd	r0, r1, [r7]
3418737a:	4c7f      	ldr	r4, [pc, #508]	@ (34187578 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
3418737c:	42a0      	cmp	r0, r4
3418737e:	f171 0100 	sbcs.w	r1, r1, #0
34187382:	f080 81fd 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187386:	e9d7 0100 	ldrd	r0, r1, [r7]
3418738a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3418738e:	4321      	orrs	r1, r4
34187390:	f000 812c 	beq.w	341875ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34187394:	e9d7 0100 	ldrd	r0, r1, [r7]
34187398:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3418739c:	f171 0100 	sbcs.w	r1, r1, #0
341873a0:	f080 81ee 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341873a4:	e9d7 0100 	ldrd	r0, r1, [r7]
341873a8:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
341873ac:	4321      	orrs	r1, r4
341873ae:	f000 8118 	beq.w	341875e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
341873b2:	e9d7 0100 	ldrd	r0, r1, [r7]
341873b6:	f248 0401 	movw	r4, #32769	@ 0x8001
341873ba:	42a0      	cmp	r0, r4
341873bc:	f171 0100 	sbcs.w	r1, r1, #0
341873c0:	f080 81de 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341873c4:	e9d7 0100 	ldrd	r0, r1, [r7]
341873c8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
341873cc:	4321      	orrs	r1, r4
341873ce:	f000 8103 	beq.w	341875d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
341873d2:	e9d7 0100 	ldrd	r0, r1, [r7]
341873d6:	f244 0401 	movw	r4, #16385	@ 0x4001
341873da:	42a0      	cmp	r0, r4
341873dc:	f171 0100 	sbcs.w	r1, r1, #0
341873e0:	f080 81ce 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341873e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341873e8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
341873ec:	4321      	orrs	r1, r4
341873ee:	f000 80ee 	beq.w	341875ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
341873f2:	e9d7 0100 	ldrd	r0, r1, [r7]
341873f6:	f242 0401 	movw	r4, #8193	@ 0x2001
341873fa:	42a0      	cmp	r0, r4
341873fc:	f171 0100 	sbcs.w	r1, r1, #0
34187400:	f080 81be 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187404:	e9d7 0100 	ldrd	r0, r1, [r7]
34187408:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
3418740c:	4321      	orrs	r1, r4
3418740e:	f000 80d9 	beq.w	341875c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34187412:	e9d7 0100 	ldrd	r0, r1, [r7]
34187416:	f241 0401 	movw	r4, #4097	@ 0x1001
3418741a:	42a0      	cmp	r0, r4
3418741c:	f171 0100 	sbcs.w	r1, r1, #0
34187420:	f080 81ae 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187424:	e9d7 0100 	ldrd	r0, r1, [r7]
34187428:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
3418742c:	4321      	orrs	r1, r4
3418742e:	f000 80c4 	beq.w	341875ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
34187432:	e9d7 0100 	ldrd	r0, r1, [r7]
34187436:	f640 0401 	movw	r4, #2049	@ 0x801
3418743a:	42a0      	cmp	r0, r4
3418743c:	f171 0100 	sbcs.w	r1, r1, #0
34187440:	f080 819e 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187444:	e9d7 0100 	ldrd	r0, r1, [r7]
34187448:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
3418744c:	4321      	orrs	r1, r4
3418744e:	f000 80af 	beq.w	341875b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
34187452:	e9d7 0100 	ldrd	r0, r1, [r7]
34187456:	f240 4401 	movw	r4, #1025	@ 0x401
3418745a:	42a0      	cmp	r0, r4
3418745c:	f171 0100 	sbcs.w	r1, r1, #0
34187460:	f080 818e 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187464:	e9d7 0100 	ldrd	r0, r1, [r7]
34187468:	2821      	cmp	r0, #33	@ 0x21
3418746a:	f171 0100 	sbcs.w	r1, r1, #0
3418746e:	d255      	bcs.n	3418751c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34187470:	e9d7 0100 	ldrd	r0, r1, [r7]
34187474:	4301      	orrs	r1, r0
34187476:	f000 8183 	beq.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418747a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418747e:	1e42      	subs	r2, r0, #1
34187480:	f141 33ff 	adc.w	r3, r1, #4294967295
34187484:	2a20      	cmp	r2, #32
34187486:	f173 0100 	sbcs.w	r1, r3, #0
3418748a:	f080 8179 	bcs.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418748e:	2a1f      	cmp	r2, #31
34187490:	f200 8176 	bhi.w	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187494:	a101      	add	r1, pc, #4	@ (adr r1, 3418749c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34187496:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3418749a:	bf00      	nop
3418749c:	3418752b 	.word	0x3418752b
341874a0:	34187535 	.word	0x34187535
341874a4:	34187781 	.word	0x34187781
341874a8:	34187585 	.word	0x34187585
341874ac:	34187781 	.word	0x34187781
341874b0:	34187781 	.word	0x34187781
341874b4:	34187781 	.word	0x34187781
341874b8:	3418757d 	.word	0x3418757d
341874bc:	34187781 	.word	0x34187781
341874c0:	34187781 	.word	0x34187781
341874c4:	34187781 	.word	0x34187781
341874c8:	34187781 	.word	0x34187781
341874cc:	34187781 	.word	0x34187781
341874d0:	34187781 	.word	0x34187781
341874d4:	34187781 	.word	0x34187781
341874d8:	3418758f 	.word	0x3418758f
341874dc:	34187781 	.word	0x34187781
341874e0:	34187781 	.word	0x34187781
341874e4:	34187781 	.word	0x34187781
341874e8:	34187781 	.word	0x34187781
341874ec:	34187781 	.word	0x34187781
341874f0:	34187781 	.word	0x34187781
341874f4:	34187781 	.word	0x34187781
341874f8:	34187781 	.word	0x34187781
341874fc:	34187781 	.word	0x34187781
34187500:	34187781 	.word	0x34187781
34187504:	34187781 	.word	0x34187781
34187508:	34187781 	.word	0x34187781
3418750c:	34187781 	.word	0x34187781
34187510:	34187781 	.word	0x34187781
34187514:	34187781 	.word	0x34187781
34187518:	3418759b 	.word	0x3418759b
3418751c:	e9d7 2300 	ldrd	r2, r3, [r7]
34187520:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34187524:	430b      	orrs	r3, r1
34187526:	d03e      	beq.n	341875a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
34187528:	e12a      	b.n	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
3418752a:	2070      	movs	r0, #112	@ 0x70
3418752c:	f000 fb90 	bl	34187c50 <RCCEx_GetADCCLKFreq>
34187530:	60f8      	str	r0, [r7, #12]
      break;
34187532:	e126      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34187534:	2007      	movs	r0, #7
34187536:	f000 fc8d 	bl	34187e54 <RCCEx_GetADFCLKFreq>
3418753a:	60f8      	str	r0, [r7, #12]
      break;
3418753c:	e121      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
3418753e:	bf00      	nop
34187540:	80000001 	.word	0x80000001
34187544:	40000001 	.word	0x40000001
34187548:	20000001 	.word	0x20000001
3418754c:	10000001 	.word	0x10000001
34187550:	08000001 	.word	0x08000001
34187554:	04000001 	.word	0x04000001
34187558:	02000001 	.word	0x02000001
3418755c:	01000001 	.word	0x01000001
34187560:	00800001 	.word	0x00800001
34187564:	00400001 	.word	0x00400001
34187568:	00200001 	.word	0x00200001
3418756c:	00100001 	.word	0x00100001
34187570:	00080001 	.word	0x00080001
34187574:	00040001 	.word	0x00040001
34187578:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
3418757c:	f000 ff0c 	bl	34188398 <RCCEx_GetCSICLKFreq>
34187580:	60f8      	str	r0, [r7, #12]
      break;
34187582:	e0fe      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187584:	2007      	movs	r0, #7
34187586:	f000 fd51 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418758a:	60f8      	str	r0, [r7, #12]
      break;
3418758c:	e0f9      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
3418758e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34187592:	f000 ff4d 	bl	34188430 <RCCEx_GetDCMIPPCLKFreq>
34187596:	60f8      	str	r0, [r7, #12]
      break;
34187598:	e0f3      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
3418759a:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
3418759e:	f000 ffd1 	bl	34188544 <RCCEx_GetETH1CLKFreq>
341875a2:	60f8      	str	r0, [r7, #12]
      break;
341875a4:	e0ed      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
341875a6:	2003      	movs	r0, #3
341875a8:	f001 f84c 	bl	34188644 <RCCEx_GetETH1PTPCLKFreq>
341875ac:	60f8      	str	r0, [r7, #12]
      break;
341875ae:	e0e8      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
341875b0:	2003      	movs	r0, #3
341875b2:	f001 f8cb 	bl	3418874c <RCCEx_GetFDCANCLKFreq>
341875b6:	60f8      	str	r0, [r7, #12]
      break;
341875b8:	e0e3      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
341875ba:	2030      	movs	r0, #48	@ 0x30
341875bc:	f001 f946 	bl	3418884c <RCCEx_GetFMCCLKFreq>
341875c0:	60f8      	str	r0, [r7, #12]
      break;
341875c2:	e0de      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
341875c4:	4871      	ldr	r0, [pc, #452]	@ (3418778c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
341875c6:	f001 f9f9 	bl	341889bc <RCCEx_GetI2CCLKFreq>
341875ca:	60f8      	str	r0, [r7, #12]
      break;
341875cc:	e0d9      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
341875ce:	4870      	ldr	r0, [pc, #448]	@ (34187790 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
341875d0:	f001 f9f4 	bl	341889bc <RCCEx_GetI2CCLKFreq>
341875d4:	60f8      	str	r0, [r7, #12]
      break;
341875d6:	e0d4      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
341875d8:	486e      	ldr	r0, [pc, #440]	@ (34187794 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
341875da:	f001 f9ef 	bl	341889bc <RCCEx_GetI2CCLKFreq>
341875de:	60f8      	str	r0, [r7, #12]
      break;
341875e0:	e0cf      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
341875e2:	486d      	ldr	r0, [pc, #436]	@ (34187798 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
341875e4:	f001 f9ea 	bl	341889bc <RCCEx_GetI2CCLKFreq>
341875e8:	60f8      	str	r0, [r7, #12]
      break;
341875ea:	e0ca      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
341875ec:	486b      	ldr	r0, [pc, #428]	@ (3418779c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
341875ee:	f001 fb8d 	bl	34188d0c <RCCEx_GetI3CCLKFreq>
341875f2:	60f8      	str	r0, [r7, #12]
      break;
341875f4:	e0c5      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
341875f6:	486a      	ldr	r0, [pc, #424]	@ (341877a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
341875f8:	f001 fb88 	bl	34188d0c <RCCEx_GetI3CCLKFreq>
341875fc:	60f8      	str	r0, [r7, #12]
      break;
341875fe:	e0c0      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34187600:	4868      	ldr	r0, [pc, #416]	@ (341877a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34187602:	f001 fcb7 	bl	34188f74 <RCCEx_GetLPTIMCLKFreq>
34187606:	60f8      	str	r0, [r7, #12]
      break;
34187608:	e0bb      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3418760a:	4867      	ldr	r0, [pc, #412]	@ (341877a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
3418760c:	f001 fcb2 	bl	34188f74 <RCCEx_GetLPTIMCLKFreq>
34187610:	60f8      	str	r0, [r7, #12]
      break;
34187612:	e0b6      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34187614:	4865      	ldr	r0, [pc, #404]	@ (341877ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
34187616:	f001 fcad 	bl	34188f74 <RCCEx_GetLPTIMCLKFreq>
3418761a:	60f8      	str	r0, [r7, #12]
      break;
3418761c:	e0b1      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3418761e:	4864      	ldr	r0, [pc, #400]	@ (341877b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34187620:	f001 fca8 	bl	34188f74 <RCCEx_GetLPTIMCLKFreq>
34187624:	60f8      	str	r0, [r7, #12]
      break;
34187626:	e0ac      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34187628:	4862      	ldr	r0, [pc, #392]	@ (341877b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
3418762a:	f001 fca3 	bl	34188f74 <RCCEx_GetLPTIMCLKFreq>
3418762e:	60f8      	str	r0, [r7, #12]
      break;
34187630:	e0a7      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34187632:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
34187636:	f001 fe47 	bl	341892c8 <RCCEx_GetLPUARTCLKFreq>
3418763a:	60f8      	str	r0, [r7, #12]
      break;
3418763c:	e0a1      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
3418763e:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34187642:	f001 ff43 	bl	341894cc <RCCEx_GetLTDCCLKFreq>
34187646:	60f8      	str	r0, [r7, #12]
      break;
34187648:	e09b      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
3418764a:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
3418764e:	f001 ffc7 	bl	341895e0 <RCCEx_GetMDFCLKFreq>
34187652:	60f8      	str	r0, [r7, #12]
      break;
34187654:	e095      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34187656:	2030      	movs	r0, #48	@ 0x30
34187658:	f002 f8cc 	bl	341897f4 <RCCEx_GetPSSICLKFreq>
3418765c:	60f8      	str	r0, [r7, #12]
      break;
3418765e:	e090      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34187660:	f002 f94a 	bl	341898f8 <RCCEx_GetRTCCLKFreq>
34187664:	60f8      	str	r0, [r7, #12]
      break;
34187666:	e08c      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34187668:	4853      	ldr	r0, [pc, #332]	@ (341877b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
3418766a:	f002 f997 	bl	3418999c <RCCEx_GetSAICLKFreq>
3418766e:	60f8      	str	r0, [r7, #12]
      break;
34187670:	e087      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34187672:	4852      	ldr	r0, [pc, #328]	@ (341877bc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34187674:	f002 f992 	bl	3418999c <RCCEx_GetSAICLKFreq>
34187678:	60f8      	str	r0, [r7, #12]
      break;
3418767a:	e082      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3418767c:	4850      	ldr	r0, [pc, #320]	@ (341877c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
3418767e:	f002 faf3 	bl	34189c68 <RCCEx_GetSDMMCCLKFreq>
34187682:	60f8      	str	r0, [r7, #12]
      break;
34187684:	e07d      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34187686:	484f      	ldr	r0, [pc, #316]	@ (341877c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34187688:	f002 faee 	bl	34189c68 <RCCEx_GetSDMMCCLKFreq>
3418768c:	60f8      	str	r0, [r7, #12]
      break;
3418768e:	e078      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34187690:	2007      	movs	r0, #7
34187692:	f002 fbd3 	bl	34189e3c <RCCEx_GetSPDIFRXCLKFreq>
34187696:	60f8      	str	r0, [r7, #12]
      break;
34187698:	e073      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3418769a:	484b      	ldr	r0, [pc, #300]	@ (341877c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
3418769c:	f002 fcb2 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876a0:	60f8      	str	r0, [r7, #12]
      break;
341876a2:	e06e      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
341876a4:	4849      	ldr	r0, [pc, #292]	@ (341877cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
341876a6:	f002 fcad 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876aa:	60f8      	str	r0, [r7, #12]
      break;
341876ac:	e069      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
341876ae:	4848      	ldr	r0, [pc, #288]	@ (341877d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
341876b0:	f002 fca8 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876b4:	60f8      	str	r0, [r7, #12]
      break;
341876b6:	e064      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
341876b8:	4846      	ldr	r0, [pc, #280]	@ (341877d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
341876ba:	f002 fca3 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876be:	60f8      	str	r0, [r7, #12]
      break;
341876c0:	e05f      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
341876c2:	4845      	ldr	r0, [pc, #276]	@ (341877d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
341876c4:	f002 fc9e 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876c8:	60f8      	str	r0, [r7, #12]
      break;
341876ca:	e05a      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
341876cc:	4843      	ldr	r0, [pc, #268]	@ (341877dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
341876ce:	f002 fc99 	bl	3418a004 <RCCEx_GetSPICLKFreq>
341876d2:	60f8      	str	r0, [r7, #12]
      break;
341876d4:	e055      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
341876d6:	4842      	ldr	r0, [pc, #264]	@ (341877e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
341876d8:	f003 f990 	bl	3418a9fc <RCCEx_GetUSARTCLKFreq>
341876dc:	60f8      	str	r0, [r7, #12]
      break;
341876de:	e050      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
341876e0:	4840      	ldr	r0, [pc, #256]	@ (341877e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
341876e2:	f003 f98b 	bl	3418a9fc <RCCEx_GetUSARTCLKFreq>
341876e6:	60f8      	str	r0, [r7, #12]
      break;
341876e8:	e04b      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
341876ea:	483f      	ldr	r0, [pc, #252]	@ (341877e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
341876ec:	f003 f986 	bl	3418a9fc <RCCEx_GetUSARTCLKFreq>
341876f0:	60f8      	str	r0, [r7, #12]
      break;
341876f2:	e046      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
341876f4:	483d      	ldr	r0, [pc, #244]	@ (341877ec <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
341876f6:	f002 ff57 	bl	3418a5a8 <RCCEx_GetUARTCLKFreq>
341876fa:	60f8      	str	r0, [r7, #12]
      break;
341876fc:	e041      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
341876fe:	483c      	ldr	r0, [pc, #240]	@ (341877f0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34187700:	f002 ff52 	bl	3418a5a8 <RCCEx_GetUARTCLKFreq>
34187704:	60f8      	str	r0, [r7, #12]
      break;
34187706:	e03c      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34187708:	483a      	ldr	r0, [pc, #232]	@ (341877f4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3418770a:	f003 f977 	bl	3418a9fc <RCCEx_GetUSARTCLKFreq>
3418770e:	60f8      	str	r0, [r7, #12]
      break;
34187710:	e037      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34187712:	4839      	ldr	r0, [pc, #228]	@ (341877f8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34187714:	f002 ff48 	bl	3418a5a8 <RCCEx_GetUARTCLKFreq>
34187718:	60f8      	str	r0, [r7, #12]
      break;
3418771a:	e032      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3418771c:	4837      	ldr	r0, [pc, #220]	@ (341877fc <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3418771e:	f002 ff43 	bl	3418a5a8 <RCCEx_GetUARTCLKFreq>
34187722:	60f8      	str	r0, [r7, #12]
      break;
34187724:	e02d      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34187726:	4836      	ldr	r0, [pc, #216]	@ (34187800 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34187728:	f002 ff3e 	bl	3418a5a8 <RCCEx_GetUARTCLKFreq>
3418772c:	60f8      	str	r0, [r7, #12]
      break;
3418772e:	e028      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34187730:	4834      	ldr	r0, [pc, #208]	@ (34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34187732:	f003 f963 	bl	3418a9fc <RCCEx_GetUSARTCLKFreq>
34187736:	60f8      	str	r0, [r7, #12]
      break;
34187738:	e023      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
3418773a:	4833      	ldr	r0, [pc, #204]	@ (34187808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
3418773c:	f003 fc3e 	bl	3418afbc <RCCEx_GetOTGPHYCKREFCLKFreq>
34187740:	60f8      	str	r0, [r7, #12]
      break;
34187742:	e01e      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34187744:	4831      	ldr	r0, [pc, #196]	@ (3418780c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34187746:	f003 fb83 	bl	3418ae50 <RCCEx_GetOTGPHYCLKFreq>
3418774a:	60f8      	str	r0, [r7, #12]
      break;
3418774c:	e019      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3418774e:	4830      	ldr	r0, [pc, #192]	@ (34187810 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34187750:	f003 fc34 	bl	3418afbc <RCCEx_GetOTGPHYCKREFCLKFreq>
34187754:	60f8      	str	r0, [r7, #12]
      break;
34187756:	e014      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34187758:	482e      	ldr	r0, [pc, #184]	@ (34187814 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3418775a:	f003 fb79 	bl	3418ae50 <RCCEx_GetOTGPHYCLKFreq>
3418775e:	60f8      	str	r0, [r7, #12]
      break;
34187760:	e00f      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34187762:	482d      	ldr	r0, [pc, #180]	@ (34187818 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34187764:	f003 fc7a 	bl	3418b05c <RCCEx_GetXSPICLKFreq>
34187768:	60f8      	str	r0, [r7, #12]
      break;
3418776a:	e00a      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3418776c:	482b      	ldr	r0, [pc, #172]	@ (3418781c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
3418776e:	f003 fc75 	bl	3418b05c <RCCEx_GetXSPICLKFreq>
34187772:	60f8      	str	r0, [r7, #12]
      break;
34187774:	e005      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34187776:	482a      	ldr	r0, [pc, #168]	@ (34187820 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34187778:	f003 fc70 	bl	3418b05c <RCCEx_GetXSPICLKFreq>
3418777c:	60f8      	str	r0, [r7, #12]
      break;
3418777e:	e000      	b.n	34187782 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34187780:	bf00      	nop
  }

  return frequency;
34187782:	68fb      	ldr	r3, [r7, #12]
}
34187784:	4618      	mov	r0, r3
34187786:	3714      	adds	r7, #20
34187788:	46bd      	mov	sp, r7
3418778a:	bd90      	pop	{r4, r7, pc}
3418778c:	0700000c 	.word	0x0700000c
34187790:	0700040c 	.word	0x0700040c
34187794:	0700080c 	.word	0x0700080c
34187798:	07000c0c 	.word	0x07000c0c
3418779c:	0700100c 	.word	0x0700100c
341877a0:	0700140c 	.word	0x0700140c
341877a4:	0700082c 	.word	0x0700082c
341877a8:	07000c2c 	.word	0x07000c2c
341877ac:	0700102c 	.word	0x0700102c
341877b0:	0700142c 	.word	0x0700142c
341877b4:	0700182c 	.word	0x0700182c
341877b8:	07001418 	.word	0x07001418
341877bc:	07001818 	.word	0x07001818
341877c0:	0300001c 	.word	0x0300001c
341877c4:	0300041c 	.word	0x0300041c
341877c8:	07000420 	.word	0x07000420
341877cc:	07000820 	.word	0x07000820
341877d0:	07000c20 	.word	0x07000c20
341877d4:	07001020 	.word	0x07001020
341877d8:	07001420 	.word	0x07001420
341877dc:	07001820 	.word	0x07001820
341877e0:	07000030 	.word	0x07000030
341877e4:	07000430 	.word	0x07000430
341877e8:	07000830 	.word	0x07000830
341877ec:	07000c30 	.word	0x07000c30
341877f0:	07001030 	.word	0x07001030
341877f4:	07001430 	.word	0x07001430
341877f8:	07001830 	.word	0x07001830
341877fc:	07001c30 	.word	0x07001c30
34187800:	07000034 	.word	0x07000034
34187804:	07000434 	.word	0x07000434
34187808:	01001014 	.word	0x01001014
3418780c:	03000c14 	.word	0x03000c14
34187810:	01001814 	.word	0x01001814
34187814:	03001414 	.word	0x03001414
34187818:	03000014 	.word	0x03000014
3418781c:	03000414 	.word	0x03000414
34187820:	03000814 	.word	0x03000814

34187824 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34187824:	b5f0      	push	{r4, r5, r6, r7, lr}
34187826:	b087      	sub	sp, #28
34187828:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418782a:	2300      	movs	r3, #0
3418782c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
3418782e:	f7fc fa05 	bl	34183c3c <LL_RCC_PLL1_IsReady>
34187832:	4603      	mov	r3, r0
34187834:	2b00      	cmp	r3, #0
34187836:	d02a      	beq.n	3418788e <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34187838:	f7fc fa68 	bl	34183d0c <LL_RCC_PLL1P_IsEnabled>
3418783c:	4603      	mov	r3, r0
3418783e:	2b00      	cmp	r3, #0
34187840:	d031      	beq.n	341878a6 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187842:	f7fc f9ed 	bl	34183c20 <LL_RCC_PLL1_GetSource>
34187846:	4603      	mov	r3, r0
34187848:	4618      	mov	r0, r3
3418784a:	f000 f957 	bl	34187afc <RCCEx_GetPLLSourceFreq>
3418784e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187850:	68bb      	ldr	r3, [r7, #8]
34187852:	2b00      	cmp	r3, #0
34187854:	d027      	beq.n	341878a6 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL1_GetM();
34187856:	f7fc fa29 	bl	34183cac <LL_RCC_PLL1_GetM>
3418785a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418785c:	687b      	ldr	r3, [r7, #4]
3418785e:	2b00      	cmp	r3, #0
34187860:	d021      	beq.n	341878a6 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34187862:	f7fc fa13 	bl	34183c8c <LL_RCC_PLL1_GetN>
34187866:	4605      	mov	r5, r0
34187868:	f7fc fa64 	bl	34183d34 <LL_RCC_PLL1_GetFRACN>
3418786c:	4606      	mov	r6, r0
3418786e:	f7fc fa2d 	bl	34183ccc <LL_RCC_PLL1_GetP1>
34187872:	4604      	mov	r4, r0
34187874:	f7fc fa3a 	bl	34183cec <LL_RCC_PLL1_GetP2>
34187878:	4603      	mov	r3, r0
3418787a:	9301      	str	r3, [sp, #4]
3418787c:	9400      	str	r4, [sp, #0]
3418787e:	4633      	mov	r3, r6
34187880:	462a      	mov	r2, r5
34187882:	6879      	ldr	r1, [r7, #4]
34187884:	68b8      	ldr	r0, [r7, #8]
34187886:	f000 f997 	bl	34187bb8 <RCCEx_CalcPLLFreq>
3418788a:	60f8      	str	r0, [r7, #12]
3418788c:	e00b      	b.n	341878a6 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418788e:	f7fc f9e9 	bl	34183c64 <LL_RCC_PLL1_IsEnabledBypass>
34187892:	4603      	mov	r3, r0
34187894:	2b00      	cmp	r3, #0
34187896:	d006      	beq.n	341878a6 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187898:	f7fc f9c2 	bl	34183c20 <LL_RCC_PLL1_GetSource>
3418789c:	4603      	mov	r3, r0
3418789e:	4618      	mov	r0, r3
341878a0:	f000 f92c 	bl	34187afc <RCCEx_GetPLLSourceFreq>
341878a4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341878a6:	68fb      	ldr	r3, [r7, #12]
}
341878a8:	4618      	mov	r0, r3
341878aa:	3714      	adds	r7, #20
341878ac:	46bd      	mov	sp, r7
341878ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

341878b0 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
341878b0:	b5f0      	push	{r4, r5, r6, r7, lr}
341878b2:	b087      	sub	sp, #28
341878b4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341878b6:	2300      	movs	r3, #0
341878b8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
341878ba:	f7fc fa57 	bl	34183d6c <LL_RCC_PLL2_IsReady>
341878be:	4603      	mov	r3, r0
341878c0:	2b00      	cmp	r3, #0
341878c2:	d02a      	beq.n	3418791a <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
341878c4:	f7fc faba 	bl	34183e3c <LL_RCC_PLL2P_IsEnabled>
341878c8:	4603      	mov	r3, r0
341878ca:	2b00      	cmp	r3, #0
341878cc:	d031      	beq.n	34187932 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341878ce:	f7fc fa3f 	bl	34183d50 <LL_RCC_PLL2_GetSource>
341878d2:	4603      	mov	r3, r0
341878d4:	4618      	mov	r0, r3
341878d6:	f000 f911 	bl	34187afc <RCCEx_GetPLLSourceFreq>
341878da:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341878dc:	68bb      	ldr	r3, [r7, #8]
341878de:	2b00      	cmp	r3, #0
341878e0:	d027      	beq.n	34187932 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL2_GetM();
341878e2:	f7fc fa7b 	bl	34183ddc <LL_RCC_PLL2_GetM>
341878e6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
341878e8:	687b      	ldr	r3, [r7, #4]
341878ea:	2b00      	cmp	r3, #0
341878ec:	d021      	beq.n	34187932 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
341878ee:	f7fc fa65 	bl	34183dbc <LL_RCC_PLL2_GetN>
341878f2:	4605      	mov	r5, r0
341878f4:	f7fc fab6 	bl	34183e64 <LL_RCC_PLL2_GetFRACN>
341878f8:	4606      	mov	r6, r0
341878fa:	f7fc fa7f 	bl	34183dfc <LL_RCC_PLL2_GetP1>
341878fe:	4604      	mov	r4, r0
34187900:	f7fc fa8c 	bl	34183e1c <LL_RCC_PLL2_GetP2>
34187904:	4603      	mov	r3, r0
34187906:	9301      	str	r3, [sp, #4]
34187908:	9400      	str	r4, [sp, #0]
3418790a:	4633      	mov	r3, r6
3418790c:	462a      	mov	r2, r5
3418790e:	6879      	ldr	r1, [r7, #4]
34187910:	68b8      	ldr	r0, [r7, #8]
34187912:	f000 f951 	bl	34187bb8 <RCCEx_CalcPLLFreq>
34187916:	60f8      	str	r0, [r7, #12]
34187918:	e00b      	b.n	34187932 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418791a:	f7fc fa3b 	bl	34183d94 <LL_RCC_PLL2_IsEnabledBypass>
3418791e:	4603      	mov	r3, r0
34187920:	2b00      	cmp	r3, #0
34187922:	d006      	beq.n	34187932 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34187924:	f7fc fa14 	bl	34183d50 <LL_RCC_PLL2_GetSource>
34187928:	4603      	mov	r3, r0
3418792a:	4618      	mov	r0, r3
3418792c:	f000 f8e6 	bl	34187afc <RCCEx_GetPLLSourceFreq>
34187930:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187932:	68fb      	ldr	r3, [r7, #12]
}
34187934:	4618      	mov	r0, r3
34187936:	3714      	adds	r7, #20
34187938:	46bd      	mov	sp, r7
3418793a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418793c <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
3418793c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418793e:	b087      	sub	sp, #28
34187940:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187942:	2300      	movs	r3, #0
34187944:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34187946:	f7fc faa9 	bl	34183e9c <LL_RCC_PLL3_IsReady>
3418794a:	4603      	mov	r3, r0
3418794c:	2b00      	cmp	r3, #0
3418794e:	d02a      	beq.n	341879a6 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34187950:	f7fc fb0c 	bl	34183f6c <LL_RCC_PLL3P_IsEnabled>
34187954:	4603      	mov	r3, r0
34187956:	2b00      	cmp	r3, #0
34187958:	d031      	beq.n	341879be <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418795a:	f7fc fa91 	bl	34183e80 <LL_RCC_PLL3_GetSource>
3418795e:	4603      	mov	r3, r0
34187960:	4618      	mov	r0, r3
34187962:	f000 f8cb 	bl	34187afc <RCCEx_GetPLLSourceFreq>
34187966:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187968:	68bb      	ldr	r3, [r7, #8]
3418796a:	2b00      	cmp	r3, #0
3418796c:	d027      	beq.n	341879be <HAL_RCCEx_GetPLL3CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL3_GetM();
3418796e:	f7fc facd 	bl	34183f0c <LL_RCC_PLL3_GetM>
34187972:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187974:	687b      	ldr	r3, [r7, #4]
34187976:	2b00      	cmp	r3, #0
34187978:	d021      	beq.n	341879be <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418797a:	f7fc fab7 	bl	34183eec <LL_RCC_PLL3_GetN>
3418797e:	4605      	mov	r5, r0
34187980:	f7fc fb08 	bl	34183f94 <LL_RCC_PLL3_GetFRACN>
34187984:	4606      	mov	r6, r0
34187986:	f7fc fad1 	bl	34183f2c <LL_RCC_PLL3_GetP1>
3418798a:	4604      	mov	r4, r0
3418798c:	f7fc fade 	bl	34183f4c <LL_RCC_PLL3_GetP2>
34187990:	4603      	mov	r3, r0
34187992:	9301      	str	r3, [sp, #4]
34187994:	9400      	str	r4, [sp, #0]
34187996:	4633      	mov	r3, r6
34187998:	462a      	mov	r2, r5
3418799a:	6879      	ldr	r1, [r7, #4]
3418799c:	68b8      	ldr	r0, [r7, #8]
3418799e:	f000 f90b 	bl	34187bb8 <RCCEx_CalcPLLFreq>
341879a2:	60f8      	str	r0, [r7, #12]
341879a4:	e00b      	b.n	341879be <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
341879a6:	f7fc fa8d 	bl	34183ec4 <LL_RCC_PLL3_IsEnabledBypass>
341879aa:	4603      	mov	r3, r0
341879ac:	2b00      	cmp	r3, #0
341879ae:	d006      	beq.n	341879be <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
341879b0:	f7fc fa66 	bl	34183e80 <LL_RCC_PLL3_GetSource>
341879b4:	4603      	mov	r3, r0
341879b6:	4618      	mov	r0, r3
341879b8:	f000 f8a0 	bl	34187afc <RCCEx_GetPLLSourceFreq>
341879bc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341879be:	68fb      	ldr	r3, [r7, #12]
}
341879c0:	4618      	mov	r0, r3
341879c2:	3714      	adds	r7, #20
341879c4:	46bd      	mov	sp, r7
341879c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

341879c8 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
341879c8:	b5f0      	push	{r4, r5, r6, r7, lr}
341879ca:	b087      	sub	sp, #28
341879cc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341879ce:	2300      	movs	r3, #0
341879d0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
341879d2:	f7fc fafb 	bl	34183fcc <LL_RCC_PLL4_IsReady>
341879d6:	4603      	mov	r3, r0
341879d8:	2b00      	cmp	r3, #0
341879da:	d02a      	beq.n	34187a32 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
341879dc:	f7fc fb5e 	bl	3418409c <LL_RCC_PLL4P_IsEnabled>
341879e0:	4603      	mov	r3, r0
341879e2:	2b00      	cmp	r3, #0
341879e4:	d031      	beq.n	34187a4a <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341879e6:	f7fc fae3 	bl	34183fb0 <LL_RCC_PLL4_GetSource>
341879ea:	4603      	mov	r3, r0
341879ec:	4618      	mov	r0, r3
341879ee:	f000 f885 	bl	34187afc <RCCEx_GetPLLSourceFreq>
341879f2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341879f4:	68bb      	ldr	r3, [r7, #8]
341879f6:	2b00      	cmp	r3, #0
341879f8:	d027      	beq.n	34187a4a <HAL_RCCEx_GetPLL4CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL4_GetM();
341879fa:	f7fc fb1f 	bl	3418403c <LL_RCC_PLL4_GetM>
341879fe:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187a00:	687b      	ldr	r3, [r7, #4]
34187a02:	2b00      	cmp	r3, #0
34187a04:	d021      	beq.n	34187a4a <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34187a06:	f7fc fb09 	bl	3418401c <LL_RCC_PLL4_GetN>
34187a0a:	4605      	mov	r5, r0
34187a0c:	f7fc fb5a 	bl	341840c4 <LL_RCC_PLL4_GetFRACN>
34187a10:	4606      	mov	r6, r0
34187a12:	f7fc fb23 	bl	3418405c <LL_RCC_PLL4_GetP1>
34187a16:	4604      	mov	r4, r0
34187a18:	f7fc fb30 	bl	3418407c <LL_RCC_PLL4_GetP2>
34187a1c:	4603      	mov	r3, r0
34187a1e:	9301      	str	r3, [sp, #4]
34187a20:	9400      	str	r4, [sp, #0]
34187a22:	4633      	mov	r3, r6
34187a24:	462a      	mov	r2, r5
34187a26:	6879      	ldr	r1, [r7, #4]
34187a28:	68b8      	ldr	r0, [r7, #8]
34187a2a:	f000 f8c5 	bl	34187bb8 <RCCEx_CalcPLLFreq>
34187a2e:	60f8      	str	r0, [r7, #12]
34187a30:	e00b      	b.n	34187a4a <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34187a32:	f7fc fadf 	bl	34183ff4 <LL_RCC_PLL4_IsEnabledBypass>
34187a36:	4603      	mov	r3, r0
34187a38:	2b00      	cmp	r3, #0
34187a3a:	d006      	beq.n	34187a4a <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34187a3c:	f7fc fab8 	bl	34183fb0 <LL_RCC_PLL4_GetSource>
34187a40:	4603      	mov	r3, r0
34187a42:	4618      	mov	r0, r3
34187a44:	f000 f85a 	bl	34187afc <RCCEx_GetPLLSourceFreq>
34187a48:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187a4a:	68fb      	ldr	r3, [r7, #12]
}
34187a4c:	4618      	mov	r0, r3
34187a4e:	3714      	adds	r7, #20
34187a50:	46bd      	mov	sp, r7
34187a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187a54 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34187a54:	b580      	push	{r7, lr}
34187a56:	b082      	sub	sp, #8
34187a58:	af00      	add	r7, sp, #0
34187a5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34187a5c:	f7fb fcca 	bl	341833f4 <LL_RCC_GetAHBPrescaler>
34187a60:	4603      	mov	r3, r0
34187a62:	0d1b      	lsrs	r3, r3, #20
34187a64:	f003 0307 	and.w	r3, r3, #7
34187a68:	687a      	ldr	r2, [r7, #4]
34187a6a:	fa22 f303 	lsr.w	r3, r2, r3
}
34187a6e:	4618      	mov	r0, r3
34187a70:	3708      	adds	r7, #8
34187a72:	46bd      	mov	sp, r7
34187a74:	bd80      	pop	{r7, pc}

34187a76 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34187a76:	b580      	push	{r7, lr}
34187a78:	b082      	sub	sp, #8
34187a7a:	af00      	add	r7, sp, #0
34187a7c:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34187a7e:	f7fb fcc7 	bl	34183410 <LL_RCC_GetAPB1Prescaler>
34187a82:	4603      	mov	r3, r0
34187a84:	f003 0307 	and.w	r3, r3, #7
34187a88:	687a      	ldr	r2, [r7, #4]
34187a8a:	fa22 f303 	lsr.w	r3, r2, r3
}
34187a8e:	4618      	mov	r0, r3
34187a90:	3708      	adds	r7, #8
34187a92:	46bd      	mov	sp, r7
34187a94:	bd80      	pop	{r7, pc}

34187a96 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34187a96:	b580      	push	{r7, lr}
34187a98:	b082      	sub	sp, #8
34187a9a:	af00      	add	r7, sp, #0
34187a9c:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34187a9e:	f7fb fcc5 	bl	3418342c <LL_RCC_GetAPB2Prescaler>
34187aa2:	4603      	mov	r3, r0
34187aa4:	091b      	lsrs	r3, r3, #4
34187aa6:	f003 0307 	and.w	r3, r3, #7
34187aaa:	687a      	ldr	r2, [r7, #4]
34187aac:	fa22 f303 	lsr.w	r3, r2, r3
}
34187ab0:	4618      	mov	r0, r3
34187ab2:	3708      	adds	r7, #8
34187ab4:	46bd      	mov	sp, r7
34187ab6:	bd80      	pop	{r7, pc}

34187ab8 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34187ab8:	b580      	push	{r7, lr}
34187aba:	b082      	sub	sp, #8
34187abc:	af00      	add	r7, sp, #0
34187abe:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34187ac0:	f7fb fcc2 	bl	34183448 <LL_RCC_GetAPB4Prescaler>
34187ac4:	4603      	mov	r3, r0
34187ac6:	0b1b      	lsrs	r3, r3, #12
34187ac8:	f003 0307 	and.w	r3, r3, #7
34187acc:	687a      	ldr	r2, [r7, #4]
34187ace:	fa22 f303 	lsr.w	r3, r2, r3
}
34187ad2:	4618      	mov	r0, r3
34187ad4:	3708      	adds	r7, #8
34187ad6:	46bd      	mov	sp, r7
34187ad8:	bd80      	pop	{r7, pc}

34187ada <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34187ada:	b580      	push	{r7, lr}
34187adc:	b082      	sub	sp, #8
34187ade:	af00      	add	r7, sp, #0
34187ae0:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34187ae2:	f7fb fcbf 	bl	34183464 <LL_RCC_GetAPB5Prescaler>
34187ae6:	4603      	mov	r3, r0
34187ae8:	0c1b      	lsrs	r3, r3, #16
34187aea:	f003 0307 	and.w	r3, r3, #7
34187aee:	687a      	ldr	r2, [r7, #4]
34187af0:	fa22 f303 	lsr.w	r3, r2, r3
}
34187af4:	4618      	mov	r0, r3
34187af6:	3708      	adds	r7, #8
34187af8:	46bd      	mov	sp, r7
34187afa:	bd80      	pop	{r7, pc}

34187afc <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34187afc:	b580      	push	{r7, lr}
34187afe:	b084      	sub	sp, #16
34187b00:	af00      	add	r7, sp, #0
34187b02:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34187b04:	2300      	movs	r3, #0
34187b06:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34187b08:	687b      	ldr	r3, [r7, #4]
34187b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187b0e:	d039      	beq.n	34187b84 <RCCEx_GetPLLSourceFreq+0x88>
34187b10:	687b      	ldr	r3, [r7, #4]
34187b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187b16:	d838      	bhi.n	34187b8a <RCCEx_GetPLLSourceFreq+0x8e>
34187b18:	687b      	ldr	r3, [r7, #4]
34187b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187b1e:	d029      	beq.n	34187b74 <RCCEx_GetPLLSourceFreq+0x78>
34187b20:	687b      	ldr	r3, [r7, #4]
34187b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187b26:	d830      	bhi.n	34187b8a <RCCEx_GetPLLSourceFreq+0x8e>
34187b28:	687b      	ldr	r3, [r7, #4]
34187b2a:	2b00      	cmp	r3, #0
34187b2c:	d004      	beq.n	34187b38 <RCCEx_GetPLLSourceFreq+0x3c>
34187b2e:	687b      	ldr	r3, [r7, #4]
34187b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187b34:	d00e      	beq.n	34187b54 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34187b36:	e028      	b.n	34187b8a <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34187b38:	f7fb fbfc 	bl	34183334 <LL_RCC_HSI_IsReady>
34187b3c:	4603      	mov	r3, r0
34187b3e:	2b00      	cmp	r3, #0
34187b40:	d025      	beq.n	34187b8e <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34187b42:	f7fb fc09 	bl	34183358 <LL_RCC_HSI_GetDivider>
34187b46:	4603      	mov	r3, r0
34187b48:	09db      	lsrs	r3, r3, #7
34187b4a:	4a16      	ldr	r2, [pc, #88]	@ (34187ba4 <RCCEx_GetPLLSourceFreq+0xa8>)
34187b4c:	fa22 f303 	lsr.w	r3, r2, r3
34187b50:	60fb      	str	r3, [r7, #12]
      break;
34187b52:	e01c      	b.n	34187b8e <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34187b54:	f7fb fc0e 	bl	34183374 <LL_RCC_MSI_IsReady>
34187b58:	4603      	mov	r3, r0
34187b5a:	2b00      	cmp	r3, #0
34187b5c:	d019      	beq.n	34187b92 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34187b5e:	f7fb fc1b 	bl	34183398 <LL_RCC_MSI_GetFrequency>
34187b62:	4603      	mov	r3, r0
34187b64:	2b00      	cmp	r3, #0
34187b66:	d102      	bne.n	34187b6e <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34187b68:	4b0f      	ldr	r3, [pc, #60]	@ (34187ba8 <RCCEx_GetPLLSourceFreq+0xac>)
34187b6a:	60fb      	str	r3, [r7, #12]
      break;
34187b6c:	e011      	b.n	34187b92 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34187b6e:	4b0f      	ldr	r3, [pc, #60]	@ (34187bac <RCCEx_GetPLLSourceFreq+0xb0>)
34187b70:	60fb      	str	r3, [r7, #12]
      break;
34187b72:	e00e      	b.n	34187b92 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34187b74:	f7fb fbcc 	bl	34183310 <LL_RCC_HSE_IsReady>
34187b78:	4603      	mov	r3, r0
34187b7a:	2b00      	cmp	r3, #0
34187b7c:	d00b      	beq.n	34187b96 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34187b7e:	4b0c      	ldr	r3, [pc, #48]	@ (34187bb0 <RCCEx_GetPLLSourceFreq+0xb4>)
34187b80:	60fb      	str	r3, [r7, #12]
      break;
34187b82:	e008      	b.n	34187b96 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34187b84:	4b0b      	ldr	r3, [pc, #44]	@ (34187bb4 <RCCEx_GetPLLSourceFreq+0xb8>)
34187b86:	60fb      	str	r3, [r7, #12]
      break;
34187b88:	e006      	b.n	34187b98 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34187b8a:	bf00      	nop
34187b8c:	e004      	b.n	34187b98 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34187b8e:	bf00      	nop
34187b90:	e002      	b.n	34187b98 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34187b92:	bf00      	nop
34187b94:	e000      	b.n	34187b98 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34187b96:	bf00      	nop
  }

  return pllinputfreq;
34187b98:	68fb      	ldr	r3, [r7, #12]
}
34187b9a:	4618      	mov	r0, r3
34187b9c:	3710      	adds	r7, #16
34187b9e:	46bd      	mov	sp, r7
34187ba0:	bd80      	pop	{r7, pc}
34187ba2:	bf00      	nop
34187ba4:	03d09000 	.word	0x03d09000
34187ba8:	003d0900 	.word	0x003d0900
34187bac:	00f42400 	.word	0x00f42400
34187bb0:	02dc6c00 	.word	0x02dc6c00
34187bb4:	00bb8000 	.word	0x00bb8000

34187bb8 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34187bb8:	b480      	push	{r7}
34187bba:	b087      	sub	sp, #28
34187bbc:	af00      	add	r7, sp, #0
34187bbe:	60f8      	str	r0, [r7, #12]
34187bc0:	60b9      	str	r1, [r7, #8]
34187bc2:	607a      	str	r2, [r7, #4]
34187bc4:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34187bc6:	68fb      	ldr	r3, [r7, #12]
34187bc8:	ee07 3a90 	vmov	s15, r3
34187bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34187bd0:	687b      	ldr	r3, [r7, #4]
34187bd2:	ee07 3a90 	vmov	s15, r3
34187bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
34187bda:	683b      	ldr	r3, [r7, #0]
34187bdc:	ee07 3a90 	vmov	s15, r3
34187be0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34187be4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34187c4c <RCCEx_CalcPLLFreq+0x94>
34187be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
34187bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
34187bf0:	ee67 6a27 	vmul.f32	s13, s14, s15
34187bf4:	68bb      	ldr	r3, [r7, #8]
34187bf6:	ee07 3a90 	vmov	s15, r3
34187bfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34187bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
34187c02:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34187c06:	6a3b      	ldr	r3, [r7, #32]
34187c08:	ee07 3a90 	vmov	s15, r3
34187c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34187c10:	edd7 6a05 	vldr	s13, [r7, #20]
34187c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
34187c18:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34187c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34187c1e:	ee07 3a90 	vmov	s15, r3
34187c22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34187c26:	edd7 6a05 	vldr	s13, [r7, #20]
34187c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
34187c2e:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
34187c32:	edd7 7a05 	vldr	s15, [r7, #20]
34187c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34187c3a:	ee17 3a90 	vmov	r3, s15
}
34187c3e:	4618      	mov	r0, r3
34187c40:	371c      	adds	r7, #28
34187c42:	46bd      	mov	sp, r7
34187c44:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c48:	4770      	bx	lr
34187c4a:	bf00      	nop
34187c4c:	4b800000 	.word	0x4b800000

34187c50 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34187c50:	b590      	push	{r4, r7, lr}
34187c52:	b085      	sub	sp, #20
34187c54:	af00      	add	r7, sp, #0
34187c56:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34187c58:	2300      	movs	r3, #0
34187c5a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34187c5c:	6878      	ldr	r0, [r7, #4]
34187c5e:	f7fb fe1f 	bl	341838a0 <LL_RCC_GetADCClockSource>
34187c62:	4603      	mov	r3, r0
34187c64:	2b70      	cmp	r3, #112	@ 0x70
34187c66:	f000 80d1 	beq.w	34187e0c <RCCEx_GetADCCLKFreq+0x1bc>
34187c6a:	2b70      	cmp	r3, #112	@ 0x70
34187c6c:	f200 80d8 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187c70:	2b60      	cmp	r3, #96	@ 0x60
34187c72:	f000 80c8 	beq.w	34187e06 <RCCEx_GetADCCLKFreq+0x1b6>
34187c76:	2b60      	cmp	r3, #96	@ 0x60
34187c78:	f200 80d2 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187c7c:	2b50      	cmp	r3, #80	@ 0x50
34187c7e:	f000 80ac 	beq.w	34187dda <RCCEx_GetADCCLKFreq+0x18a>
34187c82:	2b50      	cmp	r3, #80	@ 0x50
34187c84:	f200 80cc 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187c88:	2b40      	cmp	r3, #64	@ 0x40
34187c8a:	f000 80b4 	beq.w	34187df6 <RCCEx_GetADCCLKFreq+0x1a6>
34187c8e:	2b40      	cmp	r3, #64	@ 0x40
34187c90:	f200 80c6 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187c94:	2b30      	cmp	r3, #48	@ 0x30
34187c96:	d05d      	beq.n	34187d54 <RCCEx_GetADCCLKFreq+0x104>
34187c98:	2b30      	cmp	r3, #48	@ 0x30
34187c9a:	f200 80c1 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187c9e:	2b20      	cmp	r3, #32
34187ca0:	d014      	beq.n	34187ccc <RCCEx_GetADCCLKFreq+0x7c>
34187ca2:	2b20      	cmp	r3, #32
34187ca4:	f200 80bc 	bhi.w	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
34187ca8:	2b00      	cmp	r3, #0
34187caa:	d002      	beq.n	34187cb2 <RCCEx_GetADCCLKFreq+0x62>
34187cac:	2b10      	cmp	r3, #16
34187cae:	d008      	beq.n	34187cc2 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34187cb0:	e0b6      	b.n	34187e20 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34187cb2:	f7fa ff3f 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34187cb6:	4603      	mov	r3, r0
34187cb8:	4618      	mov	r0, r3
34187cba:	f7ff fecb 	bl	34187a54 <RCCEx_GetHCLKFreq>
34187cbe:	60f8      	str	r0, [r7, #12]
      break;
34187cc0:	e0b7      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187cc2:	2007      	movs	r0, #7
34187cc4:	f000 f9b2 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34187cc8:	60f8      	str	r0, [r7, #12]
      break;
34187cca:	e0b2      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34187ccc:	f7fc fad6 	bl	3418427c <LL_RCC_IC7_IsEnabled>
34187cd0:	4603      	mov	r3, r0
34187cd2:	2b00      	cmp	r3, #0
34187cd4:	f000 80a6 	beq.w	34187e24 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34187cd8:	f7fc faf2 	bl	341842c0 <LL_RCC_IC7_GetDivider>
34187cdc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34187cde:	f7fc fae1 	bl	341842a4 <LL_RCC_IC7_GetSource>
34187ce2:	4603      	mov	r3, r0
34187ce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187ce8:	d029      	beq.n	34187d3e <RCCEx_GetADCCLKFreq+0xee>
34187cea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187cee:	d82f      	bhi.n	34187d50 <RCCEx_GetADCCLKFreq+0x100>
34187cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187cf4:	d01a      	beq.n	34187d2c <RCCEx_GetADCCLKFreq+0xdc>
34187cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187cfa:	d829      	bhi.n	34187d50 <RCCEx_GetADCCLKFreq+0x100>
34187cfc:	2b00      	cmp	r3, #0
34187cfe:	d003      	beq.n	34187d08 <RCCEx_GetADCCLKFreq+0xb8>
34187d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187d04:	d009      	beq.n	34187d1a <RCCEx_GetADCCLKFreq+0xca>
            break;
34187d06:	e023      	b.n	34187d50 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187d08:	f7ff fd8c 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34187d0c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187d0e:	68fa      	ldr	r2, [r7, #12]
34187d10:	68bb      	ldr	r3, [r7, #8]
34187d12:	fbb2 f3f3 	udiv	r3, r2, r3
34187d16:	60fb      	str	r3, [r7, #12]
            break;
34187d18:	e01b      	b.n	34187d52 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187d1a:	f7ff fdc9 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34187d1e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187d20:	68fa      	ldr	r2, [r7, #12]
34187d22:	68bb      	ldr	r3, [r7, #8]
34187d24:	fbb2 f3f3 	udiv	r3, r2, r3
34187d28:	60fb      	str	r3, [r7, #12]
            break;
34187d2a:	e012      	b.n	34187d52 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187d2c:	f7ff fe06 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34187d30:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187d32:	68fa      	ldr	r2, [r7, #12]
34187d34:	68bb      	ldr	r3, [r7, #8]
34187d36:	fbb2 f3f3 	udiv	r3, r2, r3
34187d3a:	60fb      	str	r3, [r7, #12]
            break;
34187d3c:	e009      	b.n	34187d52 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187d3e:	f7ff fe43 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34187d42:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187d44:	68fa      	ldr	r2, [r7, #12]
34187d46:	68bb      	ldr	r3, [r7, #8]
34187d48:	fbb2 f3f3 	udiv	r3, r2, r3
34187d4c:	60fb      	str	r3, [r7, #12]
            break;
34187d4e:	e000      	b.n	34187d52 <RCCEx_GetADCCLKFreq+0x102>
            break;
34187d50:	bf00      	nop
      break;
34187d52:	e067      	b.n	34187e24 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34187d54:	f7fc fad2 	bl	341842fc <LL_RCC_IC8_IsEnabled>
34187d58:	4603      	mov	r3, r0
34187d5a:	2b00      	cmp	r3, #0
34187d5c:	d064      	beq.n	34187e28 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34187d5e:	f7fc faef 	bl	34184340 <LL_RCC_IC8_GetDivider>
34187d62:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34187d64:	f7fc fade 	bl	34184324 <LL_RCC_IC8_GetSource>
34187d68:	4603      	mov	r3, r0
34187d6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187d6e:	d029      	beq.n	34187dc4 <RCCEx_GetADCCLKFreq+0x174>
34187d70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187d74:	d82f      	bhi.n	34187dd6 <RCCEx_GetADCCLKFreq+0x186>
34187d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187d7a:	d01a      	beq.n	34187db2 <RCCEx_GetADCCLKFreq+0x162>
34187d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187d80:	d829      	bhi.n	34187dd6 <RCCEx_GetADCCLKFreq+0x186>
34187d82:	2b00      	cmp	r3, #0
34187d84:	d003      	beq.n	34187d8e <RCCEx_GetADCCLKFreq+0x13e>
34187d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187d8a:	d009      	beq.n	34187da0 <RCCEx_GetADCCLKFreq+0x150>
            break;
34187d8c:	e023      	b.n	34187dd6 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187d8e:	f7ff fd49 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34187d92:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187d94:	68fa      	ldr	r2, [r7, #12]
34187d96:	68bb      	ldr	r3, [r7, #8]
34187d98:	fbb2 f3f3 	udiv	r3, r2, r3
34187d9c:	60fb      	str	r3, [r7, #12]
            break;
34187d9e:	e01b      	b.n	34187dd8 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187da0:	f7ff fd86 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34187da4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187da6:	68fa      	ldr	r2, [r7, #12]
34187da8:	68bb      	ldr	r3, [r7, #8]
34187daa:	fbb2 f3f3 	udiv	r3, r2, r3
34187dae:	60fb      	str	r3, [r7, #12]
            break;
34187db0:	e012      	b.n	34187dd8 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187db2:	f7ff fdc3 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34187db6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187db8:	68fa      	ldr	r2, [r7, #12]
34187dba:	68bb      	ldr	r3, [r7, #8]
34187dbc:	fbb2 f3f3 	udiv	r3, r2, r3
34187dc0:	60fb      	str	r3, [r7, #12]
            break;
34187dc2:	e009      	b.n	34187dd8 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187dc4:	f7ff fe00 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34187dc8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34187dca:	68fa      	ldr	r2, [r7, #12]
34187dcc:	68bb      	ldr	r3, [r7, #8]
34187dce:	fbb2 f3f3 	udiv	r3, r2, r3
34187dd2:	60fb      	str	r3, [r7, #12]
            break;
34187dd4:	e000      	b.n	34187dd8 <RCCEx_GetADCCLKFreq+0x188>
            break;
34187dd6:	bf00      	nop
      break;
34187dd8:	e026      	b.n	34187e28 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34187dda:	f7fb faab 	bl	34183334 <LL_RCC_HSI_IsReady>
34187dde:	4603      	mov	r3, r0
34187de0:	2b00      	cmp	r3, #0
34187de2:	d023      	beq.n	34187e2c <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34187de4:	f7fb fab8 	bl	34183358 <LL_RCC_HSI_GetDivider>
34187de8:	4603      	mov	r3, r0
34187dea:	09db      	lsrs	r3, r3, #7
34187dec:	4a16      	ldr	r2, [pc, #88]	@ (34187e48 <RCCEx_GetADCCLKFreq+0x1f8>)
34187dee:	fa22 f303 	lsr.w	r3, r2, r3
34187df2:	60fb      	str	r3, [r7, #12]
      break;
34187df4:	e01a      	b.n	34187e2c <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34187df6:	f7fb fabd 	bl	34183374 <LL_RCC_MSI_IsReady>
34187dfa:	4603      	mov	r3, r0
34187dfc:	2b00      	cmp	r3, #0
34187dfe:	d017      	beq.n	34187e30 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34187e00:	4b12      	ldr	r3, [pc, #72]	@ (34187e4c <RCCEx_GetADCCLKFreq+0x1fc>)
34187e02:	60fb      	str	r3, [r7, #12]
      break;
34187e04:	e014      	b.n	34187e30 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34187e06:	4b12      	ldr	r3, [pc, #72]	@ (34187e50 <RCCEx_GetADCCLKFreq+0x200>)
34187e08:	60fb      	str	r3, [r7, #12]
      break;
34187e0a:	e012      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34187e0c:	f7fa fe92 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34187e10:	4604      	mov	r4, r0
34187e12:	f7fb fef7 	bl	34183c04 <LL_RCC_GetTIMPrescaler>
34187e16:	4603      	mov	r3, r0
34187e18:	fa24 f303 	lsr.w	r3, r4, r3
34187e1c:	60fb      	str	r3, [r7, #12]
      break;
34187e1e:	e008      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34187e20:	bf00      	nop
34187e22:	e006      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34187e24:	bf00      	nop
34187e26:	e004      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34187e28:	bf00      	nop
34187e2a:	e002      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34187e2c:	bf00      	nop
34187e2e:	e000      	b.n	34187e32 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34187e30:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34187e32:	f7fb fb4f 	bl	341834d4 <LL_RCC_GetADCPrescaler>
34187e36:	4603      	mov	r3, r0
34187e38:	3301      	adds	r3, #1
34187e3a:	68fa      	ldr	r2, [r7, #12]
34187e3c:	fbb2 f3f3 	udiv	r3, r2, r3
}
34187e40:	4618      	mov	r0, r3
34187e42:	3714      	adds	r7, #20
34187e44:	46bd      	mov	sp, r7
34187e46:	bd90      	pop	{r4, r7, pc}
34187e48:	03d09000 	.word	0x03d09000
34187e4c:	003d0900 	.word	0x003d0900
34187e50:	00bb8000 	.word	0x00bb8000

34187e54 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34187e54:	b590      	push	{r4, r7, lr}
34187e56:	b085      	sub	sp, #20
34187e58:	af00      	add	r7, sp, #0
34187e5a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34187e5c:	2300      	movs	r3, #0
34187e5e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34187e60:	6878      	ldr	r0, [r7, #4]
34187e62:	f7fb fd2f 	bl	341838c4 <LL_RCC_GetADFClockSource>
34187e66:	4603      	mov	r3, r0
34187e68:	2b07      	cmp	r3, #7
34187e6a:	f200 80ca 	bhi.w	34188002 <RCCEx_GetADFCLKFreq+0x1ae>
34187e6e:	a201      	add	r2, pc, #4	@ (adr r2, 34187e74 <RCCEx_GetADFCLKFreq+0x20>)
34187e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34187e74:	34187e95 	.word	0x34187e95
34187e78:	34187ea5 	.word	0x34187ea5
34187e7c:	34187eaf 	.word	0x34187eaf
34187e80:	34187f37 	.word	0x34187f37
34187e84:	34187fd9 	.word	0x34187fd9
34187e88:	34187fbd 	.word	0x34187fbd
34187e8c:	34187fe9 	.word	0x34187fe9
34187e90:	34187fef 	.word	0x34187fef
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34187e94:	f7fa fe4e 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34187e98:	4603      	mov	r3, r0
34187e9a:	4618      	mov	r0, r3
34187e9c:	f7ff fdda 	bl	34187a54 <RCCEx_GetHCLKFreq>
34187ea0:	60f8      	str	r0, [r7, #12]
      break;
34187ea2:	e0b7      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187ea4:	2007      	movs	r0, #7
34187ea6:	f000 f8c1 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34187eaa:	60f8      	str	r0, [r7, #12]
      break;
34187eac:	e0b2      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34187eae:	f7fc f9e5 	bl	3418427c <LL_RCC_IC7_IsEnabled>
34187eb2:	4603      	mov	r3, r0
34187eb4:	2b00      	cmp	r3, #0
34187eb6:	f000 80a6 	beq.w	34188006 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34187eba:	f7fc fa01 	bl	341842c0 <LL_RCC_IC7_GetDivider>
34187ebe:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34187ec0:	f7fc f9f0 	bl	341842a4 <LL_RCC_IC7_GetSource>
34187ec4:	4603      	mov	r3, r0
34187ec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187eca:	d029      	beq.n	34187f20 <RCCEx_GetADFCLKFreq+0xcc>
34187ecc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187ed0:	d82f      	bhi.n	34187f32 <RCCEx_GetADFCLKFreq+0xde>
34187ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187ed6:	d01a      	beq.n	34187f0e <RCCEx_GetADFCLKFreq+0xba>
34187ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187edc:	d829      	bhi.n	34187f32 <RCCEx_GetADFCLKFreq+0xde>
34187ede:	2b00      	cmp	r3, #0
34187ee0:	d003      	beq.n	34187eea <RCCEx_GetADFCLKFreq+0x96>
34187ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187ee6:	d009      	beq.n	34187efc <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34187ee8:	e023      	b.n	34187f32 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187eea:	f7ff fc9b 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34187eee:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187ef0:	68fa      	ldr	r2, [r7, #12]
34187ef2:	68bb      	ldr	r3, [r7, #8]
34187ef4:	fbb2 f3f3 	udiv	r3, r2, r3
34187ef8:	60fb      	str	r3, [r7, #12]
            break;
34187efa:	e01b      	b.n	34187f34 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187efc:	f7ff fcd8 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34187f00:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f02:	68fa      	ldr	r2, [r7, #12]
34187f04:	68bb      	ldr	r3, [r7, #8]
34187f06:	fbb2 f3f3 	udiv	r3, r2, r3
34187f0a:	60fb      	str	r3, [r7, #12]
            break;
34187f0c:	e012      	b.n	34187f34 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187f0e:	f7ff fd15 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34187f12:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f14:	68fa      	ldr	r2, [r7, #12]
34187f16:	68bb      	ldr	r3, [r7, #8]
34187f18:	fbb2 f3f3 	udiv	r3, r2, r3
34187f1c:	60fb      	str	r3, [r7, #12]
            break;
34187f1e:	e009      	b.n	34187f34 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187f20:	f7ff fd52 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34187f24:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f26:	68fa      	ldr	r2, [r7, #12]
34187f28:	68bb      	ldr	r3, [r7, #8]
34187f2a:	fbb2 f3f3 	udiv	r3, r2, r3
34187f2e:	60fb      	str	r3, [r7, #12]
            break;
34187f30:	e000      	b.n	34187f34 <RCCEx_GetADFCLKFreq+0xe0>
            break;
34187f32:	bf00      	nop
        }
      }
      break;
34187f34:	e067      	b.n	34188006 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34187f36:	f7fc f9e1 	bl	341842fc <LL_RCC_IC8_IsEnabled>
34187f3a:	4603      	mov	r3, r0
34187f3c:	2b00      	cmp	r3, #0
34187f3e:	d064      	beq.n	3418800a <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34187f40:	f7fc f9fe 	bl	34184340 <LL_RCC_IC8_GetDivider>
34187f44:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34187f46:	f7fc f9ed 	bl	34184324 <LL_RCC_IC8_GetSource>
34187f4a:	4603      	mov	r3, r0
34187f4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187f50:	d029      	beq.n	34187fa6 <RCCEx_GetADFCLKFreq+0x152>
34187f52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187f56:	d82f      	bhi.n	34187fb8 <RCCEx_GetADFCLKFreq+0x164>
34187f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187f5c:	d01a      	beq.n	34187f94 <RCCEx_GetADFCLKFreq+0x140>
34187f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187f62:	d829      	bhi.n	34187fb8 <RCCEx_GetADFCLKFreq+0x164>
34187f64:	2b00      	cmp	r3, #0
34187f66:	d003      	beq.n	34187f70 <RCCEx_GetADFCLKFreq+0x11c>
34187f68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187f6c:	d009      	beq.n	34187f82 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34187f6e:	e023      	b.n	34187fb8 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187f70:	f7ff fc58 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34187f74:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f76:	68fa      	ldr	r2, [r7, #12]
34187f78:	68bb      	ldr	r3, [r7, #8]
34187f7a:	fbb2 f3f3 	udiv	r3, r2, r3
34187f7e:	60fb      	str	r3, [r7, #12]
            break;
34187f80:	e01b      	b.n	34187fba <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187f82:	f7ff fc95 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34187f86:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f88:	68fa      	ldr	r2, [r7, #12]
34187f8a:	68bb      	ldr	r3, [r7, #8]
34187f8c:	fbb2 f3f3 	udiv	r3, r2, r3
34187f90:	60fb      	str	r3, [r7, #12]
            break;
34187f92:	e012      	b.n	34187fba <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187f94:	f7ff fcd2 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34187f98:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187f9a:	68fa      	ldr	r2, [r7, #12]
34187f9c:	68bb      	ldr	r3, [r7, #8]
34187f9e:	fbb2 f3f3 	udiv	r3, r2, r3
34187fa2:	60fb      	str	r3, [r7, #12]
            break;
34187fa4:	e009      	b.n	34187fba <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187fa6:	f7ff fd0f 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34187faa:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34187fac:	68fa      	ldr	r2, [r7, #12]
34187fae:	68bb      	ldr	r3, [r7, #8]
34187fb0:	fbb2 f3f3 	udiv	r3, r2, r3
34187fb4:	60fb      	str	r3, [r7, #12]
            break;
34187fb6:	e000      	b.n	34187fba <RCCEx_GetADFCLKFreq+0x166>
            break;
34187fb8:	bf00      	nop
        }
      }
      break;
34187fba:	e026      	b.n	3418800a <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34187fbc:	f7fb f9ba 	bl	34183334 <LL_RCC_HSI_IsReady>
34187fc0:	4603      	mov	r3, r0
34187fc2:	2b00      	cmp	r3, #0
34187fc4:	d023      	beq.n	3418800e <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34187fc6:	f7fb f9c7 	bl	34183358 <LL_RCC_HSI_GetDivider>
34187fca:	4603      	mov	r3, r0
34187fcc:	09db      	lsrs	r3, r3, #7
34187fce:	4a14      	ldr	r2, [pc, #80]	@ (34188020 <RCCEx_GetADFCLKFreq+0x1cc>)
34187fd0:	fa22 f303 	lsr.w	r3, r2, r3
34187fd4:	60fb      	str	r3, [r7, #12]
      }
      break;
34187fd6:	e01a      	b.n	3418800e <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34187fd8:	f7fb f9cc 	bl	34183374 <LL_RCC_MSI_IsReady>
34187fdc:	4603      	mov	r3, r0
34187fde:	2b00      	cmp	r3, #0
34187fe0:	d017      	beq.n	34188012 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34187fe2:	4b10      	ldr	r3, [pc, #64]	@ (34188024 <RCCEx_GetADFCLKFreq+0x1d0>)
34187fe4:	60fb      	str	r3, [r7, #12]
      }
      break;
34187fe6:	e014      	b.n	34188012 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34187fe8:	4b0f      	ldr	r3, [pc, #60]	@ (34188028 <RCCEx_GetADFCLKFreq+0x1d4>)
34187fea:	60fb      	str	r3, [r7, #12]
      break;
34187fec:	e012      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34187fee:	f7fa fda1 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34187ff2:	4604      	mov	r4, r0
34187ff4:	f7fb fe06 	bl	34183c04 <LL_RCC_GetTIMPrescaler>
34187ff8:	4603      	mov	r3, r0
34187ffa:	fa24 f303 	lsr.w	r3, r4, r3
34187ffe:	60fb      	str	r3, [r7, #12]
      break;
34188000:	e008      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34188002:	bf00      	nop
34188004:	e006      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34188006:	bf00      	nop
34188008:	e004      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418800a:	bf00      	nop
3418800c:	e002      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418800e:	bf00      	nop
34188010:	e000      	b.n	34188014 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34188012:	bf00      	nop
  }

  return adf_frequency;
34188014:	68fb      	ldr	r3, [r7, #12]
}
34188016:	4618      	mov	r0, r3
34188018:	3714      	adds	r7, #20
3418801a:	46bd      	mov	sp, r7
3418801c:	bd90      	pop	{r4, r7, pc}
3418801e:	bf00      	nop
34188020:	03d09000 	.word	0x03d09000
34188024:	003d0900 	.word	0x003d0900
34188028:	00bb8000 	.word	0x00bb8000

3418802c <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
3418802c:	b580      	push	{r7, lr}
3418802e:	b084      	sub	sp, #16
34188030:	af00      	add	r7, sp, #0
34188032:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188034:	2300      	movs	r3, #0
34188036:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34188038:	f7fc fc60 	bl	341848fc <LL_RCC_CLKP_IsEnabled>
3418803c:	4603      	mov	r3, r0
3418803e:	2b01      	cmp	r3, #1
34188040:	f040 81a5 	bne.w	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34188044:	6878      	ldr	r0, [r7, #4]
34188046:	f7fb fc4f 	bl	341838e8 <LL_RCC_GetCLKPClockSource>
3418804a:	4603      	mov	r3, r0
3418804c:	2b07      	cmp	r3, #7
3418804e:	f200 818d 	bhi.w	3418836c <RCCEx_GetCLKPCLKFreq+0x340>
34188052:	a201      	add	r2, pc, #4	@ (adr r2, 34188058 <RCCEx_GetCLKPCLKFreq+0x2c>)
34188054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188058:	34188079 	.word	0x34188079
3418805c:	34188097 	.word	0x34188097
34188060:	341880a9 	.word	0x341880a9
34188064:	34188253 	.word	0x34188253
34188068:	341880bb 	.word	0x341880bb
3418806c:	34188143 	.word	0x34188143
34188070:	341881cb 	.word	0x341881cb
34188074:	341882db 	.word	0x341882db
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34188078:	f7fb f95c 	bl	34183334 <LL_RCC_HSI_IsReady>
3418807c:	4603      	mov	r3, r0
3418807e:	2b00      	cmp	r3, #0
34188080:	f000 8176 	beq.w	34188370 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188084:	f7fb f968 	bl	34183358 <LL_RCC_HSI_GetDivider>
34188088:	4603      	mov	r3, r0
3418808a:	09db      	lsrs	r3, r3, #7
3418808c:	4aa1      	ldr	r2, [pc, #644]	@ (34188314 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3418808e:	fa22 f303 	lsr.w	r3, r2, r3
34188092:	60fb      	str	r3, [r7, #12]
        }
        break;
34188094:	e16c      	b.n	34188370 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34188096:	f7fb f96d 	bl	34183374 <LL_RCC_MSI_IsReady>
3418809a:	4603      	mov	r3, r0
3418809c:	2b00      	cmp	r3, #0
3418809e:	f000 8169 	beq.w	34188374 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
341880a2:	4b9d      	ldr	r3, [pc, #628]	@ (34188318 <RCCEx_GetCLKPCLKFreq+0x2ec>)
341880a4:	60fb      	str	r3, [r7, #12]
        }
        break;
341880a6:	e165      	b.n	34188374 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
341880a8:	f7fb f932 	bl	34183310 <LL_RCC_HSE_IsReady>
341880ac:	4603      	mov	r3, r0
341880ae:	2b00      	cmp	r3, #0
341880b0:	f000 8162 	beq.w	34188378 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
341880b4:	4b99      	ldr	r3, [pc, #612]	@ (3418831c <RCCEx_GetCLKPCLKFreq+0x2f0>)
341880b6:	60fb      	str	r3, [r7, #12]
        }
        break;
341880b8:	e15e      	b.n	34188378 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
341880ba:	f7fc f89f 	bl	341841fc <LL_RCC_IC5_IsEnabled>
341880be:	4603      	mov	r3, r0
341880c0:	2b00      	cmp	r3, #0
341880c2:	f000 815b 	beq.w	3418837c <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
341880c6:	f7fc f8bb 	bl	34184240 <LL_RCC_IC5_GetDivider>
341880ca:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
341880cc:	f7fc f8aa 	bl	34184224 <LL_RCC_IC5_GetSource>
341880d0:	4603      	mov	r3, r0
341880d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341880d6:	d029      	beq.n	3418812c <RCCEx_GetCLKPCLKFreq+0x100>
341880d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341880dc:	d82f      	bhi.n	3418813e <RCCEx_GetCLKPCLKFreq+0x112>
341880de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341880e2:	d01a      	beq.n	3418811a <RCCEx_GetCLKPCLKFreq+0xee>
341880e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341880e8:	d829      	bhi.n	3418813e <RCCEx_GetCLKPCLKFreq+0x112>
341880ea:	2b00      	cmp	r3, #0
341880ec:	d003      	beq.n	341880f6 <RCCEx_GetCLKPCLKFreq+0xca>
341880ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341880f2:	d009      	beq.n	34188108 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341880f4:	e023      	b.n	3418813e <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341880f6:	f7ff fb95 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341880fa:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341880fc:	68fa      	ldr	r2, [r7, #12]
341880fe:	68bb      	ldr	r3, [r7, #8]
34188100:	fbb2 f3f3 	udiv	r3, r2, r3
34188104:	60fb      	str	r3, [r7, #12]
              break;
34188106:	e01b      	b.n	34188140 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188108:	f7ff fbd2 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418810c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418810e:	68fa      	ldr	r2, [r7, #12]
34188110:	68bb      	ldr	r3, [r7, #8]
34188112:	fbb2 f3f3 	udiv	r3, r2, r3
34188116:	60fb      	str	r3, [r7, #12]
              break;
34188118:	e012      	b.n	34188140 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418811a:	f7ff fc0f 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418811e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188120:	68fa      	ldr	r2, [r7, #12]
34188122:	68bb      	ldr	r3, [r7, #8]
34188124:	fbb2 f3f3 	udiv	r3, r2, r3
34188128:	60fb      	str	r3, [r7, #12]
              break;
3418812a:	e009      	b.n	34188140 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418812c:	f7ff fc4c 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188130:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188132:	68fa      	ldr	r2, [r7, #12]
34188134:	68bb      	ldr	r3, [r7, #8]
34188136:	fbb2 f3f3 	udiv	r3, r2, r3
3418813a:	60fb      	str	r3, [r7, #12]
              break;
3418813c:	e000      	b.n	34188140 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
3418813e:	bf00      	nop
          }
        }
        break;
34188140:	e11c      	b.n	3418837c <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
34188142:	f7fc f95b 	bl	341843fc <LL_RCC_IC10_IsEnabled>
34188146:	4603      	mov	r3, r0
34188148:	2b00      	cmp	r3, #0
3418814a:	f000 8119 	beq.w	34188380 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
3418814e:	f7fc f977 	bl	34184440 <LL_RCC_IC10_GetDivider>
34188152:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34188154:	f7fc f966 	bl	34184424 <LL_RCC_IC10_GetSource>
34188158:	4603      	mov	r3, r0
3418815a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418815e:	d029      	beq.n	341881b4 <RCCEx_GetCLKPCLKFreq+0x188>
34188160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188164:	d82f      	bhi.n	341881c6 <RCCEx_GetCLKPCLKFreq+0x19a>
34188166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418816a:	d01a      	beq.n	341881a2 <RCCEx_GetCLKPCLKFreq+0x176>
3418816c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188170:	d829      	bhi.n	341881c6 <RCCEx_GetCLKPCLKFreq+0x19a>
34188172:	2b00      	cmp	r3, #0
34188174:	d003      	beq.n	3418817e <RCCEx_GetCLKPCLKFreq+0x152>
34188176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418817a:	d009      	beq.n	34188190 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418817c:	e023      	b.n	341881c6 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418817e:	f7ff fb51 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188182:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188184:	68fa      	ldr	r2, [r7, #12]
34188186:	68bb      	ldr	r3, [r7, #8]
34188188:	fbb2 f3f3 	udiv	r3, r2, r3
3418818c:	60fb      	str	r3, [r7, #12]
              break;
3418818e:	e01b      	b.n	341881c8 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188190:	f7ff fb8e 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188194:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188196:	68fa      	ldr	r2, [r7, #12]
34188198:	68bb      	ldr	r3, [r7, #8]
3418819a:	fbb2 f3f3 	udiv	r3, r2, r3
3418819e:	60fb      	str	r3, [r7, #12]
              break;
341881a0:	e012      	b.n	341881c8 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341881a2:	f7ff fbcb 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341881a6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341881a8:	68fa      	ldr	r2, [r7, #12]
341881aa:	68bb      	ldr	r3, [r7, #8]
341881ac:	fbb2 f3f3 	udiv	r3, r2, r3
341881b0:	60fb      	str	r3, [r7, #12]
              break;
341881b2:	e009      	b.n	341881c8 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341881b4:	f7ff fc08 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341881b8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341881ba:	68fa      	ldr	r2, [r7, #12]
341881bc:	68bb      	ldr	r3, [r7, #8]
341881be:	fbb2 f3f3 	udiv	r3, r2, r3
341881c2:	60fb      	str	r3, [r7, #12]
              break;
341881c4:	e000      	b.n	341881c8 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
341881c6:	bf00      	nop
          }
        }
        break;
341881c8:	e0da      	b.n	34188380 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
341881ca:	f7fc fa17 	bl	341845fc <LL_RCC_IC15_IsEnabled>
341881ce:	4603      	mov	r3, r0
341881d0:	2b00      	cmp	r3, #0
341881d2:	f000 80d7 	beq.w	34188384 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
341881d6:	f7fc fa33 	bl	34184640 <LL_RCC_IC15_GetDivider>
341881da:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
341881dc:	f7fc fa22 	bl	34184624 <LL_RCC_IC15_GetSource>
341881e0:	4603      	mov	r3, r0
341881e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341881e6:	d029      	beq.n	3418823c <RCCEx_GetCLKPCLKFreq+0x210>
341881e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341881ec:	d82f      	bhi.n	3418824e <RCCEx_GetCLKPCLKFreq+0x222>
341881ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341881f2:	d01a      	beq.n	3418822a <RCCEx_GetCLKPCLKFreq+0x1fe>
341881f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341881f8:	d829      	bhi.n	3418824e <RCCEx_GetCLKPCLKFreq+0x222>
341881fa:	2b00      	cmp	r3, #0
341881fc:	d003      	beq.n	34188206 <RCCEx_GetCLKPCLKFreq+0x1da>
341881fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188202:	d009      	beq.n	34188218 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188204:	e023      	b.n	3418824e <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188206:	f7ff fb0d 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418820a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418820c:	68fa      	ldr	r2, [r7, #12]
3418820e:	68bb      	ldr	r3, [r7, #8]
34188210:	fbb2 f3f3 	udiv	r3, r2, r3
34188214:	60fb      	str	r3, [r7, #12]
              break;
34188216:	e01b      	b.n	34188250 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188218:	f7ff fb4a 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418821c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418821e:	68fa      	ldr	r2, [r7, #12]
34188220:	68bb      	ldr	r3, [r7, #8]
34188222:	fbb2 f3f3 	udiv	r3, r2, r3
34188226:	60fb      	str	r3, [r7, #12]
              break;
34188228:	e012      	b.n	34188250 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418822a:	f7ff fb87 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418822e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188230:	68fa      	ldr	r2, [r7, #12]
34188232:	68bb      	ldr	r3, [r7, #8]
34188234:	fbb2 f3f3 	udiv	r3, r2, r3
34188238:	60fb      	str	r3, [r7, #12]
              break;
3418823a:	e009      	b.n	34188250 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418823c:	f7ff fbc4 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188240:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188242:	68fa      	ldr	r2, [r7, #12]
34188244:	68bb      	ldr	r3, [r7, #8]
34188246:	fbb2 f3f3 	udiv	r3, r2, r3
3418824a:	60fb      	str	r3, [r7, #12]
              break;
3418824c:	e000      	b.n	34188250 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
3418824e:	bf00      	nop
          }
        }
        break;
34188250:	e098      	b.n	34188384 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
34188252:	f7fc fad3 	bl	341847fc <LL_RCC_IC19_IsEnabled>
34188256:	4603      	mov	r3, r0
34188258:	2b00      	cmp	r3, #0
3418825a:	f000 8095 	beq.w	34188388 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
3418825e:	f7fc faef 	bl	34184840 <LL_RCC_IC19_GetDivider>
34188262:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34188264:	f7fc fade 	bl	34184824 <LL_RCC_IC19_GetSource>
34188268:	4603      	mov	r3, r0
3418826a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418826e:	d029      	beq.n	341882c4 <RCCEx_GetCLKPCLKFreq+0x298>
34188270:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188274:	d82f      	bhi.n	341882d6 <RCCEx_GetCLKPCLKFreq+0x2aa>
34188276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418827a:	d01a      	beq.n	341882b2 <RCCEx_GetCLKPCLKFreq+0x286>
3418827c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188280:	d829      	bhi.n	341882d6 <RCCEx_GetCLKPCLKFreq+0x2aa>
34188282:	2b00      	cmp	r3, #0
34188284:	d003      	beq.n	3418828e <RCCEx_GetCLKPCLKFreq+0x262>
34188286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418828a:	d009      	beq.n	341882a0 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418828c:	e023      	b.n	341882d6 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418828e:	f7ff fac9 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188292:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188294:	68fa      	ldr	r2, [r7, #12]
34188296:	68bb      	ldr	r3, [r7, #8]
34188298:	fbb2 f3f3 	udiv	r3, r2, r3
3418829c:	60fb      	str	r3, [r7, #12]
              break;
3418829e:	e01b      	b.n	341882d8 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341882a0:	f7ff fb06 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341882a4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341882a6:	68fa      	ldr	r2, [r7, #12]
341882a8:	68bb      	ldr	r3, [r7, #8]
341882aa:	fbb2 f3f3 	udiv	r3, r2, r3
341882ae:	60fb      	str	r3, [r7, #12]
              break;
341882b0:	e012      	b.n	341882d8 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341882b2:	f7ff fb43 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341882b6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341882b8:	68fa      	ldr	r2, [r7, #12]
341882ba:	68bb      	ldr	r3, [r7, #8]
341882bc:	fbb2 f3f3 	udiv	r3, r2, r3
341882c0:	60fb      	str	r3, [r7, #12]
              break;
341882c2:	e009      	b.n	341882d8 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341882c4:	f7ff fb80 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341882c8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341882ca:	68fa      	ldr	r2, [r7, #12]
341882cc:	68bb      	ldr	r3, [r7, #8]
341882ce:	fbb2 f3f3 	udiv	r3, r2, r3
341882d2:	60fb      	str	r3, [r7, #12]
              break;
341882d4:	e000      	b.n	341882d8 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
341882d6:	bf00      	nop
          }
        }
        break;
341882d8:	e056      	b.n	34188388 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
341882da:	f7fc facf 	bl	3418487c <LL_RCC_IC20_IsEnabled>
341882de:	4603      	mov	r3, r0
341882e0:	2b00      	cmp	r3, #0
341882e2:	d053      	beq.n	3418838c <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
341882e4:	f7fc faec 	bl	341848c0 <LL_RCC_IC20_GetDivider>
341882e8:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
341882ea:	f7fc fadb 	bl	341848a4 <LL_RCC_IC20_GetSource>
341882ee:	4603      	mov	r3, r0
341882f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882f4:	d02f      	beq.n	34188356 <RCCEx_GetCLKPCLKFreq+0x32a>
341882f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882fa:	d835      	bhi.n	34188368 <RCCEx_GetCLKPCLKFreq+0x33c>
341882fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188300:	d020      	beq.n	34188344 <RCCEx_GetCLKPCLKFreq+0x318>
34188302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188306:	d82f      	bhi.n	34188368 <RCCEx_GetCLKPCLKFreq+0x33c>
34188308:	2b00      	cmp	r3, #0
3418830a:	d009      	beq.n	34188320 <RCCEx_GetCLKPCLKFreq+0x2f4>
3418830c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188310:	d00f      	beq.n	34188332 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188312:	e029      	b.n	34188368 <RCCEx_GetCLKPCLKFreq+0x33c>
34188314:	03d09000 	.word	0x03d09000
34188318:	003d0900 	.word	0x003d0900
3418831c:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188320:	f7ff fa80 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188324:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188326:	68fa      	ldr	r2, [r7, #12]
34188328:	68bb      	ldr	r3, [r7, #8]
3418832a:	fbb2 f3f3 	udiv	r3, r2, r3
3418832e:	60fb      	str	r3, [r7, #12]
              break;
34188330:	e01b      	b.n	3418836a <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188332:	f7ff fabd 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188336:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188338:	68fa      	ldr	r2, [r7, #12]
3418833a:	68bb      	ldr	r3, [r7, #8]
3418833c:	fbb2 f3f3 	udiv	r3, r2, r3
34188340:	60fb      	str	r3, [r7, #12]
              break;
34188342:	e012      	b.n	3418836a <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188344:	f7ff fafa 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188348:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418834a:	68fa      	ldr	r2, [r7, #12]
3418834c:	68bb      	ldr	r3, [r7, #8]
3418834e:	fbb2 f3f3 	udiv	r3, r2, r3
34188352:	60fb      	str	r3, [r7, #12]
              break;
34188354:	e009      	b.n	3418836a <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188356:	f7ff fb37 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418835a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418835c:	68fa      	ldr	r2, [r7, #12]
3418835e:	68bb      	ldr	r3, [r7, #8]
34188360:	fbb2 f3f3 	udiv	r3, r2, r3
34188364:	60fb      	str	r3, [r7, #12]
              break;
34188366:	e000      	b.n	3418836a <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34188368:	bf00      	nop
          }
        }
        break;
3418836a:	e00f      	b.n	3418838c <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
3418836c:	bf00      	nop
3418836e:	e00e      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188370:	bf00      	nop
34188372:	e00c      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188374:	bf00      	nop
34188376:	e00a      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188378:	bf00      	nop
3418837a:	e008      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418837c:	bf00      	nop
3418837e:	e006      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188380:	bf00      	nop
34188382:	e004      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188384:	bf00      	nop
34188386:	e002      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188388:	bf00      	nop
3418838a:	e000      	b.n	3418838e <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418838c:	bf00      	nop
    }
  }

  return clkp_frequency;
3418838e:	68fb      	ldr	r3, [r7, #12]
}
34188390:	4618      	mov	r0, r3
34188392:	3710      	adds	r7, #16
34188394:	46bd      	mov	sp, r7
34188396:	bd80      	pop	{r7, pc}

34188398 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34188398:	b580      	push	{r7, lr}
3418839a:	b082      	sub	sp, #8
3418839c:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418839e:	2300      	movs	r3, #0
341883a0:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
341883a2:	f7fc f9eb 	bl	3418477c <LL_RCC_IC18_IsEnabled>
341883a6:	4603      	mov	r3, r0
341883a8:	2b00      	cmp	r3, #0
341883aa:	d03c      	beq.n	34188426 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
341883ac:	f7fc fa08 	bl	341847c0 <LL_RCC_IC18_GetDivider>
341883b0:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
341883b2:	f7fc f9f7 	bl	341847a4 <LL_RCC_IC18_GetSource>
341883b6:	4603      	mov	r3, r0
341883b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341883bc:	d029      	beq.n	34188412 <RCCEx_GetCSICLKFreq+0x7a>
341883be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341883c2:	d82f      	bhi.n	34188424 <RCCEx_GetCSICLKFreq+0x8c>
341883c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341883c8:	d01a      	beq.n	34188400 <RCCEx_GetCSICLKFreq+0x68>
341883ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341883ce:	d829      	bhi.n	34188424 <RCCEx_GetCSICLKFreq+0x8c>
341883d0:	2b00      	cmp	r3, #0
341883d2:	d003      	beq.n	341883dc <RCCEx_GetCSICLKFreq+0x44>
341883d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341883d8:	d009      	beq.n	341883ee <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
341883da:	e023      	b.n	34188424 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341883dc:	f7ff fa22 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341883e0:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341883e2:	687a      	ldr	r2, [r7, #4]
341883e4:	683b      	ldr	r3, [r7, #0]
341883e6:	fbb2 f3f3 	udiv	r3, r2, r3
341883ea:	607b      	str	r3, [r7, #4]
        break;
341883ec:	e01b      	b.n	34188426 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341883ee:	f7ff fa5f 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341883f2:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341883f4:	687a      	ldr	r2, [r7, #4]
341883f6:	683b      	ldr	r3, [r7, #0]
341883f8:	fbb2 f3f3 	udiv	r3, r2, r3
341883fc:	607b      	str	r3, [r7, #4]
        break;
341883fe:	e012      	b.n	34188426 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188400:	f7ff fa9c 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188404:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34188406:	687a      	ldr	r2, [r7, #4]
34188408:	683b      	ldr	r3, [r7, #0]
3418840a:	fbb2 f3f3 	udiv	r3, r2, r3
3418840e:	607b      	str	r3, [r7, #4]
        break;
34188410:	e009      	b.n	34188426 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188412:	f7ff fad9 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188416:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34188418:	687a      	ldr	r2, [r7, #4]
3418841a:	683b      	ldr	r3, [r7, #0]
3418841c:	fbb2 f3f3 	udiv	r3, r2, r3
34188420:	607b      	str	r3, [r7, #4]
        break;
34188422:	e000      	b.n	34188426 <RCCEx_GetCSICLKFreq+0x8e>
        break;
34188424:	bf00      	nop
    }
  }

  return clkp_frequency;
34188426:	687b      	ldr	r3, [r7, #4]
}
34188428:	4618      	mov	r0, r3
3418842a:	3708      	adds	r7, #8
3418842c:	46bd      	mov	sp, r7
3418842e:	bd80      	pop	{r7, pc}

34188430 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
34188430:	b580      	push	{r7, lr}
34188432:	b084      	sub	sp, #16
34188434:	af00      	add	r7, sp, #0
34188436:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188438:	2300      	movs	r3, #0
3418843a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3418843c:	6878      	ldr	r0, [r7, #4]
3418843e:	f7fb fa65 	bl	3418390c <LL_RCC_GetDCMIPPClockSource>
34188442:	4603      	mov	r3, r0
34188444:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188448:	d062      	beq.n	34188510 <RCCEx_GetDCMIPPCLKFreq+0xe0>
3418844a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418844e:	d86d      	bhi.n	3418852c <RCCEx_GetDCMIPPCLKFreq+0xfc>
34188450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34188454:	d019      	beq.n	3418848a <RCCEx_GetDCMIPPCLKFreq+0x5a>
34188456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418845a:	d867      	bhi.n	3418852c <RCCEx_GetDCMIPPCLKFreq+0xfc>
3418845c:	2b00      	cmp	r3, #0
3418845e:	d003      	beq.n	34188468 <RCCEx_GetDCMIPPCLKFreq+0x38>
34188460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34188464:	d00c      	beq.n	34188480 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188466:	e061      	b.n	3418852c <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188468:	f7fa fb64 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418846c:	4603      	mov	r3, r0
3418846e:	4618      	mov	r0, r3
34188470:	f7ff faf0 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188474:	4603      	mov	r3, r0
34188476:	4618      	mov	r0, r3
34188478:	f7ff fb2f 	bl	34187ada <RCCEx_GetPCLK5Freq>
3418847c:	60f8      	str	r0, [r7, #12]
      break;
3418847e:	e05a      	b.n	34188536 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188480:	2007      	movs	r0, #7
34188482:	f7ff fdd3 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34188486:	60f8      	str	r0, [r7, #12]
      break;
34188488:	e055      	b.n	34188536 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3418848a:	f7fc f937 	bl	341846fc <LL_RCC_IC17_IsEnabled>
3418848e:	4603      	mov	r3, r0
34188490:	2b00      	cmp	r3, #0
34188492:	d04d      	beq.n	34188530 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34188494:	f7fc f954 	bl	34184740 <LL_RCC_IC17_GetDivider>
34188498:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
3418849a:	f7fc f943 	bl	34184724 <LL_RCC_IC17_GetSource>
3418849e:	4603      	mov	r3, r0
341884a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341884a4:	d029      	beq.n	341884fa <RCCEx_GetDCMIPPCLKFreq+0xca>
341884a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341884aa:	d82f      	bhi.n	3418850c <RCCEx_GetDCMIPPCLKFreq+0xdc>
341884ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884b0:	d01a      	beq.n	341884e8 <RCCEx_GetDCMIPPCLKFreq+0xb8>
341884b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884b6:	d829      	bhi.n	3418850c <RCCEx_GetDCMIPPCLKFreq+0xdc>
341884b8:	2b00      	cmp	r3, #0
341884ba:	d003      	beq.n	341884c4 <RCCEx_GetDCMIPPCLKFreq+0x94>
341884bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341884c0:	d009      	beq.n	341884d6 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
341884c2:	e023      	b.n	3418850c <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341884c4:	f7ff f9ae 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341884c8:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341884ca:	68fa      	ldr	r2, [r7, #12]
341884cc:	68bb      	ldr	r3, [r7, #8]
341884ce:	fbb2 f3f3 	udiv	r3, r2, r3
341884d2:	60fb      	str	r3, [r7, #12]
            break;
341884d4:	e01b      	b.n	3418850e <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341884d6:	f7ff f9eb 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341884da:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341884dc:	68fa      	ldr	r2, [r7, #12]
341884de:	68bb      	ldr	r3, [r7, #8]
341884e0:	fbb2 f3f3 	udiv	r3, r2, r3
341884e4:	60fb      	str	r3, [r7, #12]
            break;
341884e6:	e012      	b.n	3418850e <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341884e8:	f7ff fa28 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341884ec:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341884ee:	68fa      	ldr	r2, [r7, #12]
341884f0:	68bb      	ldr	r3, [r7, #8]
341884f2:	fbb2 f3f3 	udiv	r3, r2, r3
341884f6:	60fb      	str	r3, [r7, #12]
            break;
341884f8:	e009      	b.n	3418850e <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341884fa:	f7ff fa65 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341884fe:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188500:	68fa      	ldr	r2, [r7, #12]
34188502:	68bb      	ldr	r3, [r7, #8]
34188504:	fbb2 f3f3 	udiv	r3, r2, r3
34188508:	60fb      	str	r3, [r7, #12]
            break;
3418850a:	e000      	b.n	3418850e <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
3418850c:	bf00      	nop
      break;
3418850e:	e00f      	b.n	34188530 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34188510:	f7fa ff10 	bl	34183334 <LL_RCC_HSI_IsReady>
34188514:	4603      	mov	r3, r0
34188516:	2b00      	cmp	r3, #0
34188518:	d00c      	beq.n	34188534 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418851a:	f7fa ff1d 	bl	34183358 <LL_RCC_HSI_GetDivider>
3418851e:	4603      	mov	r3, r0
34188520:	09db      	lsrs	r3, r3, #7
34188522:	4a07      	ldr	r2, [pc, #28]	@ (34188540 <RCCEx_GetDCMIPPCLKFreq+0x110>)
34188524:	fa22 f303 	lsr.w	r3, r2, r3
34188528:	60fb      	str	r3, [r7, #12]
      break;
3418852a:	e003      	b.n	34188534 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
3418852c:	bf00      	nop
3418852e:	e002      	b.n	34188536 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188530:	bf00      	nop
34188532:	e000      	b.n	34188536 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188534:	bf00      	nop
  }

  return dcmipp_frequency;
34188536:	68fb      	ldr	r3, [r7, #12]
}
34188538:	4618      	mov	r0, r3
3418853a:	3710      	adds	r7, #16
3418853c:	46bd      	mov	sp, r7
3418853e:	bd80      	pop	{r7, pc}
34188540:	03d09000 	.word	0x03d09000

34188544 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34188544:	b580      	push	{r7, lr}
34188546:	b084      	sub	sp, #16
34188548:	af00      	add	r7, sp, #0
3418854a:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
3418854c:	2300      	movs	r3, #0
3418854e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34188550:	6878      	ldr	r0, [r7, #4]
34188552:	f7fb f9ed 	bl	34183930 <LL_RCC_GetETHClockSource>
34188556:	4603      	mov	r3, r0
34188558:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418855c:	d05e      	beq.n	3418861c <RCCEx_GetETH1CLKFreq+0xd8>
3418855e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34188562:	d863      	bhi.n	3418862c <RCCEx_GetETH1CLKFreq+0xe8>
34188564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188568:	d015      	beq.n	34188596 <RCCEx_GetETH1CLKFreq+0x52>
3418856a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418856e:	d85d      	bhi.n	3418862c <RCCEx_GetETH1CLKFreq+0xe8>
34188570:	2b00      	cmp	r3, #0
34188572:	d003      	beq.n	3418857c <RCCEx_GetETH1CLKFreq+0x38>
34188574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34188578:	d008      	beq.n	3418858c <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418857a:	e057      	b.n	3418862c <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418857c:	f7fa fada 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188580:	4603      	mov	r3, r0
34188582:	4618      	mov	r0, r3
34188584:	f7ff fa66 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188588:	60f8      	str	r0, [r7, #12]
      break;
3418858a:	e054      	b.n	34188636 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418858c:	2007      	movs	r0, #7
3418858e:	f7ff fd4d 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34188592:	60f8      	str	r0, [r7, #12]
      break;
34188594:	e04f      	b.n	34188636 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34188596:	f7fb ff71 	bl	3418447c <LL_RCC_IC12_IsEnabled>
3418859a:	4603      	mov	r3, r0
3418859c:	2b00      	cmp	r3, #0
3418859e:	d047      	beq.n	34188630 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
341885a0:	f7fb ff8e 	bl	341844c0 <LL_RCC_IC12_GetDivider>
341885a4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
341885a6:	f7fb ff7d 	bl	341844a4 <LL_RCC_IC12_GetSource>
341885aa:	4603      	mov	r3, r0
341885ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341885b0:	d029      	beq.n	34188606 <RCCEx_GetETH1CLKFreq+0xc2>
341885b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341885b6:	d82f      	bhi.n	34188618 <RCCEx_GetETH1CLKFreq+0xd4>
341885b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341885bc:	d01a      	beq.n	341885f4 <RCCEx_GetETH1CLKFreq+0xb0>
341885be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341885c2:	d829      	bhi.n	34188618 <RCCEx_GetETH1CLKFreq+0xd4>
341885c4:	2b00      	cmp	r3, #0
341885c6:	d003      	beq.n	341885d0 <RCCEx_GetETH1CLKFreq+0x8c>
341885c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341885cc:	d009      	beq.n	341885e2 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
341885ce:	e023      	b.n	34188618 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341885d0:	f7ff f928 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341885d4:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341885d6:	68fa      	ldr	r2, [r7, #12]
341885d8:	68bb      	ldr	r3, [r7, #8]
341885da:	fbb2 f3f3 	udiv	r3, r2, r3
341885de:	60fb      	str	r3, [r7, #12]
            break;
341885e0:	e01b      	b.n	3418861a <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341885e2:	f7ff f965 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341885e6:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341885e8:	68fa      	ldr	r2, [r7, #12]
341885ea:	68bb      	ldr	r3, [r7, #8]
341885ec:	fbb2 f3f3 	udiv	r3, r2, r3
341885f0:	60fb      	str	r3, [r7, #12]
            break;
341885f2:	e012      	b.n	3418861a <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341885f4:	f7ff f9a2 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341885f8:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341885fa:	68fa      	ldr	r2, [r7, #12]
341885fc:	68bb      	ldr	r3, [r7, #8]
341885fe:	fbb2 f3f3 	udiv	r3, r2, r3
34188602:	60fb      	str	r3, [r7, #12]
            break;
34188604:	e009      	b.n	3418861a <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188606:	f7ff f9df 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418860a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418860c:	68fa      	ldr	r2, [r7, #12]
3418860e:	68bb      	ldr	r3, [r7, #8]
34188610:	fbb2 f3f3 	udiv	r3, r2, r3
34188614:	60fb      	str	r3, [r7, #12]
            break;
34188616:	e000      	b.n	3418861a <RCCEx_GetETH1CLKFreq+0xd6>
            break;
34188618:	bf00      	nop
      break;
3418861a:	e009      	b.n	34188630 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
3418861c:	f7fa fe78 	bl	34183310 <LL_RCC_HSE_IsReady>
34188620:	4603      	mov	r3, r0
34188622:	2b00      	cmp	r3, #0
34188624:	d006      	beq.n	34188634 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
34188626:	4b06      	ldr	r3, [pc, #24]	@ (34188640 <RCCEx_GetETH1CLKFreq+0xfc>)
34188628:	60fb      	str	r3, [r7, #12]
      break;
3418862a:	e003      	b.n	34188634 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
3418862c:	bf00      	nop
3418862e:	e002      	b.n	34188636 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188630:	bf00      	nop
34188632:	e000      	b.n	34188636 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188634:	bf00      	nop
  }

  return eth1_frequency;
34188636:	68fb      	ldr	r3, [r7, #12]
}
34188638:	4618      	mov	r0, r3
3418863a:	3710      	adds	r7, #16
3418863c:	46bd      	mov	sp, r7
3418863e:	bd80      	pop	{r7, pc}
34188640:	02dc6c00 	.word	0x02dc6c00

34188644 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34188644:	b580      	push	{r7, lr}
34188646:	b084      	sub	sp, #16
34188648:	af00      	add	r7, sp, #0
3418864a:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418864c:	2300      	movs	r3, #0
3418864e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34188650:	6878      	ldr	r0, [r7, #4]
34188652:	f7fb f97f 	bl	34183954 <LL_RCC_GetETHPTPClockSource>
34188656:	4603      	mov	r3, r0
34188658:	2b03      	cmp	r3, #3
3418865a:	d863      	bhi.n	34188724 <RCCEx_GetETH1PTPCLKFreq+0xe0>
3418865c:	a201      	add	r2, pc, #4	@ (adr r2, 34188664 <RCCEx_GetETH1PTPCLKFreq+0x20>)
3418865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188662:	bf00      	nop
34188664:	34188675 	.word	0x34188675
34188668:	34188685 	.word	0x34188685
3418866c:	3418868f 	.word	0x3418868f
34188670:	34188715 	.word	0x34188715
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188674:	f7fa fa5e 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188678:	4603      	mov	r3, r0
3418867a:	4618      	mov	r0, r3
3418867c:	f7ff f9ea 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188680:	60f8      	str	r0, [r7, #12]
      break;
34188682:	e054      	b.n	3418872e <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188684:	2007      	movs	r0, #7
34188686:	f7ff fcd1 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418868a:	60f8      	str	r0, [r7, #12]
      break;
3418868c:	e04f      	b.n	3418872e <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
3418868e:	f7fb ff35 	bl	341844fc <LL_RCC_IC13_IsEnabled>
34188692:	4603      	mov	r3, r0
34188694:	2b00      	cmp	r3, #0
34188696:	d047      	beq.n	34188728 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34188698:	f7fb ff52 	bl	34184540 <LL_RCC_IC13_GetDivider>
3418869c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
3418869e:	f7fb ff41 	bl	34184524 <LL_RCC_IC13_GetSource>
341886a2:	4603      	mov	r3, r0
341886a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886a8:	d029      	beq.n	341886fe <RCCEx_GetETH1PTPCLKFreq+0xba>
341886aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886ae:	d82f      	bhi.n	34188710 <RCCEx_GetETH1PTPCLKFreq+0xcc>
341886b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886b4:	d01a      	beq.n	341886ec <RCCEx_GetETH1PTPCLKFreq+0xa8>
341886b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886ba:	d829      	bhi.n	34188710 <RCCEx_GetETH1PTPCLKFreq+0xcc>
341886bc:	2b00      	cmp	r3, #0
341886be:	d003      	beq.n	341886c8 <RCCEx_GetETH1PTPCLKFreq+0x84>
341886c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341886c4:	d009      	beq.n	341886da <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341886c6:	e023      	b.n	34188710 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341886c8:	f7ff f8ac 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341886cc:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341886ce:	68fa      	ldr	r2, [r7, #12]
341886d0:	68bb      	ldr	r3, [r7, #8]
341886d2:	fbb2 f3f3 	udiv	r3, r2, r3
341886d6:	60fb      	str	r3, [r7, #12]
            break;
341886d8:	e01b      	b.n	34188712 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341886da:	f7ff f8e9 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341886de:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341886e0:	68fa      	ldr	r2, [r7, #12]
341886e2:	68bb      	ldr	r3, [r7, #8]
341886e4:	fbb2 f3f3 	udiv	r3, r2, r3
341886e8:	60fb      	str	r3, [r7, #12]
            break;
341886ea:	e012      	b.n	34188712 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341886ec:	f7ff f926 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341886f0:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341886f2:	68fa      	ldr	r2, [r7, #12]
341886f4:	68bb      	ldr	r3, [r7, #8]
341886f6:	fbb2 f3f3 	udiv	r3, r2, r3
341886fa:	60fb      	str	r3, [r7, #12]
            break;
341886fc:	e009      	b.n	34188712 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341886fe:	f7ff f963 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188702:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188704:	68fa      	ldr	r2, [r7, #12]
34188706:	68bb      	ldr	r3, [r7, #8]
34188708:	fbb2 f3f3 	udiv	r3, r2, r3
3418870c:	60fb      	str	r3, [r7, #12]
            break;
3418870e:	e000      	b.n	34188712 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34188710:	bf00      	nop
        }
      }
      break;
34188712:	e009      	b.n	34188728 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188714:	f7fa fdfc 	bl	34183310 <LL_RCC_HSE_IsReady>
34188718:	4603      	mov	r3, r0
3418871a:	2b00      	cmp	r3, #0
3418871c:	d006      	beq.n	3418872c <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
3418871e:	4b0a      	ldr	r3, [pc, #40]	@ (34188748 <RCCEx_GetETH1PTPCLKFreq+0x104>)
34188720:	60fb      	str	r3, [r7, #12]
      }
      break;
34188722:	e003      	b.n	3418872c <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34188724:	bf00      	nop
34188726:	e002      	b.n	3418872e <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34188728:	bf00      	nop
3418872a:	e000      	b.n	3418872e <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418872c:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3418872e:	f7fa ff4d 	bl	341835cc <LL_RCC_GetETH1PTPDivider>
34188732:	4603      	mov	r3, r0
34188734:	091b      	lsrs	r3, r3, #4
34188736:	3301      	adds	r3, #1
34188738:	68fa      	ldr	r2, [r7, #12]
3418873a:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418873e:	4618      	mov	r0, r3
34188740:	3710      	adds	r7, #16
34188742:	46bd      	mov	sp, r7
34188744:	bd80      	pop	{r7, pc}
34188746:	bf00      	nop
34188748:	02dc6c00 	.word	0x02dc6c00

3418874c <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
3418874c:	b580      	push	{r7, lr}
3418874e:	b084      	sub	sp, #16
34188750:	af00      	add	r7, sp, #0
34188752:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34188754:	2300      	movs	r3, #0
34188756:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34188758:	6878      	ldr	r0, [r7, #4]
3418875a:	f7fb f90d 	bl	34183978 <LL_RCC_GetFDCANClockSource>
3418875e:	4603      	mov	r3, r0
34188760:	2b03      	cmp	r3, #3
34188762:	d867      	bhi.n	34188834 <RCCEx_GetFDCANCLKFreq+0xe8>
34188764:	a201      	add	r2, pc, #4	@ (adr r2, 3418876c <RCCEx_GetFDCANCLKFreq+0x20>)
34188766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418876a:	bf00      	nop
3418876c:	3418877d 	.word	0x3418877d
34188770:	34188795 	.word	0x34188795
34188774:	3418879f 	.word	0x3418879f
34188778:	34188825 	.word	0x34188825
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418877c:	f7fa f9da 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188780:	4603      	mov	r3, r0
34188782:	4618      	mov	r0, r3
34188784:	f7ff f966 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188788:	4603      	mov	r3, r0
3418878a:	4618      	mov	r0, r3
3418878c:	f7ff f973 	bl	34187a76 <RCCEx_GetPCLK1Freq>
34188790:	60f8      	str	r0, [r7, #12]
      break;
34188792:	e054      	b.n	3418883e <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188794:	2007      	movs	r0, #7
34188796:	f7ff fc49 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418879a:	60f8      	str	r0, [r7, #12]
      break;
3418879c:	e04f      	b.n	3418883e <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
3418879e:	f7fc f82d 	bl	341847fc <LL_RCC_IC19_IsEnabled>
341887a2:	4603      	mov	r3, r0
341887a4:	2b00      	cmp	r3, #0
341887a6:	d047      	beq.n	34188838 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
341887a8:	f7fc f84a 	bl	34184840 <LL_RCC_IC19_GetDivider>
341887ac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
341887ae:	f7fc f839 	bl	34184824 <LL_RCC_IC19_GetSource>
341887b2:	4603      	mov	r3, r0
341887b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887b8:	d029      	beq.n	3418880e <RCCEx_GetFDCANCLKFreq+0xc2>
341887ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887be:	d82f      	bhi.n	34188820 <RCCEx_GetFDCANCLKFreq+0xd4>
341887c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887c4:	d01a      	beq.n	341887fc <RCCEx_GetFDCANCLKFreq+0xb0>
341887c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887ca:	d829      	bhi.n	34188820 <RCCEx_GetFDCANCLKFreq+0xd4>
341887cc:	2b00      	cmp	r3, #0
341887ce:	d003      	beq.n	341887d8 <RCCEx_GetFDCANCLKFreq+0x8c>
341887d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341887d4:	d009      	beq.n	341887ea <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341887d6:	e023      	b.n	34188820 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341887d8:	f7ff f824 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341887dc:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
341887de:	68fa      	ldr	r2, [r7, #12]
341887e0:	68bb      	ldr	r3, [r7, #8]
341887e2:	fbb2 f3f3 	udiv	r3, r2, r3
341887e6:	60fb      	str	r3, [r7, #12]
            break;
341887e8:	e01b      	b.n	34188822 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341887ea:	f7ff f861 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341887ee:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
341887f0:	68fa      	ldr	r2, [r7, #12]
341887f2:	68bb      	ldr	r3, [r7, #8]
341887f4:	fbb2 f3f3 	udiv	r3, r2, r3
341887f8:	60fb      	str	r3, [r7, #12]
            break;
341887fa:	e012      	b.n	34188822 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341887fc:	f7ff f89e 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188800:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188802:	68fa      	ldr	r2, [r7, #12]
34188804:	68bb      	ldr	r3, [r7, #8]
34188806:	fbb2 f3f3 	udiv	r3, r2, r3
3418880a:	60fb      	str	r3, [r7, #12]
            break;
3418880c:	e009      	b.n	34188822 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418880e:	f7ff f8db 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188812:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188814:	68fa      	ldr	r2, [r7, #12]
34188816:	68bb      	ldr	r3, [r7, #8]
34188818:	fbb2 f3f3 	udiv	r3, r2, r3
3418881c:	60fb      	str	r3, [r7, #12]
            break;
3418881e:	e000      	b.n	34188822 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34188820:	bf00      	nop
        }
      }
      break;
34188822:	e009      	b.n	34188838 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188824:	f7fa fd74 	bl	34183310 <LL_RCC_HSE_IsReady>
34188828:	4603      	mov	r3, r0
3418882a:	2b00      	cmp	r3, #0
3418882c:	d006      	beq.n	3418883c <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
3418882e:	4b06      	ldr	r3, [pc, #24]	@ (34188848 <RCCEx_GetFDCANCLKFreq+0xfc>)
34188830:	60fb      	str	r3, [r7, #12]
      }
      break;
34188832:	e003      	b.n	3418883c <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34188834:	bf00      	nop
34188836:	e002      	b.n	3418883e <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34188838:	bf00      	nop
3418883a:	e000      	b.n	3418883e <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418883c:	bf00      	nop
  }

  return fdcan_frequency;
3418883e:	68fb      	ldr	r3, [r7, #12]
}
34188840:	4618      	mov	r0, r3
34188842:	3710      	adds	r7, #16
34188844:	46bd      	mov	sp, r7
34188846:	bd80      	pop	{r7, pc}
34188848:	02dc6c00 	.word	0x02dc6c00

3418884c <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
3418884c:	b580      	push	{r7, lr}
3418884e:	b084      	sub	sp, #16
34188850:	af00      	add	r7, sp, #0
34188852:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34188854:	2300      	movs	r3, #0
34188856:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34188858:	6878      	ldr	r0, [r7, #4]
3418885a:	f7fb f89f 	bl	3418399c <LL_RCC_GetFMCClockSource>
3418885e:	4603      	mov	r3, r0
34188860:	2b30      	cmp	r3, #48	@ 0x30
34188862:	d05d      	beq.n	34188920 <RCCEx_GetFMCCLKFreq+0xd4>
34188864:	2b30      	cmp	r3, #48	@ 0x30
34188866:	f200 809e 	bhi.w	341889a6 <RCCEx_GetFMCCLKFreq+0x15a>
3418886a:	2b20      	cmp	r3, #32
3418886c:	d014      	beq.n	34188898 <RCCEx_GetFMCCLKFreq+0x4c>
3418886e:	2b20      	cmp	r3, #32
34188870:	f200 8099 	bhi.w	341889a6 <RCCEx_GetFMCCLKFreq+0x15a>
34188874:	2b00      	cmp	r3, #0
34188876:	d002      	beq.n	3418887e <RCCEx_GetFMCCLKFreq+0x32>
34188878:	2b10      	cmp	r3, #16
3418887a:	d008      	beq.n	3418888e <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418887c:	e093      	b.n	341889a6 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418887e:	f7fa f959 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188882:	4603      	mov	r3, r0
34188884:	4618      	mov	r0, r3
34188886:	f7ff f8e5 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418888a:	60f8      	str	r0, [r7, #12]
      break;
3418888c:	e090      	b.n	341889b0 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418888e:	2007      	movs	r0, #7
34188890:	f7ff fbcc 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34188894:	60f8      	str	r0, [r7, #12]
      break;
34188896:	e08b      	b.n	341889b0 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34188898:	f7fb fc30 	bl	341840fc <LL_RCC_IC3_IsEnabled>
3418889c:	4603      	mov	r3, r0
3418889e:	2b00      	cmp	r3, #0
341888a0:	f000 8083 	beq.w	341889aa <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
341888a4:	f7fb fc4c 	bl	34184140 <LL_RCC_IC3_GetDivider>
341888a8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
341888aa:	f7fb fc3b 	bl	34184124 <LL_RCC_IC3_GetSource>
341888ae:	4603      	mov	r3, r0
341888b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341888b4:	d029      	beq.n	3418890a <RCCEx_GetFMCCLKFreq+0xbe>
341888b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341888ba:	d82f      	bhi.n	3418891c <RCCEx_GetFMCCLKFreq+0xd0>
341888bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341888c0:	d01a      	beq.n	341888f8 <RCCEx_GetFMCCLKFreq+0xac>
341888c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341888c6:	d829      	bhi.n	3418891c <RCCEx_GetFMCCLKFreq+0xd0>
341888c8:	2b00      	cmp	r3, #0
341888ca:	d003      	beq.n	341888d4 <RCCEx_GetFMCCLKFreq+0x88>
341888cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341888d0:	d009      	beq.n	341888e6 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
341888d2:	e023      	b.n	3418891c <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341888d4:	f7fe ffa6 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341888d8:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341888da:	68fa      	ldr	r2, [r7, #12]
341888dc:	68bb      	ldr	r3, [r7, #8]
341888de:	fbb2 f3f3 	udiv	r3, r2, r3
341888e2:	60fb      	str	r3, [r7, #12]
            break;
341888e4:	e01b      	b.n	3418891e <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341888e6:	f7fe ffe3 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341888ea:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341888ec:	68fa      	ldr	r2, [r7, #12]
341888ee:	68bb      	ldr	r3, [r7, #8]
341888f0:	fbb2 f3f3 	udiv	r3, r2, r3
341888f4:	60fb      	str	r3, [r7, #12]
            break;
341888f6:	e012      	b.n	3418891e <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341888f8:	f7ff f820 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341888fc:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341888fe:	68fa      	ldr	r2, [r7, #12]
34188900:	68bb      	ldr	r3, [r7, #8]
34188902:	fbb2 f3f3 	udiv	r3, r2, r3
34188906:	60fb      	str	r3, [r7, #12]
            break;
34188908:	e009      	b.n	3418891e <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418890a:	f7ff f85d 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418890e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188910:	68fa      	ldr	r2, [r7, #12]
34188912:	68bb      	ldr	r3, [r7, #8]
34188914:	fbb2 f3f3 	udiv	r3, r2, r3
34188918:	60fb      	str	r3, [r7, #12]
            break;
3418891a:	e000      	b.n	3418891e <RCCEx_GetFMCCLKFreq+0xd2>
            break;
3418891c:	bf00      	nop
      break;
3418891e:	e044      	b.n	341889aa <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34188920:	f7fb fc2c 	bl	3418417c <LL_RCC_IC4_IsEnabled>
34188924:	4603      	mov	r3, r0
34188926:	2b00      	cmp	r3, #0
34188928:	d041      	beq.n	341889ae <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
3418892a:	f7fb fc49 	bl	341841c0 <LL_RCC_IC4_GetDivider>
3418892e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34188930:	f7fb fc38 	bl	341841a4 <LL_RCC_IC4_GetSource>
34188934:	4603      	mov	r3, r0
34188936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418893a:	d029      	beq.n	34188990 <RCCEx_GetFMCCLKFreq+0x144>
3418893c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188940:	d82f      	bhi.n	341889a2 <RCCEx_GetFMCCLKFreq+0x156>
34188942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188946:	d01a      	beq.n	3418897e <RCCEx_GetFMCCLKFreq+0x132>
34188948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418894c:	d829      	bhi.n	341889a2 <RCCEx_GetFMCCLKFreq+0x156>
3418894e:	2b00      	cmp	r3, #0
34188950:	d003      	beq.n	3418895a <RCCEx_GetFMCCLKFreq+0x10e>
34188952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188956:	d009      	beq.n	3418896c <RCCEx_GetFMCCLKFreq+0x120>
            break;
34188958:	e023      	b.n	341889a2 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418895a:	f7fe ff63 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418895e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188960:	68fa      	ldr	r2, [r7, #12]
34188962:	68bb      	ldr	r3, [r7, #8]
34188964:	fbb2 f3f3 	udiv	r3, r2, r3
34188968:	60fb      	str	r3, [r7, #12]
            break;
3418896a:	e01b      	b.n	341889a4 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418896c:	f7fe ffa0 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188970:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188972:	68fa      	ldr	r2, [r7, #12]
34188974:	68bb      	ldr	r3, [r7, #8]
34188976:	fbb2 f3f3 	udiv	r3, r2, r3
3418897a:	60fb      	str	r3, [r7, #12]
            break;
3418897c:	e012      	b.n	341889a4 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418897e:	f7fe ffdd 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188982:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188984:	68fa      	ldr	r2, [r7, #12]
34188986:	68bb      	ldr	r3, [r7, #8]
34188988:	fbb2 f3f3 	udiv	r3, r2, r3
3418898c:	60fb      	str	r3, [r7, #12]
            break;
3418898e:	e009      	b.n	341889a4 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188990:	f7ff f81a 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188994:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188996:	68fa      	ldr	r2, [r7, #12]
34188998:	68bb      	ldr	r3, [r7, #8]
3418899a:	fbb2 f3f3 	udiv	r3, r2, r3
3418899e:	60fb      	str	r3, [r7, #12]
            break;
341889a0:	e000      	b.n	341889a4 <RCCEx_GetFMCCLKFreq+0x158>
            break;
341889a2:	bf00      	nop
      break;
341889a4:	e003      	b.n	341889ae <RCCEx_GetFMCCLKFreq+0x162>
      break;
341889a6:	bf00      	nop
341889a8:	e002      	b.n	341889b0 <RCCEx_GetFMCCLKFreq+0x164>
      break;
341889aa:	bf00      	nop
341889ac:	e000      	b.n	341889b0 <RCCEx_GetFMCCLKFreq+0x164>
      break;
341889ae:	bf00      	nop
  }

  return fmc_frequency;
341889b0:	68fb      	ldr	r3, [r7, #12]
}
341889b2:	4618      	mov	r0, r3
341889b4:	3710      	adds	r7, #16
341889b6:	46bd      	mov	sp, r7
341889b8:	bd80      	pop	{r7, pc}
	...

341889bc <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
341889bc:	b580      	push	{r7, lr}
341889be:	b084      	sub	sp, #16
341889c0:	af00      	add	r7, sp, #0
341889c2:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
341889c4:	2300      	movs	r3, #0
341889c6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
341889c8:	6878      	ldr	r0, [r7, #4]
341889ca:	f7fa fff9 	bl	341839c0 <LL_RCC_GetI2CClockSource>
341889ce:	4603      	mov	r3, r0
341889d0:	4aa2      	ldr	r2, [pc, #648]	@ (34188c5c <RCCEx_GetI2CCLKFreq+0x2a0>)
341889d2:	4293      	cmp	r3, r2
341889d4:	f000 8172 	beq.w	34188cbc <RCCEx_GetI2CCLKFreq+0x300>
341889d8:	4aa0      	ldr	r2, [pc, #640]	@ (34188c5c <RCCEx_GetI2CCLKFreq+0x2a0>)
341889da:	4293      	cmp	r3, r2
341889dc:	f200 8184 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
341889e0:	4a9f      	ldr	r2, [pc, #636]	@ (34188c60 <RCCEx_GetI2CCLKFreq+0x2a4>)
341889e2:	4293      	cmp	r3, r2
341889e4:	f000 816a 	beq.w	34188cbc <RCCEx_GetI2CCLKFreq+0x300>
341889e8:	4a9d      	ldr	r2, [pc, #628]	@ (34188c60 <RCCEx_GetI2CCLKFreq+0x2a4>)
341889ea:	4293      	cmp	r3, r2
341889ec:	f200 817c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
341889f0:	4a9c      	ldr	r2, [pc, #624]	@ (34188c64 <RCCEx_GetI2CCLKFreq+0x2a8>)
341889f2:	4293      	cmp	r3, r2
341889f4:	f000 8162 	beq.w	34188cbc <RCCEx_GetI2CCLKFreq+0x300>
341889f8:	4a9a      	ldr	r2, [pc, #616]	@ (34188c64 <RCCEx_GetI2CCLKFreq+0x2a8>)
341889fa:	4293      	cmp	r3, r2
341889fc:	f200 8174 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a00:	4a99      	ldr	r2, [pc, #612]	@ (34188c68 <RCCEx_GetI2CCLKFreq+0x2ac>)
34188a02:	4293      	cmp	r3, r2
34188a04:	f000 815a 	beq.w	34188cbc <RCCEx_GetI2CCLKFreq+0x300>
34188a08:	4a97      	ldr	r2, [pc, #604]	@ (34188c68 <RCCEx_GetI2CCLKFreq+0x2ac>)
34188a0a:	4293      	cmp	r3, r2
34188a0c:	f200 816c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a10:	4a96      	ldr	r2, [pc, #600]	@ (34188c6c <RCCEx_GetI2CCLKFreq+0x2b0>)
34188a12:	4293      	cmp	r3, r2
34188a14:	f000 8160 	beq.w	34188cd8 <RCCEx_GetI2CCLKFreq+0x31c>
34188a18:	4a94      	ldr	r2, [pc, #592]	@ (34188c6c <RCCEx_GetI2CCLKFreq+0x2b0>)
34188a1a:	4293      	cmp	r3, r2
34188a1c:	f200 8164 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a20:	4a93      	ldr	r2, [pc, #588]	@ (34188c70 <RCCEx_GetI2CCLKFreq+0x2b4>)
34188a22:	4293      	cmp	r3, r2
34188a24:	f000 8158 	beq.w	34188cd8 <RCCEx_GetI2CCLKFreq+0x31c>
34188a28:	4a91      	ldr	r2, [pc, #580]	@ (34188c70 <RCCEx_GetI2CCLKFreq+0x2b4>)
34188a2a:	4293      	cmp	r3, r2
34188a2c:	f200 815c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a30:	4a90      	ldr	r2, [pc, #576]	@ (34188c74 <RCCEx_GetI2CCLKFreq+0x2b8>)
34188a32:	4293      	cmp	r3, r2
34188a34:	f000 8150 	beq.w	34188cd8 <RCCEx_GetI2CCLKFreq+0x31c>
34188a38:	4a8e      	ldr	r2, [pc, #568]	@ (34188c74 <RCCEx_GetI2CCLKFreq+0x2b8>)
34188a3a:	4293      	cmp	r3, r2
34188a3c:	f200 8154 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a40:	4a8d      	ldr	r2, [pc, #564]	@ (34188c78 <RCCEx_GetI2CCLKFreq+0x2bc>)
34188a42:	4293      	cmp	r3, r2
34188a44:	f000 8148 	beq.w	34188cd8 <RCCEx_GetI2CCLKFreq+0x31c>
34188a48:	4a8b      	ldr	r2, [pc, #556]	@ (34188c78 <RCCEx_GetI2CCLKFreq+0x2bc>)
34188a4a:	4293      	cmp	r3, r2
34188a4c:	f200 814c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a50:	4a8a      	ldr	r2, [pc, #552]	@ (34188c7c <RCCEx_GetI2CCLKFreq+0x2c0>)
34188a52:	4293      	cmp	r3, r2
34188a54:	f000 80be 	beq.w	34188bd4 <RCCEx_GetI2CCLKFreq+0x218>
34188a58:	4a88      	ldr	r2, [pc, #544]	@ (34188c7c <RCCEx_GetI2CCLKFreq+0x2c0>)
34188a5a:	4293      	cmp	r3, r2
34188a5c:	f200 8144 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a60:	4a87      	ldr	r2, [pc, #540]	@ (34188c80 <RCCEx_GetI2CCLKFreq+0x2c4>)
34188a62:	4293      	cmp	r3, r2
34188a64:	f000 80b6 	beq.w	34188bd4 <RCCEx_GetI2CCLKFreq+0x218>
34188a68:	4a85      	ldr	r2, [pc, #532]	@ (34188c80 <RCCEx_GetI2CCLKFreq+0x2c4>)
34188a6a:	4293      	cmp	r3, r2
34188a6c:	f200 813c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a70:	4a84      	ldr	r2, [pc, #528]	@ (34188c84 <RCCEx_GetI2CCLKFreq+0x2c8>)
34188a72:	4293      	cmp	r3, r2
34188a74:	f000 80ae 	beq.w	34188bd4 <RCCEx_GetI2CCLKFreq+0x218>
34188a78:	4a82      	ldr	r2, [pc, #520]	@ (34188c84 <RCCEx_GetI2CCLKFreq+0x2c8>)
34188a7a:	4293      	cmp	r3, r2
34188a7c:	f200 8134 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a80:	4a81      	ldr	r2, [pc, #516]	@ (34188c88 <RCCEx_GetI2CCLKFreq+0x2cc>)
34188a82:	4293      	cmp	r3, r2
34188a84:	f000 80a6 	beq.w	34188bd4 <RCCEx_GetI2CCLKFreq+0x218>
34188a88:	4a7f      	ldr	r2, [pc, #508]	@ (34188c88 <RCCEx_GetI2CCLKFreq+0x2cc>)
34188a8a:	4293      	cmp	r3, r2
34188a8c:	f200 812c 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a90:	4a7e      	ldr	r2, [pc, #504]	@ (34188c8c <RCCEx_GetI2CCLKFreq+0x2d0>)
34188a92:	4293      	cmp	r3, r2
34188a94:	d05a      	beq.n	34188b4c <RCCEx_GetI2CCLKFreq+0x190>
34188a96:	4a7d      	ldr	r2, [pc, #500]	@ (34188c8c <RCCEx_GetI2CCLKFreq+0x2d0>)
34188a98:	4293      	cmp	r3, r2
34188a9a:	f200 8125 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188a9e:	4a7c      	ldr	r2, [pc, #496]	@ (34188c90 <RCCEx_GetI2CCLKFreq+0x2d4>)
34188aa0:	4293      	cmp	r3, r2
34188aa2:	d053      	beq.n	34188b4c <RCCEx_GetI2CCLKFreq+0x190>
34188aa4:	4a7a      	ldr	r2, [pc, #488]	@ (34188c90 <RCCEx_GetI2CCLKFreq+0x2d4>)
34188aa6:	4293      	cmp	r3, r2
34188aa8:	f200 811e 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188aac:	4a79      	ldr	r2, [pc, #484]	@ (34188c94 <RCCEx_GetI2CCLKFreq+0x2d8>)
34188aae:	4293      	cmp	r3, r2
34188ab0:	d04c      	beq.n	34188b4c <RCCEx_GetI2CCLKFreq+0x190>
34188ab2:	4a78      	ldr	r2, [pc, #480]	@ (34188c94 <RCCEx_GetI2CCLKFreq+0x2d8>)
34188ab4:	4293      	cmp	r3, r2
34188ab6:	f200 8117 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188aba:	4a77      	ldr	r2, [pc, #476]	@ (34188c98 <RCCEx_GetI2CCLKFreq+0x2dc>)
34188abc:	4293      	cmp	r3, r2
34188abe:	d045      	beq.n	34188b4c <RCCEx_GetI2CCLKFreq+0x190>
34188ac0:	4a75      	ldr	r2, [pc, #468]	@ (34188c98 <RCCEx_GetI2CCLKFreq+0x2dc>)
34188ac2:	4293      	cmp	r3, r2
34188ac4:	f200 8110 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188ac8:	4a74      	ldr	r2, [pc, #464]	@ (34188c9c <RCCEx_GetI2CCLKFreq+0x2e0>)
34188aca:	4293      	cmp	r3, r2
34188acc:	d039      	beq.n	34188b42 <RCCEx_GetI2CCLKFreq+0x186>
34188ace:	4a73      	ldr	r2, [pc, #460]	@ (34188c9c <RCCEx_GetI2CCLKFreq+0x2e0>)
34188ad0:	4293      	cmp	r3, r2
34188ad2:	f200 8109 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188ad6:	4a72      	ldr	r2, [pc, #456]	@ (34188ca0 <RCCEx_GetI2CCLKFreq+0x2e4>)
34188ad8:	4293      	cmp	r3, r2
34188ada:	d032      	beq.n	34188b42 <RCCEx_GetI2CCLKFreq+0x186>
34188adc:	4a70      	ldr	r2, [pc, #448]	@ (34188ca0 <RCCEx_GetI2CCLKFreq+0x2e4>)
34188ade:	4293      	cmp	r3, r2
34188ae0:	f200 8102 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188ae4:	4a6f      	ldr	r2, [pc, #444]	@ (34188ca4 <RCCEx_GetI2CCLKFreq+0x2e8>)
34188ae6:	4293      	cmp	r3, r2
34188ae8:	d02b      	beq.n	34188b42 <RCCEx_GetI2CCLKFreq+0x186>
34188aea:	4a6e      	ldr	r2, [pc, #440]	@ (34188ca4 <RCCEx_GetI2CCLKFreq+0x2e8>)
34188aec:	4293      	cmp	r3, r2
34188aee:	f200 80fb 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188af2:	4a6d      	ldr	r2, [pc, #436]	@ (34188ca8 <RCCEx_GetI2CCLKFreq+0x2ec>)
34188af4:	4293      	cmp	r3, r2
34188af6:	d024      	beq.n	34188b42 <RCCEx_GetI2CCLKFreq+0x186>
34188af8:	4a6b      	ldr	r2, [pc, #428]	@ (34188ca8 <RCCEx_GetI2CCLKFreq+0x2ec>)
34188afa:	4293      	cmp	r3, r2
34188afc:	f200 80f4 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188b00:	4a6a      	ldr	r2, [pc, #424]	@ (34188cac <RCCEx_GetI2CCLKFreq+0x2f0>)
34188b02:	4293      	cmp	r3, r2
34188b04:	d011      	beq.n	34188b2a <RCCEx_GetI2CCLKFreq+0x16e>
34188b06:	4a69      	ldr	r2, [pc, #420]	@ (34188cac <RCCEx_GetI2CCLKFreq+0x2f0>)
34188b08:	4293      	cmp	r3, r2
34188b0a:	f200 80ed 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188b0e:	4a68      	ldr	r2, [pc, #416]	@ (34188cb0 <RCCEx_GetI2CCLKFreq+0x2f4>)
34188b10:	4293      	cmp	r3, r2
34188b12:	d00a      	beq.n	34188b2a <RCCEx_GetI2CCLKFreq+0x16e>
34188b14:	4a66      	ldr	r2, [pc, #408]	@ (34188cb0 <RCCEx_GetI2CCLKFreq+0x2f4>)
34188b16:	4293      	cmp	r3, r2
34188b18:	f200 80e6 	bhi.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
34188b1c:	4a65      	ldr	r2, [pc, #404]	@ (34188cb4 <RCCEx_GetI2CCLKFreq+0x2f8>)
34188b1e:	4293      	cmp	r3, r2
34188b20:	d003      	beq.n	34188b2a <RCCEx_GetI2CCLKFreq+0x16e>
34188b22:	4a65      	ldr	r2, [pc, #404]	@ (34188cb8 <RCCEx_GetI2CCLKFreq+0x2fc>)
34188b24:	4293      	cmp	r3, r2
34188b26:	f040 80df 	bne.w	34188ce8 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188b2a:	f7fa f803 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188b2e:	4603      	mov	r3, r0
34188b30:	4618      	mov	r0, r3
34188b32:	f7fe ff8f 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188b36:	4603      	mov	r3, r0
34188b38:	4618      	mov	r0, r3
34188b3a:	f7fe ff9c 	bl	34187a76 <RCCEx_GetPCLK1Freq>
34188b3e:	60f8      	str	r0, [r7, #12]
      break;
34188b40:	e0db      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188b42:	2007      	movs	r0, #7
34188b44:	f7ff fa72 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34188b48:	60f8      	str	r0, [r7, #12]
      break;
34188b4a:	e0d6      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34188b4c:	f7fb fc56 	bl	341843fc <LL_RCC_IC10_IsEnabled>
34188b50:	4603      	mov	r3, r0
34188b52:	2b00      	cmp	r3, #0
34188b54:	f000 80ca 	beq.w	34188cec <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34188b58:	f7fb fc72 	bl	34184440 <LL_RCC_IC10_GetDivider>
34188b5c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34188b5e:	f7fb fc61 	bl	34184424 <LL_RCC_IC10_GetSource>
34188b62:	4603      	mov	r3, r0
34188b64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b68:	d029      	beq.n	34188bbe <RCCEx_GetI2CCLKFreq+0x202>
34188b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b6e:	d82f      	bhi.n	34188bd0 <RCCEx_GetI2CCLKFreq+0x214>
34188b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b74:	d01a      	beq.n	34188bac <RCCEx_GetI2CCLKFreq+0x1f0>
34188b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b7a:	d829      	bhi.n	34188bd0 <RCCEx_GetI2CCLKFreq+0x214>
34188b7c:	2b00      	cmp	r3, #0
34188b7e:	d003      	beq.n	34188b88 <RCCEx_GetI2CCLKFreq+0x1cc>
34188b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188b84:	d009      	beq.n	34188b9a <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188b86:	e023      	b.n	34188bd0 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188b88:	f7fe fe4c 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188b8c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188b8e:	68fa      	ldr	r2, [r7, #12]
34188b90:	68bb      	ldr	r3, [r7, #8]
34188b92:	fbb2 f3f3 	udiv	r3, r2, r3
34188b96:	60fb      	str	r3, [r7, #12]
            break;
34188b98:	e01b      	b.n	34188bd2 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188b9a:	f7fe fe89 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188b9e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188ba0:	68fa      	ldr	r2, [r7, #12]
34188ba2:	68bb      	ldr	r3, [r7, #8]
34188ba4:	fbb2 f3f3 	udiv	r3, r2, r3
34188ba8:	60fb      	str	r3, [r7, #12]
            break;
34188baa:	e012      	b.n	34188bd2 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188bac:	f7fe fec6 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188bb0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188bb2:	68fa      	ldr	r2, [r7, #12]
34188bb4:	68bb      	ldr	r3, [r7, #8]
34188bb6:	fbb2 f3f3 	udiv	r3, r2, r3
34188bba:	60fb      	str	r3, [r7, #12]
            break;
34188bbc:	e009      	b.n	34188bd2 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188bbe:	f7fe ff03 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188bc2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188bc4:	68fa      	ldr	r2, [r7, #12]
34188bc6:	68bb      	ldr	r3, [r7, #8]
34188bc8:	fbb2 f3f3 	udiv	r3, r2, r3
34188bcc:	60fb      	str	r3, [r7, #12]
            break;
34188bce:	e000      	b.n	34188bd2 <RCCEx_GetI2CCLKFreq+0x216>
            break;
34188bd0:	bf00      	nop
        }
      }
      break;
34188bd2:	e08b      	b.n	34188cec <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34188bd4:	f7fb fd12 	bl	341845fc <LL_RCC_IC15_IsEnabled>
34188bd8:	4603      	mov	r3, r0
34188bda:	2b00      	cmp	r3, #0
34188bdc:	f000 8088 	beq.w	34188cf0 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34188be0:	f7fb fd2e 	bl	34184640 <LL_RCC_IC15_GetDivider>
34188be4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34188be6:	f7fb fd1d 	bl	34184624 <LL_RCC_IC15_GetSource>
34188bea:	4603      	mov	r3, r0
34188bec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188bf0:	d029      	beq.n	34188c46 <RCCEx_GetI2CCLKFreq+0x28a>
34188bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188bf6:	d82f      	bhi.n	34188c58 <RCCEx_GetI2CCLKFreq+0x29c>
34188bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188bfc:	d01a      	beq.n	34188c34 <RCCEx_GetI2CCLKFreq+0x278>
34188bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188c02:	d829      	bhi.n	34188c58 <RCCEx_GetI2CCLKFreq+0x29c>
34188c04:	2b00      	cmp	r3, #0
34188c06:	d003      	beq.n	34188c10 <RCCEx_GetI2CCLKFreq+0x254>
34188c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188c0c:	d009      	beq.n	34188c22 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188c0e:	e023      	b.n	34188c58 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188c10:	f7fe fe08 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188c14:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188c16:	68fa      	ldr	r2, [r7, #12]
34188c18:	68bb      	ldr	r3, [r7, #8]
34188c1a:	fbb2 f3f3 	udiv	r3, r2, r3
34188c1e:	60fb      	str	r3, [r7, #12]
            break;
34188c20:	e01b      	b.n	34188c5a <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188c22:	f7fe fe45 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188c26:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188c28:	68fa      	ldr	r2, [r7, #12]
34188c2a:	68bb      	ldr	r3, [r7, #8]
34188c2c:	fbb2 f3f3 	udiv	r3, r2, r3
34188c30:	60fb      	str	r3, [r7, #12]
            break;
34188c32:	e012      	b.n	34188c5a <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188c34:	f7fe fe82 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188c38:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188c3a:	68fa      	ldr	r2, [r7, #12]
34188c3c:	68bb      	ldr	r3, [r7, #8]
34188c3e:	fbb2 f3f3 	udiv	r3, r2, r3
34188c42:	60fb      	str	r3, [r7, #12]
            break;
34188c44:	e009      	b.n	34188c5a <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188c46:	f7fe febf 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188c4a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34188c4c:	68fa      	ldr	r2, [r7, #12]
34188c4e:	68bb      	ldr	r3, [r7, #8]
34188c50:	fbb2 f3f3 	udiv	r3, r2, r3
34188c54:	60fb      	str	r3, [r7, #12]
            break;
34188c56:	e000      	b.n	34188c5a <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34188c58:	bf00      	nop
        }
      }
      break;
34188c5a:	e049      	b.n	34188cf0 <RCCEx_GetI2CCLKFreq+0x334>
34188c5c:	07050c0c 	.word	0x07050c0c
34188c60:	0705080c 	.word	0x0705080c
34188c64:	0705040c 	.word	0x0705040c
34188c68:	0705000c 	.word	0x0705000c
34188c6c:	07040c0c 	.word	0x07040c0c
34188c70:	0704080c 	.word	0x0704080c
34188c74:	0704040c 	.word	0x0704040c
34188c78:	0704000c 	.word	0x0704000c
34188c7c:	07030c0c 	.word	0x07030c0c
34188c80:	0703080c 	.word	0x0703080c
34188c84:	0703040c 	.word	0x0703040c
34188c88:	0703000c 	.word	0x0703000c
34188c8c:	07020c0c 	.word	0x07020c0c
34188c90:	0702080c 	.word	0x0702080c
34188c94:	0702040c 	.word	0x0702040c
34188c98:	0702000c 	.word	0x0702000c
34188c9c:	07010c0c 	.word	0x07010c0c
34188ca0:	0701080c 	.word	0x0701080c
34188ca4:	0701040c 	.word	0x0701040c
34188ca8:	0701000c 	.word	0x0701000c
34188cac:	07000c0c 	.word	0x07000c0c
34188cb0:	0700080c 	.word	0x0700080c
34188cb4:	0700000c 	.word	0x0700000c
34188cb8:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34188cbc:	f7fa fb3a 	bl	34183334 <LL_RCC_HSI_IsReady>
34188cc0:	4603      	mov	r3, r0
34188cc2:	2b00      	cmp	r3, #0
34188cc4:	d016      	beq.n	34188cf4 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188cc6:	f7fa fb47 	bl	34183358 <LL_RCC_HSI_GetDivider>
34188cca:	4603      	mov	r3, r0
34188ccc:	09db      	lsrs	r3, r3, #7
34188cce:	4a0d      	ldr	r2, [pc, #52]	@ (34188d04 <RCCEx_GetI2CCLKFreq+0x348>)
34188cd0:	fa22 f303 	lsr.w	r3, r2, r3
34188cd4:	60fb      	str	r3, [r7, #12]
      }
      break;
34188cd6:	e00d      	b.n	34188cf4 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34188cd8:	f7fa fb4c 	bl	34183374 <LL_RCC_MSI_IsReady>
34188cdc:	4603      	mov	r3, r0
34188cde:	2b00      	cmp	r3, #0
34188ce0:	d00a      	beq.n	34188cf8 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
34188ce2:	4b09      	ldr	r3, [pc, #36]	@ (34188d08 <RCCEx_GetI2CCLKFreq+0x34c>)
34188ce4:	60fb      	str	r3, [r7, #12]
      }
      break;
34188ce6:	e007      	b.n	34188cf8 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34188ce8:	bf00      	nop
34188cea:	e006      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34188cec:	bf00      	nop
34188cee:	e004      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34188cf0:	bf00      	nop
34188cf2:	e002      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34188cf4:	bf00      	nop
34188cf6:	e000      	b.n	34188cfa <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34188cf8:	bf00      	nop
  }

  return i2c_frequency;
34188cfa:	68fb      	ldr	r3, [r7, #12]
}
34188cfc:	4618      	mov	r0, r3
34188cfe:	3710      	adds	r7, #16
34188d00:	46bd      	mov	sp, r7
34188d02:	bd80      	pop	{r7, pc}
34188d04:	03d09000 	.word	0x03d09000
34188d08:	003d0900 	.word	0x003d0900

34188d0c <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
34188d0c:	b580      	push	{r7, lr}
34188d0e:	b084      	sub	sp, #16
34188d10:	af00      	add	r7, sp, #0
34188d12:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34188d14:	2300      	movs	r3, #0
34188d16:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34188d18:	6878      	ldr	r0, [r7, #4]
34188d1a:	f7fa fe5d 	bl	341839d8 <LL_RCC_GetI3CClockSource>
34188d1e:	4603      	mov	r3, r0
34188d20:	4a86      	ldr	r2, [pc, #536]	@ (34188f3c <RCCEx_GetI3CCLKFreq+0x230>)
34188d22:	4293      	cmp	r3, r2
34188d24:	f000 80e6 	beq.w	34188ef4 <RCCEx_GetI3CCLKFreq+0x1e8>
34188d28:	4a84      	ldr	r2, [pc, #528]	@ (34188f3c <RCCEx_GetI3CCLKFreq+0x230>)
34188d2a:	4293      	cmp	r3, r2
34188d2c:	f200 80f8 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d30:	4a83      	ldr	r2, [pc, #524]	@ (34188f40 <RCCEx_GetI3CCLKFreq+0x234>)
34188d32:	4293      	cmp	r3, r2
34188d34:	f000 80de 	beq.w	34188ef4 <RCCEx_GetI3CCLKFreq+0x1e8>
34188d38:	4a81      	ldr	r2, [pc, #516]	@ (34188f40 <RCCEx_GetI3CCLKFreq+0x234>)
34188d3a:	4293      	cmp	r3, r2
34188d3c:	f200 80f0 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d40:	4a80      	ldr	r2, [pc, #512]	@ (34188f44 <RCCEx_GetI3CCLKFreq+0x238>)
34188d42:	4293      	cmp	r3, r2
34188d44:	f000 80e4 	beq.w	34188f10 <RCCEx_GetI3CCLKFreq+0x204>
34188d48:	4a7e      	ldr	r2, [pc, #504]	@ (34188f44 <RCCEx_GetI3CCLKFreq+0x238>)
34188d4a:	4293      	cmp	r3, r2
34188d4c:	f200 80e8 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d50:	4a7d      	ldr	r2, [pc, #500]	@ (34188f48 <RCCEx_GetI3CCLKFreq+0x23c>)
34188d52:	4293      	cmp	r3, r2
34188d54:	f000 80dc 	beq.w	34188f10 <RCCEx_GetI3CCLKFreq+0x204>
34188d58:	4a7b      	ldr	r2, [pc, #492]	@ (34188f48 <RCCEx_GetI3CCLKFreq+0x23c>)
34188d5a:	4293      	cmp	r3, r2
34188d5c:	f200 80e0 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d60:	4a7a      	ldr	r2, [pc, #488]	@ (34188f4c <RCCEx_GetI3CCLKFreq+0x240>)
34188d62:	4293      	cmp	r3, r2
34188d64:	f000 8083 	beq.w	34188e6e <RCCEx_GetI3CCLKFreq+0x162>
34188d68:	4a78      	ldr	r2, [pc, #480]	@ (34188f4c <RCCEx_GetI3CCLKFreq+0x240>)
34188d6a:	4293      	cmp	r3, r2
34188d6c:	f200 80d8 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d70:	4a77      	ldr	r2, [pc, #476]	@ (34188f50 <RCCEx_GetI3CCLKFreq+0x244>)
34188d72:	4293      	cmp	r3, r2
34188d74:	d07b      	beq.n	34188e6e <RCCEx_GetI3CCLKFreq+0x162>
34188d76:	4a76      	ldr	r2, [pc, #472]	@ (34188f50 <RCCEx_GetI3CCLKFreq+0x244>)
34188d78:	4293      	cmp	r3, r2
34188d7a:	f200 80d1 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d7e:	4a75      	ldr	r2, [pc, #468]	@ (34188f54 <RCCEx_GetI3CCLKFreq+0x248>)
34188d80:	4293      	cmp	r3, r2
34188d82:	d030      	beq.n	34188de6 <RCCEx_GetI3CCLKFreq+0xda>
34188d84:	4a73      	ldr	r2, [pc, #460]	@ (34188f54 <RCCEx_GetI3CCLKFreq+0x248>)
34188d86:	4293      	cmp	r3, r2
34188d88:	f200 80ca 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d8c:	4a72      	ldr	r2, [pc, #456]	@ (34188f58 <RCCEx_GetI3CCLKFreq+0x24c>)
34188d8e:	4293      	cmp	r3, r2
34188d90:	d029      	beq.n	34188de6 <RCCEx_GetI3CCLKFreq+0xda>
34188d92:	4a71      	ldr	r2, [pc, #452]	@ (34188f58 <RCCEx_GetI3CCLKFreq+0x24c>)
34188d94:	4293      	cmp	r3, r2
34188d96:	f200 80c3 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188d9a:	4a70      	ldr	r2, [pc, #448]	@ (34188f5c <RCCEx_GetI3CCLKFreq+0x250>)
34188d9c:	4293      	cmp	r3, r2
34188d9e:	d01d      	beq.n	34188ddc <RCCEx_GetI3CCLKFreq+0xd0>
34188da0:	4a6e      	ldr	r2, [pc, #440]	@ (34188f5c <RCCEx_GetI3CCLKFreq+0x250>)
34188da2:	4293      	cmp	r3, r2
34188da4:	f200 80bc 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188da8:	4a6d      	ldr	r2, [pc, #436]	@ (34188f60 <RCCEx_GetI3CCLKFreq+0x254>)
34188daa:	4293      	cmp	r3, r2
34188dac:	d016      	beq.n	34188ddc <RCCEx_GetI3CCLKFreq+0xd0>
34188dae:	4a6c      	ldr	r2, [pc, #432]	@ (34188f60 <RCCEx_GetI3CCLKFreq+0x254>)
34188db0:	4293      	cmp	r3, r2
34188db2:	f200 80b5 	bhi.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
34188db6:	4a6b      	ldr	r2, [pc, #428]	@ (34188f64 <RCCEx_GetI3CCLKFreq+0x258>)
34188db8:	4293      	cmp	r3, r2
34188dba:	d003      	beq.n	34188dc4 <RCCEx_GetI3CCLKFreq+0xb8>
34188dbc:	4a6a      	ldr	r2, [pc, #424]	@ (34188f68 <RCCEx_GetI3CCLKFreq+0x25c>)
34188dbe:	4293      	cmp	r3, r2
34188dc0:	f040 80ae 	bne.w	34188f20 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188dc4:	f7f9 feb6 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34188dc8:	4603      	mov	r3, r0
34188dca:	4618      	mov	r0, r3
34188dcc:	f7fe fe42 	bl	34187a54 <RCCEx_GetHCLKFreq>
34188dd0:	4603      	mov	r3, r0
34188dd2:	4618      	mov	r0, r3
34188dd4:	f7fe fe4f 	bl	34187a76 <RCCEx_GetPCLK1Freq>
34188dd8:	60f8      	str	r0, [r7, #12]
      break;
34188dda:	e0aa      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188ddc:	2007      	movs	r0, #7
34188dde:	f7ff f925 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34188de2:	60f8      	str	r0, [r7, #12]
      break;
34188de4:	e0a5      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34188de6:	f7fb fb09 	bl	341843fc <LL_RCC_IC10_IsEnabled>
34188dea:	4603      	mov	r3, r0
34188dec:	2b00      	cmp	r3, #0
34188dee:	f000 8099 	beq.w	34188f24 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34188df2:	f7fb fb25 	bl	34184440 <LL_RCC_IC10_GetDivider>
34188df6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34188df8:	f7fb fb14 	bl	34184424 <LL_RCC_IC10_GetSource>
34188dfc:	4603      	mov	r3, r0
34188dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e02:	d029      	beq.n	34188e58 <RCCEx_GetI3CCLKFreq+0x14c>
34188e04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e08:	d82f      	bhi.n	34188e6a <RCCEx_GetI3CCLKFreq+0x15e>
34188e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e0e:	d01a      	beq.n	34188e46 <RCCEx_GetI3CCLKFreq+0x13a>
34188e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e14:	d829      	bhi.n	34188e6a <RCCEx_GetI3CCLKFreq+0x15e>
34188e16:	2b00      	cmp	r3, #0
34188e18:	d003      	beq.n	34188e22 <RCCEx_GetI3CCLKFreq+0x116>
34188e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188e1e:	d009      	beq.n	34188e34 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188e20:	e023      	b.n	34188e6a <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188e22:	f7fe fcff 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188e26:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188e28:	68fa      	ldr	r2, [r7, #12]
34188e2a:	68bb      	ldr	r3, [r7, #8]
34188e2c:	fbb2 f3f3 	udiv	r3, r2, r3
34188e30:	60fb      	str	r3, [r7, #12]
            break;
34188e32:	e01b      	b.n	34188e6c <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188e34:	f7fe fd3c 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188e38:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188e3a:	68fa      	ldr	r2, [r7, #12]
34188e3c:	68bb      	ldr	r3, [r7, #8]
34188e3e:	fbb2 f3f3 	udiv	r3, r2, r3
34188e42:	60fb      	str	r3, [r7, #12]
            break;
34188e44:	e012      	b.n	34188e6c <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188e46:	f7fe fd79 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188e4a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188e4c:	68fa      	ldr	r2, [r7, #12]
34188e4e:	68bb      	ldr	r3, [r7, #8]
34188e50:	fbb2 f3f3 	udiv	r3, r2, r3
34188e54:	60fb      	str	r3, [r7, #12]
            break;
34188e56:	e009      	b.n	34188e6c <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188e58:	f7fe fdb6 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188e5c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188e5e:	68fa      	ldr	r2, [r7, #12]
34188e60:	68bb      	ldr	r3, [r7, #8]
34188e62:	fbb2 f3f3 	udiv	r3, r2, r3
34188e66:	60fb      	str	r3, [r7, #12]
            break;
34188e68:	e000      	b.n	34188e6c <RCCEx_GetI3CCLKFreq+0x160>
            break;
34188e6a:	bf00      	nop
        }
      }
      break;
34188e6c:	e05a      	b.n	34188f24 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34188e6e:	f7fb fbc5 	bl	341845fc <LL_RCC_IC15_IsEnabled>
34188e72:	4603      	mov	r3, r0
34188e74:	2b00      	cmp	r3, #0
34188e76:	d057      	beq.n	34188f28 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34188e78:	f7fb fbe2 	bl	34184640 <LL_RCC_IC15_GetDivider>
34188e7c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34188e7e:	f7fb fbd1 	bl	34184624 <LL_RCC_IC15_GetSource>
34188e82:	4603      	mov	r3, r0
34188e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e88:	d029      	beq.n	34188ede <RCCEx_GetI3CCLKFreq+0x1d2>
34188e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e8e:	d82f      	bhi.n	34188ef0 <RCCEx_GetI3CCLKFreq+0x1e4>
34188e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e94:	d01a      	beq.n	34188ecc <RCCEx_GetI3CCLKFreq+0x1c0>
34188e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e9a:	d829      	bhi.n	34188ef0 <RCCEx_GetI3CCLKFreq+0x1e4>
34188e9c:	2b00      	cmp	r3, #0
34188e9e:	d003      	beq.n	34188ea8 <RCCEx_GetI3CCLKFreq+0x19c>
34188ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188ea4:	d009      	beq.n	34188eba <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188ea6:	e023      	b.n	34188ef0 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188ea8:	f7fe fcbc 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34188eac:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188eae:	68fa      	ldr	r2, [r7, #12]
34188eb0:	68bb      	ldr	r3, [r7, #8]
34188eb2:	fbb2 f3f3 	udiv	r3, r2, r3
34188eb6:	60fb      	str	r3, [r7, #12]
            break;
34188eb8:	e01b      	b.n	34188ef2 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188eba:	f7fe fcf9 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34188ebe:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188ec0:	68fa      	ldr	r2, [r7, #12]
34188ec2:	68bb      	ldr	r3, [r7, #8]
34188ec4:	fbb2 f3f3 	udiv	r3, r2, r3
34188ec8:	60fb      	str	r3, [r7, #12]
            break;
34188eca:	e012      	b.n	34188ef2 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188ecc:	f7fe fd36 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34188ed0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188ed2:	68fa      	ldr	r2, [r7, #12]
34188ed4:	68bb      	ldr	r3, [r7, #8]
34188ed6:	fbb2 f3f3 	udiv	r3, r2, r3
34188eda:	60fb      	str	r3, [r7, #12]
            break;
34188edc:	e009      	b.n	34188ef2 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188ede:	f7fe fd73 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34188ee2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34188ee4:	68fa      	ldr	r2, [r7, #12]
34188ee6:	68bb      	ldr	r3, [r7, #8]
34188ee8:	fbb2 f3f3 	udiv	r3, r2, r3
34188eec:	60fb      	str	r3, [r7, #12]
            break;
34188eee:	e000      	b.n	34188ef2 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34188ef0:	bf00      	nop
        }
      }
      break;
34188ef2:	e019      	b.n	34188f28 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34188ef4:	f7fa fa1e 	bl	34183334 <LL_RCC_HSI_IsReady>
34188ef8:	4603      	mov	r3, r0
34188efa:	2b00      	cmp	r3, #0
34188efc:	d016      	beq.n	34188f2c <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188efe:	f7fa fa2b 	bl	34183358 <LL_RCC_HSI_GetDivider>
34188f02:	4603      	mov	r3, r0
34188f04:	09db      	lsrs	r3, r3, #7
34188f06:	4a19      	ldr	r2, [pc, #100]	@ (34188f6c <RCCEx_GetI3CCLKFreq+0x260>)
34188f08:	fa22 f303 	lsr.w	r3, r2, r3
34188f0c:	60fb      	str	r3, [r7, #12]
      }
      break;
34188f0e:	e00d      	b.n	34188f2c <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34188f10:	f7fa fa30 	bl	34183374 <LL_RCC_MSI_IsReady>
34188f14:	4603      	mov	r3, r0
34188f16:	2b00      	cmp	r3, #0
34188f18:	d00a      	beq.n	34188f30 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34188f1a:	4b15      	ldr	r3, [pc, #84]	@ (34188f70 <RCCEx_GetI3CCLKFreq+0x264>)
34188f1c:	60fb      	str	r3, [r7, #12]
      }
      break;
34188f1e:	e007      	b.n	34188f30 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34188f20:	bf00      	nop
34188f22:	e006      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34188f24:	bf00      	nop
34188f26:	e004      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34188f28:	bf00      	nop
34188f2a:	e002      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34188f2c:	bf00      	nop
34188f2e:	e000      	b.n	34188f32 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34188f30:	bf00      	nop
  }

  return i3c_frequency;
34188f32:	68fb      	ldr	r3, [r7, #12]
}
34188f34:	4618      	mov	r0, r3
34188f36:	3710      	adds	r7, #16
34188f38:	46bd      	mov	sp, r7
34188f3a:	bd80      	pop	{r7, pc}
34188f3c:	0705140c 	.word	0x0705140c
34188f40:	0705100c 	.word	0x0705100c
34188f44:	0704140c 	.word	0x0704140c
34188f48:	0704100c 	.word	0x0704100c
34188f4c:	0703140c 	.word	0x0703140c
34188f50:	0703100c 	.word	0x0703100c
34188f54:	0702140c 	.word	0x0702140c
34188f58:	0702100c 	.word	0x0702100c
34188f5c:	0701140c 	.word	0x0701140c
34188f60:	0701100c 	.word	0x0701100c
34188f64:	0700100c 	.word	0x0700100c
34188f68:	0700140c 	.word	0x0700140c
34188f6c:	03d09000 	.word	0x03d09000
34188f70:	003d0900 	.word	0x003d0900

34188f74 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34188f74:	b590      	push	{r4, r7, lr}
34188f76:	b085      	sub	sp, #20
34188f78:	af00      	add	r7, sp, #0
34188f7a:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34188f7c:	2300      	movs	r3, #0
34188f7e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34188f80:	6878      	ldr	r0, [r7, #4]
34188f82:	f7fa fd35 	bl	341839f0 <LL_RCC_GetLPTIMClockSource>
34188f86:	4603      	mov	r3, r0
34188f88:	4aa1      	ldr	r2, [pc, #644]	@ (34189210 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34188f8a:	4293      	cmp	r3, r2
34188f8c:	f000 8185 	beq.w	3418929a <RCCEx_GetLPTIMCLKFreq+0x326>
34188f90:	4a9f      	ldr	r2, [pc, #636]	@ (34189210 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34188f92:	4293      	cmp	r3, r2
34188f94:	f200 818b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188f98:	4a9e      	ldr	r2, [pc, #632]	@ (34189214 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34188f9a:	4293      	cmp	r3, r2
34188f9c:	f000 817d 	beq.w	3418929a <RCCEx_GetLPTIMCLKFreq+0x326>
34188fa0:	4a9c      	ldr	r2, [pc, #624]	@ (34189214 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34188fa2:	4293      	cmp	r3, r2
34188fa4:	f200 8183 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188fa8:	4a9b      	ldr	r2, [pc, #620]	@ (34189218 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34188faa:	4293      	cmp	r3, r2
34188fac:	f000 8175 	beq.w	3418929a <RCCEx_GetLPTIMCLKFreq+0x326>
34188fb0:	4a99      	ldr	r2, [pc, #612]	@ (34189218 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34188fb2:	4293      	cmp	r3, r2
34188fb4:	f200 817b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188fb8:	4a98      	ldr	r2, [pc, #608]	@ (3418921c <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34188fba:	4293      	cmp	r3, r2
34188fbc:	f000 816d 	beq.w	3418929a <RCCEx_GetLPTIMCLKFreq+0x326>
34188fc0:	4a96      	ldr	r2, [pc, #600]	@ (3418921c <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34188fc2:	4293      	cmp	r3, r2
34188fc4:	f200 8173 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188fc8:	4a95      	ldr	r2, [pc, #596]	@ (34189220 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34188fca:	4293      	cmp	r3, r2
34188fcc:	f000 8165 	beq.w	3418929a <RCCEx_GetLPTIMCLKFreq+0x326>
34188fd0:	4a93      	ldr	r2, [pc, #588]	@ (34189220 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34188fd2:	4293      	cmp	r3, r2
34188fd4:	f200 816b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188fd8:	4a92      	ldr	r2, [pc, #584]	@ (34189224 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34188fda:	4293      	cmp	r3, r2
34188fdc:	f000 8154 	beq.w	34189288 <RCCEx_GetLPTIMCLKFreq+0x314>
34188fe0:	4a90      	ldr	r2, [pc, #576]	@ (34189224 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34188fe2:	4293      	cmp	r3, r2
34188fe4:	f200 8163 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188fe8:	4a8f      	ldr	r2, [pc, #572]	@ (34189228 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34188fea:	4293      	cmp	r3, r2
34188fec:	f000 814c 	beq.w	34189288 <RCCEx_GetLPTIMCLKFreq+0x314>
34188ff0:	4a8d      	ldr	r2, [pc, #564]	@ (34189228 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34188ff2:	4293      	cmp	r3, r2
34188ff4:	f200 815b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34188ff8:	4a8c      	ldr	r2, [pc, #560]	@ (3418922c <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34188ffa:	4293      	cmp	r3, r2
34188ffc:	f000 8144 	beq.w	34189288 <RCCEx_GetLPTIMCLKFreq+0x314>
34189000:	4a8a      	ldr	r2, [pc, #552]	@ (3418922c <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34189002:	4293      	cmp	r3, r2
34189004:	f200 8153 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189008:	4a89      	ldr	r2, [pc, #548]	@ (34189230 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418900a:	4293      	cmp	r3, r2
3418900c:	f000 813c 	beq.w	34189288 <RCCEx_GetLPTIMCLKFreq+0x314>
34189010:	4a87      	ldr	r2, [pc, #540]	@ (34189230 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34189012:	4293      	cmp	r3, r2
34189014:	f200 814b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189018:	4a86      	ldr	r2, [pc, #536]	@ (34189234 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418901a:	4293      	cmp	r3, r2
3418901c:	f000 8134 	beq.w	34189288 <RCCEx_GetLPTIMCLKFreq+0x314>
34189020:	4a84      	ldr	r2, [pc, #528]	@ (34189234 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34189022:	4293      	cmp	r3, r2
34189024:	f200 8143 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189028:	4a83      	ldr	r2, [pc, #524]	@ (34189238 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418902a:	4293      	cmp	r3, r2
3418902c:	f000 80e7 	beq.w	341891fe <RCCEx_GetLPTIMCLKFreq+0x28a>
34189030:	4a81      	ldr	r2, [pc, #516]	@ (34189238 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34189032:	4293      	cmp	r3, r2
34189034:	f200 813b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189038:	4a80      	ldr	r2, [pc, #512]	@ (3418923c <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418903a:	4293      	cmp	r3, r2
3418903c:	f000 80df 	beq.w	341891fe <RCCEx_GetLPTIMCLKFreq+0x28a>
34189040:	4a7e      	ldr	r2, [pc, #504]	@ (3418923c <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34189042:	4293      	cmp	r3, r2
34189044:	f200 8133 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189048:	4a7d      	ldr	r2, [pc, #500]	@ (34189240 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418904a:	4293      	cmp	r3, r2
3418904c:	f000 80d7 	beq.w	341891fe <RCCEx_GetLPTIMCLKFreq+0x28a>
34189050:	4a7b      	ldr	r2, [pc, #492]	@ (34189240 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34189052:	4293      	cmp	r3, r2
34189054:	f200 812b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189058:	4a7a      	ldr	r2, [pc, #488]	@ (34189244 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418905a:	4293      	cmp	r3, r2
3418905c:	f000 80cf 	beq.w	341891fe <RCCEx_GetLPTIMCLKFreq+0x28a>
34189060:	4a78      	ldr	r2, [pc, #480]	@ (34189244 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34189062:	4293      	cmp	r3, r2
34189064:	f200 8123 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189068:	4a77      	ldr	r2, [pc, #476]	@ (34189248 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418906a:	4293      	cmp	r3, r2
3418906c:	f000 80c7 	beq.w	341891fe <RCCEx_GetLPTIMCLKFreq+0x28a>
34189070:	4a75      	ldr	r2, [pc, #468]	@ (34189248 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34189072:	4293      	cmp	r3, r2
34189074:	f200 811b 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189078:	4a74      	ldr	r2, [pc, #464]	@ (3418924c <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418907a:	4293      	cmp	r3, r2
3418907c:	d07b      	beq.n	34189176 <RCCEx_GetLPTIMCLKFreq+0x202>
3418907e:	4a73      	ldr	r2, [pc, #460]	@ (3418924c <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34189080:	4293      	cmp	r3, r2
34189082:	f200 8114 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189086:	4a72      	ldr	r2, [pc, #456]	@ (34189250 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34189088:	4293      	cmp	r3, r2
3418908a:	d074      	beq.n	34189176 <RCCEx_GetLPTIMCLKFreq+0x202>
3418908c:	4a70      	ldr	r2, [pc, #448]	@ (34189250 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418908e:	4293      	cmp	r3, r2
34189090:	f200 810d 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189094:	4a6f      	ldr	r2, [pc, #444]	@ (34189254 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34189096:	4293      	cmp	r3, r2
34189098:	d06d      	beq.n	34189176 <RCCEx_GetLPTIMCLKFreq+0x202>
3418909a:	4a6e      	ldr	r2, [pc, #440]	@ (34189254 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418909c:	4293      	cmp	r3, r2
3418909e:	f200 8106 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890a2:	4a6d      	ldr	r2, [pc, #436]	@ (34189258 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
341890a4:	4293      	cmp	r3, r2
341890a6:	d066      	beq.n	34189176 <RCCEx_GetLPTIMCLKFreq+0x202>
341890a8:	4a6b      	ldr	r2, [pc, #428]	@ (34189258 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
341890aa:	4293      	cmp	r3, r2
341890ac:	f200 80ff 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890b0:	4a6a      	ldr	r2, [pc, #424]	@ (3418925c <RCCEx_GetLPTIMCLKFreq+0x2e8>)
341890b2:	4293      	cmp	r3, r2
341890b4:	d05f      	beq.n	34189176 <RCCEx_GetLPTIMCLKFreq+0x202>
341890b6:	4a69      	ldr	r2, [pc, #420]	@ (3418925c <RCCEx_GetLPTIMCLKFreq+0x2e8>)
341890b8:	4293      	cmp	r3, r2
341890ba:	f200 80f8 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890be:	4a68      	ldr	r2, [pc, #416]	@ (34189260 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
341890c0:	4293      	cmp	r3, r2
341890c2:	d053      	beq.n	3418916c <RCCEx_GetLPTIMCLKFreq+0x1f8>
341890c4:	4a66      	ldr	r2, [pc, #408]	@ (34189260 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
341890c6:	4293      	cmp	r3, r2
341890c8:	f200 80f1 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890cc:	4a65      	ldr	r2, [pc, #404]	@ (34189264 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
341890ce:	4293      	cmp	r3, r2
341890d0:	d04c      	beq.n	3418916c <RCCEx_GetLPTIMCLKFreq+0x1f8>
341890d2:	4a64      	ldr	r2, [pc, #400]	@ (34189264 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
341890d4:	4293      	cmp	r3, r2
341890d6:	f200 80ea 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890da:	4a63      	ldr	r2, [pc, #396]	@ (34189268 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
341890dc:	4293      	cmp	r3, r2
341890de:	d045      	beq.n	3418916c <RCCEx_GetLPTIMCLKFreq+0x1f8>
341890e0:	4a61      	ldr	r2, [pc, #388]	@ (34189268 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
341890e2:	4293      	cmp	r3, r2
341890e4:	f200 80e3 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890e8:	4a60      	ldr	r2, [pc, #384]	@ (3418926c <RCCEx_GetLPTIMCLKFreq+0x2f8>)
341890ea:	4293      	cmp	r3, r2
341890ec:	d03e      	beq.n	3418916c <RCCEx_GetLPTIMCLKFreq+0x1f8>
341890ee:	4a5f      	ldr	r2, [pc, #380]	@ (3418926c <RCCEx_GetLPTIMCLKFreq+0x2f8>)
341890f0:	4293      	cmp	r3, r2
341890f2:	f200 80dc 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
341890f6:	4a5e      	ldr	r2, [pc, #376]	@ (34189270 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
341890f8:	4293      	cmp	r3, r2
341890fa:	d037      	beq.n	3418916c <RCCEx_GetLPTIMCLKFreq+0x1f8>
341890fc:	4a5c      	ldr	r2, [pc, #368]	@ (34189270 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
341890fe:	4293      	cmp	r3, r2
34189100:	f200 80d5 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189104:	4a5b      	ldr	r2, [pc, #364]	@ (34189274 <RCCEx_GetLPTIMCLKFreq+0x300>)
34189106:	4293      	cmp	r3, r2
34189108:	d024      	beq.n	34189154 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418910a:	4a5a      	ldr	r2, [pc, #360]	@ (34189274 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418910c:	4293      	cmp	r3, r2
3418910e:	f200 80ce 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189112:	4a59      	ldr	r2, [pc, #356]	@ (34189278 <RCCEx_GetLPTIMCLKFreq+0x304>)
34189114:	4293      	cmp	r3, r2
34189116:	d01d      	beq.n	34189154 <RCCEx_GetLPTIMCLKFreq+0x1e0>
34189118:	4a57      	ldr	r2, [pc, #348]	@ (34189278 <RCCEx_GetLPTIMCLKFreq+0x304>)
3418911a:	4293      	cmp	r3, r2
3418911c:	f200 80c7 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
34189120:	4a56      	ldr	r2, [pc, #344]	@ (3418927c <RCCEx_GetLPTIMCLKFreq+0x308>)
34189122:	4293      	cmp	r3, r2
34189124:	d016      	beq.n	34189154 <RCCEx_GetLPTIMCLKFreq+0x1e0>
34189126:	4a55      	ldr	r2, [pc, #340]	@ (3418927c <RCCEx_GetLPTIMCLKFreq+0x308>)
34189128:	4293      	cmp	r3, r2
3418912a:	f200 80c0 	bhi.w	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
3418912e:	4a54      	ldr	r2, [pc, #336]	@ (34189280 <RCCEx_GetLPTIMCLKFreq+0x30c>)
34189130:	4293      	cmp	r3, r2
34189132:	d003      	beq.n	3418913c <RCCEx_GetLPTIMCLKFreq+0x1c8>
34189134:	4a53      	ldr	r2, [pc, #332]	@ (34189284 <RCCEx_GetLPTIMCLKFreq+0x310>)
34189136:	4293      	cmp	r3, r2
34189138:	d00c      	beq.n	34189154 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418913a:	e0b8      	b.n	341892ae <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418913c:	f7f9 fcfa 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189140:	4603      	mov	r3, r0
34189142:	4618      	mov	r0, r3
34189144:	f7fe fc86 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189148:	4603      	mov	r3, r0
3418914a:	4618      	mov	r0, r3
3418914c:	f7fe fc93 	bl	34187a76 <RCCEx_GetPCLK1Freq>
34189150:	60f8      	str	r0, [r7, #12]
      break;
34189152:	e0b3      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189154:	f7f9 fcee 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189158:	4603      	mov	r3, r0
3418915a:	4618      	mov	r0, r3
3418915c:	f7fe fc7a 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189160:	4603      	mov	r3, r0
34189162:	4618      	mov	r0, r3
34189164:	f7fe fca8 	bl	34187ab8 <RCCEx_GetPCLK4Freq>
34189168:	60f8      	str	r0, [r7, #12]
      break;
3418916a:	e0a7      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418916c:	2007      	movs	r0, #7
3418916e:	f7fe ff5d 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189172:	60f8      	str	r0, [r7, #12]
      break;
34189174:	e0a2      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34189176:	f7fb fa41 	bl	341845fc <LL_RCC_IC15_IsEnabled>
3418917a:	4603      	mov	r3, r0
3418917c:	2b00      	cmp	r3, #0
3418917e:	f000 8098 	beq.w	341892b2 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34189182:	f7fb fa5d 	bl	34184640 <LL_RCC_IC15_GetDivider>
34189186:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34189188:	f7fb fa4c 	bl	34184624 <LL_RCC_IC15_GetSource>
3418918c:	4603      	mov	r3, r0
3418918e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189192:	d029      	beq.n	341891e8 <RCCEx_GetLPTIMCLKFreq+0x274>
34189194:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189198:	d82f      	bhi.n	341891fa <RCCEx_GetLPTIMCLKFreq+0x286>
3418919a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418919e:	d01a      	beq.n	341891d6 <RCCEx_GetLPTIMCLKFreq+0x262>
341891a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341891a4:	d829      	bhi.n	341891fa <RCCEx_GetLPTIMCLKFreq+0x286>
341891a6:	2b00      	cmp	r3, #0
341891a8:	d003      	beq.n	341891b2 <RCCEx_GetLPTIMCLKFreq+0x23e>
341891aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341891ae:	d009      	beq.n	341891c4 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
341891b0:	e023      	b.n	341891fa <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341891b2:	f7fe fb37 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341891b6:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341891b8:	68fa      	ldr	r2, [r7, #12]
341891ba:	68bb      	ldr	r3, [r7, #8]
341891bc:	fbb2 f3f3 	udiv	r3, r2, r3
341891c0:	60fb      	str	r3, [r7, #12]
            break;
341891c2:	e01b      	b.n	341891fc <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341891c4:	f7fe fb74 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341891c8:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341891ca:	68fa      	ldr	r2, [r7, #12]
341891cc:	68bb      	ldr	r3, [r7, #8]
341891ce:	fbb2 f3f3 	udiv	r3, r2, r3
341891d2:	60fb      	str	r3, [r7, #12]
            break;
341891d4:	e012      	b.n	341891fc <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341891d6:	f7fe fbb1 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341891da:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341891dc:	68fa      	ldr	r2, [r7, #12]
341891de:	68bb      	ldr	r3, [r7, #8]
341891e0:	fbb2 f3f3 	udiv	r3, r2, r3
341891e4:	60fb      	str	r3, [r7, #12]
            break;
341891e6:	e009      	b.n	341891fc <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341891e8:	f7fe fbee 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341891ec:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341891ee:	68fa      	ldr	r2, [r7, #12]
341891f0:	68bb      	ldr	r3, [r7, #8]
341891f2:	fbb2 f3f3 	udiv	r3, r2, r3
341891f6:	60fb      	str	r3, [r7, #12]
            break;
341891f8:	e000      	b.n	341891fc <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
341891fa:	bf00      	nop
      break;
341891fc:	e059      	b.n	341892b2 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
341891fe:	f7fa f8d9 	bl	341833b4 <LL_RCC_LSE_IsReady>
34189202:	4603      	mov	r3, r0
34189204:	2b00      	cmp	r3, #0
34189206:	d056      	beq.n	341892b6 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
34189208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418920c:	60fb      	str	r3, [r7, #12]
      break;
3418920e:	e052      	b.n	341892b6 <RCCEx_GetLPTIMCLKFreq+0x342>
34189210:	0705182c 	.word	0x0705182c
34189214:	0705142c 	.word	0x0705142c
34189218:	0705102c 	.word	0x0705102c
3418921c:	07050c2c 	.word	0x07050c2c
34189220:	0705082c 	.word	0x0705082c
34189224:	0704182c 	.word	0x0704182c
34189228:	0704142c 	.word	0x0704142c
3418922c:	0704102c 	.word	0x0704102c
34189230:	07040c2c 	.word	0x07040c2c
34189234:	0704082c 	.word	0x0704082c
34189238:	0703182c 	.word	0x0703182c
3418923c:	0703142c 	.word	0x0703142c
34189240:	0703102c 	.word	0x0703102c
34189244:	07030c2c 	.word	0x07030c2c
34189248:	0703082c 	.word	0x0703082c
3418924c:	0702182c 	.word	0x0702182c
34189250:	0702142c 	.word	0x0702142c
34189254:	0702102c 	.word	0x0702102c
34189258:	07020c2c 	.word	0x07020c2c
3418925c:	0702082c 	.word	0x0702082c
34189260:	0701182c 	.word	0x0701182c
34189264:	0701142c 	.word	0x0701142c
34189268:	0701102c 	.word	0x0701102c
3418926c:	07010c2c 	.word	0x07010c2c
34189270:	0701082c 	.word	0x0701082c
34189274:	0700182c 	.word	0x0700182c
34189278:	0700142c 	.word	0x0700142c
3418927c:	0700102c 	.word	0x0700102c
34189280:	0700082c 	.word	0x0700082c
34189284:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34189288:	f7fa f8a6 	bl	341833d8 <LL_RCC_LSI_IsReady>
3418928c:	4603      	mov	r3, r0
3418928e:	2b00      	cmp	r3, #0
34189290:	d013      	beq.n	341892ba <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34189292:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34189296:	60fb      	str	r3, [r7, #12]
      break;
34189298:	e00f      	b.n	341892ba <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418929a:	f7f9 fc4b 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418929e:	4604      	mov	r4, r0
341892a0:	f7fa fcb0 	bl	34183c04 <LL_RCC_GetTIMPrescaler>
341892a4:	4603      	mov	r3, r0
341892a6:	fa24 f303 	lsr.w	r3, r4, r3
341892aa:	60fb      	str	r3, [r7, #12]
      break;
341892ac:	e006      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
341892ae:	bf00      	nop
341892b0:	e004      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
341892b2:	bf00      	nop
341892b4:	e002      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
341892b6:	bf00      	nop
341892b8:	e000      	b.n	341892bc <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
341892ba:	bf00      	nop
  }

  return lptim_frequency;
341892bc:	68fb      	ldr	r3, [r7, #12]
}
341892be:	4618      	mov	r0, r3
341892c0:	3714      	adds	r7, #20
341892c2:	46bd      	mov	sp, r7
341892c4:	bd90      	pop	{r4, r7, pc}
341892c6:	bf00      	nop

341892c8 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
341892c8:	b580      	push	{r7, lr}
341892ca:	b084      	sub	sp, #16
341892cc:	af00      	add	r7, sp, #0
341892ce:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
341892d0:	2300      	movs	r3, #0
341892d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
341892d4:	6878      	ldr	r0, [r7, #4]
341892d6:	f7fa fb97 	bl	34183a08 <LL_RCC_GetLPUARTClockSource>
341892da:	4603      	mov	r3, r0
341892dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
341892e0:	f000 80c0 	beq.w	34189464 <RCCEx_GetLPUARTCLKFreq+0x19c>
341892e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
341892e8:	f200 80db 	bhi.w	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
341892ec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
341892f0:	f000 80c6 	beq.w	34189480 <RCCEx_GetLPUARTCLKFreq+0x1b8>
341892f4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
341892f8:	f200 80d3 	bhi.w	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
341892fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34189300:	f000 80c6 	beq.w	34189490 <RCCEx_GetLPUARTCLKFreq+0x1c8>
34189304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34189308:	f200 80cb 	bhi.w	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418930c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189310:	d065      	beq.n	341893de <RCCEx_GetLPUARTCLKFreq+0x116>
34189312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189316:	f200 80c4 	bhi.w	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418931a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418931e:	d01a      	beq.n	34189356 <RCCEx_GetLPUARTCLKFreq+0x8e>
34189320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189324:	f200 80bd 	bhi.w	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
34189328:	2b00      	cmp	r3, #0
3418932a:	d003      	beq.n	34189334 <RCCEx_GetLPUARTCLKFreq+0x6c>
3418932c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34189330:	d00c      	beq.n	3418934c <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189332:	e0b6      	b.n	341894a2 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189334:	f7f9 fbfe 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189338:	4603      	mov	r3, r0
3418933a:	4618      	mov	r0, r3
3418933c:	f7fe fb8a 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189340:	4603      	mov	r3, r0
34189342:	4618      	mov	r0, r3
34189344:	f7fe fbb8 	bl	34187ab8 <RCCEx_GetPCLK4Freq>
34189348:	60f8      	str	r0, [r7, #12]
      break;
3418934a:	e0b5      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418934c:	2007      	movs	r0, #7
3418934e:	f7fe fe6d 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189352:	60f8      	str	r0, [r7, #12]
      break;
34189354:	e0b0      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34189356:	f7fb f811 	bl	3418437c <LL_RCC_IC9_IsEnabled>
3418935a:	4603      	mov	r3, r0
3418935c:	2b00      	cmp	r3, #0
3418935e:	f000 80a2 	beq.w	341894a6 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
34189362:	f7fb f82d 	bl	341843c0 <LL_RCC_IC9_GetDivider>
34189366:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34189368:	f7fb f81c 	bl	341843a4 <LL_RCC_IC9_GetSource>
3418936c:	4603      	mov	r3, r0
3418936e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189372:	d029      	beq.n	341893c8 <RCCEx_GetLPUARTCLKFreq+0x100>
34189374:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189378:	d82f      	bhi.n	341893da <RCCEx_GetLPUARTCLKFreq+0x112>
3418937a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418937e:	d01a      	beq.n	341893b6 <RCCEx_GetLPUARTCLKFreq+0xee>
34189380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189384:	d829      	bhi.n	341893da <RCCEx_GetLPUARTCLKFreq+0x112>
34189386:	2b00      	cmp	r3, #0
34189388:	d003      	beq.n	34189392 <RCCEx_GetLPUARTCLKFreq+0xca>
3418938a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418938e:	d009      	beq.n	341893a4 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34189390:	e023      	b.n	341893da <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189392:	f7fe fa47 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189396:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189398:	68fa      	ldr	r2, [r7, #12]
3418939a:	68bb      	ldr	r3, [r7, #8]
3418939c:	fbb2 f3f3 	udiv	r3, r2, r3
341893a0:	60fb      	str	r3, [r7, #12]
            break;
341893a2:	e01b      	b.n	341893dc <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341893a4:	f7fe fa84 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341893a8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341893aa:	68fa      	ldr	r2, [r7, #12]
341893ac:	68bb      	ldr	r3, [r7, #8]
341893ae:	fbb2 f3f3 	udiv	r3, r2, r3
341893b2:	60fb      	str	r3, [r7, #12]
            break;
341893b4:	e012      	b.n	341893dc <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341893b6:	f7fe fac1 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341893ba:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341893bc:	68fa      	ldr	r2, [r7, #12]
341893be:	68bb      	ldr	r3, [r7, #8]
341893c0:	fbb2 f3f3 	udiv	r3, r2, r3
341893c4:	60fb      	str	r3, [r7, #12]
            break;
341893c6:	e009      	b.n	341893dc <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341893c8:	f7fe fafe 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341893cc:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341893ce:	68fa      	ldr	r2, [r7, #12]
341893d0:	68bb      	ldr	r3, [r7, #8]
341893d2:	fbb2 f3f3 	udiv	r3, r2, r3
341893d6:	60fb      	str	r3, [r7, #12]
            break;
341893d8:	e000      	b.n	341893dc <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
341893da:	bf00      	nop
      break;
341893dc:	e063      	b.n	341894a6 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
341893de:	f7fb f8cd 	bl	3418457c <LL_RCC_IC14_IsEnabled>
341893e2:	4603      	mov	r3, r0
341893e4:	2b00      	cmp	r3, #0
341893e6:	d060      	beq.n	341894aa <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
341893e8:	f7fb f8ea 	bl	341845c0 <LL_RCC_IC14_GetDivider>
341893ec:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
341893ee:	f7fb f8d9 	bl	341845a4 <LL_RCC_IC14_GetSource>
341893f2:	4603      	mov	r3, r0
341893f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893f8:	d029      	beq.n	3418944e <RCCEx_GetLPUARTCLKFreq+0x186>
341893fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893fe:	d82f      	bhi.n	34189460 <RCCEx_GetLPUARTCLKFreq+0x198>
34189400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189404:	d01a      	beq.n	3418943c <RCCEx_GetLPUARTCLKFreq+0x174>
34189406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418940a:	d829      	bhi.n	34189460 <RCCEx_GetLPUARTCLKFreq+0x198>
3418940c:	2b00      	cmp	r3, #0
3418940e:	d003      	beq.n	34189418 <RCCEx_GetLPUARTCLKFreq+0x150>
34189410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189414:	d009      	beq.n	3418942a <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
34189416:	e023      	b.n	34189460 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189418:	f7fe fa04 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418941c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418941e:	68fa      	ldr	r2, [r7, #12]
34189420:	68bb      	ldr	r3, [r7, #8]
34189422:	fbb2 f3f3 	udiv	r3, r2, r3
34189426:	60fb      	str	r3, [r7, #12]
            break;
34189428:	e01b      	b.n	34189462 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418942a:	f7fe fa41 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418942e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189430:	68fa      	ldr	r2, [r7, #12]
34189432:	68bb      	ldr	r3, [r7, #8]
34189434:	fbb2 f3f3 	udiv	r3, r2, r3
34189438:	60fb      	str	r3, [r7, #12]
            break;
3418943a:	e012      	b.n	34189462 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418943c:	f7fe fa7e 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189440:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189442:	68fa      	ldr	r2, [r7, #12]
34189444:	68bb      	ldr	r3, [r7, #8]
34189446:	fbb2 f3f3 	udiv	r3, r2, r3
3418944a:	60fb      	str	r3, [r7, #12]
            break;
3418944c:	e009      	b.n	34189462 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418944e:	f7fe fabb 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189452:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189454:	68fa      	ldr	r2, [r7, #12]
34189456:	68bb      	ldr	r3, [r7, #8]
34189458:	fbb2 f3f3 	udiv	r3, r2, r3
3418945c:	60fb      	str	r3, [r7, #12]
            break;
3418945e:	e000      	b.n	34189462 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
34189460:	bf00      	nop
      break;
34189462:	e022      	b.n	341894aa <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34189464:	f7f9 ff66 	bl	34183334 <LL_RCC_HSI_IsReady>
34189468:	4603      	mov	r3, r0
3418946a:	2b00      	cmp	r3, #0
3418946c:	d01f      	beq.n	341894ae <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418946e:	f7f9 ff73 	bl	34183358 <LL_RCC_HSI_GetDivider>
34189472:	4603      	mov	r3, r0
34189474:	09db      	lsrs	r3, r3, #7
34189476:	4a13      	ldr	r2, [pc, #76]	@ (341894c4 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34189478:	fa22 f303 	lsr.w	r3, r2, r3
3418947c:	60fb      	str	r3, [r7, #12]
      break;
3418947e:	e016      	b.n	341894ae <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34189480:	f7f9 ff78 	bl	34183374 <LL_RCC_MSI_IsReady>
34189484:	4603      	mov	r3, r0
34189486:	2b00      	cmp	r3, #0
34189488:	d013      	beq.n	341894b2 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3418948a:	4b0f      	ldr	r3, [pc, #60]	@ (341894c8 <RCCEx_GetLPUARTCLKFreq+0x200>)
3418948c:	60fb      	str	r3, [r7, #12]
      break;
3418948e:	e010      	b.n	341894b2 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34189490:	f7f9 ff90 	bl	341833b4 <LL_RCC_LSE_IsReady>
34189494:	4603      	mov	r3, r0
34189496:	2b00      	cmp	r3, #0
34189498:	d00d      	beq.n	341894b6 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3418949a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418949e:	60fb      	str	r3, [r7, #12]
      break;
341894a0:	e009      	b.n	341894b6 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
341894a2:	bf00      	nop
341894a4:	e008      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
341894a6:	bf00      	nop
341894a8:	e006      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
341894aa:	bf00      	nop
341894ac:	e004      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
341894ae:	bf00      	nop
341894b0:	e002      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
341894b2:	bf00      	nop
341894b4:	e000      	b.n	341894b8 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
341894b6:	bf00      	nop
  }

  return lpuart_frequency;
341894b8:	68fb      	ldr	r3, [r7, #12]
}
341894ba:	4618      	mov	r0, r3
341894bc:	3710      	adds	r7, #16
341894be:	46bd      	mov	sp, r7
341894c0:	bd80      	pop	{r7, pc}
341894c2:	bf00      	nop
341894c4:	03d09000 	.word	0x03d09000
341894c8:	003d0900 	.word	0x003d0900

341894cc <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
341894cc:	b580      	push	{r7, lr}
341894ce:	b084      	sub	sp, #16
341894d0:	af00      	add	r7, sp, #0
341894d2:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
341894d4:	2300      	movs	r3, #0
341894d6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
341894d8:	6878      	ldr	r0, [r7, #4]
341894da:	f7fa faa7 	bl	34183a2c <LL_RCC_GetLTDCClockSource>
341894de:	4603      	mov	r3, r0
341894e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
341894e4:	d062      	beq.n	341895ac <RCCEx_GetLTDCCLKFreq+0xe0>
341894e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
341894ea:	d86d      	bhi.n	341895c8 <RCCEx_GetLTDCCLKFreq+0xfc>
341894ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341894f0:	d019      	beq.n	34189526 <RCCEx_GetLTDCCLKFreq+0x5a>
341894f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341894f6:	d867      	bhi.n	341895c8 <RCCEx_GetLTDCCLKFreq+0xfc>
341894f8:	2b00      	cmp	r3, #0
341894fa:	d003      	beq.n	34189504 <RCCEx_GetLTDCCLKFreq+0x38>
341894fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34189500:	d00c      	beq.n	3418951c <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189502:	e061      	b.n	341895c8 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189504:	f7f9 fb16 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189508:	4603      	mov	r3, r0
3418950a:	4618      	mov	r0, r3
3418950c:	f7fe faa2 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189510:	4603      	mov	r3, r0
34189512:	4618      	mov	r0, r3
34189514:	f7fe fae1 	bl	34187ada <RCCEx_GetPCLK5Freq>
34189518:	60f8      	str	r0, [r7, #12]
      break;
3418951a:	e05a      	b.n	341895d2 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418951c:	2007      	movs	r0, #7
3418951e:	f7fe fd85 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189522:	60f8      	str	r0, [r7, #12]
      break;
34189524:	e055      	b.n	341895d2 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
34189526:	f7fb f8a9 	bl	3418467c <LL_RCC_IC16_IsEnabled>
3418952a:	4603      	mov	r3, r0
3418952c:	2b00      	cmp	r3, #0
3418952e:	d04d      	beq.n	341895cc <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
34189530:	f7fb f8c6 	bl	341846c0 <LL_RCC_IC16_GetDivider>
34189534:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
34189536:	f7fb f8b5 	bl	341846a4 <LL_RCC_IC16_GetSource>
3418953a:	4603      	mov	r3, r0
3418953c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189540:	d029      	beq.n	34189596 <RCCEx_GetLTDCCLKFreq+0xca>
34189542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189546:	d82f      	bhi.n	341895a8 <RCCEx_GetLTDCCLKFreq+0xdc>
34189548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418954c:	d01a      	beq.n	34189584 <RCCEx_GetLTDCCLKFreq+0xb8>
3418954e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189552:	d829      	bhi.n	341895a8 <RCCEx_GetLTDCCLKFreq+0xdc>
34189554:	2b00      	cmp	r3, #0
34189556:	d003      	beq.n	34189560 <RCCEx_GetLTDCCLKFreq+0x94>
34189558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418955c:	d009      	beq.n	34189572 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3418955e:	e023      	b.n	341895a8 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189560:	f7fe f960 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189564:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189566:	68fa      	ldr	r2, [r7, #12]
34189568:	68bb      	ldr	r3, [r7, #8]
3418956a:	fbb2 f3f3 	udiv	r3, r2, r3
3418956e:	60fb      	str	r3, [r7, #12]
            break;
34189570:	e01b      	b.n	341895aa <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189572:	f7fe f99d 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189576:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189578:	68fa      	ldr	r2, [r7, #12]
3418957a:	68bb      	ldr	r3, [r7, #8]
3418957c:	fbb2 f3f3 	udiv	r3, r2, r3
34189580:	60fb      	str	r3, [r7, #12]
            break;
34189582:	e012      	b.n	341895aa <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189584:	f7fe f9da 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189588:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418958a:	68fa      	ldr	r2, [r7, #12]
3418958c:	68bb      	ldr	r3, [r7, #8]
3418958e:	fbb2 f3f3 	udiv	r3, r2, r3
34189592:	60fb      	str	r3, [r7, #12]
            break;
34189594:	e009      	b.n	341895aa <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189596:	f7fe fa17 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418959a:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418959c:	68fa      	ldr	r2, [r7, #12]
3418959e:	68bb      	ldr	r3, [r7, #8]
341895a0:	fbb2 f3f3 	udiv	r3, r2, r3
341895a4:	60fb      	str	r3, [r7, #12]
            break;
341895a6:	e000      	b.n	341895aa <RCCEx_GetLTDCCLKFreq+0xde>
            break;
341895a8:	bf00      	nop
      break;
341895aa:	e00f      	b.n	341895cc <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
341895ac:	f7f9 fec2 	bl	34183334 <LL_RCC_HSI_IsReady>
341895b0:	4603      	mov	r3, r0
341895b2:	2b00      	cmp	r3, #0
341895b4:	d00c      	beq.n	341895d0 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341895b6:	f7f9 fecf 	bl	34183358 <LL_RCC_HSI_GetDivider>
341895ba:	4603      	mov	r3, r0
341895bc:	09db      	lsrs	r3, r3, #7
341895be:	4a07      	ldr	r2, [pc, #28]	@ (341895dc <RCCEx_GetLTDCCLKFreq+0x110>)
341895c0:	fa22 f303 	lsr.w	r3, r2, r3
341895c4:	60fb      	str	r3, [r7, #12]
      break;
341895c6:	e003      	b.n	341895d0 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
341895c8:	bf00      	nop
341895ca:	e002      	b.n	341895d2 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
341895cc:	bf00      	nop
341895ce:	e000      	b.n	341895d2 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
341895d0:	bf00      	nop
  }

  return ltdc_frequency;
341895d2:	68fb      	ldr	r3, [r7, #12]
}
341895d4:	4618      	mov	r0, r3
341895d6:	3710      	adds	r7, #16
341895d8:	46bd      	mov	sp, r7
341895da:	bd80      	pop	{r7, pc}
341895dc:	03d09000 	.word	0x03d09000

341895e0 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
341895e0:	b590      	push	{r4, r7, lr}
341895e2:	b085      	sub	sp, #20
341895e4:	af00      	add	r7, sp, #0
341895e6:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
341895e8:	2300      	movs	r3, #0
341895ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
341895ec:	6878      	ldr	r0, [r7, #4]
341895ee:	f7fa fa2f 	bl	34183a50 <LL_RCC_GetMDFClockSource>
341895f2:	4603      	mov	r3, r0
341895f4:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
341895f8:	f000 80dd 	beq.w	341897b6 <RCCEx_GetMDFCLKFreq+0x1d6>
341895fc:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34189600:	f200 80e3 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189604:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189608:	f000 80d2 	beq.w	341897b0 <RCCEx_GetMDFCLKFreq+0x1d0>
3418960c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189610:	f200 80db 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189618:	f000 80b4 	beq.w	34189784 <RCCEx_GetMDFCLKFreq+0x1a4>
3418961c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189620:	f200 80d3 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189628:	f000 80ba 	beq.w	341897a0 <RCCEx_GetMDFCLKFreq+0x1c0>
3418962c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189630:	f200 80cb 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189634:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34189638:	d061      	beq.n	341896fe <RCCEx_GetMDFCLKFreq+0x11e>
3418963a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418963e:	f200 80c4 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189646:	d016      	beq.n	34189676 <RCCEx_GetMDFCLKFreq+0x96>
34189648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418964c:	f200 80bd 	bhi.w	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
34189650:	2b00      	cmp	r3, #0
34189652:	d003      	beq.n	3418965c <RCCEx_GetMDFCLKFreq+0x7c>
34189654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34189658:	d008      	beq.n	3418966c <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418965a:	e0b6      	b.n	341897ca <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418965c:	f7f9 fa6a 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189660:	4603      	mov	r3, r0
34189662:	4618      	mov	r0, r3
34189664:	f7fe f9f6 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189668:	60f8      	str	r0, [r7, #12]
      break;
3418966a:	e0b7      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418966c:	2007      	movs	r0, #7
3418966e:	f7fe fcdd 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189672:	60f8      	str	r0, [r7, #12]
      break;
34189674:	e0b2      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189676:	f7fa fe01 	bl	3418427c <LL_RCC_IC7_IsEnabled>
3418967a:	4603      	mov	r3, r0
3418967c:	2b00      	cmp	r3, #0
3418967e:	f000 80a6 	beq.w	341897ce <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34189682:	f7fa fe1d 	bl	341842c0 <LL_RCC_IC7_GetDivider>
34189686:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34189688:	f7fa fe0c 	bl	341842a4 <LL_RCC_IC7_GetSource>
3418968c:	4603      	mov	r3, r0
3418968e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189692:	d029      	beq.n	341896e8 <RCCEx_GetMDFCLKFreq+0x108>
34189694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189698:	d82f      	bhi.n	341896fa <RCCEx_GetMDFCLKFreq+0x11a>
3418969a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418969e:	d01a      	beq.n	341896d6 <RCCEx_GetMDFCLKFreq+0xf6>
341896a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341896a4:	d829      	bhi.n	341896fa <RCCEx_GetMDFCLKFreq+0x11a>
341896a6:	2b00      	cmp	r3, #0
341896a8:	d003      	beq.n	341896b2 <RCCEx_GetMDFCLKFreq+0xd2>
341896aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341896ae:	d009      	beq.n	341896c4 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
341896b0:	e023      	b.n	341896fa <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341896b2:	f7fe f8b7 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
341896b6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896b8:	68fa      	ldr	r2, [r7, #12]
341896ba:	68bb      	ldr	r3, [r7, #8]
341896bc:	fbb2 f3f3 	udiv	r3, r2, r3
341896c0:	60fb      	str	r3, [r7, #12]
            break;
341896c2:	e01b      	b.n	341896fc <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341896c4:	f7fe f8f4 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
341896c8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896ca:	68fa      	ldr	r2, [r7, #12]
341896cc:	68bb      	ldr	r3, [r7, #8]
341896ce:	fbb2 f3f3 	udiv	r3, r2, r3
341896d2:	60fb      	str	r3, [r7, #12]
            break;
341896d4:	e012      	b.n	341896fc <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341896d6:	f7fe f931 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
341896da:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896dc:	68fa      	ldr	r2, [r7, #12]
341896de:	68bb      	ldr	r3, [r7, #8]
341896e0:	fbb2 f3f3 	udiv	r3, r2, r3
341896e4:	60fb      	str	r3, [r7, #12]
            break;
341896e6:	e009      	b.n	341896fc <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341896e8:	f7fe f96e 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341896ec:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896ee:	68fa      	ldr	r2, [r7, #12]
341896f0:	68bb      	ldr	r3, [r7, #8]
341896f2:	fbb2 f3f3 	udiv	r3, r2, r3
341896f6:	60fb      	str	r3, [r7, #12]
            break;
341896f8:	e000      	b.n	341896fc <RCCEx_GetMDFCLKFreq+0x11c>
            break;
341896fa:	bf00      	nop
      break;
341896fc:	e067      	b.n	341897ce <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341896fe:	f7fa fdfd 	bl	341842fc <LL_RCC_IC8_IsEnabled>
34189702:	4603      	mov	r3, r0
34189704:	2b00      	cmp	r3, #0
34189706:	d064      	beq.n	341897d2 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34189708:	f7fa fe1a 	bl	34184340 <LL_RCC_IC8_GetDivider>
3418970c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418970e:	f7fa fe09 	bl	34184324 <LL_RCC_IC8_GetSource>
34189712:	4603      	mov	r3, r0
34189714:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189718:	d029      	beq.n	3418976e <RCCEx_GetMDFCLKFreq+0x18e>
3418971a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418971e:	d82f      	bhi.n	34189780 <RCCEx_GetMDFCLKFreq+0x1a0>
34189720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189724:	d01a      	beq.n	3418975c <RCCEx_GetMDFCLKFreq+0x17c>
34189726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418972a:	d829      	bhi.n	34189780 <RCCEx_GetMDFCLKFreq+0x1a0>
3418972c:	2b00      	cmp	r3, #0
3418972e:	d003      	beq.n	34189738 <RCCEx_GetMDFCLKFreq+0x158>
34189730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189734:	d009      	beq.n	3418974a <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34189736:	e023      	b.n	34189780 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189738:	f7fe f874 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418973c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418973e:	68fa      	ldr	r2, [r7, #12]
34189740:	68bb      	ldr	r3, [r7, #8]
34189742:	fbb2 f3f3 	udiv	r3, r2, r3
34189746:	60fb      	str	r3, [r7, #12]
            break;
34189748:	e01b      	b.n	34189782 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418974a:	f7fe f8b1 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418974e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189750:	68fa      	ldr	r2, [r7, #12]
34189752:	68bb      	ldr	r3, [r7, #8]
34189754:	fbb2 f3f3 	udiv	r3, r2, r3
34189758:	60fb      	str	r3, [r7, #12]
            break;
3418975a:	e012      	b.n	34189782 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418975c:	f7fe f8ee 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189760:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189762:	68fa      	ldr	r2, [r7, #12]
34189764:	68bb      	ldr	r3, [r7, #8]
34189766:	fbb2 f3f3 	udiv	r3, r2, r3
3418976a:	60fb      	str	r3, [r7, #12]
            break;
3418976c:	e009      	b.n	34189782 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418976e:	f7fe f92b 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189772:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189774:	68fa      	ldr	r2, [r7, #12]
34189776:	68bb      	ldr	r3, [r7, #8]
34189778:	fbb2 f3f3 	udiv	r3, r2, r3
3418977c:	60fb      	str	r3, [r7, #12]
            break;
3418977e:	e000      	b.n	34189782 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34189780:	bf00      	nop
      break;
34189782:	e026      	b.n	341897d2 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34189784:	f7f9 fdd6 	bl	34183334 <LL_RCC_HSI_IsReady>
34189788:	4603      	mov	r3, r0
3418978a:	2b00      	cmp	r3, #0
3418978c:	d023      	beq.n	341897d6 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418978e:	f7f9 fde3 	bl	34183358 <LL_RCC_HSI_GetDivider>
34189792:	4603      	mov	r3, r0
34189794:	09db      	lsrs	r3, r3, #7
34189796:	4a14      	ldr	r2, [pc, #80]	@ (341897e8 <RCCEx_GetMDFCLKFreq+0x208>)
34189798:	fa22 f303 	lsr.w	r3, r2, r3
3418979c:	60fb      	str	r3, [r7, #12]
      break;
3418979e:	e01a      	b.n	341897d6 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
341897a0:	f7f9 fde8 	bl	34183374 <LL_RCC_MSI_IsReady>
341897a4:	4603      	mov	r3, r0
341897a6:	2b00      	cmp	r3, #0
341897a8:	d017      	beq.n	341897da <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
341897aa:	4b10      	ldr	r3, [pc, #64]	@ (341897ec <RCCEx_GetMDFCLKFreq+0x20c>)
341897ac:	60fb      	str	r3, [r7, #12]
      break;
341897ae:	e014      	b.n	341897da <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
341897b0:	4b0f      	ldr	r3, [pc, #60]	@ (341897f0 <RCCEx_GetMDFCLKFreq+0x210>)
341897b2:	60fb      	str	r3, [r7, #12]
      break;
341897b4:	e012      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
341897b6:	f7f9 f9bd 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
341897ba:	4604      	mov	r4, r0
341897bc:	f7fa fa22 	bl	34183c04 <LL_RCC_GetTIMPrescaler>
341897c0:	4603      	mov	r3, r0
341897c2:	fa24 f303 	lsr.w	r3, r4, r3
341897c6:	60fb      	str	r3, [r7, #12]
      break;
341897c8:	e008      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
341897ca:	bf00      	nop
341897cc:	e006      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
341897ce:	bf00      	nop
341897d0:	e004      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
341897d2:	bf00      	nop
341897d4:	e002      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
341897d6:	bf00      	nop
341897d8:	e000      	b.n	341897dc <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
341897da:	bf00      	nop
  }

  return adf_frequency;
341897dc:	68fb      	ldr	r3, [r7, #12]
}
341897de:	4618      	mov	r0, r3
341897e0:	3714      	adds	r7, #20
341897e2:	46bd      	mov	sp, r7
341897e4:	bd90      	pop	{r4, r7, pc}
341897e6:	bf00      	nop
341897e8:	03d09000 	.word	0x03d09000
341897ec:	003d0900 	.word	0x003d0900
341897f0:	00bb8000 	.word	0x00bb8000

341897f4 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
341897f4:	b580      	push	{r7, lr}
341897f6:	b084      	sub	sp, #16
341897f8:	af00      	add	r7, sp, #0
341897fa:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
341897fc:	2300      	movs	r3, #0
341897fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34189800:	6878      	ldr	r0, [r7, #4]
34189802:	f7fa f937 	bl	34183a74 <LL_RCC_GetPSSIClockSource>
34189806:	4603      	mov	r3, r0
34189808:	2b30      	cmp	r3, #48	@ 0x30
3418980a:	d05a      	beq.n	341898c2 <RCCEx_GetPSSICLKFreq+0xce>
3418980c:	2b30      	cmp	r3, #48	@ 0x30
3418980e:	d866      	bhi.n	341898de <RCCEx_GetPSSICLKFreq+0xea>
34189810:	2b20      	cmp	r3, #32
34189812:	d013      	beq.n	3418983c <RCCEx_GetPSSICLKFreq+0x48>
34189814:	2b20      	cmp	r3, #32
34189816:	d862      	bhi.n	341898de <RCCEx_GetPSSICLKFreq+0xea>
34189818:	2b00      	cmp	r3, #0
3418981a:	d002      	beq.n	34189822 <RCCEx_GetPSSICLKFreq+0x2e>
3418981c:	2b10      	cmp	r3, #16
3418981e:	d008      	beq.n	34189832 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189820:	e05d      	b.n	341898de <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189822:	f7f9 f987 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189826:	4603      	mov	r3, r0
34189828:	4618      	mov	r0, r3
3418982a:	f7fe f913 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418982e:	60f8      	str	r0, [r7, #12]
      break;
34189830:	e05a      	b.n	341898e8 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189832:	2007      	movs	r0, #7
34189834:	f7fe fbfa 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189838:	60f8      	str	r0, [r7, #12]
      break;
3418983a:	e055      	b.n	341898e8 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
3418983c:	f7fb f81e 	bl	3418487c <LL_RCC_IC20_IsEnabled>
34189840:	4603      	mov	r3, r0
34189842:	2b00      	cmp	r3, #0
34189844:	d04d      	beq.n	341898e2 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34189846:	f7fb f83b 	bl	341848c0 <LL_RCC_IC20_GetDivider>
3418984a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
3418984c:	f7fb f82a 	bl	341848a4 <LL_RCC_IC20_GetSource>
34189850:	4603      	mov	r3, r0
34189852:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189856:	d029      	beq.n	341898ac <RCCEx_GetPSSICLKFreq+0xb8>
34189858:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418985c:	d82f      	bhi.n	341898be <RCCEx_GetPSSICLKFreq+0xca>
3418985e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189862:	d01a      	beq.n	3418989a <RCCEx_GetPSSICLKFreq+0xa6>
34189864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189868:	d829      	bhi.n	341898be <RCCEx_GetPSSICLKFreq+0xca>
3418986a:	2b00      	cmp	r3, #0
3418986c:	d003      	beq.n	34189876 <RCCEx_GetPSSICLKFreq+0x82>
3418986e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189872:	d009      	beq.n	34189888 <RCCEx_GetPSSICLKFreq+0x94>
            break;
34189874:	e023      	b.n	341898be <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189876:	f7fd ffd5 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418987a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418987c:	68fa      	ldr	r2, [r7, #12]
3418987e:	68bb      	ldr	r3, [r7, #8]
34189880:	fbb2 f3f3 	udiv	r3, r2, r3
34189884:	60fb      	str	r3, [r7, #12]
            break;
34189886:	e01b      	b.n	341898c0 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189888:	f7fe f812 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418988c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418988e:	68fa      	ldr	r2, [r7, #12]
34189890:	68bb      	ldr	r3, [r7, #8]
34189892:	fbb2 f3f3 	udiv	r3, r2, r3
34189896:	60fb      	str	r3, [r7, #12]
            break;
34189898:	e012      	b.n	341898c0 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418989a:	f7fe f84f 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418989e:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
341898a0:	68fa      	ldr	r2, [r7, #12]
341898a2:	68bb      	ldr	r3, [r7, #8]
341898a4:	fbb2 f3f3 	udiv	r3, r2, r3
341898a8:	60fb      	str	r3, [r7, #12]
            break;
341898aa:	e009      	b.n	341898c0 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341898ac:	f7fe f88c 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
341898b0:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
341898b2:	68fa      	ldr	r2, [r7, #12]
341898b4:	68bb      	ldr	r3, [r7, #8]
341898b6:	fbb2 f3f3 	udiv	r3, r2, r3
341898ba:	60fb      	str	r3, [r7, #12]
            break;
341898bc:	e000      	b.n	341898c0 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
341898be:	bf00      	nop
      break;
341898c0:	e00f      	b.n	341898e2 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
341898c2:	f7f9 fd37 	bl	34183334 <LL_RCC_HSI_IsReady>
341898c6:	4603      	mov	r3, r0
341898c8:	2b00      	cmp	r3, #0
341898ca:	d00c      	beq.n	341898e6 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341898cc:	f7f9 fd44 	bl	34183358 <LL_RCC_HSI_GetDivider>
341898d0:	4603      	mov	r3, r0
341898d2:	09db      	lsrs	r3, r3, #7
341898d4:	4a07      	ldr	r2, [pc, #28]	@ (341898f4 <RCCEx_GetPSSICLKFreq+0x100>)
341898d6:	fa22 f303 	lsr.w	r3, r2, r3
341898da:	60fb      	str	r3, [r7, #12]
      break;
341898dc:	e003      	b.n	341898e6 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
341898de:	bf00      	nop
341898e0:	e002      	b.n	341898e8 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
341898e2:	bf00      	nop
341898e4:	e000      	b.n	341898e8 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
341898e6:	bf00      	nop
  }

  return pssi_frequency;
341898e8:	68fb      	ldr	r3, [r7, #12]
}
341898ea:	4618      	mov	r0, r3
341898ec:	3710      	adds	r7, #16
341898ee:	46bd      	mov	sp, r7
341898f0:	bd80      	pop	{r7, pc}
341898f2:	bf00      	nop
341898f4:	03d09000 	.word	0x03d09000

341898f8 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
341898f8:	b580      	push	{r7, lr}
341898fa:	b082      	sub	sp, #8
341898fc:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
341898fe:	2300      	movs	r3, #0
34189900:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34189902:	f7fa f945 	bl	34183b90 <LL_RCC_GetRTCClockSource>
34189906:	4603      	mov	r3, r0
34189908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418990c:	d020      	beq.n	34189950 <RCCEx_GetRTCCLKFreq+0x58>
3418990e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189912:	d830      	bhi.n	34189976 <RCCEx_GetRTCCLKFreq+0x7e>
34189914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189918:	d011      	beq.n	3418993e <RCCEx_GetRTCCLKFreq+0x46>
3418991a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418991e:	d82a      	bhi.n	34189976 <RCCEx_GetRTCCLKFreq+0x7e>
34189920:	2b00      	cmp	r3, #0
34189922:	d02a      	beq.n	3418997a <RCCEx_GetRTCCLKFreq+0x82>
34189924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34189928:	d000      	beq.n	3418992c <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418992a:	e024      	b.n	34189976 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418992c:	f7f9 fd42 	bl	341833b4 <LL_RCC_LSE_IsReady>
34189930:	4603      	mov	r3, r0
34189932:	2b00      	cmp	r3, #0
34189934:	d023      	beq.n	3418997e <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34189936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418993a:	607b      	str	r3, [r7, #4]
      break;
3418993c:	e01f      	b.n	3418997e <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
3418993e:	f7f9 fd4b 	bl	341833d8 <LL_RCC_LSI_IsReady>
34189942:	4603      	mov	r3, r0
34189944:	2b00      	cmp	r3, #0
34189946:	d01c      	beq.n	34189982 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34189948:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418994c:	607b      	str	r3, [r7, #4]
      break;
3418994e:	e018      	b.n	34189982 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34189950:	f7f9 fcde 	bl	34183310 <LL_RCC_HSE_IsReady>
34189954:	4603      	mov	r3, r0
34189956:	2b00      	cmp	r3, #0
34189958:	d015      	beq.n	34189986 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3418995a:	4b0e      	ldr	r3, [pc, #56]	@ (34189994 <RCCEx_GetRTCCLKFreq+0x9c>)
3418995c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189960:	0b1b      	lsrs	r3, r3, #12
34189962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34189966:	3301      	adds	r3, #1
34189968:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
3418996a:	4a0b      	ldr	r2, [pc, #44]	@ (34189998 <RCCEx_GetRTCCLKFreq+0xa0>)
3418996c:	683b      	ldr	r3, [r7, #0]
3418996e:	fbb2 f3f3 	udiv	r3, r2, r3
34189972:	607b      	str	r3, [r7, #4]
      break;
34189974:	e007      	b.n	34189986 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34189976:	bf00      	nop
34189978:	e006      	b.n	34189988 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418997a:	bf00      	nop
3418997c:	e004      	b.n	34189988 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418997e:	bf00      	nop
34189980:	e002      	b.n	34189988 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189982:	bf00      	nop
34189984:	e000      	b.n	34189988 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189986:	bf00      	nop
  }

  return rtc_frequency;
34189988:	687b      	ldr	r3, [r7, #4]
}
3418998a:	4618      	mov	r0, r3
3418998c:	3708      	adds	r7, #8
3418998e:	46bd      	mov	sp, r7
34189990:	bd80      	pop	{r7, pc}
34189992:	bf00      	nop
34189994:	56028000 	.word	0x56028000
34189998:	02dc6c00 	.word	0x02dc6c00

3418999c <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
3418999c:	b580      	push	{r7, lr}
3418999e:	b084      	sub	sp, #16
341899a0:	af00      	add	r7, sp, #0
341899a2:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
341899a4:	2300      	movs	r3, #0
341899a6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
341899a8:	6878      	ldr	r0, [r7, #4]
341899aa:	f7fa f875 	bl	34183a98 <LL_RCC_GetSAIClockSource>
341899ae:	4603      	mov	r3, r0
341899b0:	4a9a      	ldr	r2, [pc, #616]	@ (34189c1c <RCCEx_GetSAICLKFreq+0x280>)
341899b2:	4293      	cmp	r3, r2
341899b4:	f000 811f 	beq.w	34189bf6 <RCCEx_GetSAICLKFreq+0x25a>
341899b8:	4a98      	ldr	r2, [pc, #608]	@ (34189c1c <RCCEx_GetSAICLKFreq+0x280>)
341899ba:	4293      	cmp	r3, r2
341899bc:	f200 8120 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
341899c0:	4a97      	ldr	r2, [pc, #604]	@ (34189c20 <RCCEx_GetSAICLKFreq+0x284>)
341899c2:	4293      	cmp	r3, r2
341899c4:	f000 8117 	beq.w	34189bf6 <RCCEx_GetSAICLKFreq+0x25a>
341899c8:	4a95      	ldr	r2, [pc, #596]	@ (34189c20 <RCCEx_GetSAICLKFreq+0x284>)
341899ca:	4293      	cmp	r3, r2
341899cc:	f200 8118 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
341899d0:	4a94      	ldr	r2, [pc, #592]	@ (34189c24 <RCCEx_GetSAICLKFreq+0x288>)
341899d2:	4293      	cmp	r3, r2
341899d4:	f000 810c 	beq.w	34189bf0 <RCCEx_GetSAICLKFreq+0x254>
341899d8:	4a92      	ldr	r2, [pc, #584]	@ (34189c24 <RCCEx_GetSAICLKFreq+0x288>)
341899da:	4293      	cmp	r3, r2
341899dc:	f200 8110 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
341899e0:	4a91      	ldr	r2, [pc, #580]	@ (34189c28 <RCCEx_GetSAICLKFreq+0x28c>)
341899e2:	4293      	cmp	r3, r2
341899e4:	f000 8104 	beq.w	34189bf0 <RCCEx_GetSAICLKFreq+0x254>
341899e8:	4a8f      	ldr	r2, [pc, #572]	@ (34189c28 <RCCEx_GetSAICLKFreq+0x28c>)
341899ea:	4293      	cmp	r3, r2
341899ec:	f200 8108 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
341899f0:	4a8e      	ldr	r2, [pc, #568]	@ (34189c2c <RCCEx_GetSAICLKFreq+0x290>)
341899f2:	4293      	cmp	r3, r2
341899f4:	f000 80e6 	beq.w	34189bc4 <RCCEx_GetSAICLKFreq+0x228>
341899f8:	4a8c      	ldr	r2, [pc, #560]	@ (34189c2c <RCCEx_GetSAICLKFreq+0x290>)
341899fa:	4293      	cmp	r3, r2
341899fc:	f200 8100 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a00:	4a8b      	ldr	r2, [pc, #556]	@ (34189c30 <RCCEx_GetSAICLKFreq+0x294>)
34189a02:	4293      	cmp	r3, r2
34189a04:	f000 80de 	beq.w	34189bc4 <RCCEx_GetSAICLKFreq+0x228>
34189a08:	4a89      	ldr	r2, [pc, #548]	@ (34189c30 <RCCEx_GetSAICLKFreq+0x294>)
34189a0a:	4293      	cmp	r3, r2
34189a0c:	f200 80f8 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a10:	4a88      	ldr	r2, [pc, #544]	@ (34189c34 <RCCEx_GetSAICLKFreq+0x298>)
34189a12:	4293      	cmp	r3, r2
34189a14:	f000 80e4 	beq.w	34189be0 <RCCEx_GetSAICLKFreq+0x244>
34189a18:	4a86      	ldr	r2, [pc, #536]	@ (34189c34 <RCCEx_GetSAICLKFreq+0x298>)
34189a1a:	4293      	cmp	r3, r2
34189a1c:	f200 80f0 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a20:	4a85      	ldr	r2, [pc, #532]	@ (34189c38 <RCCEx_GetSAICLKFreq+0x29c>)
34189a22:	4293      	cmp	r3, r2
34189a24:	f000 80dc 	beq.w	34189be0 <RCCEx_GetSAICLKFreq+0x244>
34189a28:	4a83      	ldr	r2, [pc, #524]	@ (34189c38 <RCCEx_GetSAICLKFreq+0x29c>)
34189a2a:	4293      	cmp	r3, r2
34189a2c:	f200 80e8 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a30:	4a82      	ldr	r2, [pc, #520]	@ (34189c3c <RCCEx_GetSAICLKFreq+0x2a0>)
34189a32:	4293      	cmp	r3, r2
34189a34:	f000 8083 	beq.w	34189b3e <RCCEx_GetSAICLKFreq+0x1a2>
34189a38:	4a80      	ldr	r2, [pc, #512]	@ (34189c3c <RCCEx_GetSAICLKFreq+0x2a0>)
34189a3a:	4293      	cmp	r3, r2
34189a3c:	f200 80e0 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a40:	4a7f      	ldr	r2, [pc, #508]	@ (34189c40 <RCCEx_GetSAICLKFreq+0x2a4>)
34189a42:	4293      	cmp	r3, r2
34189a44:	d07b      	beq.n	34189b3e <RCCEx_GetSAICLKFreq+0x1a2>
34189a46:	4a7e      	ldr	r2, [pc, #504]	@ (34189c40 <RCCEx_GetSAICLKFreq+0x2a4>)
34189a48:	4293      	cmp	r3, r2
34189a4a:	f200 80d9 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a4e:	4a7d      	ldr	r2, [pc, #500]	@ (34189c44 <RCCEx_GetSAICLKFreq+0x2a8>)
34189a50:	4293      	cmp	r3, r2
34189a52:	d030      	beq.n	34189ab6 <RCCEx_GetSAICLKFreq+0x11a>
34189a54:	4a7b      	ldr	r2, [pc, #492]	@ (34189c44 <RCCEx_GetSAICLKFreq+0x2a8>)
34189a56:	4293      	cmp	r3, r2
34189a58:	f200 80d2 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a5c:	4a7a      	ldr	r2, [pc, #488]	@ (34189c48 <RCCEx_GetSAICLKFreq+0x2ac>)
34189a5e:	4293      	cmp	r3, r2
34189a60:	d029      	beq.n	34189ab6 <RCCEx_GetSAICLKFreq+0x11a>
34189a62:	4a79      	ldr	r2, [pc, #484]	@ (34189c48 <RCCEx_GetSAICLKFreq+0x2ac>)
34189a64:	4293      	cmp	r3, r2
34189a66:	f200 80cb 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a6a:	4a78      	ldr	r2, [pc, #480]	@ (34189c4c <RCCEx_GetSAICLKFreq+0x2b0>)
34189a6c:	4293      	cmp	r3, r2
34189a6e:	d01d      	beq.n	34189aac <RCCEx_GetSAICLKFreq+0x110>
34189a70:	4a76      	ldr	r2, [pc, #472]	@ (34189c4c <RCCEx_GetSAICLKFreq+0x2b0>)
34189a72:	4293      	cmp	r3, r2
34189a74:	f200 80c4 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a78:	4a75      	ldr	r2, [pc, #468]	@ (34189c50 <RCCEx_GetSAICLKFreq+0x2b4>)
34189a7a:	4293      	cmp	r3, r2
34189a7c:	d016      	beq.n	34189aac <RCCEx_GetSAICLKFreq+0x110>
34189a7e:	4a74      	ldr	r2, [pc, #464]	@ (34189c50 <RCCEx_GetSAICLKFreq+0x2b4>)
34189a80:	4293      	cmp	r3, r2
34189a82:	f200 80bd 	bhi.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
34189a86:	4a73      	ldr	r2, [pc, #460]	@ (34189c54 <RCCEx_GetSAICLKFreq+0x2b8>)
34189a88:	4293      	cmp	r3, r2
34189a8a:	d003      	beq.n	34189a94 <RCCEx_GetSAICLKFreq+0xf8>
34189a8c:	4a72      	ldr	r2, [pc, #456]	@ (34189c58 <RCCEx_GetSAICLKFreq+0x2bc>)
34189a8e:	4293      	cmp	r3, r2
34189a90:	f040 80b6 	bne.w	34189c00 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189a94:	f7f9 f84e 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189a98:	4603      	mov	r3, r0
34189a9a:	4618      	mov	r0, r3
34189a9c:	f7fd ffda 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189aa0:	4603      	mov	r3, r0
34189aa2:	4618      	mov	r0, r3
34189aa4:	f7fd fff7 	bl	34187a96 <RCCEx_GetPCLK2Freq>
34189aa8:	60f8      	str	r0, [r7, #12]
      break;
34189aaa:	e0b2      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189aac:	2007      	movs	r0, #7
34189aae:	f7fe fabd 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189ab2:	60f8      	str	r0, [r7, #12]
      break;
34189ab4:	e0ad      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189ab6:	f7fa fbe1 	bl	3418427c <LL_RCC_IC7_IsEnabled>
34189aba:	4603      	mov	r3, r0
34189abc:	2b00      	cmp	r3, #0
34189abe:	f000 80a1 	beq.w	34189c04 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34189ac2:	f7fa fbfd 	bl	341842c0 <LL_RCC_IC7_GetDivider>
34189ac6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34189ac8:	f7fa fbec 	bl	341842a4 <LL_RCC_IC7_GetSource>
34189acc:	4603      	mov	r3, r0
34189ace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ad2:	d029      	beq.n	34189b28 <RCCEx_GetSAICLKFreq+0x18c>
34189ad4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ad8:	d82f      	bhi.n	34189b3a <RCCEx_GetSAICLKFreq+0x19e>
34189ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ade:	d01a      	beq.n	34189b16 <RCCEx_GetSAICLKFreq+0x17a>
34189ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ae4:	d829      	bhi.n	34189b3a <RCCEx_GetSAICLKFreq+0x19e>
34189ae6:	2b00      	cmp	r3, #0
34189ae8:	d003      	beq.n	34189af2 <RCCEx_GetSAICLKFreq+0x156>
34189aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189aee:	d009      	beq.n	34189b04 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189af0:	e023      	b.n	34189b3a <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189af2:	f7fd fe97 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189af6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189af8:	68fa      	ldr	r2, [r7, #12]
34189afa:	68bb      	ldr	r3, [r7, #8]
34189afc:	fbb2 f3f3 	udiv	r3, r2, r3
34189b00:	60fb      	str	r3, [r7, #12]
            break;
34189b02:	e01b      	b.n	34189b3c <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189b04:	f7fd fed4 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189b08:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189b0a:	68fa      	ldr	r2, [r7, #12]
34189b0c:	68bb      	ldr	r3, [r7, #8]
34189b0e:	fbb2 f3f3 	udiv	r3, r2, r3
34189b12:	60fb      	str	r3, [r7, #12]
            break;
34189b14:	e012      	b.n	34189b3c <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189b16:	f7fd ff11 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189b1a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189b1c:	68fa      	ldr	r2, [r7, #12]
34189b1e:	68bb      	ldr	r3, [r7, #8]
34189b20:	fbb2 f3f3 	udiv	r3, r2, r3
34189b24:	60fb      	str	r3, [r7, #12]
            break;
34189b26:	e009      	b.n	34189b3c <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189b28:	f7fd ff4e 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189b2c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189b2e:	68fa      	ldr	r2, [r7, #12]
34189b30:	68bb      	ldr	r3, [r7, #8]
34189b32:	fbb2 f3f3 	udiv	r3, r2, r3
34189b36:	60fb      	str	r3, [r7, #12]
            break;
34189b38:	e000      	b.n	34189b3c <RCCEx_GetSAICLKFreq+0x1a0>
            break;
34189b3a:	bf00      	nop
        }
      }
      break;
34189b3c:	e062      	b.n	34189c04 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34189b3e:	f7fa fbdd 	bl	341842fc <LL_RCC_IC8_IsEnabled>
34189b42:	4603      	mov	r3, r0
34189b44:	2b00      	cmp	r3, #0
34189b46:	d05f      	beq.n	34189c08 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34189b48:	f7fa fbfa 	bl	34184340 <LL_RCC_IC8_GetDivider>
34189b4c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34189b4e:	f7fa fbe9 	bl	34184324 <LL_RCC_IC8_GetSource>
34189b52:	4603      	mov	r3, r0
34189b54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b58:	d029      	beq.n	34189bae <RCCEx_GetSAICLKFreq+0x212>
34189b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b5e:	d82f      	bhi.n	34189bc0 <RCCEx_GetSAICLKFreq+0x224>
34189b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b64:	d01a      	beq.n	34189b9c <RCCEx_GetSAICLKFreq+0x200>
34189b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b6a:	d829      	bhi.n	34189bc0 <RCCEx_GetSAICLKFreq+0x224>
34189b6c:	2b00      	cmp	r3, #0
34189b6e:	d003      	beq.n	34189b78 <RCCEx_GetSAICLKFreq+0x1dc>
34189b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189b74:	d009      	beq.n	34189b8a <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189b76:	e023      	b.n	34189bc0 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189b78:	f7fd fe54 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189b7c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189b7e:	68fa      	ldr	r2, [r7, #12]
34189b80:	68bb      	ldr	r3, [r7, #8]
34189b82:	fbb2 f3f3 	udiv	r3, r2, r3
34189b86:	60fb      	str	r3, [r7, #12]
            break;
34189b88:	e01b      	b.n	34189bc2 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189b8a:	f7fd fe91 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189b8e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189b90:	68fa      	ldr	r2, [r7, #12]
34189b92:	68bb      	ldr	r3, [r7, #8]
34189b94:	fbb2 f3f3 	udiv	r3, r2, r3
34189b98:	60fb      	str	r3, [r7, #12]
            break;
34189b9a:	e012      	b.n	34189bc2 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189b9c:	f7fd fece 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189ba0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189ba2:	68fa      	ldr	r2, [r7, #12]
34189ba4:	68bb      	ldr	r3, [r7, #8]
34189ba6:	fbb2 f3f3 	udiv	r3, r2, r3
34189baa:	60fb      	str	r3, [r7, #12]
            break;
34189bac:	e009      	b.n	34189bc2 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189bae:	f7fd ff0b 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189bb2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34189bb4:	68fa      	ldr	r2, [r7, #12]
34189bb6:	68bb      	ldr	r3, [r7, #8]
34189bb8:	fbb2 f3f3 	udiv	r3, r2, r3
34189bbc:	60fb      	str	r3, [r7, #12]
            break;
34189bbe:	e000      	b.n	34189bc2 <RCCEx_GetSAICLKFreq+0x226>
            break;
34189bc0:	bf00      	nop
        }
      }
      break;
34189bc2:	e021      	b.n	34189c08 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189bc4:	f7f9 fbb6 	bl	34183334 <LL_RCC_HSI_IsReady>
34189bc8:	4603      	mov	r3, r0
34189bca:	2b00      	cmp	r3, #0
34189bcc:	d01e      	beq.n	34189c0c <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189bce:	f7f9 fbc3 	bl	34183358 <LL_RCC_HSI_GetDivider>
34189bd2:	4603      	mov	r3, r0
34189bd4:	09db      	lsrs	r3, r3, #7
34189bd6:	4a21      	ldr	r2, [pc, #132]	@ (34189c5c <RCCEx_GetSAICLKFreq+0x2c0>)
34189bd8:	fa22 f303 	lsr.w	r3, r2, r3
34189bdc:	60fb      	str	r3, [r7, #12]
      }
      break;
34189bde:	e015      	b.n	34189c0c <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189be0:	f7f9 fbc8 	bl	34183374 <LL_RCC_MSI_IsReady>
34189be4:	4603      	mov	r3, r0
34189be6:	2b00      	cmp	r3, #0
34189be8:	d012      	beq.n	34189c10 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34189bea:	4b1d      	ldr	r3, [pc, #116]	@ (34189c60 <RCCEx_GetSAICLKFreq+0x2c4>)
34189bec:	60fb      	str	r3, [r7, #12]
      }
      break;
34189bee:	e00f      	b.n	34189c10 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34189bf0:	4b1c      	ldr	r3, [pc, #112]	@ (34189c64 <RCCEx_GetSAICLKFreq+0x2c8>)
34189bf2:	60fb      	str	r3, [r7, #12]
      break;
34189bf4:	e00d      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34189bf6:	2007      	movs	r0, #7
34189bf8:	f000 f920 	bl	34189e3c <RCCEx_GetSPDIFRXCLKFreq>
34189bfc:	60f8      	str	r0, [r7, #12]
      break;
34189bfe:	e008      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
34189c00:	bf00      	nop
34189c02:	e006      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>
      break;
34189c04:	bf00      	nop
34189c06:	e004      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>
      break;
34189c08:	bf00      	nop
34189c0a:	e002      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>
      break;
34189c0c:	bf00      	nop
34189c0e:	e000      	b.n	34189c12 <RCCEx_GetSAICLKFreq+0x276>
      break;
34189c10:	bf00      	nop
  }

  return sai_frequency;
34189c12:	68fb      	ldr	r3, [r7, #12]
}
34189c14:	4618      	mov	r0, r3
34189c16:	3710      	adds	r7, #16
34189c18:	46bd      	mov	sp, r7
34189c1a:	bd80      	pop	{r7, pc}
34189c1c:	07071818 	.word	0x07071818
34189c20:	07071418 	.word	0x07071418
34189c24:	07061818 	.word	0x07061818
34189c28:	07061418 	.word	0x07061418
34189c2c:	07051818 	.word	0x07051818
34189c30:	07051418 	.word	0x07051418
34189c34:	07041818 	.word	0x07041818
34189c38:	07041418 	.word	0x07041418
34189c3c:	07031818 	.word	0x07031818
34189c40:	07031418 	.word	0x07031418
34189c44:	07021818 	.word	0x07021818
34189c48:	07021418 	.word	0x07021418
34189c4c:	07011818 	.word	0x07011818
34189c50:	07011418 	.word	0x07011418
34189c54:	07001418 	.word	0x07001418
34189c58:	07001818 	.word	0x07001818
34189c5c:	03d09000 	.word	0x03d09000
34189c60:	003d0900 	.word	0x003d0900
34189c64:	00bb8000 	.word	0x00bb8000

34189c68 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34189c68:	b580      	push	{r7, lr}
34189c6a:	b084      	sub	sp, #16
34189c6c:	af00      	add	r7, sp, #0
34189c6e:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189c70:	2300      	movs	r3, #0
34189c72:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34189c74:	6878      	ldr	r0, [r7, #4]
34189c76:	f7f9 ff1b 	bl	34183ab0 <LL_RCC_GetSDMMCClockSource>
34189c7a:	4603      	mov	r3, r0
34189c7c:	4a67      	ldr	r2, [pc, #412]	@ (34189e1c <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34189c7e:	4293      	cmp	r3, r2
34189c80:	d07e      	beq.n	34189d80 <RCCEx_GetSDMMCCLKFreq+0x118>
34189c82:	4a66      	ldr	r2, [pc, #408]	@ (34189e1c <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34189c84:	4293      	cmp	r3, r2
34189c86:	f200 80be 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189c8a:	4a65      	ldr	r2, [pc, #404]	@ (34189e20 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34189c8c:	4293      	cmp	r3, r2
34189c8e:	d077      	beq.n	34189d80 <RCCEx_GetSDMMCCLKFreq+0x118>
34189c90:	4a63      	ldr	r2, [pc, #396]	@ (34189e20 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34189c92:	4293      	cmp	r3, r2
34189c94:	f200 80b7 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189c98:	4a62      	ldr	r2, [pc, #392]	@ (34189e24 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34189c9a:	4293      	cmp	r3, r2
34189c9c:	d02c      	beq.n	34189cf8 <RCCEx_GetSDMMCCLKFreq+0x90>
34189c9e:	4a61      	ldr	r2, [pc, #388]	@ (34189e24 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34189ca0:	4293      	cmp	r3, r2
34189ca2:	f200 80b0 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189ca6:	4a60      	ldr	r2, [pc, #384]	@ (34189e28 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34189ca8:	4293      	cmp	r3, r2
34189caa:	d025      	beq.n	34189cf8 <RCCEx_GetSDMMCCLKFreq+0x90>
34189cac:	4a5e      	ldr	r2, [pc, #376]	@ (34189e28 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34189cae:	4293      	cmp	r3, r2
34189cb0:	f200 80a9 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189cb4:	4a5d      	ldr	r2, [pc, #372]	@ (34189e2c <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34189cb6:	4293      	cmp	r3, r2
34189cb8:	d019      	beq.n	34189cee <RCCEx_GetSDMMCCLKFreq+0x86>
34189cba:	4a5c      	ldr	r2, [pc, #368]	@ (34189e2c <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34189cbc:	4293      	cmp	r3, r2
34189cbe:	f200 80a2 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189cc2:	4a5b      	ldr	r2, [pc, #364]	@ (34189e30 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34189cc4:	4293      	cmp	r3, r2
34189cc6:	d012      	beq.n	34189cee <RCCEx_GetSDMMCCLKFreq+0x86>
34189cc8:	4a59      	ldr	r2, [pc, #356]	@ (34189e30 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34189cca:	4293      	cmp	r3, r2
34189ccc:	f200 809b 	bhi.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
34189cd0:	4a58      	ldr	r2, [pc, #352]	@ (34189e34 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
34189cd2:	4293      	cmp	r3, r2
34189cd4:	d003      	beq.n	34189cde <RCCEx_GetSDMMCCLKFreq+0x76>
34189cd6:	4a58      	ldr	r2, [pc, #352]	@ (34189e38 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34189cd8:	4293      	cmp	r3, r2
34189cda:	f040 8094 	bne.w	34189e06 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189cde:	f7f8 ff29 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189ce2:	4603      	mov	r3, r0
34189ce4:	4618      	mov	r0, r3
34189ce6:	f7fd feb5 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189cea:	60f8      	str	r0, [r7, #12]
      break;
34189cec:	e090      	b.n	34189e10 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189cee:	2007      	movs	r0, #7
34189cf0:	f7fe f99c 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189cf4:	60f8      	str	r0, [r7, #12]
      break;
34189cf6:	e08b      	b.n	34189e10 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34189cf8:	f7fa fa40 	bl	3418417c <LL_RCC_IC4_IsEnabled>
34189cfc:	4603      	mov	r3, r0
34189cfe:	2b00      	cmp	r3, #0
34189d00:	f000 8083 	beq.w	34189e0a <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34189d04:	f7fa fa5c 	bl	341841c0 <LL_RCC_IC4_GetDivider>
34189d08:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34189d0a:	f7fa fa4b 	bl	341841a4 <LL_RCC_IC4_GetSource>
34189d0e:	4603      	mov	r3, r0
34189d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189d14:	d029      	beq.n	34189d6a <RCCEx_GetSDMMCCLKFreq+0x102>
34189d16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189d1a:	d82f      	bhi.n	34189d7c <RCCEx_GetSDMMCCLKFreq+0x114>
34189d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189d20:	d01a      	beq.n	34189d58 <RCCEx_GetSDMMCCLKFreq+0xf0>
34189d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189d26:	d829      	bhi.n	34189d7c <RCCEx_GetSDMMCCLKFreq+0x114>
34189d28:	2b00      	cmp	r3, #0
34189d2a:	d003      	beq.n	34189d34 <RCCEx_GetSDMMCCLKFreq+0xcc>
34189d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189d30:	d009      	beq.n	34189d46 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189d32:	e023      	b.n	34189d7c <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189d34:	f7fd fd76 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189d38:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189d3a:	68fa      	ldr	r2, [r7, #12]
34189d3c:	68bb      	ldr	r3, [r7, #8]
34189d3e:	fbb2 f3f3 	udiv	r3, r2, r3
34189d42:	60fb      	str	r3, [r7, #12]
            break;
34189d44:	e01b      	b.n	34189d7e <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189d46:	f7fd fdb3 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189d4a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189d4c:	68fa      	ldr	r2, [r7, #12]
34189d4e:	68bb      	ldr	r3, [r7, #8]
34189d50:	fbb2 f3f3 	udiv	r3, r2, r3
34189d54:	60fb      	str	r3, [r7, #12]
            break;
34189d56:	e012      	b.n	34189d7e <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189d58:	f7fd fdf0 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189d5c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189d5e:	68fa      	ldr	r2, [r7, #12]
34189d60:	68bb      	ldr	r3, [r7, #8]
34189d62:	fbb2 f3f3 	udiv	r3, r2, r3
34189d66:	60fb      	str	r3, [r7, #12]
            break;
34189d68:	e009      	b.n	34189d7e <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189d6a:	f7fd fe2d 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189d6e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189d70:	68fa      	ldr	r2, [r7, #12]
34189d72:	68bb      	ldr	r3, [r7, #8]
34189d74:	fbb2 f3f3 	udiv	r3, r2, r3
34189d78:	60fb      	str	r3, [r7, #12]
            break;
34189d7a:	e000      	b.n	34189d7e <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34189d7c:	bf00      	nop
        }
      }
      break;
34189d7e:	e044      	b.n	34189e0a <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34189d80:	f7fa fa3c 	bl	341841fc <LL_RCC_IC5_IsEnabled>
34189d84:	4603      	mov	r3, r0
34189d86:	2b00      	cmp	r3, #0
34189d88:	d041      	beq.n	34189e0e <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34189d8a:	f7fa fa59 	bl	34184240 <LL_RCC_IC5_GetDivider>
34189d8e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34189d90:	f7fa fa48 	bl	34184224 <LL_RCC_IC5_GetSource>
34189d94:	4603      	mov	r3, r0
34189d96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189d9a:	d029      	beq.n	34189df0 <RCCEx_GetSDMMCCLKFreq+0x188>
34189d9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189da0:	d82f      	bhi.n	34189e02 <RCCEx_GetSDMMCCLKFreq+0x19a>
34189da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189da6:	d01a      	beq.n	34189dde <RCCEx_GetSDMMCCLKFreq+0x176>
34189da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189dac:	d829      	bhi.n	34189e02 <RCCEx_GetSDMMCCLKFreq+0x19a>
34189dae:	2b00      	cmp	r3, #0
34189db0:	d003      	beq.n	34189dba <RCCEx_GetSDMMCCLKFreq+0x152>
34189db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189db6:	d009      	beq.n	34189dcc <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189db8:	e023      	b.n	34189e02 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189dba:	f7fd fd33 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189dbe:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189dc0:	68fa      	ldr	r2, [r7, #12]
34189dc2:	68bb      	ldr	r3, [r7, #8]
34189dc4:	fbb2 f3f3 	udiv	r3, r2, r3
34189dc8:	60fb      	str	r3, [r7, #12]
            break;
34189dca:	e01b      	b.n	34189e04 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189dcc:	f7fd fd70 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189dd0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189dd2:	68fa      	ldr	r2, [r7, #12]
34189dd4:	68bb      	ldr	r3, [r7, #8]
34189dd6:	fbb2 f3f3 	udiv	r3, r2, r3
34189dda:	60fb      	str	r3, [r7, #12]
            break;
34189ddc:	e012      	b.n	34189e04 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189dde:	f7fd fdad 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189de2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189de4:	68fa      	ldr	r2, [r7, #12]
34189de6:	68bb      	ldr	r3, [r7, #8]
34189de8:	fbb2 f3f3 	udiv	r3, r2, r3
34189dec:	60fb      	str	r3, [r7, #12]
            break;
34189dee:	e009      	b.n	34189e04 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189df0:	f7fd fdea 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189df4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34189df6:	68fa      	ldr	r2, [r7, #12]
34189df8:	68bb      	ldr	r3, [r7, #8]
34189dfa:	fbb2 f3f3 	udiv	r3, r2, r3
34189dfe:	60fb      	str	r3, [r7, #12]
            break;
34189e00:	e000      	b.n	34189e04 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
34189e02:	bf00      	nop
        }
      }
      break;
34189e04:	e003      	b.n	34189e0e <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
34189e06:	bf00      	nop
34189e08:	e002      	b.n	34189e10 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34189e0a:	bf00      	nop
34189e0c:	e000      	b.n	34189e10 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34189e0e:	bf00      	nop
  }

  return sdmmc_frequency;
34189e10:	68fb      	ldr	r3, [r7, #12]
}
34189e12:	4618      	mov	r0, r3
34189e14:	3710      	adds	r7, #16
34189e16:	46bd      	mov	sp, r7
34189e18:	bd80      	pop	{r7, pc}
34189e1a:	bf00      	nop
34189e1c:	0303041c 	.word	0x0303041c
34189e20:	0303001c 	.word	0x0303001c
34189e24:	0302041c 	.word	0x0302041c
34189e28:	0302001c 	.word	0x0302001c
34189e2c:	0301041c 	.word	0x0301041c
34189e30:	0301001c 	.word	0x0301001c
34189e34:	0300001c 	.word	0x0300001c
34189e38:	0300041c 	.word	0x0300041c

34189e3c <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34189e3c:	b580      	push	{r7, lr}
34189e3e:	b084      	sub	sp, #16
34189e40:	af00      	add	r7, sp, #0
34189e42:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34189e44:	2300      	movs	r3, #0
34189e46:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34189e48:	6878      	ldr	r0, [r7, #4]
34189e4a:	f7f9 fe3d 	bl	34183ac8 <LL_RCC_GetSPDIFRXClockSource>
34189e4e:	4603      	mov	r3, r0
34189e50:	2b06      	cmp	r3, #6
34189e52:	f200 80c2 	bhi.w	34189fda <RCCEx_GetSPDIFRXCLKFreq+0x19e>
34189e56:	a201      	add	r2, pc, #4	@ (adr r2, 34189e5c <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34189e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34189e5c:	34189e79 	.word	0x34189e79
34189e60:	34189e91 	.word	0x34189e91
34189e64:	34189e9b 	.word	0x34189e9b
34189e68:	34189f23 	.word	0x34189f23
34189e6c:	34189fc5 	.word	0x34189fc5
34189e70:	34189fa9 	.word	0x34189fa9
34189e74:	34189fd5 	.word	0x34189fd5
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189e78:	f7f8 fe5c 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
34189e7c:	4603      	mov	r3, r0
34189e7e:	4618      	mov	r0, r3
34189e80:	f7fd fde8 	bl	34187a54 <RCCEx_GetHCLKFreq>
34189e84:	4603      	mov	r3, r0
34189e86:	4618      	mov	r0, r3
34189e88:	f7fd fdf5 	bl	34187a76 <RCCEx_GetPCLK1Freq>
34189e8c:	60f8      	str	r0, [r7, #12]
      break;
34189e8e:	e0ad      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189e90:	2007      	movs	r0, #7
34189e92:	f7fe f8cb 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
34189e96:	60f8      	str	r0, [r7, #12]
      break;
34189e98:	e0a8      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189e9a:	f7fa f9ef 	bl	3418427c <LL_RCC_IC7_IsEnabled>
34189e9e:	4603      	mov	r3, r0
34189ea0:	2b00      	cmp	r3, #0
34189ea2:	f000 809c 	beq.w	34189fde <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34189ea6:	f7fa fa0b 	bl	341842c0 <LL_RCC_IC7_GetDivider>
34189eaa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34189eac:	f7fa f9fa 	bl	341842a4 <LL_RCC_IC7_GetSource>
34189eb0:	4603      	mov	r3, r0
34189eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189eb6:	d029      	beq.n	34189f0c <RCCEx_GetSPDIFRXCLKFreq+0xd0>
34189eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ebc:	d82f      	bhi.n	34189f1e <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34189ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ec2:	d01a      	beq.n	34189efa <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34189ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ec8:	d829      	bhi.n	34189f1e <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34189eca:	2b00      	cmp	r3, #0
34189ecc:	d003      	beq.n	34189ed6 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34189ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189ed2:	d009      	beq.n	34189ee8 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189ed4:	e023      	b.n	34189f1e <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189ed6:	f7fd fca5 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189eda:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189edc:	68fa      	ldr	r2, [r7, #12]
34189ede:	68bb      	ldr	r3, [r7, #8]
34189ee0:	fbb2 f3f3 	udiv	r3, r2, r3
34189ee4:	60fb      	str	r3, [r7, #12]
            break;
34189ee6:	e01b      	b.n	34189f20 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189ee8:	f7fd fce2 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189eec:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189eee:	68fa      	ldr	r2, [r7, #12]
34189ef0:	68bb      	ldr	r3, [r7, #8]
34189ef2:	fbb2 f3f3 	udiv	r3, r2, r3
34189ef6:	60fb      	str	r3, [r7, #12]
            break;
34189ef8:	e012      	b.n	34189f20 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189efa:	f7fd fd1f 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189efe:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f00:	68fa      	ldr	r2, [r7, #12]
34189f02:	68bb      	ldr	r3, [r7, #8]
34189f04:	fbb2 f3f3 	udiv	r3, r2, r3
34189f08:	60fb      	str	r3, [r7, #12]
            break;
34189f0a:	e009      	b.n	34189f20 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189f0c:	f7fd fd5c 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189f10:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f12:	68fa      	ldr	r2, [r7, #12]
34189f14:	68bb      	ldr	r3, [r7, #8]
34189f16:	fbb2 f3f3 	udiv	r3, r2, r3
34189f1a:	60fb      	str	r3, [r7, #12]
            break;
34189f1c:	e000      	b.n	34189f20 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
34189f1e:	bf00      	nop
        }
      }
      break;
34189f20:	e05d      	b.n	34189fde <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34189f22:	f7fa f9eb 	bl	341842fc <LL_RCC_IC8_IsEnabled>
34189f26:	4603      	mov	r3, r0
34189f28:	2b00      	cmp	r3, #0
34189f2a:	d05a      	beq.n	34189fe2 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34189f2c:	f7fa fa08 	bl	34184340 <LL_RCC_IC8_GetDivider>
34189f30:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34189f32:	f7fa f9f7 	bl	34184324 <LL_RCC_IC8_GetSource>
34189f36:	4603      	mov	r3, r0
34189f38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189f3c:	d029      	beq.n	34189f92 <RCCEx_GetSPDIFRXCLKFreq+0x156>
34189f3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189f42:	d82f      	bhi.n	34189fa4 <RCCEx_GetSPDIFRXCLKFreq+0x168>
34189f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189f48:	d01a      	beq.n	34189f80 <RCCEx_GetSPDIFRXCLKFreq+0x144>
34189f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189f4e:	d829      	bhi.n	34189fa4 <RCCEx_GetSPDIFRXCLKFreq+0x168>
34189f50:	2b00      	cmp	r3, #0
34189f52:	d003      	beq.n	34189f5c <RCCEx_GetSPDIFRXCLKFreq+0x120>
34189f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189f58:	d009      	beq.n	34189f6e <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189f5a:	e023      	b.n	34189fa4 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189f5c:	f7fd fc62 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
34189f60:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f62:	68fa      	ldr	r2, [r7, #12]
34189f64:	68bb      	ldr	r3, [r7, #8]
34189f66:	fbb2 f3f3 	udiv	r3, r2, r3
34189f6a:	60fb      	str	r3, [r7, #12]
            break;
34189f6c:	e01b      	b.n	34189fa6 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189f6e:	f7fd fc9f 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
34189f72:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f74:	68fa      	ldr	r2, [r7, #12]
34189f76:	68bb      	ldr	r3, [r7, #8]
34189f78:	fbb2 f3f3 	udiv	r3, r2, r3
34189f7c:	60fb      	str	r3, [r7, #12]
            break;
34189f7e:	e012      	b.n	34189fa6 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189f80:	f7fd fcdc 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
34189f84:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f86:	68fa      	ldr	r2, [r7, #12]
34189f88:	68bb      	ldr	r3, [r7, #8]
34189f8a:	fbb2 f3f3 	udiv	r3, r2, r3
34189f8e:	60fb      	str	r3, [r7, #12]
            break;
34189f90:	e009      	b.n	34189fa6 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189f92:	f7fd fd19 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
34189f96:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34189f98:	68fa      	ldr	r2, [r7, #12]
34189f9a:	68bb      	ldr	r3, [r7, #8]
34189f9c:	fbb2 f3f3 	udiv	r3, r2, r3
34189fa0:	60fb      	str	r3, [r7, #12]
            break;
34189fa2:	e000      	b.n	34189fa6 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34189fa4:	bf00      	nop
        }
      }
      break;
34189fa6:	e01c      	b.n	34189fe2 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189fa8:	f7f9 f9c4 	bl	34183334 <LL_RCC_HSI_IsReady>
34189fac:	4603      	mov	r3, r0
34189fae:	2b00      	cmp	r3, #0
34189fb0:	d019      	beq.n	34189fe6 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189fb2:	f7f9 f9d1 	bl	34183358 <LL_RCC_HSI_GetDivider>
34189fb6:	4603      	mov	r3, r0
34189fb8:	09db      	lsrs	r3, r3, #7
34189fba:	4a0f      	ldr	r2, [pc, #60]	@ (34189ff8 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34189fbc:	fa22 f303 	lsr.w	r3, r2, r3
34189fc0:	60fb      	str	r3, [r7, #12]
      }
      break;
34189fc2:	e010      	b.n	34189fe6 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189fc4:	f7f9 f9d6 	bl	34183374 <LL_RCC_MSI_IsReady>
34189fc8:	4603      	mov	r3, r0
34189fca:	2b00      	cmp	r3, #0
34189fcc:	d00d      	beq.n	34189fea <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34189fce:	4b0b      	ldr	r3, [pc, #44]	@ (34189ffc <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34189fd0:	60fb      	str	r3, [r7, #12]
      }
      break;
34189fd2:	e00a      	b.n	34189fea <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34189fd4:	4b0a      	ldr	r3, [pc, #40]	@ (3418a000 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
34189fd6:	60fb      	str	r3, [r7, #12]
      break;
34189fd8:	e008      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
34189fda:	bf00      	nop
34189fdc:	e006      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34189fde:	bf00      	nop
34189fe0:	e004      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34189fe2:	bf00      	nop
34189fe4:	e002      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34189fe6:	bf00      	nop
34189fe8:	e000      	b.n	34189fec <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34189fea:	bf00      	nop
  }

  return spdifrx_frequency;
34189fec:	68fb      	ldr	r3, [r7, #12]
}
34189fee:	4618      	mov	r0, r3
34189ff0:	3710      	adds	r7, #16
34189ff2:	46bd      	mov	sp, r7
34189ff4:	bd80      	pop	{r7, pc}
34189ff6:	bf00      	nop
34189ff8:	03d09000 	.word	0x03d09000
34189ffc:	003d0900 	.word	0x003d0900
3418a000:	00bb8000 	.word	0x00bb8000

3418a004 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418a004:	b580      	push	{r7, lr}
3418a006:	b084      	sub	sp, #16
3418a008:	af00      	add	r7, sp, #0
3418a00a:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a00c:	2300      	movs	r3, #0
3418a00e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418a010:	6878      	ldr	r0, [r7, #4]
3418a012:	f7f9 fd6b 	bl	34183aec <LL_RCC_GetSPIClockSource>
3418a016:	4603      	mov	r3, r0
3418a018:	4aa7      	ldr	r2, [pc, #668]	@ (3418a2b8 <RCCEx_GetSPICLKFreq+0x2b4>)
3418a01a:	4293      	cmp	r3, r2
3418a01c:	f000 829e 	beq.w	3418a55c <RCCEx_GetSPICLKFreq+0x558>
3418a020:	4aa5      	ldr	r2, [pc, #660]	@ (3418a2b8 <RCCEx_GetSPICLKFreq+0x2b4>)
3418a022:	4293      	cmp	r3, r2
3418a024:	f200 82a5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a028:	4aa4      	ldr	r2, [pc, #656]	@ (3418a2bc <RCCEx_GetSPICLKFreq+0x2b8>)
3418a02a:	4293      	cmp	r3, r2
3418a02c:	f000 8299 	beq.w	3418a562 <RCCEx_GetSPICLKFreq+0x55e>
3418a030:	4aa2      	ldr	r2, [pc, #648]	@ (3418a2bc <RCCEx_GetSPICLKFreq+0x2b8>)
3418a032:	4293      	cmp	r3, r2
3418a034:	f200 829d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a038:	4aa1      	ldr	r2, [pc, #644]	@ (3418a2c0 <RCCEx_GetSPICLKFreq+0x2bc>)
3418a03a:	4293      	cmp	r3, r2
3418a03c:	f000 8291 	beq.w	3418a562 <RCCEx_GetSPICLKFreq+0x55e>
3418a040:	4a9f      	ldr	r2, [pc, #636]	@ (3418a2c0 <RCCEx_GetSPICLKFreq+0x2bc>)
3418a042:	4293      	cmp	r3, r2
3418a044:	f200 8295 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a048:	4a9e      	ldr	r2, [pc, #632]	@ (3418a2c4 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a04a:	4293      	cmp	r3, r2
3418a04c:	f000 8286 	beq.w	3418a55c <RCCEx_GetSPICLKFreq+0x558>
3418a050:	4a9c      	ldr	r2, [pc, #624]	@ (3418a2c4 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a052:	4293      	cmp	r3, r2
3418a054:	f200 828d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a058:	4a9b      	ldr	r2, [pc, #620]	@ (3418a2c8 <RCCEx_GetSPICLKFreq+0x2c4>)
3418a05a:	4293      	cmp	r3, r2
3418a05c:	f000 827e 	beq.w	3418a55c <RCCEx_GetSPICLKFreq+0x558>
3418a060:	4a99      	ldr	r2, [pc, #612]	@ (3418a2c8 <RCCEx_GetSPICLKFreq+0x2c4>)
3418a062:	4293      	cmp	r3, r2
3418a064:	f200 8285 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a068:	4a98      	ldr	r2, [pc, #608]	@ (3418a2cc <RCCEx_GetSPICLKFreq+0x2c8>)
3418a06a:	4293      	cmp	r3, r2
3418a06c:	f000 8276 	beq.w	3418a55c <RCCEx_GetSPICLKFreq+0x558>
3418a070:	4a96      	ldr	r2, [pc, #600]	@ (3418a2cc <RCCEx_GetSPICLKFreq+0x2c8>)
3418a072:	4293      	cmp	r3, r2
3418a074:	f200 827d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a078:	4a95      	ldr	r2, [pc, #596]	@ (3418a2d0 <RCCEx_GetSPICLKFreq+0x2cc>)
3418a07a:	4293      	cmp	r3, r2
3418a07c:	f000 8258 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a080:	4a93      	ldr	r2, [pc, #588]	@ (3418a2d0 <RCCEx_GetSPICLKFreq+0x2cc>)
3418a082:	4293      	cmp	r3, r2
3418a084:	f200 8275 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a088:	4a92      	ldr	r2, [pc, #584]	@ (3418a2d4 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a08a:	4293      	cmp	r3, r2
3418a08c:	f000 8250 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a090:	4a90      	ldr	r2, [pc, #576]	@ (3418a2d4 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a092:	4293      	cmp	r3, r2
3418a094:	f200 826d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a098:	4a8f      	ldr	r2, [pc, #572]	@ (3418a2d8 <RCCEx_GetSPICLKFreq+0x2d4>)
3418a09a:	4293      	cmp	r3, r2
3418a09c:	f000 8248 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a0a0:	4a8d      	ldr	r2, [pc, #564]	@ (3418a2d8 <RCCEx_GetSPICLKFreq+0x2d4>)
3418a0a2:	4293      	cmp	r3, r2
3418a0a4:	f200 8265 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0a8:	4a8c      	ldr	r2, [pc, #560]	@ (3418a2dc <RCCEx_GetSPICLKFreq+0x2d8>)
3418a0aa:	4293      	cmp	r3, r2
3418a0ac:	f000 8240 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a0b0:	4a8a      	ldr	r2, [pc, #552]	@ (3418a2dc <RCCEx_GetSPICLKFreq+0x2d8>)
3418a0b2:	4293      	cmp	r3, r2
3418a0b4:	f200 825d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0b8:	4a89      	ldr	r2, [pc, #548]	@ (3418a2e0 <RCCEx_GetSPICLKFreq+0x2dc>)
3418a0ba:	4293      	cmp	r3, r2
3418a0bc:	f000 8238 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a0c0:	4a87      	ldr	r2, [pc, #540]	@ (3418a2e0 <RCCEx_GetSPICLKFreq+0x2dc>)
3418a0c2:	4293      	cmp	r3, r2
3418a0c4:	f200 8255 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0c8:	4a86      	ldr	r2, [pc, #536]	@ (3418a2e4 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a0ca:	4293      	cmp	r3, r2
3418a0cc:	f000 8230 	beq.w	3418a530 <RCCEx_GetSPICLKFreq+0x52c>
3418a0d0:	4a84      	ldr	r2, [pc, #528]	@ (3418a2e4 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a0d2:	4293      	cmp	r3, r2
3418a0d4:	f200 824d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0d8:	4a83      	ldr	r2, [pc, #524]	@ (3418a2e8 <RCCEx_GetSPICLKFreq+0x2e4>)
3418a0da:	4293      	cmp	r3, r2
3418a0dc:	f000 8236 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a0e0:	4a81      	ldr	r2, [pc, #516]	@ (3418a2e8 <RCCEx_GetSPICLKFreq+0x2e4>)
3418a0e2:	4293      	cmp	r3, r2
3418a0e4:	f200 8245 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0e8:	4a80      	ldr	r2, [pc, #512]	@ (3418a2ec <RCCEx_GetSPICLKFreq+0x2e8>)
3418a0ea:	4293      	cmp	r3, r2
3418a0ec:	f000 822e 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a0f0:	4a7e      	ldr	r2, [pc, #504]	@ (3418a2ec <RCCEx_GetSPICLKFreq+0x2e8>)
3418a0f2:	4293      	cmp	r3, r2
3418a0f4:	f200 823d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a0f8:	4a7d      	ldr	r2, [pc, #500]	@ (3418a2f0 <RCCEx_GetSPICLKFreq+0x2ec>)
3418a0fa:	4293      	cmp	r3, r2
3418a0fc:	f000 8226 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a100:	4a7b      	ldr	r2, [pc, #492]	@ (3418a2f0 <RCCEx_GetSPICLKFreq+0x2ec>)
3418a102:	4293      	cmp	r3, r2
3418a104:	f200 8235 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a108:	4a7a      	ldr	r2, [pc, #488]	@ (3418a2f4 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a10a:	4293      	cmp	r3, r2
3418a10c:	f000 821e 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a110:	4a78      	ldr	r2, [pc, #480]	@ (3418a2f4 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a112:	4293      	cmp	r3, r2
3418a114:	f200 822d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a118:	4a77      	ldr	r2, [pc, #476]	@ (3418a2f8 <RCCEx_GetSPICLKFreq+0x2f4>)
3418a11a:	4293      	cmp	r3, r2
3418a11c:	f000 8216 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a120:	4a75      	ldr	r2, [pc, #468]	@ (3418a2f8 <RCCEx_GetSPICLKFreq+0x2f4>)
3418a122:	4293      	cmp	r3, r2
3418a124:	f200 8225 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a128:	4a74      	ldr	r2, [pc, #464]	@ (3418a2fc <RCCEx_GetSPICLKFreq+0x2f8>)
3418a12a:	4293      	cmp	r3, r2
3418a12c:	f000 820e 	beq.w	3418a54c <RCCEx_GetSPICLKFreq+0x548>
3418a130:	4a72      	ldr	r2, [pc, #456]	@ (3418a2fc <RCCEx_GetSPICLKFreq+0x2f8>)
3418a132:	4293      	cmp	r3, r2
3418a134:	f200 821d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a138:	4a71      	ldr	r2, [pc, #452]	@ (3418a300 <RCCEx_GetSPICLKFreq+0x2fc>)
3418a13a:	4293      	cmp	r3, r2
3418a13c:	f000 8171 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a140:	4a6f      	ldr	r2, [pc, #444]	@ (3418a300 <RCCEx_GetSPICLKFreq+0x2fc>)
3418a142:	4293      	cmp	r3, r2
3418a144:	f200 8215 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a148:	4a6e      	ldr	r2, [pc, #440]	@ (3418a304 <RCCEx_GetSPICLKFreq+0x300>)
3418a14a:	4293      	cmp	r3, r2
3418a14c:	f000 81ad 	beq.w	3418a4aa <RCCEx_GetSPICLKFreq+0x4a6>
3418a150:	4a6c      	ldr	r2, [pc, #432]	@ (3418a304 <RCCEx_GetSPICLKFreq+0x300>)
3418a152:	4293      	cmp	r3, r2
3418a154:	f200 820d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a158:	4a6b      	ldr	r2, [pc, #428]	@ (3418a308 <RCCEx_GetSPICLKFreq+0x304>)
3418a15a:	4293      	cmp	r3, r2
3418a15c:	f000 81a5 	beq.w	3418a4aa <RCCEx_GetSPICLKFreq+0x4a6>
3418a160:	4a69      	ldr	r2, [pc, #420]	@ (3418a308 <RCCEx_GetSPICLKFreq+0x304>)
3418a162:	4293      	cmp	r3, r2
3418a164:	f200 8205 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a168:	4a68      	ldr	r2, [pc, #416]	@ (3418a30c <RCCEx_GetSPICLKFreq+0x308>)
3418a16a:	4293      	cmp	r3, r2
3418a16c:	f000 8159 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a170:	4a66      	ldr	r2, [pc, #408]	@ (3418a30c <RCCEx_GetSPICLKFreq+0x308>)
3418a172:	4293      	cmp	r3, r2
3418a174:	f200 81fd 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a178:	4a65      	ldr	r2, [pc, #404]	@ (3418a310 <RCCEx_GetSPICLKFreq+0x30c>)
3418a17a:	4293      	cmp	r3, r2
3418a17c:	f000 8151 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a180:	4a63      	ldr	r2, [pc, #396]	@ (3418a310 <RCCEx_GetSPICLKFreq+0x30c>)
3418a182:	4293      	cmp	r3, r2
3418a184:	f200 81f5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a188:	4a62      	ldr	r2, [pc, #392]	@ (3418a314 <RCCEx_GetSPICLKFreq+0x310>)
3418a18a:	4293      	cmp	r3, r2
3418a18c:	f000 8149 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a190:	4a60      	ldr	r2, [pc, #384]	@ (3418a314 <RCCEx_GetSPICLKFreq+0x310>)
3418a192:	4293      	cmp	r3, r2
3418a194:	f200 81ed 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a198:	4a5f      	ldr	r2, [pc, #380]	@ (3418a318 <RCCEx_GetSPICLKFreq+0x314>)
3418a19a:	4293      	cmp	r3, r2
3418a19c:	f000 80fd 	beq.w	3418a39a <RCCEx_GetSPICLKFreq+0x396>
3418a1a0:	4a5d      	ldr	r2, [pc, #372]	@ (3418a318 <RCCEx_GetSPICLKFreq+0x314>)
3418a1a2:	4293      	cmp	r3, r2
3418a1a4:	f200 81e5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1a8:	4a5c      	ldr	r2, [pc, #368]	@ (3418a31c <RCCEx_GetSPICLKFreq+0x318>)
3418a1aa:	4293      	cmp	r3, r2
3418a1ac:	f000 8139 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a1b0:	4a5a      	ldr	r2, [pc, #360]	@ (3418a31c <RCCEx_GetSPICLKFreq+0x318>)
3418a1b2:	4293      	cmp	r3, r2
3418a1b4:	f200 81dd 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1b8:	4a59      	ldr	r2, [pc, #356]	@ (3418a320 <RCCEx_GetSPICLKFreq+0x31c>)
3418a1ba:	4293      	cmp	r3, r2
3418a1bc:	f000 8131 	beq.w	3418a422 <RCCEx_GetSPICLKFreq+0x41e>
3418a1c0:	4a57      	ldr	r2, [pc, #348]	@ (3418a320 <RCCEx_GetSPICLKFreq+0x31c>)
3418a1c2:	4293      	cmp	r3, r2
3418a1c4:	f200 81d5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1c8:	4a56      	ldr	r2, [pc, #344]	@ (3418a324 <RCCEx_GetSPICLKFreq+0x320>)
3418a1ca:	4293      	cmp	r3, r2
3418a1cc:	f000 80e5 	beq.w	3418a39a <RCCEx_GetSPICLKFreq+0x396>
3418a1d0:	4a54      	ldr	r2, [pc, #336]	@ (3418a324 <RCCEx_GetSPICLKFreq+0x320>)
3418a1d2:	4293      	cmp	r3, r2
3418a1d4:	f200 81cd 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1d8:	4a53      	ldr	r2, [pc, #332]	@ (3418a328 <RCCEx_GetSPICLKFreq+0x324>)
3418a1da:	4293      	cmp	r3, r2
3418a1dc:	f000 80dd 	beq.w	3418a39a <RCCEx_GetSPICLKFreq+0x396>
3418a1e0:	4a51      	ldr	r2, [pc, #324]	@ (3418a328 <RCCEx_GetSPICLKFreq+0x324>)
3418a1e2:	4293      	cmp	r3, r2
3418a1e4:	f200 81c5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1e8:	4a50      	ldr	r2, [pc, #320]	@ (3418a32c <RCCEx_GetSPICLKFreq+0x328>)
3418a1ea:	4293      	cmp	r3, r2
3418a1ec:	f000 80d5 	beq.w	3418a39a <RCCEx_GetSPICLKFreq+0x396>
3418a1f0:	4a4e      	ldr	r2, [pc, #312]	@ (3418a32c <RCCEx_GetSPICLKFreq+0x328>)
3418a1f2:	4293      	cmp	r3, r2
3418a1f4:	f200 81bd 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a1f8:	4a4d      	ldr	r2, [pc, #308]	@ (3418a330 <RCCEx_GetSPICLKFreq+0x32c>)
3418a1fa:	4293      	cmp	r3, r2
3418a1fc:	f000 80c8 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a200:	4a4b      	ldr	r2, [pc, #300]	@ (3418a330 <RCCEx_GetSPICLKFreq+0x32c>)
3418a202:	4293      	cmp	r3, r2
3418a204:	f200 81b5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a208:	4a4a      	ldr	r2, [pc, #296]	@ (3418a334 <RCCEx_GetSPICLKFreq+0x330>)
3418a20a:	4293      	cmp	r3, r2
3418a20c:	f000 80c0 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a210:	4a48      	ldr	r2, [pc, #288]	@ (3418a334 <RCCEx_GetSPICLKFreq+0x330>)
3418a212:	4293      	cmp	r3, r2
3418a214:	f200 81ad 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a218:	4a47      	ldr	r2, [pc, #284]	@ (3418a338 <RCCEx_GetSPICLKFreq+0x334>)
3418a21a:	4293      	cmp	r3, r2
3418a21c:	f000 80b8 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a220:	4a45      	ldr	r2, [pc, #276]	@ (3418a338 <RCCEx_GetSPICLKFreq+0x334>)
3418a222:	4293      	cmp	r3, r2
3418a224:	f200 81a5 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a228:	4a44      	ldr	r2, [pc, #272]	@ (3418a33c <RCCEx_GetSPICLKFreq+0x338>)
3418a22a:	4293      	cmp	r3, r2
3418a22c:	f000 80b0 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a230:	4a42      	ldr	r2, [pc, #264]	@ (3418a33c <RCCEx_GetSPICLKFreq+0x338>)
3418a232:	4293      	cmp	r3, r2
3418a234:	f200 819d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a238:	4a41      	ldr	r2, [pc, #260]	@ (3418a340 <RCCEx_GetSPICLKFreq+0x33c>)
3418a23a:	4293      	cmp	r3, r2
3418a23c:	f000 80a8 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a240:	4a3f      	ldr	r2, [pc, #252]	@ (3418a340 <RCCEx_GetSPICLKFreq+0x33c>)
3418a242:	4293      	cmp	r3, r2
3418a244:	f200 8195 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a248:	4a3e      	ldr	r2, [pc, #248]	@ (3418a344 <RCCEx_GetSPICLKFreq+0x340>)
3418a24a:	4293      	cmp	r3, r2
3418a24c:	f000 80a0 	beq.w	3418a390 <RCCEx_GetSPICLKFreq+0x38c>
3418a250:	4a3c      	ldr	r2, [pc, #240]	@ (3418a344 <RCCEx_GetSPICLKFreq+0x340>)
3418a252:	4293      	cmp	r3, r2
3418a254:	f200 818d 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a258:	4a3b      	ldr	r2, [pc, #236]	@ (3418a348 <RCCEx_GetSPICLKFreq+0x344>)
3418a25a:	4293      	cmp	r3, r2
3418a25c:	f000 808c 	beq.w	3418a378 <RCCEx_GetSPICLKFreq+0x374>
3418a260:	4a39      	ldr	r2, [pc, #228]	@ (3418a348 <RCCEx_GetSPICLKFreq+0x344>)
3418a262:	4293      	cmp	r3, r2
3418a264:	f200 8185 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a268:	4a38      	ldr	r2, [pc, #224]	@ (3418a34c <RCCEx_GetSPICLKFreq+0x348>)
3418a26a:	4293      	cmp	r3, r2
3418a26c:	d078      	beq.n	3418a360 <RCCEx_GetSPICLKFreq+0x35c>
3418a26e:	4a37      	ldr	r2, [pc, #220]	@ (3418a34c <RCCEx_GetSPICLKFreq+0x348>)
3418a270:	4293      	cmp	r3, r2
3418a272:	f200 817e 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a276:	4a36      	ldr	r2, [pc, #216]	@ (3418a350 <RCCEx_GetSPICLKFreq+0x34c>)
3418a278:	4293      	cmp	r3, r2
3418a27a:	d071      	beq.n	3418a360 <RCCEx_GetSPICLKFreq+0x35c>
3418a27c:	4a34      	ldr	r2, [pc, #208]	@ (3418a350 <RCCEx_GetSPICLKFreq+0x34c>)
3418a27e:	4293      	cmp	r3, r2
3418a280:	f200 8177 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a284:	4a33      	ldr	r2, [pc, #204]	@ (3418a354 <RCCEx_GetSPICLKFreq+0x350>)
3418a286:	4293      	cmp	r3, r2
3418a288:	d00a      	beq.n	3418a2a0 <RCCEx_GetSPICLKFreq+0x29c>
3418a28a:	4a32      	ldr	r2, [pc, #200]	@ (3418a354 <RCCEx_GetSPICLKFreq+0x350>)
3418a28c:	4293      	cmp	r3, r2
3418a28e:	f200 8170 	bhi.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
3418a292:	4a31      	ldr	r2, [pc, #196]	@ (3418a358 <RCCEx_GetSPICLKFreq+0x354>)
3418a294:	4293      	cmp	r3, r2
3418a296:	d063      	beq.n	3418a360 <RCCEx_GetSPICLKFreq+0x35c>
3418a298:	4a30      	ldr	r2, [pc, #192]	@ (3418a35c <RCCEx_GetSPICLKFreq+0x358>)
3418a29a:	4293      	cmp	r3, r2
3418a29c:	f040 8169 	bne.w	3418a572 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a2a0:	f7f8 fc48 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418a2a4:	4603      	mov	r3, r0
3418a2a6:	4618      	mov	r0, r3
3418a2a8:	f7fd fbd4 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418a2ac:	4603      	mov	r3, r0
3418a2ae:	4618      	mov	r0, r3
3418a2b0:	f7fd fbe1 	bl	34187a76 <RCCEx_GetPCLK1Freq>
3418a2b4:	60f8      	str	r0, [r7, #12]
      break;
3418a2b6:	e169      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
3418a2b8:	07061820 	.word	0x07061820
3418a2bc:	07061420 	.word	0x07061420
3418a2c0:	07061020 	.word	0x07061020
3418a2c4:	07060c20 	.word	0x07060c20
3418a2c8:	07060820 	.word	0x07060820
3418a2cc:	07060420 	.word	0x07060420
3418a2d0:	07051820 	.word	0x07051820
3418a2d4:	07051420 	.word	0x07051420
3418a2d8:	07051020 	.word	0x07051020
3418a2dc:	07050c20 	.word	0x07050c20
3418a2e0:	07050820 	.word	0x07050820
3418a2e4:	07050420 	.word	0x07050420
3418a2e8:	07041820 	.word	0x07041820
3418a2ec:	07041420 	.word	0x07041420
3418a2f0:	07041020 	.word	0x07041020
3418a2f4:	07040c20 	.word	0x07040c20
3418a2f8:	07040820 	.word	0x07040820
3418a2fc:	07040420 	.word	0x07040420
3418a300:	07031820 	.word	0x07031820
3418a304:	07031420 	.word	0x07031420
3418a308:	07031020 	.word	0x07031020
3418a30c:	07030c20 	.word	0x07030c20
3418a310:	07030820 	.word	0x07030820
3418a314:	07030420 	.word	0x07030420
3418a318:	07021820 	.word	0x07021820
3418a31c:	07021420 	.word	0x07021420
3418a320:	07021020 	.word	0x07021020
3418a324:	07020c20 	.word	0x07020c20
3418a328:	07020820 	.word	0x07020820
3418a32c:	07020420 	.word	0x07020420
3418a330:	07011820 	.word	0x07011820
3418a334:	07011420 	.word	0x07011420
3418a338:	07011020 	.word	0x07011020
3418a33c:	07010c20 	.word	0x07010c20
3418a340:	07010820 	.word	0x07010820
3418a344:	07010420 	.word	0x07010420
3418a348:	07001820 	.word	0x07001820
3418a34c:	07001420 	.word	0x07001420
3418a350:	07001020 	.word	0x07001020
3418a354:	07000c20 	.word	0x07000c20
3418a358:	07000420 	.word	0x07000420
3418a35c:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a360:	f7f8 fbe8 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418a364:	4603      	mov	r3, r0
3418a366:	4618      	mov	r0, r3
3418a368:	f7fd fb74 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418a36c:	4603      	mov	r3, r0
3418a36e:	4618      	mov	r0, r3
3418a370:	f7fd fb91 	bl	34187a96 <RCCEx_GetPCLK2Freq>
3418a374:	60f8      	str	r0, [r7, #12]
      break;
3418a376:	e109      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a378:	f7f8 fbdc 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418a37c:	4603      	mov	r3, r0
3418a37e:	4618      	mov	r0, r3
3418a380:	f7fd fb68 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418a384:	4603      	mov	r3, r0
3418a386:	4618      	mov	r0, r3
3418a388:	f7fd fb96 	bl	34187ab8 <RCCEx_GetPCLK4Freq>
3418a38c:	60f8      	str	r0, [r7, #12]
      break;
3418a38e:	e0fd      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a390:	2007      	movs	r0, #7
3418a392:	f7fd fe4b 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418a396:	60f8      	str	r0, [r7, #12]
      break;
3418a398:	e0f8      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a39a:	f7f9 ffaf 	bl	341842fc <LL_RCC_IC8_IsEnabled>
3418a39e:	4603      	mov	r3, r0
3418a3a0:	2b00      	cmp	r3, #0
3418a3a2:	f000 80e8 	beq.w	3418a576 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a3a6:	f7f9 ffcb 	bl	34184340 <LL_RCC_IC8_GetDivider>
3418a3aa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a3ac:	f7f9 ffba 	bl	34184324 <LL_RCC_IC8_GetSource>
3418a3b0:	4603      	mov	r3, r0
3418a3b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a3b6:	d029      	beq.n	3418a40c <RCCEx_GetSPICLKFreq+0x408>
3418a3b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a3bc:	d82f      	bhi.n	3418a41e <RCCEx_GetSPICLKFreq+0x41a>
3418a3be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a3c2:	d01a      	beq.n	3418a3fa <RCCEx_GetSPICLKFreq+0x3f6>
3418a3c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a3c8:	d829      	bhi.n	3418a41e <RCCEx_GetSPICLKFreq+0x41a>
3418a3ca:	2b00      	cmp	r3, #0
3418a3cc:	d003      	beq.n	3418a3d6 <RCCEx_GetSPICLKFreq+0x3d2>
3418a3ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a3d2:	d009      	beq.n	3418a3e8 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a3d4:	e023      	b.n	3418a41e <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a3d6:	f7fd fa25 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418a3da:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a3dc:	68fa      	ldr	r2, [r7, #12]
3418a3de:	68bb      	ldr	r3, [r7, #8]
3418a3e0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3e4:	60fb      	str	r3, [r7, #12]
            break;
3418a3e6:	e01b      	b.n	3418a420 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a3e8:	f7fd fa62 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418a3ec:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a3ee:	68fa      	ldr	r2, [r7, #12]
3418a3f0:	68bb      	ldr	r3, [r7, #8]
3418a3f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3f6:	60fb      	str	r3, [r7, #12]
            break;
3418a3f8:	e012      	b.n	3418a420 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a3fa:	f7fd fa9f 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418a3fe:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a400:	68fa      	ldr	r2, [r7, #12]
3418a402:	68bb      	ldr	r3, [r7, #8]
3418a404:	fbb2 f3f3 	udiv	r3, r2, r3
3418a408:	60fb      	str	r3, [r7, #12]
            break;
3418a40a:	e009      	b.n	3418a420 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a40c:	f7fd fadc 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418a410:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a412:	68fa      	ldr	r2, [r7, #12]
3418a414:	68bb      	ldr	r3, [r7, #8]
3418a416:	fbb2 f3f3 	udiv	r3, r2, r3
3418a41a:	60fb      	str	r3, [r7, #12]
            break;
3418a41c:	e000      	b.n	3418a420 <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418a41e:	bf00      	nop
        }
      }
      break;
3418a420:	e0a9      	b.n	3418a576 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418a422:	f7f9 ffab 	bl	3418437c <LL_RCC_IC9_IsEnabled>
3418a426:	4603      	mov	r3, r0
3418a428:	2b00      	cmp	r3, #0
3418a42a:	f000 80a6 	beq.w	3418a57a <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418a42e:	f7f9 ffc7 	bl	341843c0 <LL_RCC_IC9_GetDivider>
3418a432:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418a434:	f7f9 ffb6 	bl	341843a4 <LL_RCC_IC9_GetSource>
3418a438:	4603      	mov	r3, r0
3418a43a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a43e:	d029      	beq.n	3418a494 <RCCEx_GetSPICLKFreq+0x490>
3418a440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a444:	d82f      	bhi.n	3418a4a6 <RCCEx_GetSPICLKFreq+0x4a2>
3418a446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a44a:	d01a      	beq.n	3418a482 <RCCEx_GetSPICLKFreq+0x47e>
3418a44c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a450:	d829      	bhi.n	3418a4a6 <RCCEx_GetSPICLKFreq+0x4a2>
3418a452:	2b00      	cmp	r3, #0
3418a454:	d003      	beq.n	3418a45e <RCCEx_GetSPICLKFreq+0x45a>
3418a456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a45a:	d009      	beq.n	3418a470 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a45c:	e023      	b.n	3418a4a6 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a45e:	f7fd f9e1 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418a462:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a464:	68fa      	ldr	r2, [r7, #12]
3418a466:	68bb      	ldr	r3, [r7, #8]
3418a468:	fbb2 f3f3 	udiv	r3, r2, r3
3418a46c:	60fb      	str	r3, [r7, #12]
            break;
3418a46e:	e01b      	b.n	3418a4a8 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a470:	f7fd fa1e 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418a474:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a476:	68fa      	ldr	r2, [r7, #12]
3418a478:	68bb      	ldr	r3, [r7, #8]
3418a47a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a47e:	60fb      	str	r3, [r7, #12]
            break;
3418a480:	e012      	b.n	3418a4a8 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a482:	f7fd fa5b 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418a486:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a488:	68fa      	ldr	r2, [r7, #12]
3418a48a:	68bb      	ldr	r3, [r7, #8]
3418a48c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a490:	60fb      	str	r3, [r7, #12]
            break;
3418a492:	e009      	b.n	3418a4a8 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a494:	f7fd fa98 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418a498:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a49a:	68fa      	ldr	r2, [r7, #12]
3418a49c:	68bb      	ldr	r3, [r7, #8]
3418a49e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4a2:	60fb      	str	r3, [r7, #12]
            break;
3418a4a4:	e000      	b.n	3418a4a8 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418a4a6:	bf00      	nop
        }
      }
      break;
3418a4a8:	e067      	b.n	3418a57a <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418a4aa:	f7fa f867 	bl	3418457c <LL_RCC_IC14_IsEnabled>
3418a4ae:	4603      	mov	r3, r0
3418a4b0:	2b00      	cmp	r3, #0
3418a4b2:	d064      	beq.n	3418a57e <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418a4b4:	f7fa f884 	bl	341845c0 <LL_RCC_IC14_GetDivider>
3418a4b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418a4ba:	f7fa f873 	bl	341845a4 <LL_RCC_IC14_GetSource>
3418a4be:	4603      	mov	r3, r0
3418a4c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a4c4:	d029      	beq.n	3418a51a <RCCEx_GetSPICLKFreq+0x516>
3418a4c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a4ca:	d82f      	bhi.n	3418a52c <RCCEx_GetSPICLKFreq+0x528>
3418a4cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4d0:	d01a      	beq.n	3418a508 <RCCEx_GetSPICLKFreq+0x504>
3418a4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4d6:	d829      	bhi.n	3418a52c <RCCEx_GetSPICLKFreq+0x528>
3418a4d8:	2b00      	cmp	r3, #0
3418a4da:	d003      	beq.n	3418a4e4 <RCCEx_GetSPICLKFreq+0x4e0>
3418a4dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a4e0:	d009      	beq.n	3418a4f6 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a4e2:	e023      	b.n	3418a52c <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a4e4:	f7fd f99e 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418a4e8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a4ea:	68fa      	ldr	r2, [r7, #12]
3418a4ec:	68bb      	ldr	r3, [r7, #8]
3418a4ee:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4f2:	60fb      	str	r3, [r7, #12]
            break;
3418a4f4:	e01b      	b.n	3418a52e <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a4f6:	f7fd f9db 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418a4fa:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a4fc:	68fa      	ldr	r2, [r7, #12]
3418a4fe:	68bb      	ldr	r3, [r7, #8]
3418a500:	fbb2 f3f3 	udiv	r3, r2, r3
3418a504:	60fb      	str	r3, [r7, #12]
            break;
3418a506:	e012      	b.n	3418a52e <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a508:	f7fd fa18 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418a50c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a50e:	68fa      	ldr	r2, [r7, #12]
3418a510:	68bb      	ldr	r3, [r7, #8]
3418a512:	fbb2 f3f3 	udiv	r3, r2, r3
3418a516:	60fb      	str	r3, [r7, #12]
            break;
3418a518:	e009      	b.n	3418a52e <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a51a:	f7fd fa55 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418a51e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a520:	68fa      	ldr	r2, [r7, #12]
3418a522:	68bb      	ldr	r3, [r7, #8]
3418a524:	fbb2 f3f3 	udiv	r3, r2, r3
3418a528:	60fb      	str	r3, [r7, #12]
            break;
3418a52a:	e000      	b.n	3418a52e <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418a52c:	bf00      	nop
        }
      }
      break;
3418a52e:	e026      	b.n	3418a57e <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a530:	f7f8 ff00 	bl	34183334 <LL_RCC_HSI_IsReady>
3418a534:	4603      	mov	r3, r0
3418a536:	2b00      	cmp	r3, #0
3418a538:	d023      	beq.n	3418a582 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a53a:	f7f8 ff0d 	bl	34183358 <LL_RCC_HSI_GetDivider>
3418a53e:	4603      	mov	r3, r0
3418a540:	09db      	lsrs	r3, r3, #7
3418a542:	4a15      	ldr	r2, [pc, #84]	@ (3418a598 <RCCEx_GetSPICLKFreq+0x594>)
3418a544:	fa22 f303 	lsr.w	r3, r2, r3
3418a548:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a54a:	e01a      	b.n	3418a582 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a54c:	f7f8 ff12 	bl	34183374 <LL_RCC_MSI_IsReady>
3418a550:	4603      	mov	r3, r0
3418a552:	2b00      	cmp	r3, #0
3418a554:	d017      	beq.n	3418a586 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418a556:	4b11      	ldr	r3, [pc, #68]	@ (3418a59c <RCCEx_GetSPICLKFreq+0x598>)
3418a558:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a55a:	e014      	b.n	3418a586 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418a55c:	4b10      	ldr	r3, [pc, #64]	@ (3418a5a0 <RCCEx_GetSPICLKFreq+0x59c>)
3418a55e:	60fb      	str	r3, [r7, #12]
      break;
3418a560:	e014      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418a562:	f7f8 fed5 	bl	34183310 <LL_RCC_HSE_IsReady>
3418a566:	4603      	mov	r3, r0
3418a568:	2b00      	cmp	r3, #0
3418a56a:	d00e      	beq.n	3418a58a <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418a56c:	4b0d      	ldr	r3, [pc, #52]	@ (3418a5a4 <RCCEx_GetSPICLKFreq+0x5a0>)
3418a56e:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a570:	e00b      	b.n	3418a58a <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418a572:	bf00      	nop
3418a574:	e00a      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a576:	bf00      	nop
3418a578:	e008      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a57a:	bf00      	nop
3418a57c:	e006      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a57e:	bf00      	nop
3418a580:	e004      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a582:	bf00      	nop
3418a584:	e002      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a586:	bf00      	nop
3418a588:	e000      	b.n	3418a58c <RCCEx_GetSPICLKFreq+0x588>
      break;
3418a58a:	bf00      	nop
  }

  return spi_frequency;
3418a58c:	68fb      	ldr	r3, [r7, #12]
}
3418a58e:	4618      	mov	r0, r3
3418a590:	3710      	adds	r7, #16
3418a592:	46bd      	mov	sp, r7
3418a594:	bd80      	pop	{r7, pc}
3418a596:	bf00      	nop
3418a598:	03d09000 	.word	0x03d09000
3418a59c:	003d0900 	.word	0x003d0900
3418a5a0:	00bb8000 	.word	0x00bb8000
3418a5a4:	02dc6c00 	.word	0x02dc6c00

3418a5a8 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418a5a8:	b580      	push	{r7, lr}
3418a5aa:	b084      	sub	sp, #16
3418a5ac:	af00      	add	r7, sp, #0
3418a5ae:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a5b0:	2300      	movs	r3, #0
3418a5b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418a5b4:	6878      	ldr	r0, [r7, #4]
3418a5b6:	f7f9 fab1 	bl	34183b1c <LL_RCC_GetUARTClockSource>
3418a5ba:	4603      	mov	r3, r0
3418a5bc:	4aa2      	ldr	r2, [pc, #648]	@ (3418a848 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418a5be:	4293      	cmp	r3, r2
3418a5c0:	f000 81e8 	beq.w	3418a994 <RCCEx_GetUARTCLKFreq+0x3ec>
3418a5c4:	4aa0      	ldr	r2, [pc, #640]	@ (3418a848 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418a5c6:	4293      	cmp	r3, r2
3418a5c8:	f200 8203 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a5cc:	4a9f      	ldr	r2, [pc, #636]	@ (3418a84c <RCCEx_GetUARTCLKFreq+0x2a4>)
3418a5ce:	4293      	cmp	r3, r2
3418a5d0:	f000 81e0 	beq.w	3418a994 <RCCEx_GetUARTCLKFreq+0x3ec>
3418a5d4:	4a9d      	ldr	r2, [pc, #628]	@ (3418a84c <RCCEx_GetUARTCLKFreq+0x2a4>)
3418a5d6:	4293      	cmp	r3, r2
3418a5d8:	f200 81fb 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a5dc:	4a9c      	ldr	r2, [pc, #624]	@ (3418a850 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418a5de:	4293      	cmp	r3, r2
3418a5e0:	f000 81d8 	beq.w	3418a994 <RCCEx_GetUARTCLKFreq+0x3ec>
3418a5e4:	4a9a      	ldr	r2, [pc, #616]	@ (3418a850 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418a5e6:	4293      	cmp	r3, r2
3418a5e8:	f200 81f3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a5ec:	4a99      	ldr	r2, [pc, #612]	@ (3418a854 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418a5ee:	4293      	cmp	r3, r2
3418a5f0:	f000 81d0 	beq.w	3418a994 <RCCEx_GetUARTCLKFreq+0x3ec>
3418a5f4:	4a97      	ldr	r2, [pc, #604]	@ (3418a854 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418a5f6:	4293      	cmp	r3, r2
3418a5f8:	f200 81eb 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a5fc:	4a96      	ldr	r2, [pc, #600]	@ (3418a858 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418a5fe:	4293      	cmp	r3, r2
3418a600:	f000 81c8 	beq.w	3418a994 <RCCEx_GetUARTCLKFreq+0x3ec>
3418a604:	4a94      	ldr	r2, [pc, #592]	@ (3418a858 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418a606:	4293      	cmp	r3, r2
3418a608:	f200 81e3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a60c:	4a93      	ldr	r2, [pc, #588]	@ (3418a85c <RCCEx_GetUARTCLKFreq+0x2b4>)
3418a60e:	4293      	cmp	r3, r2
3418a610:	f000 81ce 	beq.w	3418a9b0 <RCCEx_GetUARTCLKFreq+0x408>
3418a614:	4a91      	ldr	r2, [pc, #580]	@ (3418a85c <RCCEx_GetUARTCLKFreq+0x2b4>)
3418a616:	4293      	cmp	r3, r2
3418a618:	f200 81db 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a61c:	4a90      	ldr	r2, [pc, #576]	@ (3418a860 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418a61e:	4293      	cmp	r3, r2
3418a620:	f000 81c6 	beq.w	3418a9b0 <RCCEx_GetUARTCLKFreq+0x408>
3418a624:	4a8e      	ldr	r2, [pc, #568]	@ (3418a860 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418a626:	4293      	cmp	r3, r2
3418a628:	f200 81d3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a62c:	4a8d      	ldr	r2, [pc, #564]	@ (3418a864 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418a62e:	4293      	cmp	r3, r2
3418a630:	f000 81be 	beq.w	3418a9b0 <RCCEx_GetUARTCLKFreq+0x408>
3418a634:	4a8b      	ldr	r2, [pc, #556]	@ (3418a864 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418a636:	4293      	cmp	r3, r2
3418a638:	f200 81cb 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a63c:	4a8a      	ldr	r2, [pc, #552]	@ (3418a868 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418a63e:	4293      	cmp	r3, r2
3418a640:	f000 81b6 	beq.w	3418a9b0 <RCCEx_GetUARTCLKFreq+0x408>
3418a644:	4a88      	ldr	r2, [pc, #544]	@ (3418a868 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418a646:	4293      	cmp	r3, r2
3418a648:	f200 81c3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a64c:	4a87      	ldr	r2, [pc, #540]	@ (3418a86c <RCCEx_GetUARTCLKFreq+0x2c4>)
3418a64e:	4293      	cmp	r3, r2
3418a650:	f000 81ae 	beq.w	3418a9b0 <RCCEx_GetUARTCLKFreq+0x408>
3418a654:	4a85      	ldr	r2, [pc, #532]	@ (3418a86c <RCCEx_GetUARTCLKFreq+0x2c4>)
3418a656:	4293      	cmp	r3, r2
3418a658:	f200 81bb 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a65c:	4a84      	ldr	r2, [pc, #528]	@ (3418a870 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418a65e:	4293      	cmp	r3, r2
3418a660:	f000 81ae 	beq.w	3418a9c0 <RCCEx_GetUARTCLKFreq+0x418>
3418a664:	4a82      	ldr	r2, [pc, #520]	@ (3418a870 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418a666:	4293      	cmp	r3, r2
3418a668:	f200 81b3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a66c:	4a81      	ldr	r2, [pc, #516]	@ (3418a874 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418a66e:	4293      	cmp	r3, r2
3418a670:	f000 81a6 	beq.w	3418a9c0 <RCCEx_GetUARTCLKFreq+0x418>
3418a674:	4a7f      	ldr	r2, [pc, #508]	@ (3418a874 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418a676:	4293      	cmp	r3, r2
3418a678:	f200 81ab 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a67c:	4a7e      	ldr	r2, [pc, #504]	@ (3418a878 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418a67e:	4293      	cmp	r3, r2
3418a680:	f000 819e 	beq.w	3418a9c0 <RCCEx_GetUARTCLKFreq+0x418>
3418a684:	4a7c      	ldr	r2, [pc, #496]	@ (3418a878 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418a686:	4293      	cmp	r3, r2
3418a688:	f200 81a3 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a68c:	4a7b      	ldr	r2, [pc, #492]	@ (3418a87c <RCCEx_GetUARTCLKFreq+0x2d4>)
3418a68e:	4293      	cmp	r3, r2
3418a690:	f000 8196 	beq.w	3418a9c0 <RCCEx_GetUARTCLKFreq+0x418>
3418a694:	4a79      	ldr	r2, [pc, #484]	@ (3418a87c <RCCEx_GetUARTCLKFreq+0x2d4>)
3418a696:	4293      	cmp	r3, r2
3418a698:	f200 819b 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a69c:	4a78      	ldr	r2, [pc, #480]	@ (3418a880 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418a69e:	4293      	cmp	r3, r2
3418a6a0:	f000 818e 	beq.w	3418a9c0 <RCCEx_GetUARTCLKFreq+0x418>
3418a6a4:	4a76      	ldr	r2, [pc, #472]	@ (3418a880 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418a6a6:	4293      	cmp	r3, r2
3418a6a8:	f200 8193 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6ac:	4a75      	ldr	r2, [pc, #468]	@ (3418a884 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418a6ae:	4293      	cmp	r3, r2
3418a6b0:	f000 812d 	beq.w	3418a90e <RCCEx_GetUARTCLKFreq+0x366>
3418a6b4:	4a73      	ldr	r2, [pc, #460]	@ (3418a884 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418a6b6:	4293      	cmp	r3, r2
3418a6b8:	f200 818b 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6bc:	4a72      	ldr	r2, [pc, #456]	@ (3418a888 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418a6be:	4293      	cmp	r3, r2
3418a6c0:	f000 8125 	beq.w	3418a90e <RCCEx_GetUARTCLKFreq+0x366>
3418a6c4:	4a70      	ldr	r2, [pc, #448]	@ (3418a888 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418a6c6:	4293      	cmp	r3, r2
3418a6c8:	f200 8183 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6cc:	4a6f      	ldr	r2, [pc, #444]	@ (3418a88c <RCCEx_GetUARTCLKFreq+0x2e4>)
3418a6ce:	4293      	cmp	r3, r2
3418a6d0:	f000 811d 	beq.w	3418a90e <RCCEx_GetUARTCLKFreq+0x366>
3418a6d4:	4a6d      	ldr	r2, [pc, #436]	@ (3418a88c <RCCEx_GetUARTCLKFreq+0x2e4>)
3418a6d6:	4293      	cmp	r3, r2
3418a6d8:	f200 817b 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6dc:	4a6c      	ldr	r2, [pc, #432]	@ (3418a890 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418a6de:	4293      	cmp	r3, r2
3418a6e0:	f000 8115 	beq.w	3418a90e <RCCEx_GetUARTCLKFreq+0x366>
3418a6e4:	4a6a      	ldr	r2, [pc, #424]	@ (3418a890 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418a6e6:	4293      	cmp	r3, r2
3418a6e8:	f200 8173 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6ec:	4a69      	ldr	r2, [pc, #420]	@ (3418a894 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418a6ee:	4293      	cmp	r3, r2
3418a6f0:	f000 810d 	beq.w	3418a90e <RCCEx_GetUARTCLKFreq+0x366>
3418a6f4:	4a67      	ldr	r2, [pc, #412]	@ (3418a894 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418a6f6:	4293      	cmp	r3, r2
3418a6f8:	f200 816b 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a6fc:	4a66      	ldr	r2, [pc, #408]	@ (3418a898 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418a6fe:	4293      	cmp	r3, r2
3418a700:	d07b      	beq.n	3418a7fa <RCCEx_GetUARTCLKFreq+0x252>
3418a702:	4a65      	ldr	r2, [pc, #404]	@ (3418a898 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418a704:	4293      	cmp	r3, r2
3418a706:	f200 8164 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a70a:	4a64      	ldr	r2, [pc, #400]	@ (3418a89c <RCCEx_GetUARTCLKFreq+0x2f4>)
3418a70c:	4293      	cmp	r3, r2
3418a70e:	d074      	beq.n	3418a7fa <RCCEx_GetUARTCLKFreq+0x252>
3418a710:	4a62      	ldr	r2, [pc, #392]	@ (3418a89c <RCCEx_GetUARTCLKFreq+0x2f4>)
3418a712:	4293      	cmp	r3, r2
3418a714:	f200 815d 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a718:	4a61      	ldr	r2, [pc, #388]	@ (3418a8a0 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418a71a:	4293      	cmp	r3, r2
3418a71c:	d06d      	beq.n	3418a7fa <RCCEx_GetUARTCLKFreq+0x252>
3418a71e:	4a60      	ldr	r2, [pc, #384]	@ (3418a8a0 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418a720:	4293      	cmp	r3, r2
3418a722:	f200 8156 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a726:	4a5f      	ldr	r2, [pc, #380]	@ (3418a8a4 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418a728:	4293      	cmp	r3, r2
3418a72a:	d066      	beq.n	3418a7fa <RCCEx_GetUARTCLKFreq+0x252>
3418a72c:	4a5d      	ldr	r2, [pc, #372]	@ (3418a8a4 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418a72e:	4293      	cmp	r3, r2
3418a730:	f200 814f 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a734:	4a5c      	ldr	r2, [pc, #368]	@ (3418a8a8 <RCCEx_GetUARTCLKFreq+0x300>)
3418a736:	4293      	cmp	r3, r2
3418a738:	d05f      	beq.n	3418a7fa <RCCEx_GetUARTCLKFreq+0x252>
3418a73a:	4a5b      	ldr	r2, [pc, #364]	@ (3418a8a8 <RCCEx_GetUARTCLKFreq+0x300>)
3418a73c:	4293      	cmp	r3, r2
3418a73e:	f200 8148 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a742:	4a5a      	ldr	r2, [pc, #360]	@ (3418a8ac <RCCEx_GetUARTCLKFreq+0x304>)
3418a744:	4293      	cmp	r3, r2
3418a746:	d053      	beq.n	3418a7f0 <RCCEx_GetUARTCLKFreq+0x248>
3418a748:	4a58      	ldr	r2, [pc, #352]	@ (3418a8ac <RCCEx_GetUARTCLKFreq+0x304>)
3418a74a:	4293      	cmp	r3, r2
3418a74c:	f200 8141 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a750:	4a57      	ldr	r2, [pc, #348]	@ (3418a8b0 <RCCEx_GetUARTCLKFreq+0x308>)
3418a752:	4293      	cmp	r3, r2
3418a754:	d04c      	beq.n	3418a7f0 <RCCEx_GetUARTCLKFreq+0x248>
3418a756:	4a56      	ldr	r2, [pc, #344]	@ (3418a8b0 <RCCEx_GetUARTCLKFreq+0x308>)
3418a758:	4293      	cmp	r3, r2
3418a75a:	f200 813a 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a75e:	4a55      	ldr	r2, [pc, #340]	@ (3418a8b4 <RCCEx_GetUARTCLKFreq+0x30c>)
3418a760:	4293      	cmp	r3, r2
3418a762:	d045      	beq.n	3418a7f0 <RCCEx_GetUARTCLKFreq+0x248>
3418a764:	4a53      	ldr	r2, [pc, #332]	@ (3418a8b4 <RCCEx_GetUARTCLKFreq+0x30c>)
3418a766:	4293      	cmp	r3, r2
3418a768:	f200 8133 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a76c:	4a52      	ldr	r2, [pc, #328]	@ (3418a8b8 <RCCEx_GetUARTCLKFreq+0x310>)
3418a76e:	4293      	cmp	r3, r2
3418a770:	d03e      	beq.n	3418a7f0 <RCCEx_GetUARTCLKFreq+0x248>
3418a772:	4a51      	ldr	r2, [pc, #324]	@ (3418a8b8 <RCCEx_GetUARTCLKFreq+0x310>)
3418a774:	4293      	cmp	r3, r2
3418a776:	f200 812c 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a77a:	4a50      	ldr	r2, [pc, #320]	@ (3418a8bc <RCCEx_GetUARTCLKFreq+0x314>)
3418a77c:	4293      	cmp	r3, r2
3418a77e:	d037      	beq.n	3418a7f0 <RCCEx_GetUARTCLKFreq+0x248>
3418a780:	4a4e      	ldr	r2, [pc, #312]	@ (3418a8bc <RCCEx_GetUARTCLKFreq+0x314>)
3418a782:	4293      	cmp	r3, r2
3418a784:	f200 8125 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a788:	4a4d      	ldr	r2, [pc, #308]	@ (3418a8c0 <RCCEx_GetUARTCLKFreq+0x318>)
3418a78a:	4293      	cmp	r3, r2
3418a78c:	d018      	beq.n	3418a7c0 <RCCEx_GetUARTCLKFreq+0x218>
3418a78e:	4a4c      	ldr	r2, [pc, #304]	@ (3418a8c0 <RCCEx_GetUARTCLKFreq+0x318>)
3418a790:	4293      	cmp	r3, r2
3418a792:	f200 811e 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a796:	4a4b      	ldr	r2, [pc, #300]	@ (3418a8c4 <RCCEx_GetUARTCLKFreq+0x31c>)
3418a798:	4293      	cmp	r3, r2
3418a79a:	d011      	beq.n	3418a7c0 <RCCEx_GetUARTCLKFreq+0x218>
3418a79c:	4a49      	ldr	r2, [pc, #292]	@ (3418a8c4 <RCCEx_GetUARTCLKFreq+0x31c>)
3418a79e:	4293      	cmp	r3, r2
3418a7a0:	f200 8117 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a7a4:	4a48      	ldr	r2, [pc, #288]	@ (3418a8c8 <RCCEx_GetUARTCLKFreq+0x320>)
3418a7a6:	4293      	cmp	r3, r2
3418a7a8:	d00a      	beq.n	3418a7c0 <RCCEx_GetUARTCLKFreq+0x218>
3418a7aa:	4a47      	ldr	r2, [pc, #284]	@ (3418a8c8 <RCCEx_GetUARTCLKFreq+0x320>)
3418a7ac:	4293      	cmp	r3, r2
3418a7ae:	f200 8110 	bhi.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
3418a7b2:	4a46      	ldr	r2, [pc, #280]	@ (3418a8cc <RCCEx_GetUARTCLKFreq+0x324>)
3418a7b4:	4293      	cmp	r3, r2
3418a7b6:	d00f      	beq.n	3418a7d8 <RCCEx_GetUARTCLKFreq+0x230>
3418a7b8:	4a45      	ldr	r2, [pc, #276]	@ (3418a8d0 <RCCEx_GetUARTCLKFreq+0x328>)
3418a7ba:	4293      	cmp	r3, r2
3418a7bc:	f040 8109 	bne.w	3418a9d2 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a7c0:	f7f8 f9b8 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418a7c4:	4603      	mov	r3, r0
3418a7c6:	4618      	mov	r0, r3
3418a7c8:	f7fd f944 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418a7cc:	4603      	mov	r3, r0
3418a7ce:	4618      	mov	r0, r3
3418a7d0:	f7fd f951 	bl	34187a76 <RCCEx_GetPCLK1Freq>
3418a7d4:	60f8      	str	r0, [r7, #12]
      break;
3418a7d6:	e107      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a7d8:	f7f8 f9ac 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418a7dc:	4603      	mov	r3, r0
3418a7de:	4618      	mov	r0, r3
3418a7e0:	f7fd f938 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418a7e4:	4603      	mov	r3, r0
3418a7e6:	4618      	mov	r0, r3
3418a7e8:	f7fd f955 	bl	34187a96 <RCCEx_GetPCLK2Freq>
3418a7ec:	60f8      	str	r0, [r7, #12]
      break;
3418a7ee:	e0fb      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a7f0:	2007      	movs	r0, #7
3418a7f2:	f7fd fc1b 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418a7f6:	60f8      	str	r0, [r7, #12]
      break;
3418a7f8:	e0f6      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418a7fa:	f7f9 fdbf 	bl	3418437c <LL_RCC_IC9_IsEnabled>
3418a7fe:	4603      	mov	r3, r0
3418a800:	2b00      	cmp	r3, #0
3418a802:	f000 80e8 	beq.w	3418a9d6 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418a806:	f7f9 fddb 	bl	341843c0 <LL_RCC_IC9_GetDivider>
3418a80a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418a80c:	f7f9 fdca 	bl	341843a4 <LL_RCC_IC9_GetSource>
3418a810:	4603      	mov	r3, r0
3418a812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a816:	d06f      	beq.n	3418a8f8 <RCCEx_GetUARTCLKFreq+0x350>
3418a818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a81c:	d875      	bhi.n	3418a90a <RCCEx_GetUARTCLKFreq+0x362>
3418a81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a822:	d060      	beq.n	3418a8e6 <RCCEx_GetUARTCLKFreq+0x33e>
3418a824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a828:	d86f      	bhi.n	3418a90a <RCCEx_GetUARTCLKFreq+0x362>
3418a82a:	2b00      	cmp	r3, #0
3418a82c:	d003      	beq.n	3418a836 <RCCEx_GetUARTCLKFreq+0x28e>
3418a82e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a832:	d04f      	beq.n	3418a8d4 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a834:	e069      	b.n	3418a90a <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a836:	f7fc fff5 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418a83a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a83c:	68fa      	ldr	r2, [r7, #12]
3418a83e:	68bb      	ldr	r3, [r7, #8]
3418a840:	fbb2 f3f3 	udiv	r3, r2, r3
3418a844:	60fb      	str	r3, [r7, #12]
            break;
3418a846:	e061      	b.n	3418a90c <RCCEx_GetUARTCLKFreq+0x364>
3418a848:	07061c30 	.word	0x07061c30
3418a84c:	07061830 	.word	0x07061830
3418a850:	07061030 	.word	0x07061030
3418a854:	07060c30 	.word	0x07060c30
3418a858:	07060034 	.word	0x07060034
3418a85c:	07051c30 	.word	0x07051c30
3418a860:	07051830 	.word	0x07051830
3418a864:	07051030 	.word	0x07051030
3418a868:	07050c30 	.word	0x07050c30
3418a86c:	07050034 	.word	0x07050034
3418a870:	07041c30 	.word	0x07041c30
3418a874:	07041830 	.word	0x07041830
3418a878:	07041030 	.word	0x07041030
3418a87c:	07040c30 	.word	0x07040c30
3418a880:	07040034 	.word	0x07040034
3418a884:	07031c30 	.word	0x07031c30
3418a888:	07031830 	.word	0x07031830
3418a88c:	07031030 	.word	0x07031030
3418a890:	07030c30 	.word	0x07030c30
3418a894:	07030034 	.word	0x07030034
3418a898:	07021c30 	.word	0x07021c30
3418a89c:	07021830 	.word	0x07021830
3418a8a0:	07021030 	.word	0x07021030
3418a8a4:	07020c30 	.word	0x07020c30
3418a8a8:	07020034 	.word	0x07020034
3418a8ac:	07011c30 	.word	0x07011c30
3418a8b0:	07011830 	.word	0x07011830
3418a8b4:	07011030 	.word	0x07011030
3418a8b8:	07010c30 	.word	0x07010c30
3418a8bc:	07010034 	.word	0x07010034
3418a8c0:	07001c30 	.word	0x07001c30
3418a8c4:	07001830 	.word	0x07001830
3418a8c8:	07001030 	.word	0x07001030
3418a8cc:	07000034 	.word	0x07000034
3418a8d0:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a8d4:	f7fc ffec 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418a8d8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a8da:	68fa      	ldr	r2, [r7, #12]
3418a8dc:	68bb      	ldr	r3, [r7, #8]
3418a8de:	fbb2 f3f3 	udiv	r3, r2, r3
3418a8e2:	60fb      	str	r3, [r7, #12]
            break;
3418a8e4:	e012      	b.n	3418a90c <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a8e6:	f7fd f829 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418a8ea:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a8ec:	68fa      	ldr	r2, [r7, #12]
3418a8ee:	68bb      	ldr	r3, [r7, #8]
3418a8f0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a8f4:	60fb      	str	r3, [r7, #12]
            break;
3418a8f6:	e009      	b.n	3418a90c <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a8f8:	f7fd f866 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418a8fc:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a8fe:	68fa      	ldr	r2, [r7, #12]
3418a900:	68bb      	ldr	r3, [r7, #8]
3418a902:	fbb2 f3f3 	udiv	r3, r2, r3
3418a906:	60fb      	str	r3, [r7, #12]
            break;
3418a908:	e000      	b.n	3418a90c <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418a90a:	bf00      	nop
        }
      }
      break;
3418a90c:	e063      	b.n	3418a9d6 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418a90e:	f7f9 fe35 	bl	3418457c <LL_RCC_IC14_IsEnabled>
3418a912:	4603      	mov	r3, r0
3418a914:	2b00      	cmp	r3, #0
3418a916:	d060      	beq.n	3418a9da <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418a918:	f7f9 fe52 	bl	341845c0 <LL_RCC_IC14_GetDivider>
3418a91c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418a91e:	f7f9 fe41 	bl	341845a4 <LL_RCC_IC14_GetSource>
3418a922:	4603      	mov	r3, r0
3418a924:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a928:	d029      	beq.n	3418a97e <RCCEx_GetUARTCLKFreq+0x3d6>
3418a92a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a92e:	d82f      	bhi.n	3418a990 <RCCEx_GetUARTCLKFreq+0x3e8>
3418a930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a934:	d01a      	beq.n	3418a96c <RCCEx_GetUARTCLKFreq+0x3c4>
3418a936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a93a:	d829      	bhi.n	3418a990 <RCCEx_GetUARTCLKFreq+0x3e8>
3418a93c:	2b00      	cmp	r3, #0
3418a93e:	d003      	beq.n	3418a948 <RCCEx_GetUARTCLKFreq+0x3a0>
3418a940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a944:	d009      	beq.n	3418a95a <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a946:	e023      	b.n	3418a990 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a948:	f7fc ff6c 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418a94c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a94e:	68fa      	ldr	r2, [r7, #12]
3418a950:	68bb      	ldr	r3, [r7, #8]
3418a952:	fbb2 f3f3 	udiv	r3, r2, r3
3418a956:	60fb      	str	r3, [r7, #12]
            break;
3418a958:	e01b      	b.n	3418a992 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a95a:	f7fc ffa9 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418a95e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a960:	68fa      	ldr	r2, [r7, #12]
3418a962:	68bb      	ldr	r3, [r7, #8]
3418a964:	fbb2 f3f3 	udiv	r3, r2, r3
3418a968:	60fb      	str	r3, [r7, #12]
            break;
3418a96a:	e012      	b.n	3418a992 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a96c:	f7fc ffe6 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418a970:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a972:	68fa      	ldr	r2, [r7, #12]
3418a974:	68bb      	ldr	r3, [r7, #8]
3418a976:	fbb2 f3f3 	udiv	r3, r2, r3
3418a97a:	60fb      	str	r3, [r7, #12]
            break;
3418a97c:	e009      	b.n	3418a992 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a97e:	f7fd f823 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418a982:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418a984:	68fa      	ldr	r2, [r7, #12]
3418a986:	68bb      	ldr	r3, [r7, #8]
3418a988:	fbb2 f3f3 	udiv	r3, r2, r3
3418a98c:	60fb      	str	r3, [r7, #12]
            break;
3418a98e:	e000      	b.n	3418a992 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418a990:	bf00      	nop
        }
      }
      break;
3418a992:	e022      	b.n	3418a9da <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a994:	f7f8 fcce 	bl	34183334 <LL_RCC_HSI_IsReady>
3418a998:	4603      	mov	r3, r0
3418a99a:	2b00      	cmp	r3, #0
3418a99c:	d01f      	beq.n	3418a9de <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a99e:	f7f8 fcdb 	bl	34183358 <LL_RCC_HSI_GetDivider>
3418a9a2:	4603      	mov	r3, r0
3418a9a4:	09db      	lsrs	r3, r3, #7
3418a9a6:	4a13      	ldr	r2, [pc, #76]	@ (3418a9f4 <RCCEx_GetUARTCLKFreq+0x44c>)
3418a9a8:	fa22 f303 	lsr.w	r3, r2, r3
3418a9ac:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a9ae:	e016      	b.n	3418a9de <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a9b0:	f7f8 fce0 	bl	34183374 <LL_RCC_MSI_IsReady>
3418a9b4:	4603      	mov	r3, r0
3418a9b6:	2b00      	cmp	r3, #0
3418a9b8:	d013      	beq.n	3418a9e2 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418a9ba:	4b0f      	ldr	r3, [pc, #60]	@ (3418a9f8 <RCCEx_GetUARTCLKFreq+0x450>)
3418a9bc:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a9be:	e010      	b.n	3418a9e2 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418a9c0:	f7f8 fcf8 	bl	341833b4 <LL_RCC_LSE_IsReady>
3418a9c4:	4603      	mov	r3, r0
3418a9c6:	2b00      	cmp	r3, #0
3418a9c8:	d00d      	beq.n	3418a9e6 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418a9ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418a9ce:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a9d0:	e009      	b.n	3418a9e6 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418a9d2:	bf00      	nop
3418a9d4:	e008      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418a9d6:	bf00      	nop
3418a9d8:	e006      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418a9da:	bf00      	nop
3418a9dc:	e004      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418a9de:	bf00      	nop
3418a9e0:	e002      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418a9e2:	bf00      	nop
3418a9e4:	e000      	b.n	3418a9e8 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418a9e6:	bf00      	nop
  }

  return uart_frequency;
3418a9e8:	68fb      	ldr	r3, [r7, #12]
}
3418a9ea:	4618      	mov	r0, r3
3418a9ec:	3710      	adds	r7, #16
3418a9ee:	46bd      	mov	sp, r7
3418a9f0:	bd80      	pop	{r7, pc}
3418a9f2:	bf00      	nop
3418a9f4:	03d09000 	.word	0x03d09000
3418a9f8:	003d0900 	.word	0x003d0900

3418a9fc <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418a9fc:	b580      	push	{r7, lr}
3418a9fe:	b084      	sub	sp, #16
3418aa00:	af00      	add	r7, sp, #0
3418aa02:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418aa04:	2300      	movs	r3, #0
3418aa06:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418aa08:	6878      	ldr	r0, [r7, #4]
3418aa0a:	f7f9 f87b 	bl	34183b04 <LL_RCC_GetUSARTClockSource>
3418aa0e:	4603      	mov	r3, r0
3418aa10:	4aa2      	ldr	r2, [pc, #648]	@ (3418ac9c <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418aa12:	4293      	cmp	r3, r2
3418aa14:	f000 81e8 	beq.w	3418ade8 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aa18:	4aa0      	ldr	r2, [pc, #640]	@ (3418ac9c <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418aa1a:	4293      	cmp	r3, r2
3418aa1c:	f200 8203 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa20:	4a9f      	ldr	r2, [pc, #636]	@ (3418aca0 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418aa22:	4293      	cmp	r3, r2
3418aa24:	f000 81e0 	beq.w	3418ade8 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aa28:	4a9d      	ldr	r2, [pc, #628]	@ (3418aca0 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418aa2a:	4293      	cmp	r3, r2
3418aa2c:	f200 81fb 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa30:	4a9c      	ldr	r2, [pc, #624]	@ (3418aca4 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418aa32:	4293      	cmp	r3, r2
3418aa34:	f000 81d8 	beq.w	3418ade8 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aa38:	4a9a      	ldr	r2, [pc, #616]	@ (3418aca4 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418aa3a:	4293      	cmp	r3, r2
3418aa3c:	f200 81f3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa40:	4a99      	ldr	r2, [pc, #612]	@ (3418aca8 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418aa42:	4293      	cmp	r3, r2
3418aa44:	f000 81d0 	beq.w	3418ade8 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aa48:	4a97      	ldr	r2, [pc, #604]	@ (3418aca8 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418aa4a:	4293      	cmp	r3, r2
3418aa4c:	f200 81eb 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa50:	4a96      	ldr	r2, [pc, #600]	@ (3418acac <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418aa52:	4293      	cmp	r3, r2
3418aa54:	f000 81c8 	beq.w	3418ade8 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aa58:	4a94      	ldr	r2, [pc, #592]	@ (3418acac <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418aa5a:	4293      	cmp	r3, r2
3418aa5c:	f200 81e3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa60:	4a93      	ldr	r2, [pc, #588]	@ (3418acb0 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418aa62:	4293      	cmp	r3, r2
3418aa64:	f000 81ce 	beq.w	3418ae04 <RCCEx_GetUSARTCLKFreq+0x408>
3418aa68:	4a91      	ldr	r2, [pc, #580]	@ (3418acb0 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418aa6a:	4293      	cmp	r3, r2
3418aa6c:	f200 81db 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa70:	4a90      	ldr	r2, [pc, #576]	@ (3418acb4 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418aa72:	4293      	cmp	r3, r2
3418aa74:	f000 81c6 	beq.w	3418ae04 <RCCEx_GetUSARTCLKFreq+0x408>
3418aa78:	4a8e      	ldr	r2, [pc, #568]	@ (3418acb4 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418aa7a:	4293      	cmp	r3, r2
3418aa7c:	f200 81d3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa80:	4a8d      	ldr	r2, [pc, #564]	@ (3418acb8 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418aa82:	4293      	cmp	r3, r2
3418aa84:	f000 81be 	beq.w	3418ae04 <RCCEx_GetUSARTCLKFreq+0x408>
3418aa88:	4a8b      	ldr	r2, [pc, #556]	@ (3418acb8 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418aa8a:	4293      	cmp	r3, r2
3418aa8c:	f200 81cb 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aa90:	4a8a      	ldr	r2, [pc, #552]	@ (3418acbc <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418aa92:	4293      	cmp	r3, r2
3418aa94:	f000 81b6 	beq.w	3418ae04 <RCCEx_GetUSARTCLKFreq+0x408>
3418aa98:	4a88      	ldr	r2, [pc, #544]	@ (3418acbc <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418aa9a:	4293      	cmp	r3, r2
3418aa9c:	f200 81c3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aaa0:	4a87      	ldr	r2, [pc, #540]	@ (3418acc0 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418aaa2:	4293      	cmp	r3, r2
3418aaa4:	f000 81ae 	beq.w	3418ae04 <RCCEx_GetUSARTCLKFreq+0x408>
3418aaa8:	4a85      	ldr	r2, [pc, #532]	@ (3418acc0 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418aaaa:	4293      	cmp	r3, r2
3418aaac:	f200 81bb 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aab0:	4a84      	ldr	r2, [pc, #528]	@ (3418acc4 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418aab2:	4293      	cmp	r3, r2
3418aab4:	f000 81ae 	beq.w	3418ae14 <RCCEx_GetUSARTCLKFreq+0x418>
3418aab8:	4a82      	ldr	r2, [pc, #520]	@ (3418acc4 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418aaba:	4293      	cmp	r3, r2
3418aabc:	f200 81b3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aac0:	4a81      	ldr	r2, [pc, #516]	@ (3418acc8 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418aac2:	4293      	cmp	r3, r2
3418aac4:	f000 81a6 	beq.w	3418ae14 <RCCEx_GetUSARTCLKFreq+0x418>
3418aac8:	4a7f      	ldr	r2, [pc, #508]	@ (3418acc8 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418aaca:	4293      	cmp	r3, r2
3418aacc:	f200 81ab 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aad0:	4a7e      	ldr	r2, [pc, #504]	@ (3418accc <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418aad2:	4293      	cmp	r3, r2
3418aad4:	f000 819e 	beq.w	3418ae14 <RCCEx_GetUSARTCLKFreq+0x418>
3418aad8:	4a7c      	ldr	r2, [pc, #496]	@ (3418accc <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418aada:	4293      	cmp	r3, r2
3418aadc:	f200 81a3 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aae0:	4a7b      	ldr	r2, [pc, #492]	@ (3418acd0 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418aae2:	4293      	cmp	r3, r2
3418aae4:	f000 8196 	beq.w	3418ae14 <RCCEx_GetUSARTCLKFreq+0x418>
3418aae8:	4a79      	ldr	r2, [pc, #484]	@ (3418acd0 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418aaea:	4293      	cmp	r3, r2
3418aaec:	f200 819b 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aaf0:	4a78      	ldr	r2, [pc, #480]	@ (3418acd4 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418aaf2:	4293      	cmp	r3, r2
3418aaf4:	f000 818e 	beq.w	3418ae14 <RCCEx_GetUSARTCLKFreq+0x418>
3418aaf8:	4a76      	ldr	r2, [pc, #472]	@ (3418acd4 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418aafa:	4293      	cmp	r3, r2
3418aafc:	f200 8193 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab00:	4a75      	ldr	r2, [pc, #468]	@ (3418acd8 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418ab02:	4293      	cmp	r3, r2
3418ab04:	f000 812d 	beq.w	3418ad62 <RCCEx_GetUSARTCLKFreq+0x366>
3418ab08:	4a73      	ldr	r2, [pc, #460]	@ (3418acd8 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418ab0a:	4293      	cmp	r3, r2
3418ab0c:	f200 818b 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab10:	4a72      	ldr	r2, [pc, #456]	@ (3418acdc <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418ab12:	4293      	cmp	r3, r2
3418ab14:	f000 8125 	beq.w	3418ad62 <RCCEx_GetUSARTCLKFreq+0x366>
3418ab18:	4a70      	ldr	r2, [pc, #448]	@ (3418acdc <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418ab1a:	4293      	cmp	r3, r2
3418ab1c:	f200 8183 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab20:	4a6f      	ldr	r2, [pc, #444]	@ (3418ace0 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418ab22:	4293      	cmp	r3, r2
3418ab24:	f000 811d 	beq.w	3418ad62 <RCCEx_GetUSARTCLKFreq+0x366>
3418ab28:	4a6d      	ldr	r2, [pc, #436]	@ (3418ace0 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418ab2a:	4293      	cmp	r3, r2
3418ab2c:	f200 817b 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab30:	4a6c      	ldr	r2, [pc, #432]	@ (3418ace4 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418ab32:	4293      	cmp	r3, r2
3418ab34:	f000 8115 	beq.w	3418ad62 <RCCEx_GetUSARTCLKFreq+0x366>
3418ab38:	4a6a      	ldr	r2, [pc, #424]	@ (3418ace4 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418ab3a:	4293      	cmp	r3, r2
3418ab3c:	f200 8173 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab40:	4a69      	ldr	r2, [pc, #420]	@ (3418ace8 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418ab42:	4293      	cmp	r3, r2
3418ab44:	f000 810d 	beq.w	3418ad62 <RCCEx_GetUSARTCLKFreq+0x366>
3418ab48:	4a67      	ldr	r2, [pc, #412]	@ (3418ace8 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418ab4a:	4293      	cmp	r3, r2
3418ab4c:	f200 816b 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab50:	4a66      	ldr	r2, [pc, #408]	@ (3418acec <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418ab52:	4293      	cmp	r3, r2
3418ab54:	d07b      	beq.n	3418ac4e <RCCEx_GetUSARTCLKFreq+0x252>
3418ab56:	4a65      	ldr	r2, [pc, #404]	@ (3418acec <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418ab58:	4293      	cmp	r3, r2
3418ab5a:	f200 8164 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab5e:	4a64      	ldr	r2, [pc, #400]	@ (3418acf0 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418ab60:	4293      	cmp	r3, r2
3418ab62:	d074      	beq.n	3418ac4e <RCCEx_GetUSARTCLKFreq+0x252>
3418ab64:	4a62      	ldr	r2, [pc, #392]	@ (3418acf0 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418ab66:	4293      	cmp	r3, r2
3418ab68:	f200 815d 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab6c:	4a61      	ldr	r2, [pc, #388]	@ (3418acf4 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418ab6e:	4293      	cmp	r3, r2
3418ab70:	d06d      	beq.n	3418ac4e <RCCEx_GetUSARTCLKFreq+0x252>
3418ab72:	4a60      	ldr	r2, [pc, #384]	@ (3418acf4 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418ab74:	4293      	cmp	r3, r2
3418ab76:	f200 8156 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab7a:	4a5f      	ldr	r2, [pc, #380]	@ (3418acf8 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418ab7c:	4293      	cmp	r3, r2
3418ab7e:	d066      	beq.n	3418ac4e <RCCEx_GetUSARTCLKFreq+0x252>
3418ab80:	4a5d      	ldr	r2, [pc, #372]	@ (3418acf8 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418ab82:	4293      	cmp	r3, r2
3418ab84:	f200 814f 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab88:	4a5c      	ldr	r2, [pc, #368]	@ (3418acfc <RCCEx_GetUSARTCLKFreq+0x300>)
3418ab8a:	4293      	cmp	r3, r2
3418ab8c:	d05f      	beq.n	3418ac4e <RCCEx_GetUSARTCLKFreq+0x252>
3418ab8e:	4a5b      	ldr	r2, [pc, #364]	@ (3418acfc <RCCEx_GetUSARTCLKFreq+0x300>)
3418ab90:	4293      	cmp	r3, r2
3418ab92:	f200 8148 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ab96:	4a5a      	ldr	r2, [pc, #360]	@ (3418ad00 <RCCEx_GetUSARTCLKFreq+0x304>)
3418ab98:	4293      	cmp	r3, r2
3418ab9a:	d053      	beq.n	3418ac44 <RCCEx_GetUSARTCLKFreq+0x248>
3418ab9c:	4a58      	ldr	r2, [pc, #352]	@ (3418ad00 <RCCEx_GetUSARTCLKFreq+0x304>)
3418ab9e:	4293      	cmp	r3, r2
3418aba0:	f200 8141 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418aba4:	4a57      	ldr	r2, [pc, #348]	@ (3418ad04 <RCCEx_GetUSARTCLKFreq+0x308>)
3418aba6:	4293      	cmp	r3, r2
3418aba8:	d04c      	beq.n	3418ac44 <RCCEx_GetUSARTCLKFreq+0x248>
3418abaa:	4a56      	ldr	r2, [pc, #344]	@ (3418ad04 <RCCEx_GetUSARTCLKFreq+0x308>)
3418abac:	4293      	cmp	r3, r2
3418abae:	f200 813a 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abb2:	4a55      	ldr	r2, [pc, #340]	@ (3418ad08 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418abb4:	4293      	cmp	r3, r2
3418abb6:	d045      	beq.n	3418ac44 <RCCEx_GetUSARTCLKFreq+0x248>
3418abb8:	4a53      	ldr	r2, [pc, #332]	@ (3418ad08 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418abba:	4293      	cmp	r3, r2
3418abbc:	f200 8133 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abc0:	4a52      	ldr	r2, [pc, #328]	@ (3418ad0c <RCCEx_GetUSARTCLKFreq+0x310>)
3418abc2:	4293      	cmp	r3, r2
3418abc4:	d03e      	beq.n	3418ac44 <RCCEx_GetUSARTCLKFreq+0x248>
3418abc6:	4a51      	ldr	r2, [pc, #324]	@ (3418ad0c <RCCEx_GetUSARTCLKFreq+0x310>)
3418abc8:	4293      	cmp	r3, r2
3418abca:	f200 812c 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abce:	4a50      	ldr	r2, [pc, #320]	@ (3418ad10 <RCCEx_GetUSARTCLKFreq+0x314>)
3418abd0:	4293      	cmp	r3, r2
3418abd2:	d037      	beq.n	3418ac44 <RCCEx_GetUSARTCLKFreq+0x248>
3418abd4:	4a4e      	ldr	r2, [pc, #312]	@ (3418ad10 <RCCEx_GetUSARTCLKFreq+0x314>)
3418abd6:	4293      	cmp	r3, r2
3418abd8:	f200 8125 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abdc:	4a4d      	ldr	r2, [pc, #308]	@ (3418ad14 <RCCEx_GetUSARTCLKFreq+0x318>)
3418abde:	4293      	cmp	r3, r2
3418abe0:	d018      	beq.n	3418ac14 <RCCEx_GetUSARTCLKFreq+0x218>
3418abe2:	4a4c      	ldr	r2, [pc, #304]	@ (3418ad14 <RCCEx_GetUSARTCLKFreq+0x318>)
3418abe4:	4293      	cmp	r3, r2
3418abe6:	f200 811e 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abea:	4a4b      	ldr	r2, [pc, #300]	@ (3418ad18 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418abec:	4293      	cmp	r3, r2
3418abee:	d01d      	beq.n	3418ac2c <RCCEx_GetUSARTCLKFreq+0x230>
3418abf0:	4a49      	ldr	r2, [pc, #292]	@ (3418ad18 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418abf2:	4293      	cmp	r3, r2
3418abf4:	f200 8117 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418abf8:	4a48      	ldr	r2, [pc, #288]	@ (3418ad1c <RCCEx_GetUSARTCLKFreq+0x320>)
3418abfa:	4293      	cmp	r3, r2
3418abfc:	d00a      	beq.n	3418ac14 <RCCEx_GetUSARTCLKFreq+0x218>
3418abfe:	4a47      	ldr	r2, [pc, #284]	@ (3418ad1c <RCCEx_GetUSARTCLKFreq+0x320>)
3418ac00:	4293      	cmp	r3, r2
3418ac02:	f200 8110 	bhi.w	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
3418ac06:	4a46      	ldr	r2, [pc, #280]	@ (3418ad20 <RCCEx_GetUSARTCLKFreq+0x324>)
3418ac08:	4293      	cmp	r3, r2
3418ac0a:	d003      	beq.n	3418ac14 <RCCEx_GetUSARTCLKFreq+0x218>
3418ac0c:	4a45      	ldr	r2, [pc, #276]	@ (3418ad24 <RCCEx_GetUSARTCLKFreq+0x328>)
3418ac0e:	4293      	cmp	r3, r2
3418ac10:	d00c      	beq.n	3418ac2c <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ac12:	e108      	b.n	3418ae26 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ac14:	f7f7 ff8e 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418ac18:	4603      	mov	r3, r0
3418ac1a:	4618      	mov	r0, r3
3418ac1c:	f7fc ff1a 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418ac20:	4603      	mov	r3, r0
3418ac22:	4618      	mov	r0, r3
3418ac24:	f7fc ff37 	bl	34187a96 <RCCEx_GetPCLK2Freq>
3418ac28:	60f8      	str	r0, [r7, #12]
      break;
3418ac2a:	e107      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ac2c:	f7f7 ff82 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418ac30:	4603      	mov	r3, r0
3418ac32:	4618      	mov	r0, r3
3418ac34:	f7fc ff0e 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418ac38:	4603      	mov	r3, r0
3418ac3a:	4618      	mov	r0, r3
3418ac3c:	f7fc ff1b 	bl	34187a76 <RCCEx_GetPCLK1Freq>
3418ac40:	60f8      	str	r0, [r7, #12]
      break;
3418ac42:	e0fb      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ac44:	2007      	movs	r0, #7
3418ac46:	f7fd f9f1 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418ac4a:	60f8      	str	r0, [r7, #12]
      break;
3418ac4c:	e0f6      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418ac4e:	f7f9 fb95 	bl	3418437c <LL_RCC_IC9_IsEnabled>
3418ac52:	4603      	mov	r3, r0
3418ac54:	2b00      	cmp	r3, #0
3418ac56:	f000 80e8 	beq.w	3418ae2a <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418ac5a:	f7f9 fbb1 	bl	341843c0 <LL_RCC_IC9_GetDivider>
3418ac5e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418ac60:	f7f9 fba0 	bl	341843a4 <LL_RCC_IC9_GetSource>
3418ac64:	4603      	mov	r3, r0
3418ac66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ac6a:	d06f      	beq.n	3418ad4c <RCCEx_GetUSARTCLKFreq+0x350>
3418ac6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ac70:	d875      	bhi.n	3418ad5e <RCCEx_GetUSARTCLKFreq+0x362>
3418ac72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ac76:	d060      	beq.n	3418ad3a <RCCEx_GetUSARTCLKFreq+0x33e>
3418ac78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ac7c:	d86f      	bhi.n	3418ad5e <RCCEx_GetUSARTCLKFreq+0x362>
3418ac7e:	2b00      	cmp	r3, #0
3418ac80:	d003      	beq.n	3418ac8a <RCCEx_GetUSARTCLKFreq+0x28e>
3418ac82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ac86:	d04f      	beq.n	3418ad28 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418ac88:	e069      	b.n	3418ad5e <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ac8a:	f7fc fdcb 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418ac8e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ac90:	68fa      	ldr	r2, [r7, #12]
3418ac92:	68bb      	ldr	r3, [r7, #8]
3418ac94:	fbb2 f3f3 	udiv	r3, r2, r3
3418ac98:	60fb      	str	r3, [r7, #12]
            break;
3418ac9a:	e061      	b.n	3418ad60 <RCCEx_GetUSARTCLKFreq+0x364>
3418ac9c:	07061430 	.word	0x07061430
3418aca0:	07060830 	.word	0x07060830
3418aca4:	07060434 	.word	0x07060434
3418aca8:	07060430 	.word	0x07060430
3418acac:	07060030 	.word	0x07060030
3418acb0:	07051430 	.word	0x07051430
3418acb4:	07050830 	.word	0x07050830
3418acb8:	07050434 	.word	0x07050434
3418acbc:	07050430 	.word	0x07050430
3418acc0:	07050030 	.word	0x07050030
3418acc4:	07041430 	.word	0x07041430
3418acc8:	07040830 	.word	0x07040830
3418accc:	07040434 	.word	0x07040434
3418acd0:	07040430 	.word	0x07040430
3418acd4:	07040030 	.word	0x07040030
3418acd8:	07031430 	.word	0x07031430
3418acdc:	07030830 	.word	0x07030830
3418ace0:	07030434 	.word	0x07030434
3418ace4:	07030430 	.word	0x07030430
3418ace8:	07030030 	.word	0x07030030
3418acec:	07021430 	.word	0x07021430
3418acf0:	07020830 	.word	0x07020830
3418acf4:	07020434 	.word	0x07020434
3418acf8:	07020430 	.word	0x07020430
3418acfc:	07020030 	.word	0x07020030
3418ad00:	07011430 	.word	0x07011430
3418ad04:	07010830 	.word	0x07010830
3418ad08:	07010434 	.word	0x07010434
3418ad0c:	07010430 	.word	0x07010430
3418ad10:	07010030 	.word	0x07010030
3418ad14:	07001430 	.word	0x07001430
3418ad18:	07000830 	.word	0x07000830
3418ad1c:	07000434 	.word	0x07000434
3418ad20:	07000030 	.word	0x07000030
3418ad24:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ad28:	f7fc fdc2 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418ad2c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ad2e:	68fa      	ldr	r2, [r7, #12]
3418ad30:	68bb      	ldr	r3, [r7, #8]
3418ad32:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad36:	60fb      	str	r3, [r7, #12]
            break;
3418ad38:	e012      	b.n	3418ad60 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ad3a:	f7fc fdff 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418ad3e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ad40:	68fa      	ldr	r2, [r7, #12]
3418ad42:	68bb      	ldr	r3, [r7, #8]
3418ad44:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad48:	60fb      	str	r3, [r7, #12]
            break;
3418ad4a:	e009      	b.n	3418ad60 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ad4c:	f7fc fe3c 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418ad50:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ad52:	68fa      	ldr	r2, [r7, #12]
3418ad54:	68bb      	ldr	r3, [r7, #8]
3418ad56:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad5a:	60fb      	str	r3, [r7, #12]
            break;
3418ad5c:	e000      	b.n	3418ad60 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418ad5e:	bf00      	nop
      break;
3418ad60:	e063      	b.n	3418ae2a <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418ad62:	f7f9 fc0b 	bl	3418457c <LL_RCC_IC14_IsEnabled>
3418ad66:	4603      	mov	r3, r0
3418ad68:	2b00      	cmp	r3, #0
3418ad6a:	d060      	beq.n	3418ae2e <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418ad6c:	f7f9 fc28 	bl	341845c0 <LL_RCC_IC14_GetDivider>
3418ad70:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418ad72:	f7f9 fc17 	bl	341845a4 <LL_RCC_IC14_GetSource>
3418ad76:	4603      	mov	r3, r0
3418ad78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad7c:	d029      	beq.n	3418add2 <RCCEx_GetUSARTCLKFreq+0x3d6>
3418ad7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad82:	d82f      	bhi.n	3418ade4 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418ad84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad88:	d01a      	beq.n	3418adc0 <RCCEx_GetUSARTCLKFreq+0x3c4>
3418ad8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad8e:	d829      	bhi.n	3418ade4 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418ad90:	2b00      	cmp	r3, #0
3418ad92:	d003      	beq.n	3418ad9c <RCCEx_GetUSARTCLKFreq+0x3a0>
3418ad94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ad98:	d009      	beq.n	3418adae <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418ad9a:	e023      	b.n	3418ade4 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ad9c:	f7fc fd42 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418ada0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ada2:	68fa      	ldr	r2, [r7, #12]
3418ada4:	68bb      	ldr	r3, [r7, #8]
3418ada6:	fbb2 f3f3 	udiv	r3, r2, r3
3418adaa:	60fb      	str	r3, [r7, #12]
            break;
3418adac:	e01b      	b.n	3418ade6 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418adae:	f7fc fd7f 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418adb2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418adb4:	68fa      	ldr	r2, [r7, #12]
3418adb6:	68bb      	ldr	r3, [r7, #8]
3418adb8:	fbb2 f3f3 	udiv	r3, r2, r3
3418adbc:	60fb      	str	r3, [r7, #12]
            break;
3418adbe:	e012      	b.n	3418ade6 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418adc0:	f7fc fdbc 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418adc4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418adc6:	68fa      	ldr	r2, [r7, #12]
3418adc8:	68bb      	ldr	r3, [r7, #8]
3418adca:	fbb2 f3f3 	udiv	r3, r2, r3
3418adce:	60fb      	str	r3, [r7, #12]
            break;
3418add0:	e009      	b.n	3418ade6 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418add2:	f7fc fdf9 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418add6:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418add8:	68fa      	ldr	r2, [r7, #12]
3418adda:	68bb      	ldr	r3, [r7, #8]
3418addc:	fbb2 f3f3 	udiv	r3, r2, r3
3418ade0:	60fb      	str	r3, [r7, #12]
            break;
3418ade2:	e000      	b.n	3418ade6 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418ade4:	bf00      	nop
      break;
3418ade6:	e022      	b.n	3418ae2e <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418ade8:	f7f8 faa4 	bl	34183334 <LL_RCC_HSI_IsReady>
3418adec:	4603      	mov	r3, r0
3418adee:	2b00      	cmp	r3, #0
3418adf0:	d01f      	beq.n	3418ae32 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418adf2:	f7f8 fab1 	bl	34183358 <LL_RCC_HSI_GetDivider>
3418adf6:	4603      	mov	r3, r0
3418adf8:	09db      	lsrs	r3, r3, #7
3418adfa:	4a13      	ldr	r2, [pc, #76]	@ (3418ae48 <RCCEx_GetUSARTCLKFreq+0x44c>)
3418adfc:	fa22 f303 	lsr.w	r3, r2, r3
3418ae00:	60fb      	str	r3, [r7, #12]
      break;
3418ae02:	e016      	b.n	3418ae32 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418ae04:	f7f8 fab6 	bl	34183374 <LL_RCC_MSI_IsReady>
3418ae08:	4603      	mov	r3, r0
3418ae0a:	2b00      	cmp	r3, #0
3418ae0c:	d013      	beq.n	3418ae36 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418ae0e:	4b0f      	ldr	r3, [pc, #60]	@ (3418ae4c <RCCEx_GetUSARTCLKFreq+0x450>)
3418ae10:	60fb      	str	r3, [r7, #12]
      break;
3418ae12:	e010      	b.n	3418ae36 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418ae14:	f7f8 face 	bl	341833b4 <LL_RCC_LSE_IsReady>
3418ae18:	4603      	mov	r3, r0
3418ae1a:	2b00      	cmp	r3, #0
3418ae1c:	d00d      	beq.n	3418ae3a <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418ae1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418ae22:	60fb      	str	r3, [r7, #12]
      break;
3418ae24:	e009      	b.n	3418ae3a <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418ae26:	bf00      	nop
3418ae28:	e008      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418ae2a:	bf00      	nop
3418ae2c:	e006      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418ae2e:	bf00      	nop
3418ae30:	e004      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418ae32:	bf00      	nop
3418ae34:	e002      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418ae36:	bf00      	nop
3418ae38:	e000      	b.n	3418ae3c <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418ae3a:	bf00      	nop
  }

  return usart_frequency;
3418ae3c:	68fb      	ldr	r3, [r7, #12]
}
3418ae3e:	4618      	mov	r0, r3
3418ae40:	3710      	adds	r7, #16
3418ae42:	46bd      	mov	sp, r7
3418ae44:	bd80      	pop	{r7, pc}
3418ae46:	bf00      	nop
3418ae48:	03d09000 	.word	0x03d09000
3418ae4c:	003d0900 	.word	0x003d0900

3418ae50 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418ae50:	b580      	push	{r7, lr}
3418ae52:	b084      	sub	sp, #16
3418ae54:	af00      	add	r7, sp, #0
3418ae56:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ae58:	2300      	movs	r3, #0
3418ae5a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418ae5c:	6878      	ldr	r0, [r7, #4]
3418ae5e:	f7f8 fe69 	bl	34183b34 <LL_RCC_GetUSBClockSource>
3418ae62:	4603      	mov	r3, r0
3418ae64:	4a4b      	ldr	r2, [pc, #300]	@ (3418af94 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418ae66:	4293      	cmp	r3, r2
3418ae68:	d035      	beq.n	3418aed6 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418ae6a:	4a4a      	ldr	r2, [pc, #296]	@ (3418af94 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418ae6c:	4293      	cmp	r3, r2
3418ae6e:	f200 8085 	bhi.w	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418ae72:	4a49      	ldr	r2, [pc, #292]	@ (3418af98 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418ae74:	4293      	cmp	r3, r2
3418ae76:	d02e      	beq.n	3418aed6 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418ae78:	4a47      	ldr	r2, [pc, #284]	@ (3418af98 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418ae7a:	4293      	cmp	r3, r2
3418ae7c:	d87e      	bhi.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418ae7e:	4a47      	ldr	r2, [pc, #284]	@ (3418af9c <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418ae80:	4293      	cmp	r3, r2
3418ae82:	d038      	beq.n	3418aef6 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418ae84:	4a45      	ldr	r2, [pc, #276]	@ (3418af9c <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418ae86:	4293      	cmp	r3, r2
3418ae88:	d878      	bhi.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418ae8a:	4a45      	ldr	r2, [pc, #276]	@ (3418afa0 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418ae8c:	4293      	cmp	r3, r2
3418ae8e:	d032      	beq.n	3418aef6 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418ae90:	4a43      	ldr	r2, [pc, #268]	@ (3418afa0 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418ae92:	4293      	cmp	r3, r2
3418ae94:	d872      	bhi.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418ae96:	4a43      	ldr	r2, [pc, #268]	@ (3418afa4 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418ae98:	4293      	cmp	r3, r2
3418ae9a:	d00f      	beq.n	3418aebc <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418ae9c:	4a41      	ldr	r2, [pc, #260]	@ (3418afa4 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418ae9e:	4293      	cmp	r3, r2
3418aea0:	d86c      	bhi.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418aea2:	4a41      	ldr	r2, [pc, #260]	@ (3418afa8 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418aea4:	4293      	cmp	r3, r2
3418aea6:	d009      	beq.n	3418aebc <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418aea8:	4a3f      	ldr	r2, [pc, #252]	@ (3418afa8 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418aeaa:	4293      	cmp	r3, r2
3418aeac:	d866      	bhi.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418aeae:	4a3f      	ldr	r2, [pc, #252]	@ (3418afac <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418aeb0:	4293      	cmp	r3, r2
3418aeb2:	d008      	beq.n	3418aec6 <RCCEx_GetOTGPHYCLKFreq+0x76>
3418aeb4:	4a3e      	ldr	r2, [pc, #248]	@ (3418afb0 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418aeb6:	4293      	cmp	r3, r2
3418aeb8:	d005      	beq.n	3418aec6 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418aeba:	e05f      	b.n	3418af7c <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418aebc:	2007      	movs	r0, #7
3418aebe:	f7fd f8b5 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418aec2:	60f8      	str	r0, [r7, #12]
      break;
3418aec4:	e061      	b.n	3418af8a <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418aec6:	f7f8 fa23 	bl	34183310 <LL_RCC_HSE_IsReady>
3418aeca:	4603      	mov	r3, r0
3418aecc:	2b00      	cmp	r3, #0
3418aece:	d057      	beq.n	3418af80 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418aed0:	4b38      	ldr	r3, [pc, #224]	@ (3418afb4 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418aed2:	60fb      	str	r3, [r7, #12]
      break;
3418aed4:	e054      	b.n	3418af80 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418aed6:	f7f8 fa1b 	bl	34183310 <LL_RCC_HSE_IsReady>
3418aeda:	4603      	mov	r3, r0
3418aedc:	2b00      	cmp	r3, #0
3418aede:	d051      	beq.n	3418af84 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418aee0:	f7f8 fa04 	bl	341832ec <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418aee4:	4603      	mov	r3, r0
3418aee6:	2b00      	cmp	r3, #0
3418aee8:	d102      	bne.n	3418aef0 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418aeea:	4b33      	ldr	r3, [pc, #204]	@ (3418afb8 <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418aeec:	60fb      	str	r3, [r7, #12]
      break;
3418aeee:	e049      	b.n	3418af84 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418aef0:	4b30      	ldr	r3, [pc, #192]	@ (3418afb4 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418aef2:	60fb      	str	r3, [r7, #12]
      break;
3418aef4:	e046      	b.n	3418af84 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418aef6:	f7f9 fb81 	bl	341845fc <LL_RCC_IC15_IsEnabled>
3418aefa:	4603      	mov	r3, r0
3418aefc:	2b00      	cmp	r3, #0
3418aefe:	d043      	beq.n	3418af88 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418af00:	f7f9 fb9e 	bl	34184640 <LL_RCC_IC15_GetDivider>
3418af04:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418af06:	f7f9 fb8d 	bl	34184624 <LL_RCC_IC15_GetSource>
3418af0a:	4603      	mov	r3, r0
3418af0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af10:	d029      	beq.n	3418af66 <RCCEx_GetOTGPHYCLKFreq+0x116>
3418af12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af16:	d82f      	bhi.n	3418af78 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418af18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af1c:	d01a      	beq.n	3418af54 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418af1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af22:	d829      	bhi.n	3418af78 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418af24:	2b00      	cmp	r3, #0
3418af26:	d003      	beq.n	3418af30 <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418af28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418af2c:	d009      	beq.n	3418af42 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418af2e:	e023      	b.n	3418af78 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418af30:	f7fc fc78 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418af34:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418af36:	68fa      	ldr	r2, [r7, #12]
3418af38:	68bb      	ldr	r3, [r7, #8]
3418af3a:	fbb2 f3f3 	udiv	r3, r2, r3
3418af3e:	60fb      	str	r3, [r7, #12]
            break;
3418af40:	e01b      	b.n	3418af7a <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418af42:	f7fc fcb5 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418af46:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418af48:	68fa      	ldr	r2, [r7, #12]
3418af4a:	68bb      	ldr	r3, [r7, #8]
3418af4c:	fbb2 f3f3 	udiv	r3, r2, r3
3418af50:	60fb      	str	r3, [r7, #12]
            break;
3418af52:	e012      	b.n	3418af7a <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418af54:	f7fc fcf2 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418af58:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418af5a:	68fa      	ldr	r2, [r7, #12]
3418af5c:	68bb      	ldr	r3, [r7, #8]
3418af5e:	fbb2 f3f3 	udiv	r3, r2, r3
3418af62:	60fb      	str	r3, [r7, #12]
            break;
3418af64:	e009      	b.n	3418af7a <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418af66:	f7fc fd2f 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418af6a:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418af6c:	68fa      	ldr	r2, [r7, #12]
3418af6e:	68bb      	ldr	r3, [r7, #8]
3418af70:	fbb2 f3f3 	udiv	r3, r2, r3
3418af74:	60fb      	str	r3, [r7, #12]
            break;
3418af76:	e000      	b.n	3418af7a <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418af78:	bf00      	nop
      break;
3418af7a:	e005      	b.n	3418af88 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418af7c:	bf00      	nop
3418af7e:	e004      	b.n	3418af8a <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418af80:	bf00      	nop
3418af82:	e002      	b.n	3418af8a <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418af84:	bf00      	nop
3418af86:	e000      	b.n	3418af8a <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418af88:	bf00      	nop
  }

  return usb_frequency;
3418af8a:	68fb      	ldr	r3, [r7, #12]
}
3418af8c:	4618      	mov	r0, r3
3418af8e:	3710      	adds	r7, #16
3418af90:	46bd      	mov	sp, r7
3418af92:	bd80      	pop	{r7, pc}
3418af94:	03031414 	.word	0x03031414
3418af98:	03030c14 	.word	0x03030c14
3418af9c:	03021414 	.word	0x03021414
3418afa0:	03020c14 	.word	0x03020c14
3418afa4:	03011414 	.word	0x03011414
3418afa8:	03010c14 	.word	0x03010c14
3418afac:	03000c14 	.word	0x03000c14
3418afb0:	03001414 	.word	0x03001414
3418afb4:	016e3600 	.word	0x016e3600
3418afb8:	02dc6c00 	.word	0x02dc6c00

3418afbc <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418afbc:	b580      	push	{r7, lr}
3418afbe:	b084      	sub	sp, #16
3418afc0:	af00      	add	r7, sp, #0
3418afc2:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418afc4:	2300      	movs	r3, #0
3418afc6:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418afc8:	6878      	ldr	r0, [r7, #4]
3418afca:	f7f8 fdb3 	bl	34183b34 <LL_RCC_GetUSBClockSource>
3418afce:	4603      	mov	r3, r0
3418afd0:	4a1a      	ldr	r2, [pc, #104]	@ (3418b03c <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418afd2:	4293      	cmp	r3, r2
3418afd4:	d00f      	beq.n	3418aff6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418afd6:	4a19      	ldr	r2, [pc, #100]	@ (3418b03c <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418afd8:	4293      	cmp	r3, r2
3418afda:	d826      	bhi.n	3418b02a <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418afdc:	4a18      	ldr	r2, [pc, #96]	@ (3418b040 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418afde:	4293      	cmp	r3, r2
3418afe0:	d009      	beq.n	3418aff6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418afe2:	4a17      	ldr	r2, [pc, #92]	@ (3418b040 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418afe4:	4293      	cmp	r3, r2
3418afe6:	d820      	bhi.n	3418b02a <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418afe8:	4a16      	ldr	r2, [pc, #88]	@ (3418b044 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418afea:	4293      	cmp	r3, r2
3418afec:	d013      	beq.n	3418b016 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418afee:	4a16      	ldr	r2, [pc, #88]	@ (3418b048 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418aff0:	4293      	cmp	r3, r2
3418aff2:	d015      	beq.n	3418b020 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418aff4:	e019      	b.n	3418b02a <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418aff6:	f7f8 f98b 	bl	34183310 <LL_RCC_HSE_IsReady>
3418affa:	4603      	mov	r3, r0
3418affc:	2b00      	cmp	r3, #0
3418affe:	d016      	beq.n	3418b02e <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418b000:	f7f8 f974 	bl	341832ec <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418b004:	4603      	mov	r3, r0
3418b006:	2b00      	cmp	r3, #0
3418b008:	d102      	bne.n	3418b010 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418b00a:	4b10      	ldr	r3, [pc, #64]	@ (3418b04c <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418b00c:	60fb      	str	r3, [r7, #12]
      break;
3418b00e:	e00e      	b.n	3418b02e <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418b010:	4b0f      	ldr	r3, [pc, #60]	@ (3418b050 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418b012:	60fb      	str	r3, [r7, #12]
      break;
3418b014:	e00b      	b.n	3418b02e <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418b016:	480f      	ldr	r0, [pc, #60]	@ (3418b054 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418b018:	f7ff ff1a 	bl	3418ae50 <RCCEx_GetOTGPHYCLKFreq>
3418b01c:	60f8      	str	r0, [r7, #12]
      break;
3418b01e:	e007      	b.n	3418b030 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418b020:	480d      	ldr	r0, [pc, #52]	@ (3418b058 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418b022:	f7ff ff15 	bl	3418ae50 <RCCEx_GetOTGPHYCLKFreq>
3418b026:	60f8      	str	r0, [r7, #12]
      break;
3418b028:	e002      	b.n	3418b030 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b02a:	bf00      	nop
3418b02c:	e000      	b.n	3418b030 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b02e:	bf00      	nop
  }

  return usb_frequency;
3418b030:	68fb      	ldr	r3, [r7, #12]
}
3418b032:	4618      	mov	r0, r3
3418b034:	3710      	adds	r7, #16
3418b036:	46bd      	mov	sp, r7
3418b038:	bd80      	pop	{r7, pc}
3418b03a:	bf00      	nop
3418b03c:	01011814 	.word	0x01011814
3418b040:	01011014 	.word	0x01011014
3418b044:	01001014 	.word	0x01001014
3418b048:	01001814 	.word	0x01001814
3418b04c:	02dc6c00 	.word	0x02dc6c00
3418b050:	016e3600 	.word	0x016e3600
3418b054:	03000c14 	.word	0x03000c14
3418b058:	03001414 	.word	0x03001414

3418b05c <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418b05c:	b580      	push	{r7, lr}
3418b05e:	b084      	sub	sp, #16
3418b060:	af00      	add	r7, sp, #0
3418b062:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b064:	2300      	movs	r3, #0
3418b066:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418b068:	6878      	ldr	r0, [r7, #4]
3418b06a:	f7f8 fd6f 	bl	34183b4c <LL_RCC_GetXSPIClockSource>
3418b06e:	4603      	mov	r3, r0
3418b070:	4a76      	ldr	r2, [pc, #472]	@ (3418b24c <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b072:	4293      	cmp	r3, r2
3418b074:	f000 809d 	beq.w	3418b1b2 <RCCEx_GetXSPICLKFreq+0x156>
3418b078:	4a74      	ldr	r2, [pc, #464]	@ (3418b24c <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b07a:	4293      	cmp	r3, r2
3418b07c:	f200 80dc 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b080:	4a73      	ldr	r2, [pc, #460]	@ (3418b250 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b082:	4293      	cmp	r3, r2
3418b084:	f000 8095 	beq.w	3418b1b2 <RCCEx_GetXSPICLKFreq+0x156>
3418b088:	4a71      	ldr	r2, [pc, #452]	@ (3418b250 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b08a:	4293      	cmp	r3, r2
3418b08c:	f200 80d4 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b090:	4a70      	ldr	r2, [pc, #448]	@ (3418b254 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b092:	4293      	cmp	r3, r2
3418b094:	f000 808d 	beq.w	3418b1b2 <RCCEx_GetXSPICLKFreq+0x156>
3418b098:	4a6e      	ldr	r2, [pc, #440]	@ (3418b254 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b09a:	4293      	cmp	r3, r2
3418b09c:	f200 80cc 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0a0:	4a6d      	ldr	r2, [pc, #436]	@ (3418b258 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b0a2:	4293      	cmp	r3, r2
3418b0a4:	d041      	beq.n	3418b12a <RCCEx_GetXSPICLKFreq+0xce>
3418b0a6:	4a6c      	ldr	r2, [pc, #432]	@ (3418b258 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b0a8:	4293      	cmp	r3, r2
3418b0aa:	f200 80c5 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0ae:	4a6b      	ldr	r2, [pc, #428]	@ (3418b25c <RCCEx_GetXSPICLKFreq+0x200>)
3418b0b0:	4293      	cmp	r3, r2
3418b0b2:	d03a      	beq.n	3418b12a <RCCEx_GetXSPICLKFreq+0xce>
3418b0b4:	4a69      	ldr	r2, [pc, #420]	@ (3418b25c <RCCEx_GetXSPICLKFreq+0x200>)
3418b0b6:	4293      	cmp	r3, r2
3418b0b8:	f200 80be 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0bc:	4a68      	ldr	r2, [pc, #416]	@ (3418b260 <RCCEx_GetXSPICLKFreq+0x204>)
3418b0be:	4293      	cmp	r3, r2
3418b0c0:	d033      	beq.n	3418b12a <RCCEx_GetXSPICLKFreq+0xce>
3418b0c2:	4a67      	ldr	r2, [pc, #412]	@ (3418b260 <RCCEx_GetXSPICLKFreq+0x204>)
3418b0c4:	4293      	cmp	r3, r2
3418b0c6:	f200 80b7 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0ca:	4a66      	ldr	r2, [pc, #408]	@ (3418b264 <RCCEx_GetXSPICLKFreq+0x208>)
3418b0cc:	4293      	cmp	r3, r2
3418b0ce:	d027      	beq.n	3418b120 <RCCEx_GetXSPICLKFreq+0xc4>
3418b0d0:	4a64      	ldr	r2, [pc, #400]	@ (3418b264 <RCCEx_GetXSPICLKFreq+0x208>)
3418b0d2:	4293      	cmp	r3, r2
3418b0d4:	f200 80b0 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0d8:	4a63      	ldr	r2, [pc, #396]	@ (3418b268 <RCCEx_GetXSPICLKFreq+0x20c>)
3418b0da:	4293      	cmp	r3, r2
3418b0dc:	d020      	beq.n	3418b120 <RCCEx_GetXSPICLKFreq+0xc4>
3418b0de:	4a62      	ldr	r2, [pc, #392]	@ (3418b268 <RCCEx_GetXSPICLKFreq+0x20c>)
3418b0e0:	4293      	cmp	r3, r2
3418b0e2:	f200 80a9 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0e6:	4a61      	ldr	r2, [pc, #388]	@ (3418b26c <RCCEx_GetXSPICLKFreq+0x210>)
3418b0e8:	4293      	cmp	r3, r2
3418b0ea:	d019      	beq.n	3418b120 <RCCEx_GetXSPICLKFreq+0xc4>
3418b0ec:	4a5f      	ldr	r2, [pc, #380]	@ (3418b26c <RCCEx_GetXSPICLKFreq+0x210>)
3418b0ee:	4293      	cmp	r3, r2
3418b0f0:	f200 80a2 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b0f4:	4a5e      	ldr	r2, [pc, #376]	@ (3418b270 <RCCEx_GetXSPICLKFreq+0x214>)
3418b0f6:	4293      	cmp	r3, r2
3418b0f8:	d00a      	beq.n	3418b110 <RCCEx_GetXSPICLKFreq+0xb4>
3418b0fa:	4a5d      	ldr	r2, [pc, #372]	@ (3418b270 <RCCEx_GetXSPICLKFreq+0x214>)
3418b0fc:	4293      	cmp	r3, r2
3418b0fe:	f200 809b 	bhi.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b102:	4a5c      	ldr	r2, [pc, #368]	@ (3418b274 <RCCEx_GetXSPICLKFreq+0x218>)
3418b104:	4293      	cmp	r3, r2
3418b106:	d003      	beq.n	3418b110 <RCCEx_GetXSPICLKFreq+0xb4>
3418b108:	4a5b      	ldr	r2, [pc, #364]	@ (3418b278 <RCCEx_GetXSPICLKFreq+0x21c>)
3418b10a:	4293      	cmp	r3, r2
3418b10c:	f040 8094 	bne.w	3418b238 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b110:	f7f7 fd10 	bl	34182b34 <HAL_RCC_GetSysClockFreq>
3418b114:	4603      	mov	r3, r0
3418b116:	4618      	mov	r0, r3
3418b118:	f7fc fc9c 	bl	34187a54 <RCCEx_GetHCLKFreq>
3418b11c:	60f8      	str	r0, [r7, #12]
      break;
3418b11e:	e090      	b.n	3418b242 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b120:	2007      	movs	r0, #7
3418b122:	f7fc ff83 	bl	3418802c <RCCEx_GetCLKPCLKFreq>
3418b126:	60f8      	str	r0, [r7, #12]
      break;
3418b128:	e08b      	b.n	3418b242 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418b12a:	f7f8 ffe7 	bl	341840fc <LL_RCC_IC3_IsEnabled>
3418b12e:	4603      	mov	r3, r0
3418b130:	2b00      	cmp	r3, #0
3418b132:	f000 8083 	beq.w	3418b23c <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418b136:	f7f9 f803 	bl	34184140 <LL_RCC_IC3_GetDivider>
3418b13a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418b13c:	f7f8 fff2 	bl	34184124 <LL_RCC_IC3_GetSource>
3418b140:	4603      	mov	r3, r0
3418b142:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b146:	d029      	beq.n	3418b19c <RCCEx_GetXSPICLKFreq+0x140>
3418b148:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b14c:	d82f      	bhi.n	3418b1ae <RCCEx_GetXSPICLKFreq+0x152>
3418b14e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b152:	d01a      	beq.n	3418b18a <RCCEx_GetXSPICLKFreq+0x12e>
3418b154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b158:	d829      	bhi.n	3418b1ae <RCCEx_GetXSPICLKFreq+0x152>
3418b15a:	2b00      	cmp	r3, #0
3418b15c:	d003      	beq.n	3418b166 <RCCEx_GetXSPICLKFreq+0x10a>
3418b15e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b162:	d009      	beq.n	3418b178 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b164:	e023      	b.n	3418b1ae <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b166:	f7fc fb5d 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418b16a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b16c:	68fa      	ldr	r2, [r7, #12]
3418b16e:	68bb      	ldr	r3, [r7, #8]
3418b170:	fbb2 f3f3 	udiv	r3, r2, r3
3418b174:	60fb      	str	r3, [r7, #12]
            break;
3418b176:	e01b      	b.n	3418b1b0 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b178:	f7fc fb9a 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418b17c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b17e:	68fa      	ldr	r2, [r7, #12]
3418b180:	68bb      	ldr	r3, [r7, #8]
3418b182:	fbb2 f3f3 	udiv	r3, r2, r3
3418b186:	60fb      	str	r3, [r7, #12]
            break;
3418b188:	e012      	b.n	3418b1b0 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b18a:	f7fc fbd7 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418b18e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b190:	68fa      	ldr	r2, [r7, #12]
3418b192:	68bb      	ldr	r3, [r7, #8]
3418b194:	fbb2 f3f3 	udiv	r3, r2, r3
3418b198:	60fb      	str	r3, [r7, #12]
            break;
3418b19a:	e009      	b.n	3418b1b0 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b19c:	f7fc fc14 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418b1a0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b1a2:	68fa      	ldr	r2, [r7, #12]
3418b1a4:	68bb      	ldr	r3, [r7, #8]
3418b1a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1aa:	60fb      	str	r3, [r7, #12]
            break;
3418b1ac:	e000      	b.n	3418b1b0 <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418b1ae:	bf00      	nop
        }
      }
      break;
3418b1b0:	e044      	b.n	3418b23c <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418b1b2:	f7f8 ffe3 	bl	3418417c <LL_RCC_IC4_IsEnabled>
3418b1b6:	4603      	mov	r3, r0
3418b1b8:	2b00      	cmp	r3, #0
3418b1ba:	d041      	beq.n	3418b240 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418b1bc:	f7f9 f800 	bl	341841c0 <LL_RCC_IC4_GetDivider>
3418b1c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418b1c2:	f7f8 ffef 	bl	341841a4 <LL_RCC_IC4_GetSource>
3418b1c6:	4603      	mov	r3, r0
3418b1c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1cc:	d029      	beq.n	3418b222 <RCCEx_GetXSPICLKFreq+0x1c6>
3418b1ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1d2:	d82f      	bhi.n	3418b234 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1d8:	d01a      	beq.n	3418b210 <RCCEx_GetXSPICLKFreq+0x1b4>
3418b1da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1de:	d829      	bhi.n	3418b234 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b1e0:	2b00      	cmp	r3, #0
3418b1e2:	d003      	beq.n	3418b1ec <RCCEx_GetXSPICLKFreq+0x190>
3418b1e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b1e8:	d009      	beq.n	3418b1fe <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b1ea:	e023      	b.n	3418b234 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b1ec:	f7fc fb1a 	bl	34187824 <HAL_RCCEx_GetPLL1CLKFreq>
3418b1f0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b1f2:	68fa      	ldr	r2, [r7, #12]
3418b1f4:	68bb      	ldr	r3, [r7, #8]
3418b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1fa:	60fb      	str	r3, [r7, #12]
            break;
3418b1fc:	e01b      	b.n	3418b236 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b1fe:	f7fc fb57 	bl	341878b0 <HAL_RCCEx_GetPLL2CLKFreq>
3418b202:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b204:	68fa      	ldr	r2, [r7, #12]
3418b206:	68bb      	ldr	r3, [r7, #8]
3418b208:	fbb2 f3f3 	udiv	r3, r2, r3
3418b20c:	60fb      	str	r3, [r7, #12]
            break;
3418b20e:	e012      	b.n	3418b236 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b210:	f7fc fb94 	bl	3418793c <HAL_RCCEx_GetPLL3CLKFreq>
3418b214:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b216:	68fa      	ldr	r2, [r7, #12]
3418b218:	68bb      	ldr	r3, [r7, #8]
3418b21a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b21e:	60fb      	str	r3, [r7, #12]
            break;
3418b220:	e009      	b.n	3418b236 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b222:	f7fc fbd1 	bl	341879c8 <HAL_RCCEx_GetPLL4CLKFreq>
3418b226:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b228:	68fa      	ldr	r2, [r7, #12]
3418b22a:	68bb      	ldr	r3, [r7, #8]
3418b22c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b230:	60fb      	str	r3, [r7, #12]
            break;
3418b232:	e000      	b.n	3418b236 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418b234:	bf00      	nop
        }
      }
      break;
3418b236:	e003      	b.n	3418b240 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418b238:	bf00      	nop
3418b23a:	e002      	b.n	3418b242 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b23c:	bf00      	nop
3418b23e:	e000      	b.n	3418b242 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b240:	bf00      	nop
  }

  return xspi_frequency;
3418b242:	68fb      	ldr	r3, [r7, #12]
}
3418b244:	4618      	mov	r0, r3
3418b246:	3710      	adds	r7, #16
3418b248:	46bd      	mov	sp, r7
3418b24a:	bd80      	pop	{r7, pc}
3418b24c:	03030814 	.word	0x03030814
3418b250:	03030414 	.word	0x03030414
3418b254:	03030014 	.word	0x03030014
3418b258:	03020814 	.word	0x03020814
3418b25c:	03020414 	.word	0x03020414
3418b260:	03020014 	.word	0x03020014
3418b264:	03010814 	.word	0x03010814
3418b268:	03010414 	.word	0x03010414
3418b26c:	03010014 	.word	0x03010014
3418b270:	03000814 	.word	0x03000814
3418b274:	03000014 	.word	0x03000014
3418b278:	03000414 	.word	0x03000414

3418b27c <LL_AHB5_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB5_GRP1_IsEnabledClock(uint32_t Periphs)
{
3418b27c:	b480      	push	{r7}
3418b27e:	b083      	sub	sp, #12
3418b280:	af00      	add	r7, sp, #0
3418b282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418b284:	4b08      	ldr	r3, [pc, #32]	@ (3418b2a8 <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418b286:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418b28a:	687b      	ldr	r3, [r7, #4]
3418b28c:	4013      	ands	r3, r2
3418b28e:	687a      	ldr	r2, [r7, #4]
3418b290:	429a      	cmp	r2, r3
3418b292:	d101      	bne.n	3418b298 <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418b294:	2301      	movs	r3, #1
3418b296:	e000      	b.n	3418b29a <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418b298:	2300      	movs	r3, #0
}
3418b29a:	4618      	mov	r0, r3
3418b29c:	370c      	adds	r7, #12
3418b29e:	46bd      	mov	sp, r7
3418b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b2a4:	4770      	bx	lr
3418b2a6:	bf00      	nop
3418b2a8:	56028000 	.word	0x56028000

3418b2ac <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418b2ac:	b580      	push	{r7, lr}
3418b2ae:	b086      	sub	sp, #24
3418b2b0:	af02      	add	r7, sp, #8
3418b2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418b2b4:	2300      	movs	r3, #0
3418b2b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418b2b8:	f7f5 ffc4 	bl	34181244 <HAL_GetTick>
3418b2bc:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418b2be:	687b      	ldr	r3, [r7, #4]
3418b2c0:	2b00      	cmp	r3, #0
3418b2c2:	d102      	bne.n	3418b2ca <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418b2c4:	2301      	movs	r3, #1
3418b2c6:	73fb      	strb	r3, [r7, #15]
3418b2c8:	e0ef      	b.n	3418b4aa <HAL_XSPI_Init+0x1fe>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418b2ca:	687b      	ldr	r3, [r7, #4]
3418b2cc:	2200      	movs	r2, #0
3418b2ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418b2d0:	687b      	ldr	r3, [r7, #4]
3418b2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b2d4:	2b00      	cmp	r3, #0
3418b2d6:	f040 80e8 	bne.w	3418b4aa <HAL_XSPI_Init+0x1fe>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418b2da:	6878      	ldr	r0, [r7, #4]
3418b2dc:	f7f5 fbd4 	bl	34180a88 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418b2e0:	f241 3188 	movw	r1, #5000	@ 0x1388
3418b2e4:	6878      	ldr	r0, [r7, #4]
3418b2e6:	f000 fc16 	bl	3418bb16 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418b2ea:	687b      	ldr	r3, [r7, #4]
3418b2ec:	681b      	ldr	r3, [r3, #0]
3418b2ee:	689a      	ldr	r2, [r3, #8]
3418b2f0:	4b70      	ldr	r3, [pc, #448]	@ (3418b4b4 <HAL_XSPI_Init+0x208>)
3418b2f2:	4013      	ands	r3, r2
3418b2f4:	687a      	ldr	r2, [r7, #4]
3418b2f6:	68d1      	ldr	r1, [r2, #12]
3418b2f8:	687a      	ldr	r2, [r7, #4]
3418b2fa:	6912      	ldr	r2, [r2, #16]
3418b2fc:	0412      	lsls	r2, r2, #16
3418b2fe:	4311      	orrs	r1, r2
3418b300:	687a      	ldr	r2, [r7, #4]
3418b302:	6952      	ldr	r2, [r2, #20]
3418b304:	3a01      	subs	r2, #1
3418b306:	0212      	lsls	r2, r2, #8
3418b308:	4311      	orrs	r1, r2
3418b30a:	687a      	ldr	r2, [r7, #4]
3418b30c:	69d2      	ldr	r2, [r2, #28]
3418b30e:	4311      	orrs	r1, r2
3418b310:	687a      	ldr	r2, [r7, #4]
3418b312:	6812      	ldr	r2, [r2, #0]
3418b314:	430b      	orrs	r3, r1
3418b316:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418b318:	687b      	ldr	r3, [r7, #4]
3418b31a:	681b      	ldr	r3, [r3, #0]
3418b31c:	68db      	ldr	r3, [r3, #12]
3418b31e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418b322:	687b      	ldr	r3, [r7, #4]
3418b324:	6a1a      	ldr	r2, [r3, #32]
3418b326:	687b      	ldr	r3, [r7, #4]
3418b328:	681b      	ldr	r3, [r3, #0]
3418b32a:	430a      	orrs	r2, r1
3418b32c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418b32e:	687b      	ldr	r3, [r7, #4]
3418b330:	681b      	ldr	r3, [r3, #0]
3418b332:	691b      	ldr	r3, [r3, #16]
3418b334:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418b338:	687b      	ldr	r3, [r7, #4]
3418b33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418b33c:	041a      	lsls	r2, r3, #16
3418b33e:	687b      	ldr	r3, [r7, #4]
3418b340:	681b      	ldr	r3, [r3, #0]
3418b342:	430a      	orrs	r2, r1
3418b344:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418b346:	687b      	ldr	r3, [r7, #4]
3418b348:	681b      	ldr	r3, [r3, #0]
3418b34a:	691b      	ldr	r3, [r3, #16]
3418b34c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418b350:	687b      	ldr	r3, [r7, #4]
3418b352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418b354:	687b      	ldr	r3, [r7, #4]
3418b356:	681b      	ldr	r3, [r3, #0]
3418b358:	430a      	orrs	r2, r1
3418b35a:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418b35c:	687b      	ldr	r3, [r7, #4]
3418b35e:	681b      	ldr	r3, [r3, #0]
3418b360:	687a      	ldr	r2, [r7, #4]
3418b362:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418b364:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418b366:	687b      	ldr	r3, [r7, #4]
3418b368:	681b      	ldr	r3, [r3, #0]
3418b36a:	681b      	ldr	r3, [r3, #0]
3418b36c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418b370:	687b      	ldr	r3, [r7, #4]
3418b372:	685b      	ldr	r3, [r3, #4]
3418b374:	3b01      	subs	r3, #1
3418b376:	021a      	lsls	r2, r3, #8
3418b378:	687b      	ldr	r3, [r7, #4]
3418b37a:	681b      	ldr	r3, [r3, #0]
3418b37c:	430a      	orrs	r2, r1
3418b37e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418b380:	687b      	ldr	r3, [r7, #4]
3418b382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418b384:	9300      	str	r3, [sp, #0]
3418b386:	68bb      	ldr	r3, [r7, #8]
3418b388:	2200      	movs	r2, #0
3418b38a:	2120      	movs	r1, #32
3418b38c:	6878      	ldr	r0, [r7, #4]
3418b38e:	f000 fcfd 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b392:	4603      	mov	r3, r0
3418b394:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418b396:	7bfb      	ldrb	r3, [r7, #15]
3418b398:	2b00      	cmp	r3, #0
3418b39a:	f040 8086 	bne.w	3418b4aa <HAL_XSPI_Init+0x1fe>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418b39e:	687b      	ldr	r3, [r7, #4]
3418b3a0:	681b      	ldr	r3, [r3, #0]
3418b3a2:	68db      	ldr	r3, [r3, #12]
3418b3a4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418b3a8:	687b      	ldr	r3, [r7, #4]
3418b3aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418b3ac:	687b      	ldr	r3, [r7, #4]
3418b3ae:	681b      	ldr	r3, [r3, #0]
3418b3b0:	430a      	orrs	r2, r1
3418b3b2:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418b3b4:	687b      	ldr	r3, [r7, #4]
3418b3b6:	681b      	ldr	r3, [r3, #0]
3418b3b8:	4a3f      	ldr	r2, [pc, #252]	@ (3418b4b8 <HAL_XSPI_Init+0x20c>)
3418b3ba:	4293      	cmp	r3, r2
3418b3bc:	d018      	beq.n	3418b3f0 <HAL_XSPI_Init+0x144>
3418b3be:	687b      	ldr	r3, [r7, #4]
3418b3c0:	681b      	ldr	r3, [r3, #0]
3418b3c2:	4a3e      	ldr	r2, [pc, #248]	@ (3418b4bc <HAL_XSPI_Init+0x210>)
3418b3c4:	4293      	cmp	r3, r2
3418b3c6:	d013      	beq.n	3418b3f0 <HAL_XSPI_Init+0x144>
3418b3c8:	687b      	ldr	r3, [r7, #4]
3418b3ca:	681b      	ldr	r3, [r3, #0]
3418b3cc:	4a3c      	ldr	r2, [pc, #240]	@ (3418b4c0 <HAL_XSPI_Init+0x214>)
3418b3ce:	4293      	cmp	r3, r2
3418b3d0:	d00e      	beq.n	3418b3f0 <HAL_XSPI_Init+0x144>
3418b3d2:	687b      	ldr	r3, [r7, #4]
3418b3d4:	681b      	ldr	r3, [r3, #0]
3418b3d6:	4a3b      	ldr	r2, [pc, #236]	@ (3418b4c4 <HAL_XSPI_Init+0x218>)
3418b3d8:	4293      	cmp	r3, r2
3418b3da:	d009      	beq.n	3418b3f0 <HAL_XSPI_Init+0x144>
3418b3dc:	687b      	ldr	r3, [r7, #4]
3418b3de:	681b      	ldr	r3, [r3, #0]
3418b3e0:	4a39      	ldr	r2, [pc, #228]	@ (3418b4c8 <HAL_XSPI_Init+0x21c>)
3418b3e2:	4293      	cmp	r3, r2
3418b3e4:	d004      	beq.n	3418b3f0 <HAL_XSPI_Init+0x144>
3418b3e6:	687b      	ldr	r3, [r7, #4]
3418b3e8:	681b      	ldr	r3, [r3, #0]
3418b3ea:	4a38      	ldr	r2, [pc, #224]	@ (3418b4cc <HAL_XSPI_Init+0x220>)
3418b3ec:	4293      	cmp	r3, r2
3418b3ee:	d10f      	bne.n	3418b410 <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418b3f0:	687b      	ldr	r3, [r7, #4]
3418b3f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418b3f4:	9300      	str	r3, [sp, #0]
3418b3f6:	68bb      	ldr	r3, [r7, #8]
3418b3f8:	2200      	movs	r2, #0
3418b3fa:	2120      	movs	r1, #32
3418b3fc:	6878      	ldr	r0, [r7, #4]
3418b3fe:	f000 fcc5 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b402:	4603      	mov	r3, r0
3418b404:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418b406:	7bfb      	ldrb	r3, [r7, #15]
3418b408:	2b00      	cmp	r3, #0
3418b40a:	d001      	beq.n	3418b410 <HAL_XSPI_Init+0x164>
          {
            return status;
3418b40c:	7bfb      	ldrb	r3, [r7, #15]
3418b40e:	e04d      	b.n	3418b4ac <HAL_XSPI_Init+0x200>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418b410:	687b      	ldr	r3, [r7, #4]
3418b412:	681b      	ldr	r3, [r3, #0]
3418b414:	681b      	ldr	r3, [r3, #0]
3418b416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418b41a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418b41e:	687a      	ldr	r2, [r7, #4]
3418b420:	6891      	ldr	r1, [r2, #8]
3418b422:	687a      	ldr	r2, [r7, #4]
3418b424:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418b426:	4311      	orrs	r1, r2
3418b428:	687a      	ldr	r2, [r7, #4]
3418b42a:	6812      	ldr	r2, [r2, #0]
3418b42c:	430b      	orrs	r3, r1
3418b42e:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3418b430:	687b      	ldr	r3, [r7, #4]
3418b432:	681b      	ldr	r3, [r3, #0]
3418b434:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418b438:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
3418b43c:	687b      	ldr	r3, [r7, #4]
3418b43e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418b440:	687b      	ldr	r3, [r7, #4]
3418b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418b444:	431a      	orrs	r2, r3
3418b446:	687b      	ldr	r3, [r7, #4]
3418b448:	681b      	ldr	r3, [r3, #0]
3418b44a:	430a      	orrs	r2, r1
3418b44c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418b450:	687b      	ldr	r3, [r7, #4]
3418b452:	681b      	ldr	r3, [r3, #0]
3418b454:	681a      	ldr	r2, [r3, #0]
3418b456:	687b      	ldr	r3, [r7, #4]
3418b458:	681b      	ldr	r3, [r3, #0]
3418b45a:	f042 0201 	orr.w	r2, r2, #1
3418b45e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418b460:	687b      	ldr	r3, [r7, #4]
3418b462:	699b      	ldr	r3, [r3, #24]
3418b464:	2b02      	cmp	r3, #2
3418b466:	d107      	bne.n	3418b478 <HAL_XSPI_Init+0x1cc>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418b468:	687b      	ldr	r3, [r7, #4]
3418b46a:	681b      	ldr	r3, [r3, #0]
3418b46c:	689a      	ldr	r2, [r3, #8]
3418b46e:	687b      	ldr	r3, [r7, #4]
3418b470:	681b      	ldr	r3, [r3, #0]
3418b472:	f042 0202 	orr.w	r2, r2, #2
3418b476:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418b478:	687b      	ldr	r3, [r7, #4]
3418b47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418b47c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b480:	d107      	bne.n	3418b492 <HAL_XSPI_Init+0x1e6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418b482:	687b      	ldr	r3, [r7, #4]
3418b484:	681b      	ldr	r3, [r3, #0]
3418b486:	689a      	ldr	r2, [r3, #8]
3418b488:	687b      	ldr	r3, [r7, #4]
3418b48a:	681b      	ldr	r3, [r3, #0]
3418b48c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418b490:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418b492:	687b      	ldr	r3, [r7, #4]
3418b494:	68db      	ldr	r3, [r3, #12]
3418b496:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418b49a:	d103      	bne.n	3418b4a4 <HAL_XSPI_Init+0x1f8>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418b49c:	687b      	ldr	r3, [r7, #4]
3418b49e:	2201      	movs	r2, #1
3418b4a0:	659a      	str	r2, [r3, #88]	@ 0x58
3418b4a2:	e002      	b.n	3418b4aa <HAL_XSPI_Init+0x1fe>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418b4a4:	687b      	ldr	r3, [r7, #4]
3418b4a6:	2202      	movs	r2, #2
3418b4a8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
3418b4ac:	4618      	mov	r0, r3
3418b4ae:	3710      	adds	r7, #16
3418b4b0:	46bd      	mov	sp, r7
3418b4b2:	bd80      	pop	{r7, pc}
3418b4b4:	f8e0c0fc 	.word	0xf8e0c0fc
3418b4b8:	58025000 	.word	0x58025000
3418b4bc:	48025000 	.word	0x48025000
3418b4c0:	5802a000 	.word	0x5802a000
3418b4c4:	4802a000 	.word	0x4802a000
3418b4c8:	5802d000 	.word	0x5802d000
3418b4cc:	4802d000 	.word	0x4802d000

3418b4d0 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
3418b4d0:	b580      	push	{r7, lr}
3418b4d2:	b08a      	sub	sp, #40	@ 0x28
3418b4d4:	af02      	add	r7, sp, #8
3418b4d6:	60f8      	str	r0, [r7, #12]
3418b4d8:	60b9      	str	r1, [r7, #8]
3418b4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418b4dc:	f7f5 feb2 	bl	34181244 <HAL_GetTick>
3418b4e0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418b4e2:	68bb      	ldr	r3, [r7, #8]
3418b4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418b4e6:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418b4e8:	68fb      	ldr	r3, [r7, #12]
3418b4ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b4ec:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418b4ee:	697b      	ldr	r3, [r7, #20]
3418b4f0:	2b02      	cmp	r3, #2
3418b4f2:	d104      	bne.n	3418b4fe <HAL_XSPI_Command+0x2e>
3418b4f4:	68fb      	ldr	r3, [r7, #12]
3418b4f6:	68db      	ldr	r3, [r3, #12]
3418b4f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418b4fc:	d115      	bne.n	3418b52a <HAL_XSPI_Command+0x5a>
3418b4fe:	697b      	ldr	r3, [r7, #20]
3418b500:	2b14      	cmp	r3, #20
3418b502:	d107      	bne.n	3418b514 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418b504:	68bb      	ldr	r3, [r7, #8]
3418b506:	681b      	ldr	r3, [r3, #0]
3418b508:	2b02      	cmp	r3, #2
3418b50a:	d00e      	beq.n	3418b52a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418b50c:	68bb      	ldr	r3, [r7, #8]
3418b50e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418b510:	2b03      	cmp	r3, #3
3418b512:	d00a      	beq.n	3418b52a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418b514:	697b      	ldr	r3, [r7, #20]
3418b516:	2b24      	cmp	r3, #36	@ 0x24
3418b518:	d15e      	bne.n	3418b5d8 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418b51a:	68bb      	ldr	r3, [r7, #8]
3418b51c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418b51e:	2b01      	cmp	r3, #1
3418b520:	d003      	beq.n	3418b52a <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418b522:	68bb      	ldr	r3, [r7, #8]
3418b524:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418b526:	2b03      	cmp	r3, #3
3418b528:	d156      	bne.n	3418b5d8 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418b52a:	687b      	ldr	r3, [r7, #4]
3418b52c:	9300      	str	r3, [sp, #0]
3418b52e:	69bb      	ldr	r3, [r7, #24]
3418b530:	2200      	movs	r2, #0
3418b532:	2120      	movs	r1, #32
3418b534:	68f8      	ldr	r0, [r7, #12]
3418b536:	f000 fc29 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b53a:	4603      	mov	r3, r0
3418b53c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418b53e:	7ffb      	ldrb	r3, [r7, #31]
3418b540:	2b00      	cmp	r3, #0
3418b542:	d146      	bne.n	3418b5d2 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418b544:	68fb      	ldr	r3, [r7, #12]
3418b546:	2200      	movs	r2, #0
3418b548:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418b54a:	68b9      	ldr	r1, [r7, #8]
3418b54c:	68f8      	ldr	r0, [r7, #12]
3418b54e:	f000 fc53 	bl	3418bdf8 <XSPI_ConfigCmd>
3418b552:	4603      	mov	r3, r0
3418b554:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418b556:	7ffb      	ldrb	r3, [r7, #31]
3418b558:	2b00      	cmp	r3, #0
3418b55a:	d143      	bne.n	3418b5e4 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418b55c:	68bb      	ldr	r3, [r7, #8]
3418b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418b560:	2b00      	cmp	r3, #0
3418b562:	d10e      	bne.n	3418b582 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418b564:	687b      	ldr	r3, [r7, #4]
3418b566:	9300      	str	r3, [sp, #0]
3418b568:	69bb      	ldr	r3, [r7, #24]
3418b56a:	2201      	movs	r2, #1
3418b56c:	2102      	movs	r1, #2
3418b56e:	68f8      	ldr	r0, [r7, #12]
3418b570:	f000 fc0c 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b574:	4603      	mov	r3, r0
3418b576:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418b578:	68fb      	ldr	r3, [r7, #12]
3418b57a:	681b      	ldr	r3, [r3, #0]
3418b57c:	2202      	movs	r2, #2
3418b57e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418b580:	e030      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418b582:	68bb      	ldr	r3, [r7, #8]
3418b584:	681b      	ldr	r3, [r3, #0]
3418b586:	2b00      	cmp	r3, #0
3418b588:	d103      	bne.n	3418b592 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418b58a:	68fb      	ldr	r3, [r7, #12]
3418b58c:	2204      	movs	r2, #4
3418b58e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b590:	e028      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418b592:	68bb      	ldr	r3, [r7, #8]
3418b594:	681b      	ldr	r3, [r3, #0]
3418b596:	2b01      	cmp	r3, #1
3418b598:	d10b      	bne.n	3418b5b2 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418b59a:	68fb      	ldr	r3, [r7, #12]
3418b59c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b59e:	2b24      	cmp	r3, #36	@ 0x24
3418b5a0:	d103      	bne.n	3418b5aa <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418b5a2:	68fb      	ldr	r3, [r7, #12]
3418b5a4:	2204      	movs	r2, #4
3418b5a6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b5a8:	e01c      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418b5aa:	68fb      	ldr	r3, [r7, #12]
3418b5ac:	2214      	movs	r2, #20
3418b5ae:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b5b0:	e018      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418b5b2:	68bb      	ldr	r3, [r7, #8]
3418b5b4:	681b      	ldr	r3, [r3, #0]
3418b5b6:	2b02      	cmp	r3, #2
3418b5b8:	d114      	bne.n	3418b5e4 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418b5ba:	68fb      	ldr	r3, [r7, #12]
3418b5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b5be:	2b14      	cmp	r3, #20
3418b5c0:	d103      	bne.n	3418b5ca <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418b5c2:	68fb      	ldr	r3, [r7, #12]
3418b5c4:	2204      	movs	r2, #4
3418b5c6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b5c8:	e00c      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418b5ca:	68fb      	ldr	r3, [r7, #12]
3418b5cc:	2224      	movs	r2, #36	@ 0x24
3418b5ce:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b5d0:	e008      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418b5d2:	2302      	movs	r3, #2
3418b5d4:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418b5d6:	e005      	b.n	3418b5e4 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418b5d8:	2301      	movs	r3, #1
3418b5da:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418b5dc:	68fb      	ldr	r3, [r7, #12]
3418b5de:	2210      	movs	r2, #16
3418b5e0:	65da      	str	r2, [r3, #92]	@ 0x5c
3418b5e2:	e000      	b.n	3418b5e6 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418b5e4:	bf00      	nop
  }

  return status;
3418b5e6:	7ffb      	ldrb	r3, [r7, #31]
}
3418b5e8:	4618      	mov	r0, r3
3418b5ea:	3720      	adds	r7, #32
3418b5ec:	46bd      	mov	sp, r7
3418b5ee:	bd80      	pop	{r7, pc}

3418b5f0 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418b5f0:	b580      	push	{r7, lr}
3418b5f2:	b08a      	sub	sp, #40	@ 0x28
3418b5f4:	af02      	add	r7, sp, #8
3418b5f6:	60f8      	str	r0, [r7, #12]
3418b5f8:	60b9      	str	r1, [r7, #8]
3418b5fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418b5fc:	f7f5 fe22 	bl	34181244 <HAL_GetTick>
3418b600:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418b602:	68fb      	ldr	r3, [r7, #12]
3418b604:	681b      	ldr	r3, [r3, #0]
3418b606:	3350      	adds	r3, #80	@ 0x50
3418b608:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418b60a:	68bb      	ldr	r3, [r7, #8]
3418b60c:	2b00      	cmp	r3, #0
3418b60e:	d105      	bne.n	3418b61c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418b610:	2301      	movs	r3, #1
3418b612:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418b614:	68fb      	ldr	r3, [r7, #12]
3418b616:	2208      	movs	r2, #8
3418b618:	65da      	str	r2, [r3, #92]	@ 0x5c
3418b61a:	e057      	b.n	3418b6cc <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418b61c:	68fb      	ldr	r3, [r7, #12]
3418b61e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b620:	2b04      	cmp	r3, #4
3418b622:	d14e      	bne.n	3418b6c2 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418b624:	68fb      	ldr	r3, [r7, #12]
3418b626:	681b      	ldr	r3, [r3, #0]
3418b628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418b62a:	1c5a      	adds	r2, r3, #1
3418b62c:	68fb      	ldr	r3, [r7, #12]
3418b62e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418b630:	68fb      	ldr	r3, [r7, #12]
3418b632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418b634:	68fb      	ldr	r3, [r7, #12]
3418b636:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418b638:	68fb      	ldr	r3, [r7, #12]
3418b63a:	68ba      	ldr	r2, [r7, #8]
3418b63c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418b63e:	68fb      	ldr	r3, [r7, #12]
3418b640:	681b      	ldr	r3, [r3, #0]
3418b642:	681a      	ldr	r2, [r3, #0]
3418b644:	68fb      	ldr	r3, [r7, #12]
3418b646:	681b      	ldr	r3, [r3, #0]
3418b648:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418b64c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418b64e:	687b      	ldr	r3, [r7, #4]
3418b650:	9300      	str	r3, [sp, #0]
3418b652:	69bb      	ldr	r3, [r7, #24]
3418b654:	2201      	movs	r2, #1
3418b656:	2104      	movs	r1, #4
3418b658:	68f8      	ldr	r0, [r7, #12]
3418b65a:	f000 fb97 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b65e:	4603      	mov	r3, r0
3418b660:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418b662:	7ffb      	ldrb	r3, [r7, #31]
3418b664:	2b00      	cmp	r3, #0
3418b666:	d113      	bne.n	3418b690 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418b668:	68fb      	ldr	r3, [r7, #12]
3418b66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b66c:	781a      	ldrb	r2, [r3, #0]
3418b66e:	697b      	ldr	r3, [r7, #20]
3418b670:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418b672:	68fb      	ldr	r3, [r7, #12]
3418b674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b676:	1c5a      	adds	r2, r3, #1
3418b678:	68fb      	ldr	r3, [r7, #12]
3418b67a:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418b67c:	68fb      	ldr	r3, [r7, #12]
3418b67e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b680:	1e5a      	subs	r2, r3, #1
3418b682:	68fb      	ldr	r3, [r7, #12]
3418b684:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418b686:	68fb      	ldr	r3, [r7, #12]
3418b688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b68a:	2b00      	cmp	r3, #0
3418b68c:	d1df      	bne.n	3418b64e <HAL_XSPI_Transmit+0x5e>
3418b68e:	e000      	b.n	3418b692 <HAL_XSPI_Transmit+0xa2>
          break;
3418b690:	bf00      	nop

      if (status == HAL_OK)
3418b692:	7ffb      	ldrb	r3, [r7, #31]
3418b694:	2b00      	cmp	r3, #0
3418b696:	d119      	bne.n	3418b6cc <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418b698:	687b      	ldr	r3, [r7, #4]
3418b69a:	9300      	str	r3, [sp, #0]
3418b69c:	69bb      	ldr	r3, [r7, #24]
3418b69e:	2201      	movs	r2, #1
3418b6a0:	2102      	movs	r1, #2
3418b6a2:	68f8      	ldr	r0, [r7, #12]
3418b6a4:	f000 fb72 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b6a8:	4603      	mov	r3, r0
3418b6aa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418b6ac:	7ffb      	ldrb	r3, [r7, #31]
3418b6ae:	2b00      	cmp	r3, #0
3418b6b0:	d10c      	bne.n	3418b6cc <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418b6b2:	68fb      	ldr	r3, [r7, #12]
3418b6b4:	681b      	ldr	r3, [r3, #0]
3418b6b6:	2202      	movs	r2, #2
3418b6b8:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418b6ba:	68fb      	ldr	r3, [r7, #12]
3418b6bc:	2202      	movs	r2, #2
3418b6be:	659a      	str	r2, [r3, #88]	@ 0x58
3418b6c0:	e004      	b.n	3418b6cc <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418b6c2:	2301      	movs	r3, #1
3418b6c4:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418b6c6:	68fb      	ldr	r3, [r7, #12]
3418b6c8:	2210      	movs	r2, #16
3418b6ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418b6cc:	7ffb      	ldrb	r3, [r7, #31]
}
3418b6ce:	4618      	mov	r0, r3
3418b6d0:	3720      	adds	r7, #32
3418b6d2:	46bd      	mov	sp, r7
3418b6d4:	bd80      	pop	{r7, pc}

3418b6d6 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
3418b6d6:	b580      	push	{r7, lr}
3418b6d8:	b08c      	sub	sp, #48	@ 0x30
3418b6da:	af02      	add	r7, sp, #8
3418b6dc:	60f8      	str	r0, [r7, #12]
3418b6de:	60b9      	str	r1, [r7, #8]
3418b6e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418b6e2:	f7f5 fdaf 	bl	34181244 <HAL_GetTick>
3418b6e6:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418b6e8:	68fb      	ldr	r3, [r7, #12]
3418b6ea:	681b      	ldr	r3, [r3, #0]
3418b6ec:	3350      	adds	r3, #80	@ 0x50
3418b6ee:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418b6f0:	68fb      	ldr	r3, [r7, #12]
3418b6f2:	681b      	ldr	r3, [r3, #0]
3418b6f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418b6f6:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418b6f8:	68fb      	ldr	r3, [r7, #12]
3418b6fa:	681b      	ldr	r3, [r3, #0]
3418b6fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418b700:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418b702:	68bb      	ldr	r3, [r7, #8]
3418b704:	2b00      	cmp	r3, #0
3418b706:	d106      	bne.n	3418b716 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418b708:	2301      	movs	r3, #1
3418b70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418b70e:	68fb      	ldr	r3, [r7, #12]
3418b710:	2208      	movs	r2, #8
3418b712:	65da      	str	r2, [r3, #92]	@ 0x5c
3418b714:	e07c      	b.n	3418b810 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418b716:	68fb      	ldr	r3, [r7, #12]
3418b718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b71a:	2b04      	cmp	r3, #4
3418b71c:	d172      	bne.n	3418b804 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418b71e:	68fb      	ldr	r3, [r7, #12]
3418b720:	681b      	ldr	r3, [r3, #0]
3418b722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418b724:	1c5a      	adds	r2, r3, #1
3418b726:	68fb      	ldr	r3, [r7, #12]
3418b728:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418b72a:	68fb      	ldr	r3, [r7, #12]
3418b72c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418b72e:	68fb      	ldr	r3, [r7, #12]
3418b730:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418b732:	68fb      	ldr	r3, [r7, #12]
3418b734:	68ba      	ldr	r2, [r7, #8]
3418b736:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418b738:	68fb      	ldr	r3, [r7, #12]
3418b73a:	681b      	ldr	r3, [r3, #0]
3418b73c:	681b      	ldr	r3, [r3, #0]
3418b73e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418b742:	68fb      	ldr	r3, [r7, #12]
3418b744:	681b      	ldr	r3, [r3, #0]
3418b746:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418b74a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418b74c:	68fb      	ldr	r3, [r7, #12]
3418b74e:	68db      	ldr	r3, [r3, #12]
3418b750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418b754:	d104      	bne.n	3418b760 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418b756:	68fb      	ldr	r3, [r7, #12]
3418b758:	681b      	ldr	r3, [r3, #0]
3418b75a:	69ba      	ldr	r2, [r7, #24]
3418b75c:	649a      	str	r2, [r3, #72]	@ 0x48
3418b75e:	e011      	b.n	3418b784 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418b760:	68fb      	ldr	r3, [r7, #12]
3418b762:	681b      	ldr	r3, [r3, #0]
3418b764:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418b768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418b76c:	2b00      	cmp	r3, #0
3418b76e:	d004      	beq.n	3418b77a <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418b770:	68fb      	ldr	r3, [r7, #12]
3418b772:	681b      	ldr	r3, [r3, #0]
3418b774:	69ba      	ldr	r2, [r7, #24]
3418b776:	649a      	str	r2, [r3, #72]	@ 0x48
3418b778:	e004      	b.n	3418b784 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418b77a:	68fb      	ldr	r3, [r7, #12]
3418b77c:	681b      	ldr	r3, [r3, #0]
3418b77e:	697a      	ldr	r2, [r7, #20]
3418b780:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418b784:	687b      	ldr	r3, [r7, #4]
3418b786:	9300      	str	r3, [sp, #0]
3418b788:	6a3b      	ldr	r3, [r7, #32]
3418b78a:	2201      	movs	r2, #1
3418b78c:	2106      	movs	r1, #6
3418b78e:	68f8      	ldr	r0, [r7, #12]
3418b790:	f000 fafc 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b794:	4603      	mov	r3, r0
3418b796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418b79a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418b79e:	2b00      	cmp	r3, #0
3418b7a0:	d114      	bne.n	3418b7cc <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418b7a2:	68fb      	ldr	r3, [r7, #12]
3418b7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b7a6:	69fa      	ldr	r2, [r7, #28]
3418b7a8:	7812      	ldrb	r2, [r2, #0]
3418b7aa:	b2d2      	uxtb	r2, r2
3418b7ac:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418b7ae:	68fb      	ldr	r3, [r7, #12]
3418b7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b7b2:	1c5a      	adds	r2, r3, #1
3418b7b4:	68fb      	ldr	r3, [r7, #12]
3418b7b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418b7b8:	68fb      	ldr	r3, [r7, #12]
3418b7ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b7bc:	1e5a      	subs	r2, r3, #1
3418b7be:	68fb      	ldr	r3, [r7, #12]
3418b7c0:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418b7c2:	68fb      	ldr	r3, [r7, #12]
3418b7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b7c6:	2b00      	cmp	r3, #0
3418b7c8:	d1dc      	bne.n	3418b784 <HAL_XSPI_Receive+0xae>
3418b7ca:	e000      	b.n	3418b7ce <HAL_XSPI_Receive+0xf8>
          break;
3418b7cc:	bf00      	nop

      if (status == HAL_OK)
3418b7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418b7d2:	2b00      	cmp	r3, #0
3418b7d4:	d11c      	bne.n	3418b810 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418b7d6:	687b      	ldr	r3, [r7, #4]
3418b7d8:	9300      	str	r3, [sp, #0]
3418b7da:	6a3b      	ldr	r3, [r7, #32]
3418b7dc:	2201      	movs	r2, #1
3418b7de:	2102      	movs	r1, #2
3418b7e0:	68f8      	ldr	r0, [r7, #12]
3418b7e2:	f000 fad3 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b7e6:	4603      	mov	r3, r0
3418b7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418b7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418b7f0:	2b00      	cmp	r3, #0
3418b7f2:	d10d      	bne.n	3418b810 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418b7f4:	68fb      	ldr	r3, [r7, #12]
3418b7f6:	681b      	ldr	r3, [r3, #0]
3418b7f8:	2202      	movs	r2, #2
3418b7fa:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418b7fc:	68fb      	ldr	r3, [r7, #12]
3418b7fe:	2202      	movs	r2, #2
3418b800:	659a      	str	r2, [r3, #88]	@ 0x58
3418b802:	e005      	b.n	3418b810 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418b804:	2301      	movs	r3, #1
3418b806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418b80a:	68fb      	ldr	r3, [r7, #12]
3418b80c:	2210      	movs	r2, #16
3418b80e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418b810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418b814:	4618      	mov	r0, r3
3418b816:	3728      	adds	r7, #40	@ 0x28
3418b818:	46bd      	mov	sp, r7
3418b81a:	bd80      	pop	{r7, pc}

3418b81c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
3418b81c:	b580      	push	{r7, lr}
3418b81e:	b08a      	sub	sp, #40	@ 0x28
3418b820:	af02      	add	r7, sp, #8
3418b822:	60f8      	str	r0, [r7, #12]
3418b824:	60b9      	str	r1, [r7, #8]
3418b826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418b828:	f7f5 fd0c 	bl	34181244 <HAL_GetTick>
3418b82c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418b82e:	68fb      	ldr	r3, [r7, #12]
3418b830:	681b      	ldr	r3, [r3, #0]
3418b832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418b834:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418b836:	68fb      	ldr	r3, [r7, #12]
3418b838:	681b      	ldr	r3, [r3, #0]
3418b83a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418b83e:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418b840:	68fb      	ldr	r3, [r7, #12]
3418b842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b844:	2b04      	cmp	r3, #4
3418b846:	d167      	bne.n	3418b918 <HAL_XSPI_AutoPolling+0xfc>
3418b848:	68bb      	ldr	r3, [r7, #8]
3418b84a:	68db      	ldr	r3, [r3, #12]
3418b84c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418b850:	d162      	bne.n	3418b918 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418b852:	687b      	ldr	r3, [r7, #4]
3418b854:	9300      	str	r3, [sp, #0]
3418b856:	69bb      	ldr	r3, [r7, #24]
3418b858:	2200      	movs	r2, #0
3418b85a:	2120      	movs	r1, #32
3418b85c:	68f8      	ldr	r0, [r7, #12]
3418b85e:	f000 fa95 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b862:	4603      	mov	r3, r0
3418b864:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418b866:	7ffb      	ldrb	r3, [r7, #31]
3418b868:	2b00      	cmp	r3, #0
3418b86a:	d152      	bne.n	3418b912 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418b86c:	68fb      	ldr	r3, [r7, #12]
3418b86e:	681b      	ldr	r3, [r3, #0]
3418b870:	68ba      	ldr	r2, [r7, #8]
3418b872:	6812      	ldr	r2, [r2, #0]
3418b874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418b878:	68fb      	ldr	r3, [r7, #12]
3418b87a:	681b      	ldr	r3, [r3, #0]
3418b87c:	68ba      	ldr	r2, [r7, #8]
3418b87e:	6852      	ldr	r2, [r2, #4]
3418b880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418b884:	68fb      	ldr	r3, [r7, #12]
3418b886:	681b      	ldr	r3, [r3, #0]
3418b888:	68ba      	ldr	r2, [r7, #8]
3418b88a:	6912      	ldr	r2, [r2, #16]
3418b88c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418b890:	68fb      	ldr	r3, [r7, #12]
3418b892:	681b      	ldr	r3, [r3, #0]
3418b894:	681b      	ldr	r3, [r3, #0]
3418b896:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
3418b89a:	68bb      	ldr	r3, [r7, #8]
3418b89c:	6899      	ldr	r1, [r3, #8]
3418b89e:	68bb      	ldr	r3, [r7, #8]
3418b8a0:	68db      	ldr	r3, [r3, #12]
3418b8a2:	430b      	orrs	r3, r1
3418b8a4:	431a      	orrs	r2, r3
3418b8a6:	68fb      	ldr	r3, [r7, #12]
3418b8a8:	681b      	ldr	r3, [r3, #0]
3418b8aa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
3418b8ae:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418b8b0:	68fb      	ldr	r3, [r7, #12]
3418b8b2:	68db      	ldr	r3, [r3, #12]
3418b8b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418b8b8:	d104      	bne.n	3418b8c4 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418b8ba:	68fb      	ldr	r3, [r7, #12]
3418b8bc:	681b      	ldr	r3, [r3, #0]
3418b8be:	697a      	ldr	r2, [r7, #20]
3418b8c0:	649a      	str	r2, [r3, #72]	@ 0x48
3418b8c2:	e011      	b.n	3418b8e8 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418b8c4:	68fb      	ldr	r3, [r7, #12]
3418b8c6:	681b      	ldr	r3, [r3, #0]
3418b8c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418b8cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418b8d0:	2b00      	cmp	r3, #0
3418b8d2:	d004      	beq.n	3418b8de <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418b8d4:	68fb      	ldr	r3, [r7, #12]
3418b8d6:	681b      	ldr	r3, [r3, #0]
3418b8d8:	697a      	ldr	r2, [r7, #20]
3418b8da:	649a      	str	r2, [r3, #72]	@ 0x48
3418b8dc:	e004      	b.n	3418b8e8 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418b8de:	68fb      	ldr	r3, [r7, #12]
3418b8e0:	681b      	ldr	r3, [r3, #0]
3418b8e2:	693a      	ldr	r2, [r7, #16]
3418b8e4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3418b8e8:	687b      	ldr	r3, [r7, #4]
3418b8ea:	9300      	str	r3, [sp, #0]
3418b8ec:	69bb      	ldr	r3, [r7, #24]
3418b8ee:	2201      	movs	r2, #1
3418b8f0:	2108      	movs	r1, #8
3418b8f2:	68f8      	ldr	r0, [r7, #12]
3418b8f4:	f000 fa4a 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b8f8:	4603      	mov	r3, r0
3418b8fa:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418b8fc:	7ffb      	ldrb	r3, [r7, #31]
3418b8fe:	2b00      	cmp	r3, #0
3418b900:	d110      	bne.n	3418b924 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3418b902:	68fb      	ldr	r3, [r7, #12]
3418b904:	681b      	ldr	r3, [r3, #0]
3418b906:	2208      	movs	r2, #8
3418b908:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3418b90a:	68fb      	ldr	r3, [r7, #12]
3418b90c:	2202      	movs	r2, #2
3418b90e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418b910:	e008      	b.n	3418b924 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3418b912:	2302      	movs	r3, #2
3418b914:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418b916:	e005      	b.n	3418b924 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
3418b918:	2301      	movs	r3, #1
3418b91a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418b91c:	68fb      	ldr	r3, [r7, #12]
3418b91e:	2210      	movs	r2, #16
3418b920:	65da      	str	r2, [r3, #92]	@ 0x5c
3418b922:	e000      	b.n	3418b926 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3418b924:	bf00      	nop
  }

  return status;
3418b926:	7ffb      	ldrb	r3, [r7, #31]
}
3418b928:	4618      	mov	r0, r3
3418b92a:	3720      	adds	r7, #32
3418b92c:	46bd      	mov	sp, r7
3418b92e:	bd80      	pop	{r7, pc}

3418b930 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
3418b930:	b580      	push	{r7, lr}
3418b932:	b086      	sub	sp, #24
3418b934:	af02      	add	r7, sp, #8
3418b936:	6078      	str	r0, [r7, #4]
3418b938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418b93a:	f7f5 fc83 	bl	34181244 <HAL_GetTick>
3418b93e:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418b940:	687b      	ldr	r3, [r7, #4]
3418b942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b944:	2b04      	cmp	r3, #4
3418b946:	d155      	bne.n	3418b9f4 <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418b948:	687b      	ldr	r3, [r7, #4]
3418b94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418b94c:	9300      	str	r3, [sp, #0]
3418b94e:	68bb      	ldr	r3, [r7, #8]
3418b950:	2200      	movs	r2, #0
3418b952:	2120      	movs	r1, #32
3418b954:	6878      	ldr	r0, [r7, #4]
3418b956:	f000 fa19 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418b95a:	4603      	mov	r3, r0
3418b95c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
3418b95e:	7bfb      	ldrb	r3, [r7, #15]
3418b960:	2b00      	cmp	r3, #0
3418b962:	d14c      	bne.n	3418b9fe <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3418b964:	687b      	ldr	r3, [r7, #4]
3418b966:	2288      	movs	r2, #136	@ 0x88
3418b968:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3418b96a:	683b      	ldr	r3, [r7, #0]
3418b96c:	689b      	ldr	r3, [r3, #8]
3418b96e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418b972:	d10b      	bne.n	3418b98c <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3418b974:	687b      	ldr	r3, [r7, #4]
3418b976:	681b      	ldr	r3, [r3, #0]
3418b978:	681b      	ldr	r3, [r3, #0]
3418b97a:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
3418b97e:	683b      	ldr	r3, [r7, #0]
3418b980:	689a      	ldr	r2, [r3, #8]
3418b982:	687b      	ldr	r3, [r7, #4]
3418b984:	681b      	ldr	r3, [r3, #0]
3418b986:	430a      	orrs	r2, r1
3418b988:	601a      	str	r2, [r3, #0]
3418b98a:	e00d      	b.n	3418b9a8 <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3418b98c:	687b      	ldr	r3, [r7, #4]
3418b98e:	681b      	ldr	r3, [r3, #0]
3418b990:	681b      	ldr	r3, [r3, #0]
3418b992:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3418b996:	683b      	ldr	r3, [r7, #0]
3418b998:	689a      	ldr	r2, [r3, #8]
3418b99a:	683b      	ldr	r3, [r7, #0]
3418b99c:	68db      	ldr	r3, [r3, #12]
3418b99e:	431a      	orrs	r2, r3
3418b9a0:	687b      	ldr	r3, [r7, #4]
3418b9a2:	681b      	ldr	r3, [r3, #0]
3418b9a4:	430a      	orrs	r2, r1
3418b9a6:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3418b9a8:	683b      	ldr	r3, [r7, #0]
3418b9aa:	681b      	ldr	r3, [r3, #0]
3418b9ac:	2b08      	cmp	r3, #8
3418b9ae:	d111      	bne.n	3418b9d4 <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3418b9b0:	687b      	ldr	r3, [r7, #4]
3418b9b2:	681b      	ldr	r3, [r3, #0]
3418b9b4:	683a      	ldr	r2, [r7, #0]
3418b9b6:	6852      	ldr	r2, [r2, #4]
3418b9b8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3418b9bc:	687b      	ldr	r3, [r7, #4]
3418b9be:	681b      	ldr	r3, [r3, #0]
3418b9c0:	2210      	movs	r2, #16
3418b9c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3418b9c4:	687b      	ldr	r3, [r7, #4]
3418b9c6:	681b      	ldr	r3, [r3, #0]
3418b9c8:	681a      	ldr	r2, [r3, #0]
3418b9ca:	687b      	ldr	r3, [r7, #4]
3418b9cc:	681b      	ldr	r3, [r3, #0]
3418b9ce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3418b9d2:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3418b9d4:	687b      	ldr	r3, [r7, #4]
3418b9d6:	681b      	ldr	r3, [r3, #0]
3418b9d8:	681b      	ldr	r3, [r3, #0]
3418b9da:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3418b9de:	f023 0308 	bic.w	r3, r3, #8
3418b9e2:	683a      	ldr	r2, [r7, #0]
3418b9e4:	6812      	ldr	r2, [r2, #0]
3418b9e6:	431a      	orrs	r2, r3
3418b9e8:	687b      	ldr	r3, [r7, #4]
3418b9ea:	681b      	ldr	r3, [r3, #0]
3418b9ec:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3418b9f0:	601a      	str	r2, [r3, #0]
3418b9f2:	e004      	b.n	3418b9fe <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3418b9f4:	2301      	movs	r3, #1
3418b9f6:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418b9f8:	687b      	ldr	r3, [r7, #4]
3418b9fa:	2210      	movs	r2, #16
3418b9fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
3418ba00:	4618      	mov	r0, r3
3418ba02:	3710      	adds	r7, #16
3418ba04:	46bd      	mov	sp, r7
3418ba06:	bd80      	pop	{r7, pc}

3418ba08 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
3418ba08:	b580      	push	{r7, lr}
3418ba0a:	b086      	sub	sp, #24
3418ba0c:	af02      	add	r7, sp, #8
3418ba0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418ba10:	2300      	movs	r3, #0
3418ba12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418ba14:	f7f5 fc16 	bl	34181244 <HAL_GetTick>
3418ba18:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
3418ba1a:	687b      	ldr	r3, [r7, #4]
3418ba1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418ba1e:	2b00      	cmp	r3, #0
3418ba20:	d06f      	beq.n	3418bb02 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418ba22:	687b      	ldr	r3, [r7, #4]
3418ba24:	681b      	ldr	r3, [r3, #0]
3418ba26:	681b      	ldr	r3, [r3, #0]
3418ba28:	f003 0304 	and.w	r3, r3, #4
3418ba2c:	2b00      	cmp	r3, #0
3418ba2e:	d021      	beq.n	3418ba74 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418ba30:	687b      	ldr	r3, [r7, #4]
3418ba32:	681b      	ldr	r3, [r3, #0]
3418ba34:	681a      	ldr	r2, [r3, #0]
3418ba36:	687b      	ldr	r3, [r7, #4]
3418ba38:	681b      	ldr	r3, [r3, #0]
3418ba3a:	f022 0204 	bic.w	r2, r2, #4
3418ba3e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
3418ba40:	687b      	ldr	r3, [r7, #4]
3418ba42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418ba44:	4618      	mov	r0, r3
3418ba46:	f7f5 fd23 	bl	34181490 <HAL_DMA_Abort>
3418ba4a:	4603      	mov	r3, r0
3418ba4c:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418ba4e:	7bfb      	ldrb	r3, [r7, #15]
3418ba50:	2b00      	cmp	r3, #0
3418ba52:	d002      	beq.n	3418ba5a <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418ba54:	687b      	ldr	r3, [r7, #4]
3418ba56:	2204      	movs	r2, #4
3418ba58:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
3418ba5a:	687b      	ldr	r3, [r7, #4]
3418ba5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418ba5e:	4618      	mov	r0, r3
3418ba60:	f7f5 fd16 	bl	34181490 <HAL_DMA_Abort>
3418ba64:	4603      	mov	r3, r0
3418ba66:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418ba68:	7bfb      	ldrb	r3, [r7, #15]
3418ba6a:	2b00      	cmp	r3, #0
3418ba6c:	d002      	beq.n	3418ba74 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418ba6e:	687b      	ldr	r3, [r7, #4]
3418ba70:	2204      	movs	r2, #4
3418ba72:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418ba74:	687b      	ldr	r3, [r7, #4]
3418ba76:	681b      	ldr	r3, [r3, #0]
3418ba78:	6a1b      	ldr	r3, [r3, #32]
3418ba7a:	f003 0320 	and.w	r3, r3, #32
3418ba7e:	2b00      	cmp	r3, #0
3418ba80:	d033      	beq.n	3418baea <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418ba82:	687b      	ldr	r3, [r7, #4]
3418ba84:	681b      	ldr	r3, [r3, #0]
3418ba86:	681a      	ldr	r2, [r3, #0]
3418ba88:	687b      	ldr	r3, [r7, #4]
3418ba8a:	681b      	ldr	r3, [r3, #0]
3418ba8c:	f042 0202 	orr.w	r2, r2, #2
3418ba90:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3418ba92:	687b      	ldr	r3, [r7, #4]
3418ba94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418ba96:	9300      	str	r3, [sp, #0]
3418ba98:	68bb      	ldr	r3, [r7, #8]
3418ba9a:	2201      	movs	r2, #1
3418ba9c:	2102      	movs	r1, #2
3418ba9e:	6878      	ldr	r0, [r7, #4]
3418baa0:	f000 f974 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418baa4:	4603      	mov	r3, r0
3418baa6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418baa8:	7bfb      	ldrb	r3, [r7, #15]
3418baaa:	2b00      	cmp	r3, #0
3418baac:	d12e      	bne.n	3418bb0c <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418baae:	687b      	ldr	r3, [r7, #4]
3418bab0:	681b      	ldr	r3, [r3, #0]
3418bab2:	2202      	movs	r2, #2
3418bab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418bab6:	687b      	ldr	r3, [r7, #4]
3418bab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418baba:	9300      	str	r3, [sp, #0]
3418babc:	68bb      	ldr	r3, [r7, #8]
3418babe:	2200      	movs	r2, #0
3418bac0:	2120      	movs	r1, #32
3418bac2:	6878      	ldr	r0, [r7, #4]
3418bac4:	f000 f962 	bl	3418bd8c <XSPI_WaitFlagStateUntilTimeout>
3418bac8:	4603      	mov	r3, r0
3418baca:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
3418bacc:	7bfb      	ldrb	r3, [r7, #15]
3418bace:	2b00      	cmp	r3, #0
3418bad0:	d11c      	bne.n	3418bb0c <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418bad2:	687b      	ldr	r3, [r7, #4]
3418bad4:	681b      	ldr	r3, [r3, #0]
3418bad6:	681a      	ldr	r2, [r3, #0]
3418bad8:	687b      	ldr	r3, [r7, #4]
3418bada:	681b      	ldr	r3, [r3, #0]
3418badc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418bae0:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
3418bae2:	687b      	ldr	r3, [r7, #4]
3418bae4:	2202      	movs	r2, #2
3418bae6:	659a      	str	r2, [r3, #88]	@ 0x58
3418bae8:	e010      	b.n	3418bb0c <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418baea:	687b      	ldr	r3, [r7, #4]
3418baec:	681b      	ldr	r3, [r3, #0]
3418baee:	681a      	ldr	r2, [r3, #0]
3418baf0:	687b      	ldr	r3, [r7, #4]
3418baf2:	681b      	ldr	r3, [r3, #0]
3418baf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418baf8:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418bafa:	687b      	ldr	r3, [r7, #4]
3418bafc:	2202      	movs	r2, #2
3418bafe:	659a      	str	r2, [r3, #88]	@ 0x58
3418bb00:	e004      	b.n	3418bb0c <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3418bb02:	2301      	movs	r3, #1
3418bb04:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418bb06:	687b      	ldr	r3, [r7, #4]
3418bb08:	2210      	movs	r2, #16
3418bb0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
3418bb0e:	4618      	mov	r0, r3
3418bb10:	3710      	adds	r7, #16
3418bb12:	46bd      	mov	sp, r7
3418bb14:	bd80      	pop	{r7, pc}

3418bb16 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3418bb16:	b480      	push	{r7}
3418bb18:	b083      	sub	sp, #12
3418bb1a:	af00      	add	r7, sp, #0
3418bb1c:	6078      	str	r0, [r7, #4]
3418bb1e:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3418bb20:	687b      	ldr	r3, [r7, #4]
3418bb22:	683a      	ldr	r2, [r7, #0]
3418bb24:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3418bb26:	2300      	movs	r3, #0
}
3418bb28:	4618      	mov	r0, r3
3418bb2a:	370c      	adds	r7, #12
3418bb2c:	46bd      	mov	sp, r7
3418bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb32:	4770      	bx	lr

3418bb34 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
3418bb34:	b580      	push	{r7, lr}
3418bb36:	b08e      	sub	sp, #56	@ 0x38
3418bb38:	af00      	add	r7, sp, #0
3418bb3a:	60f8      	str	r0, [r7, #12]
3418bb3c:	60b9      	str	r1, [r7, #8]
3418bb3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418bb40:	2300      	movs	r3, #0
3418bb42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3418bb46:	2300      	movs	r3, #0
3418bb48:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3418bb4c:	f107 0310 	add.w	r3, r7, #16
3418bb50:	2224      	movs	r2, #36	@ 0x24
3418bb52:	2100      	movs	r1, #0
3418bb54:	4618      	mov	r0, r3
3418bb56:	f003 f8cf 	bl	3418ecf8 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418bb5a:	2300      	movs	r3, #0
3418bb5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418bb60:	e014      	b.n	3418bb8c <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3418bb62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bb66:	3301      	adds	r3, #1
3418bb68:	b2d8      	uxtb	r0, r3
3418bb6a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418bb6e:	f107 0110 	add.w	r1, r7, #16
3418bb72:	4613      	mov	r3, r2
3418bb74:	005b      	lsls	r3, r3, #1
3418bb76:	4413      	add	r3, r2
3418bb78:	009b      	lsls	r3, r3, #2
3418bb7a:	440b      	add	r3, r1
3418bb7c:	4619      	mov	r1, r3
3418bb7e:	f000 fad5 	bl	3418c12c <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418bb82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bb86:	3301      	adds	r3, #1
3418bb88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418bb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bb90:	2b02      	cmp	r3, #2
3418bb92:	d9e6      	bls.n	3418bb62 <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3418bb94:	2020      	movs	r0, #32
3418bb96:	f7ff fb71 	bl	3418b27c <LL_AHB5_GRP1_IsEnabledClock>
3418bb9a:	4603      	mov	r3, r0
3418bb9c:	2b00      	cmp	r3, #0
3418bb9e:	d011      	beq.n	3418bbc4 <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
3418bba0:	4b76      	ldr	r3, [pc, #472]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bba2:	681b      	ldr	r3, [r3, #0]
3418bba4:	f003 0301 	and.w	r3, r3, #1
3418bba8:	2b00      	cmp	r3, #0
3418bbaa:	d00b      	beq.n	3418bbc4 <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3418bbac:	4b73      	ldr	r3, [pc, #460]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bbae:	681b      	ldr	r3, [r3, #0]
3418bbb0:	4a72      	ldr	r2, [pc, #456]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bbb2:	f023 0301 	bic.w	r3, r3, #1
3418bbb6:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
3418bbb8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418bbbc:	f043 0301 	orr.w	r3, r3, #1
3418bbc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
3418bbc4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418bbc8:	f7ff fb58 	bl	3418b27c <LL_AHB5_GRP1_IsEnabledClock>
3418bbcc:	4603      	mov	r3, r0
3418bbce:	2b00      	cmp	r3, #0
3418bbd0:	d011      	beq.n	3418bbf6 <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
3418bbd2:	4b6b      	ldr	r3, [pc, #428]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bbd4:	681b      	ldr	r3, [r3, #0]
3418bbd6:	f003 0301 	and.w	r3, r3, #1
3418bbda:	2b00      	cmp	r3, #0
3418bbdc:	d00b      	beq.n	3418bbf6 <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418bbde:	4b68      	ldr	r3, [pc, #416]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bbe0:	681b      	ldr	r3, [r3, #0]
3418bbe2:	4a67      	ldr	r2, [pc, #412]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bbe4:	f023 0301 	bic.w	r3, r3, #1
3418bbe8:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
3418bbea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418bbee:	f043 0302 	orr.w	r3, r3, #2
3418bbf2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
3418bbf6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3418bbfa:	f7ff fb3f 	bl	3418b27c <LL_AHB5_GRP1_IsEnabledClock>
3418bbfe:	4603      	mov	r3, r0
3418bc00:	2b00      	cmp	r3, #0
3418bc02:	d011      	beq.n	3418bc28 <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3418bc04:	4b5f      	ldr	r3, [pc, #380]	@ (3418bd84 <HAL_XSPIM_Config+0x250>)
3418bc06:	681b      	ldr	r3, [r3, #0]
3418bc08:	f003 0301 	and.w	r3, r3, #1
3418bc0c:	2b00      	cmp	r3, #0
3418bc0e:	d00b      	beq.n	3418bc28 <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418bc10:	4b5b      	ldr	r3, [pc, #364]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bc12:	681b      	ldr	r3, [r3, #0]
3418bc14:	4a5a      	ldr	r2, [pc, #360]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bc16:	f023 0301 	bic.w	r3, r3, #1
3418bc1a:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
3418bc1c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418bc20:	f043 0304 	orr.w	r3, r3, #4
3418bc24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
3418bc28:	4b57      	ldr	r3, [pc, #348]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc2a:	2200      	movs	r2, #0
3418bc2c:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
3418bc2e:	4b56      	ldr	r3, [pc, #344]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc30:	681b      	ldr	r3, [r3, #0]
3418bc32:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3418bc36:	68bb      	ldr	r3, [r7, #8]
3418bc38:	689b      	ldr	r3, [r3, #8]
3418bc3a:	3b01      	subs	r3, #1
3418bc3c:	041b      	lsls	r3, r3, #16
3418bc3e:	4952      	ldr	r1, [pc, #328]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc40:	4313      	orrs	r3, r2
3418bc42:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3418bc44:	68fb      	ldr	r3, [r7, #12]
3418bc46:	681b      	ldr	r3, [r3, #0]
3418bc48:	4a4c      	ldr	r2, [pc, #304]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bc4a:	4293      	cmp	r3, r2
3418bc4c:	d110      	bne.n	3418bc70 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3418bc4e:	68bb      	ldr	r3, [r7, #8]
3418bc50:	685b      	ldr	r3, [r3, #4]
3418bc52:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418bc54:	68bb      	ldr	r3, [r7, #8]
3418bc56:	681b      	ldr	r3, [r3, #0]
3418bc58:	2b00      	cmp	r3, #0
3418bc5a:	d03e      	beq.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418bc5c:	4b4a      	ldr	r3, [pc, #296]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc5e:	681b      	ldr	r3, [r3, #0]
3418bc60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418bc64:	68bb      	ldr	r3, [r7, #8]
3418bc66:	681b      	ldr	r3, [r3, #0]
3418bc68:	4947      	ldr	r1, [pc, #284]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc6a:	4313      	orrs	r3, r2
3418bc6c:	600b      	str	r3, [r1, #0]
3418bc6e:	e034      	b.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
3418bc70:	68fb      	ldr	r3, [r7, #12]
3418bc72:	681b      	ldr	r3, [r3, #0]
3418bc74:	4a42      	ldr	r2, [pc, #264]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bc76:	4293      	cmp	r3, r2
3418bc78:	d110      	bne.n	3418bc9c <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3418bc7a:	68bb      	ldr	r3, [r7, #8]
3418bc7c:	685b      	ldr	r3, [r3, #4]
3418bc7e:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418bc80:	68bb      	ldr	r3, [r7, #8]
3418bc82:	681b      	ldr	r3, [r3, #0]
3418bc84:	2b00      	cmp	r3, #0
3418bc86:	d028      	beq.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418bc88:	4b3f      	ldr	r3, [pc, #252]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc8a:	681b      	ldr	r3, [r3, #0]
3418bc8c:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
3418bc90:	68bb      	ldr	r3, [r7, #8]
3418bc92:	681b      	ldr	r3, [r3, #0]
3418bc94:	493c      	ldr	r1, [pc, #240]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bc96:	4313      	orrs	r3, r2
3418bc98:	600b      	str	r3, [r1, #0]
3418bc9a:	e01e      	b.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3418bc9c:	68fb      	ldr	r3, [r7, #12]
3418bc9e:	681b      	ldr	r3, [r3, #0]
3418bca0:	4a38      	ldr	r2, [pc, #224]	@ (3418bd84 <HAL_XSPIM_Config+0x250>)
3418bca2:	4293      	cmp	r3, r2
3418bca4:	d111      	bne.n	3418bcca <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
3418bca6:	68bb      	ldr	r3, [r7, #8]
3418bca8:	685b      	ldr	r3, [r3, #4]
3418bcaa:	2b00      	cmp	r3, #0
3418bcac:	d104      	bne.n	3418bcb8 <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3418bcae:	2301      	movs	r3, #1
3418bcb0:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
3418bcb2:	2301      	movs	r3, #1
3418bcb4:	623b      	str	r3, [r7, #32]
3418bcb6:	e010      	b.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
3418bcb8:	68bb      	ldr	r3, [r7, #8]
3418bcba:	685b      	ldr	r3, [r3, #4]
3418bcbc:	2b01      	cmp	r3, #1
3418bcbe:	d10c      	bne.n	3418bcda <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
3418bcc0:	2300      	movs	r3, #0
3418bcc2:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
3418bcc4:	2300      	movs	r3, #0
3418bcc6:	623b      	str	r3, [r7, #32]
3418bcc8:	e007      	b.n	3418bcda <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3418bcca:	68fb      	ldr	r3, [r7, #12]
3418bccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418bcce:	f043 0208 	orr.w	r2, r3, #8
3418bcd2:	68fb      	ldr	r3, [r7, #12]
3418bcd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
3418bcd6:	2301      	movs	r3, #1
3418bcd8:	e04c      	b.n	3418bd74 <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418bcda:	2300      	movs	r3, #0
3418bcdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418bce0:	e02a      	b.n	3418bd38 <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
3418bce2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418bce6:	4613      	mov	r3, r2
3418bce8:	005b      	lsls	r3, r3, #1
3418bcea:	4413      	add	r3, r2
3418bcec:	009b      	lsls	r3, r3, #2
3418bcee:	3338      	adds	r3, #56	@ 0x38
3418bcf0:	443b      	add	r3, r7
3418bcf2:	3b24      	subs	r3, #36	@ 0x24
3418bcf4:	6819      	ldr	r1, [r3, #0]
3418bcf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bcfa:	1c5a      	adds	r2, r3, #1
3418bcfc:	4613      	mov	r3, r2
3418bcfe:	005b      	lsls	r3, r3, #1
3418bd00:	4413      	add	r3, r2
3418bd02:	009b      	lsls	r3, r3, #2
3418bd04:	3338      	adds	r3, #56	@ 0x38
3418bd06:	443b      	add	r3, r7
3418bd08:	3b24      	subs	r3, #36	@ 0x24
3418bd0a:	681b      	ldr	r3, [r3, #0]
3418bd0c:	4299      	cmp	r1, r3
3418bd0e:	d105      	bne.n	3418bd1c <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
3418bd10:	4b1d      	ldr	r3, [pc, #116]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bd12:	681b      	ldr	r3, [r3, #0]
3418bd14:	4a1c      	ldr	r2, [pc, #112]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bd16:	f043 0301 	orr.w	r3, r3, #1
3418bd1a:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
3418bd1c:	697b      	ldr	r3, [r7, #20]
3418bd1e:	2b01      	cmp	r3, #1
3418bd20:	d105      	bne.n	3418bd2e <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3418bd22:	4b19      	ldr	r3, [pc, #100]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bd24:	681b      	ldr	r3, [r3, #0]
3418bd26:	4a18      	ldr	r2, [pc, #96]	@ (3418bd88 <HAL_XSPIM_Config+0x254>)
3418bd28:	f043 0302 	orr.w	r3, r3, #2
3418bd2c:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418bd2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bd32:	3301      	adds	r3, #1
3418bd34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418bd38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418bd3c:	2b00      	cmp	r3, #0
3418bd3e:	d0d0      	beq.n	3418bce2 <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
3418bd40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418bd44:	f003 0301 	and.w	r3, r3, #1
3418bd48:	2b00      	cmp	r3, #0
3418bd4a:	d005      	beq.n	3418bd58 <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3418bd4c:	4b0b      	ldr	r3, [pc, #44]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bd4e:	681b      	ldr	r3, [r3, #0]
3418bd50:	4a0a      	ldr	r2, [pc, #40]	@ (3418bd7c <HAL_XSPIM_Config+0x248>)
3418bd52:	f043 0301 	orr.w	r3, r3, #1
3418bd56:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
3418bd58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418bd5c:	f003 0302 	and.w	r3, r3, #2
3418bd60:	2b00      	cmp	r3, #0
3418bd62:	d005      	beq.n	3418bd70 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3418bd64:	4b06      	ldr	r3, [pc, #24]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bd66:	681b      	ldr	r3, [r3, #0]
3418bd68:	4a05      	ldr	r2, [pc, #20]	@ (3418bd80 <HAL_XSPIM_Config+0x24c>)
3418bd6a:	f043 0301 	orr.w	r3, r3, #1
3418bd6e:	6013      	str	r3, [r2, #0]
  }

  return status;
3418bd70:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3418bd74:	4618      	mov	r0, r3
3418bd76:	3738      	adds	r7, #56	@ 0x38
3418bd78:	46bd      	mov	sp, r7
3418bd7a:	bd80      	pop	{r7, pc}
3418bd7c:	58025000 	.word	0x58025000
3418bd80:	5802a000 	.word	0x5802a000
3418bd84:	5802d000 	.word	0x5802d000
3418bd88:	5802b400 	.word	0x5802b400

3418bd8c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3418bd8c:	b580      	push	{r7, lr}
3418bd8e:	b084      	sub	sp, #16
3418bd90:	af00      	add	r7, sp, #0
3418bd92:	60f8      	str	r0, [r7, #12]
3418bd94:	60b9      	str	r1, [r7, #8]
3418bd96:	603b      	str	r3, [r7, #0]
3418bd98:	4613      	mov	r3, r2
3418bd9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418bd9c:	e019      	b.n	3418bdd2 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418bd9e:	69bb      	ldr	r3, [r7, #24]
3418bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
3418bda4:	d015      	beq.n	3418bdd2 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418bda6:	f7f5 fa4d 	bl	34181244 <HAL_GetTick>
3418bdaa:	4602      	mov	r2, r0
3418bdac:	683b      	ldr	r3, [r7, #0]
3418bdae:	1ad3      	subs	r3, r2, r3
3418bdb0:	69ba      	ldr	r2, [r7, #24]
3418bdb2:	429a      	cmp	r2, r3
3418bdb4:	d302      	bcc.n	3418bdbc <XSPI_WaitFlagStateUntilTimeout+0x30>
3418bdb6:	69bb      	ldr	r3, [r7, #24]
3418bdb8:	2b00      	cmp	r3, #0
3418bdba:	d10a      	bne.n	3418bdd2 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3418bdbc:	68fb      	ldr	r3, [r7, #12]
3418bdbe:	2202      	movs	r2, #2
3418bdc0:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3418bdc2:	68fb      	ldr	r3, [r7, #12]
3418bdc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418bdc6:	f043 0201 	orr.w	r2, r3, #1
3418bdca:	68fb      	ldr	r3, [r7, #12]
3418bdcc:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3418bdce:	2303      	movs	r3, #3
3418bdd0:	e00e      	b.n	3418bdf0 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418bdd2:	68fb      	ldr	r3, [r7, #12]
3418bdd4:	681b      	ldr	r3, [r3, #0]
3418bdd6:	6a1a      	ldr	r2, [r3, #32]
3418bdd8:	68bb      	ldr	r3, [r7, #8]
3418bdda:	4013      	ands	r3, r2
3418bddc:	2b00      	cmp	r3, #0
3418bdde:	bf14      	ite	ne
3418bde0:	2301      	movne	r3, #1
3418bde2:	2300      	moveq	r3, #0
3418bde4:	b2db      	uxtb	r3, r3
3418bde6:	461a      	mov	r2, r3
3418bde8:	79fb      	ldrb	r3, [r7, #7]
3418bdea:	429a      	cmp	r2, r3
3418bdec:	d1d7      	bne.n	3418bd9e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3418bdee:	2300      	movs	r3, #0
}
3418bdf0:	4618      	mov	r0, r3
3418bdf2:	3710      	adds	r7, #16
3418bdf4:	46bd      	mov	sp, r7
3418bdf6:	bd80      	pop	{r7, pc}

3418bdf8 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
3418bdf8:	b480      	push	{r7}
3418bdfa:	b089      	sub	sp, #36	@ 0x24
3418bdfc:	af00      	add	r7, sp, #0
3418bdfe:	6078      	str	r0, [r7, #4]
3418be00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418be02:	2300      	movs	r3, #0
3418be04:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3418be06:	687b      	ldr	r3, [r7, #4]
3418be08:	681b      	ldr	r3, [r3, #0]
3418be0a:	681a      	ldr	r2, [r3, #0]
3418be0c:	687b      	ldr	r3, [r7, #4]
3418be0e:	681b      	ldr	r3, [r3, #0]
3418be10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418be14:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3418be16:	687b      	ldr	r3, [r7, #4]
3418be18:	689b      	ldr	r3, [r3, #8]
3418be1a:	2b00      	cmp	r3, #0
3418be1c:	d10a      	bne.n	3418be34 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3418be1e:	687b      	ldr	r3, [r7, #4]
3418be20:	681b      	ldr	r3, [r3, #0]
3418be22:	681b      	ldr	r3, [r3, #0]
3418be24:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3418be28:	683b      	ldr	r3, [r7, #0]
3418be2a:	685a      	ldr	r2, [r3, #4]
3418be2c:	687b      	ldr	r3, [r7, #4]
3418be2e:	681b      	ldr	r3, [r3, #0]
3418be30:	430a      	orrs	r2, r1
3418be32:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418be34:	683b      	ldr	r3, [r7, #0]
3418be36:	681b      	ldr	r3, [r3, #0]
3418be38:	2b02      	cmp	r3, #2
3418be3a:	d114      	bne.n	3418be66 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3418be3c:	687b      	ldr	r3, [r7, #4]
3418be3e:	681b      	ldr	r3, [r3, #0]
3418be40:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3418be44:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3418be46:	687b      	ldr	r3, [r7, #4]
3418be48:	681b      	ldr	r3, [r3, #0]
3418be4a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3418be4e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3418be50:	687b      	ldr	r3, [r7, #4]
3418be52:	681b      	ldr	r3, [r3, #0]
3418be54:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3418be58:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3418be5a:	687b      	ldr	r3, [r7, #4]
3418be5c:	681b      	ldr	r3, [r3, #0]
3418be5e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
3418be62:	60fb      	str	r3, [r7, #12]
3418be64:	e02c      	b.n	3418bec0 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3418be66:	683b      	ldr	r3, [r7, #0]
3418be68:	681b      	ldr	r3, [r3, #0]
3418be6a:	2b03      	cmp	r3, #3
3418be6c:	d114      	bne.n	3418be98 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3418be6e:	687b      	ldr	r3, [r7, #4]
3418be70:	681b      	ldr	r3, [r3, #0]
3418be72:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3418be76:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3418be78:	687b      	ldr	r3, [r7, #4]
3418be7a:	681b      	ldr	r3, [r3, #0]
3418be7c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3418be80:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
3418be82:	687b      	ldr	r3, [r7, #4]
3418be84:	681b      	ldr	r3, [r3, #0]
3418be86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3418be8a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3418be8c:	687b      	ldr	r3, [r7, #4]
3418be8e:	681b      	ldr	r3, [r3, #0]
3418be90:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418be94:	60fb      	str	r3, [r7, #12]
3418be96:	e013      	b.n	3418bec0 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3418be98:	687b      	ldr	r3, [r7, #4]
3418be9a:	681b      	ldr	r3, [r3, #0]
3418be9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418bea0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
3418bea2:	687b      	ldr	r3, [r7, #4]
3418bea4:	681b      	ldr	r3, [r3, #0]
3418bea6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3418beaa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3418beac:	687b      	ldr	r3, [r7, #4]
3418beae:	681b      	ldr	r3, [r3, #0]
3418beb0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3418beb4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3418beb6:	687b      	ldr	r3, [r7, #4]
3418beb8:	681b      	ldr	r3, [r3, #0]
3418beba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3418bebe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3418bec0:	683b      	ldr	r3, [r7, #0]
3418bec2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418bec4:	69bb      	ldr	r3, [r7, #24]
3418bec6:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3418bec8:	683b      	ldr	r3, [r7, #0]
3418beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418becc:	2b00      	cmp	r3, #0
3418bece:	d012      	beq.n	3418bef6 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3418bed0:	683b      	ldr	r3, [r7, #0]
3418bed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418bed4:	68fb      	ldr	r3, [r7, #12]
3418bed6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3418bed8:	69bb      	ldr	r3, [r7, #24]
3418beda:	681b      	ldr	r3, [r3, #0]
3418bedc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3418bee0:	683b      	ldr	r3, [r7, #0]
3418bee2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418bee4:	683b      	ldr	r3, [r7, #0]
3418bee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418bee8:	4319      	orrs	r1, r3
3418beea:	683b      	ldr	r3, [r7, #0]
3418beec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418beee:	430b      	orrs	r3, r1
3418bef0:	431a      	orrs	r2, r3
3418bef2:	69bb      	ldr	r3, [r7, #24]
3418bef4:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3418bef6:	697b      	ldr	r3, [r7, #20]
3418bef8:	681b      	ldr	r3, [r3, #0]
3418befa:	f023 021f 	bic.w	r2, r3, #31
3418befe:	683b      	ldr	r3, [r7, #0]
3418bf00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bf02:	431a      	orrs	r2, r3
3418bf04:	697b      	ldr	r3, [r7, #20]
3418bf06:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418bf08:	683b      	ldr	r3, [r7, #0]
3418bf0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418bf0c:	2b00      	cmp	r3, #0
3418bf0e:	d009      	beq.n	3418bf24 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418bf10:	683b      	ldr	r3, [r7, #0]
3418bf12:	681b      	ldr	r3, [r3, #0]
3418bf14:	2b00      	cmp	r3, #0
3418bf16:	d105      	bne.n	3418bf24 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418bf18:	683b      	ldr	r3, [r7, #0]
3418bf1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418bf1c:	687b      	ldr	r3, [r7, #4]
3418bf1e:	681b      	ldr	r3, [r3, #0]
3418bf20:	3a01      	subs	r2, #1
3418bf22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418bf24:	683b      	ldr	r3, [r7, #0]
3418bf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418bf28:	2b00      	cmp	r3, #0
3418bf2a:	d01e      	beq.n	3418bf6a <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418bf2c:	683b      	ldr	r3, [r7, #0]
3418bf2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418bf30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418bf34:	d10a      	bne.n	3418bf4c <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418bf36:	687b      	ldr	r3, [r7, #4]
3418bf38:	681b      	ldr	r3, [r3, #0]
3418bf3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418bf3e:	687b      	ldr	r3, [r7, #4]
3418bf40:	681b      	ldr	r3, [r3, #0]
3418bf42:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3418bf46:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3418bf4a:	e00e      	b.n	3418bf6a <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3418bf4c:	687b      	ldr	r3, [r7, #4]
3418bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418bf50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418bf54:	d109      	bne.n	3418bf6a <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418bf56:	687b      	ldr	r3, [r7, #4]
3418bf58:	681b      	ldr	r3, [r3, #0]
3418bf5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418bf5e:	687b      	ldr	r3, [r7, #4]
3418bf60:	681b      	ldr	r3, [r3, #0]
3418bf62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3418bf66:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3418bf6a:	683b      	ldr	r3, [r7, #0]
3418bf6c:	68db      	ldr	r3, [r3, #12]
3418bf6e:	2b00      	cmp	r3, #0
3418bf70:	f000 8099 	beq.w	3418c0a6 <XSPI_ConfigCmd+0x2ae>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418bf74:	683b      	ldr	r3, [r7, #0]
3418bf76:	69db      	ldr	r3, [r3, #28]
3418bf78:	2b00      	cmp	r3, #0
3418bf7a:	d055      	beq.n	3418c028 <XSPI_ConfigCmd+0x230>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418bf7c:	683b      	ldr	r3, [r7, #0]
3418bf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418bf80:	2b00      	cmp	r3, #0
3418bf82:	d01e      	beq.n	3418bfc2 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418bf84:	69bb      	ldr	r3, [r7, #24]
3418bf86:	681a      	ldr	r2, [r3, #0]
3418bf88:	4b67      	ldr	r3, [pc, #412]	@ (3418c128 <XSPI_ConfigCmd+0x330>)
3418bf8a:	4013      	ands	r3, r2
3418bf8c:	683a      	ldr	r2, [r7, #0]
3418bf8e:	68d1      	ldr	r1, [r2, #12]
3418bf90:	683a      	ldr	r2, [r7, #0]
3418bf92:	6952      	ldr	r2, [r2, #20]
3418bf94:	4311      	orrs	r1, r2
3418bf96:	683a      	ldr	r2, [r7, #0]
3418bf98:	6912      	ldr	r2, [r2, #16]
3418bf9a:	4311      	orrs	r1, r2
3418bf9c:	683a      	ldr	r2, [r7, #0]
3418bf9e:	69d2      	ldr	r2, [r2, #28]
3418bfa0:	4311      	orrs	r1, r2
3418bfa2:	683a      	ldr	r2, [r7, #0]
3418bfa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418bfa6:	4311      	orrs	r1, r2
3418bfa8:	683a      	ldr	r2, [r7, #0]
3418bfaa:	6a12      	ldr	r2, [r2, #32]
3418bfac:	4311      	orrs	r1, r2
3418bfae:	683a      	ldr	r2, [r7, #0]
3418bfb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418bfb2:	4311      	orrs	r1, r2
3418bfb4:	683a      	ldr	r2, [r7, #0]
3418bfb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418bfb8:	430a      	orrs	r2, r1
3418bfba:	431a      	orrs	r2, r3
3418bfbc:	69bb      	ldr	r3, [r7, #24]
3418bfbe:	601a      	str	r2, [r3, #0]
3418bfc0:	e028      	b.n	3418c014 <XSPI_ConfigCmd+0x21c>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418bfc2:	69bb      	ldr	r3, [r7, #24]
3418bfc4:	681b      	ldr	r3, [r3, #0]
3418bfc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418bfca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418bfce:	683a      	ldr	r2, [r7, #0]
3418bfd0:	68d1      	ldr	r1, [r2, #12]
3418bfd2:	683a      	ldr	r2, [r7, #0]
3418bfd4:	6952      	ldr	r2, [r2, #20]
3418bfd6:	4311      	orrs	r1, r2
3418bfd8:	683a      	ldr	r2, [r7, #0]
3418bfda:	6912      	ldr	r2, [r2, #16]
3418bfdc:	4311      	orrs	r1, r2
3418bfde:	683a      	ldr	r2, [r7, #0]
3418bfe0:	69d2      	ldr	r2, [r2, #28]
3418bfe2:	4311      	orrs	r1, r2
3418bfe4:	683a      	ldr	r2, [r7, #0]
3418bfe6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418bfe8:	4311      	orrs	r1, r2
3418bfea:	683a      	ldr	r2, [r7, #0]
3418bfec:	6a12      	ldr	r2, [r2, #32]
3418bfee:	430a      	orrs	r2, r1
3418bff0:	431a      	orrs	r2, r3
3418bff2:	69bb      	ldr	r3, [r7, #24]
3418bff4:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418bff6:	687b      	ldr	r3, [r7, #4]
3418bff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418bffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bffe:	d109      	bne.n	3418c014 <XSPI_ConfigCmd+0x21c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418c000:	683b      	ldr	r3, [r7, #0]
3418c002:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c004:	2b08      	cmp	r3, #8
3418c006:	d105      	bne.n	3418c014 <XSPI_ConfigCmd+0x21c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418c008:	69bb      	ldr	r3, [r7, #24]
3418c00a:	681b      	ldr	r3, [r3, #0]
3418c00c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418c010:	69bb      	ldr	r3, [r7, #24]
3418c012:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418c014:	683b      	ldr	r3, [r7, #0]
3418c016:	689a      	ldr	r2, [r3, #8]
3418c018:	693b      	ldr	r3, [r7, #16]
3418c01a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3418c01c:	687b      	ldr	r3, [r7, #4]
3418c01e:	681b      	ldr	r3, [r3, #0]
3418c020:	683a      	ldr	r2, [r7, #0]
3418c022:	6992      	ldr	r2, [r2, #24]
3418c024:	649a      	str	r2, [r3, #72]	@ 0x48
3418c026:	e078      	b.n	3418c11a <XSPI_ConfigCmd+0x322>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c028:	683b      	ldr	r3, [r7, #0]
3418c02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c02c:	2b00      	cmp	r3, #0
3418c02e:	d017      	beq.n	3418c060 <XSPI_ConfigCmd+0x268>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3418c030:	69bb      	ldr	r3, [r7, #24]
3418c032:	681b      	ldr	r3, [r3, #0]
3418c034:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418c038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418c03c:	683a      	ldr	r2, [r7, #0]
3418c03e:	68d1      	ldr	r1, [r2, #12]
3418c040:	683a      	ldr	r2, [r7, #0]
3418c042:	6952      	ldr	r2, [r2, #20]
3418c044:	4311      	orrs	r1, r2
3418c046:	683a      	ldr	r2, [r7, #0]
3418c048:	6912      	ldr	r2, [r2, #16]
3418c04a:	4311      	orrs	r1, r2
3418c04c:	683a      	ldr	r2, [r7, #0]
3418c04e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c050:	4311      	orrs	r1, r2
3418c052:	683a      	ldr	r2, [r7, #0]
3418c054:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418c056:	430a      	orrs	r2, r1
3418c058:	431a      	orrs	r2, r3
3418c05a:	69bb      	ldr	r3, [r7, #24]
3418c05c:	601a      	str	r2, [r3, #0]
3418c05e:	e01d      	b.n	3418c09c <XSPI_ConfigCmd+0x2a4>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3418c060:	69bb      	ldr	r3, [r7, #24]
3418c062:	681b      	ldr	r3, [r3, #0]
3418c064:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
3418c068:	683b      	ldr	r3, [r7, #0]
3418c06a:	68d9      	ldr	r1, [r3, #12]
3418c06c:	683b      	ldr	r3, [r7, #0]
3418c06e:	695b      	ldr	r3, [r3, #20]
3418c070:	4319      	orrs	r1, r3
3418c072:	683b      	ldr	r3, [r7, #0]
3418c074:	691b      	ldr	r3, [r3, #16]
3418c076:	430b      	orrs	r3, r1
3418c078:	431a      	orrs	r2, r3
3418c07a:	69bb      	ldr	r3, [r7, #24]
3418c07c:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c07e:	687b      	ldr	r3, [r7, #4]
3418c080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c086:	d109      	bne.n	3418c09c <XSPI_ConfigCmd+0x2a4>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418c088:	683b      	ldr	r3, [r7, #0]
3418c08a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c08c:	2b08      	cmp	r3, #8
3418c08e:	d105      	bne.n	3418c09c <XSPI_ConfigCmd+0x2a4>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418c090:	69bb      	ldr	r3, [r7, #24]
3418c092:	681b      	ldr	r3, [r3, #0]
3418c094:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418c098:	69bb      	ldr	r3, [r7, #24]
3418c09a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418c09c:	683b      	ldr	r3, [r7, #0]
3418c09e:	689a      	ldr	r2, [r3, #8]
3418c0a0:	693b      	ldr	r3, [r7, #16]
3418c0a2:	601a      	str	r2, [r3, #0]
3418c0a4:	e039      	b.n	3418c11a <XSPI_ConfigCmd+0x322>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418c0a6:	683b      	ldr	r3, [r7, #0]
3418c0a8:	69db      	ldr	r3, [r3, #28]
3418c0aa:	2b00      	cmp	r3, #0
3418c0ac:	d030      	beq.n	3418c110 <XSPI_ConfigCmd+0x318>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c0ae:	683b      	ldr	r3, [r7, #0]
3418c0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c0b2:	2b00      	cmp	r3, #0
3418c0b4:	d017      	beq.n	3418c0e6 <XSPI_ConfigCmd+0x2ee>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3418c0b6:	69bb      	ldr	r3, [r7, #24]
3418c0b8:	681b      	ldr	r3, [r3, #0]
3418c0ba:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418c0be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418c0c2:	683a      	ldr	r2, [r7, #0]
3418c0c4:	69d1      	ldr	r1, [r2, #28]
3418c0c6:	683a      	ldr	r2, [r7, #0]
3418c0c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418c0ca:	4311      	orrs	r1, r2
3418c0cc:	683a      	ldr	r2, [r7, #0]
3418c0ce:	6a12      	ldr	r2, [r2, #32]
3418c0d0:	4311      	orrs	r1, r2
3418c0d2:	683a      	ldr	r2, [r7, #0]
3418c0d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c0d6:	4311      	orrs	r1, r2
3418c0d8:	683a      	ldr	r2, [r7, #0]
3418c0da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418c0dc:	430a      	orrs	r2, r1
3418c0de:	431a      	orrs	r2, r3
3418c0e0:	69bb      	ldr	r3, [r7, #24]
3418c0e2:	601a      	str	r2, [r3, #0]
3418c0e4:	e00e      	b.n	3418c104 <XSPI_ConfigCmd+0x30c>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3418c0e6:	69bb      	ldr	r3, [r7, #24]
3418c0e8:	681b      	ldr	r3, [r3, #0]
3418c0ea:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3418c0ee:	683b      	ldr	r3, [r7, #0]
3418c0f0:	69d9      	ldr	r1, [r3, #28]
3418c0f2:	683b      	ldr	r3, [r7, #0]
3418c0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c0f6:	4319      	orrs	r1, r3
3418c0f8:	683b      	ldr	r3, [r7, #0]
3418c0fa:	6a1b      	ldr	r3, [r3, #32]
3418c0fc:	430b      	orrs	r3, r1
3418c0fe:	431a      	orrs	r2, r3
3418c100:	69bb      	ldr	r3, [r7, #24]
3418c102:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3418c104:	687b      	ldr	r3, [r7, #4]
3418c106:	681b      	ldr	r3, [r3, #0]
3418c108:	683a      	ldr	r2, [r7, #0]
3418c10a:	6992      	ldr	r2, [r2, #24]
3418c10c:	649a      	str	r2, [r3, #72]	@ 0x48
3418c10e:	e004      	b.n	3418c11a <XSPI_ConfigCmd+0x322>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
3418c110:	2301      	movs	r3, #1
3418c112:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418c114:	687b      	ldr	r3, [r7, #4]
3418c116:	2208      	movs	r2, #8
3418c118:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418c11a:	7ffb      	ldrb	r3, [r7, #31]
}
3418c11c:	4618      	mov	r0, r3
3418c11e:	3724      	adds	r7, #36	@ 0x24
3418c120:	46bd      	mov	sp, r7
3418c122:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c126:	4770      	bx	lr
3418c128:	f0ffc0c0 	.word	0xf0ffc0c0

3418c12c <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
3418c12c:	b480      	push	{r7}
3418c12e:	b085      	sub	sp, #20
3418c130:	af00      	add	r7, sp, #0
3418c132:	4603      	mov	r3, r0
3418c134:	6039      	str	r1, [r7, #0]
3418c136:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3418c138:	79fb      	ldrb	r3, [r7, #7]
3418c13a:	2b01      	cmp	r3, #1
3418c13c:	d124      	bne.n	3418c188 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
3418c13e:	4b2c      	ldr	r3, [pc, #176]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c140:	681b      	ldr	r3, [r3, #0]
3418c142:	f003 0302 	and.w	r3, r3, #2
3418c146:	2b00      	cmp	r3, #0
3418c148:	d103      	bne.n	3418c152 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418c14a:	683b      	ldr	r3, [r7, #0]
3418c14c:	2200      	movs	r2, #0
3418c14e:	605a      	str	r2, [r3, #4]
3418c150:	e002      	b.n	3418c158 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418c152:	683b      	ldr	r3, [r7, #0]
3418c154:	2201      	movs	r2, #1
3418c156:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418c158:	4b25      	ldr	r3, [pc, #148]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c15a:	681b      	ldr	r3, [r3, #0]
3418c15c:	f003 0310 	and.w	r3, r3, #16
3418c160:	2b10      	cmp	r3, #16
3418c162:	d003      	beq.n	3418c16c <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418c164:	683b      	ldr	r3, [r7, #0]
3418c166:	2200      	movs	r2, #0
3418c168:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3418c16a:	e03a      	b.n	3418c1e2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
3418c16c:	4b20      	ldr	r3, [pc, #128]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c16e:	681b      	ldr	r3, [r3, #0]
3418c170:	f003 0320 	and.w	r3, r3, #32
3418c174:	2b20      	cmp	r3, #32
3418c176:	d103      	bne.n	3418c180 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418c178:	683b      	ldr	r3, [r7, #0]
3418c17a:	2270      	movs	r2, #112	@ 0x70
3418c17c:	601a      	str	r2, [r3, #0]
}
3418c17e:	e030      	b.n	3418c1e2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418c180:	683b      	ldr	r3, [r7, #0]
3418c182:	2210      	movs	r2, #16
3418c184:	601a      	str	r2, [r3, #0]
}
3418c186:	e02c      	b.n	3418c1e2 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3418c188:	4b19      	ldr	r3, [pc, #100]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c18a:	681b      	ldr	r3, [r3, #0]
3418c18c:	f003 0301 	and.w	r3, r3, #1
3418c190:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
3418c192:	4b17      	ldr	r3, [pc, #92]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c194:	681b      	ldr	r3, [r3, #0]
3418c196:	085b      	lsrs	r3, r3, #1
3418c198:	f003 0301 	and.w	r3, r3, #1
3418c19c:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
3418c19e:	68fa      	ldr	r2, [r7, #12]
3418c1a0:	68bb      	ldr	r3, [r7, #8]
3418c1a2:	429a      	cmp	r2, r3
3418c1a4:	d003      	beq.n	3418c1ae <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418c1a6:	683b      	ldr	r3, [r7, #0]
3418c1a8:	2200      	movs	r2, #0
3418c1aa:	605a      	str	r2, [r3, #4]
3418c1ac:	e002      	b.n	3418c1b4 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418c1ae:	683b      	ldr	r3, [r7, #0]
3418c1b0:	2201      	movs	r2, #1
3418c1b2:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418c1b4:	4b0e      	ldr	r3, [pc, #56]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c1b6:	681b      	ldr	r3, [r3, #0]
3418c1b8:	f003 0310 	and.w	r3, r3, #16
3418c1bc:	2b10      	cmp	r3, #16
3418c1be:	d003      	beq.n	3418c1c8 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418c1c0:	683b      	ldr	r3, [r7, #0]
3418c1c2:	2200      	movs	r2, #0
3418c1c4:	601a      	str	r2, [r3, #0]
}
3418c1c6:	e00c      	b.n	3418c1e2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
3418c1c8:	4b09      	ldr	r3, [pc, #36]	@ (3418c1f0 <XSPIM_GetConfig+0xc4>)
3418c1ca:	681b      	ldr	r3, [r3, #0]
3418c1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418c1d0:	2b40      	cmp	r3, #64	@ 0x40
3418c1d2:	d103      	bne.n	3418c1dc <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418c1d4:	683b      	ldr	r3, [r7, #0]
3418c1d6:	2270      	movs	r2, #112	@ 0x70
3418c1d8:	601a      	str	r2, [r3, #0]
}
3418c1da:	e002      	b.n	3418c1e2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418c1dc:	683b      	ldr	r3, [r7, #0]
3418c1de:	2210      	movs	r2, #16
3418c1e0:	601a      	str	r2, [r3, #0]
}
3418c1e2:	bf00      	nop
3418c1e4:	3714      	adds	r7, #20
3418c1e6:	46bd      	mov	sp, r7
3418c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c1ec:	4770      	bx	lr
3418c1ee:	bf00      	nop
3418c1f0:	5802b400 	.word	0x5802b400

3418c1f4 <BOOT_Application>:
/**
  *  @addtogroup BOOT_LRUN_Exported_Functions Boot LRUN exported functions
  * @{
  */
BOOTStatus_TypeDef BOOT_Application(void)
{
3418c1f4:	b580      	push	{r7, lr}
3418c1f6:	b082      	sub	sp, #8
3418c1f8:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
3418c1fa:	f000 f815 	bl	3418c228 <MapMemory>
3418c1fe:	4603      	mov	r3, r0
3418c200:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
3418c202:	79fb      	ldrb	r3, [r7, #7]
3418c204:	2b00      	cmp	r3, #0
3418c206:	d10a      	bne.n	3418c21e <BOOT_Application+0x2a>
  {
    retr = CopyApplication();
3418c208:	f000 f840 	bl	3418c28c <CopyApplication>
3418c20c:	4603      	mov	r3, r0
3418c20e:	71fb      	strb	r3, [r7, #7]
    if (BOOT_OK == retr)
3418c210:	79fb      	ldrb	r3, [r7, #7]
3418c212:	2b00      	cmp	r3, #0
3418c214:	d103      	bne.n	3418c21e <BOOT_Application+0x2a>
    {
      /* jump on the application */
      retr = JumpToApplication();
3418c216:	f000 f883 	bl	3418c320 <JumpToApplication>
3418c21a:	4603      	mov	r3, r0
3418c21c:	71fb      	strb	r3, [r7, #7]
    }
  }
  return retr;
3418c21e:	79fb      	ldrb	r3, [r7, #7]
}
3418c220:	4618      	mov	r0, r3
3418c222:	3708      	adds	r7, #8
3418c224:	46bd      	mov	sp, r7
3418c226:	bd80      	pop	{r7, pc}

3418c228 <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
3418c228:	b580      	push	{r7, lr}
3418c22a:	b082      	sub	sp, #8
3418c22c:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418c22e:	2300      	movs	r3, #0
3418c230:	71fb      	strb	r3, [r7, #7]
  uint32_t BaseAddress = 0;
3418c232:	2300      	movs	r3, #0
3418c234:	603b      	str	r3, [r7, #0]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418c236:	2300      	movs	r3, #0
3418c238:	71bb      	strb	r3, [r7, #6]
3418c23a:	e01f      	b.n	3418c27c <MapMemory+0x54>
  {
    switch(EXTMEM_GetMapAddress(index, &BaseAddress))
3418c23c:	79bb      	ldrb	r3, [r7, #6]
3418c23e:	463a      	mov	r2, r7
3418c240:	4611      	mov	r1, r2
3418c242:	4618      	mov	r0, r3
3418c244:	f000 f9e4 	bl	3418c610 <EXTMEM_GetMapAddress>
3418c248:	4603      	mov	r3, r0
3418c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c24e:	d00f      	beq.n	3418c270 <MapMemory+0x48>
3418c250:	2b00      	cmp	r3, #0
3418c252:	d10a      	bne.n	3418c26a <MapMemory+0x42>
    {
      case EXTMEM_OK :{
      if (EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE) != EXTMEM_OK)
3418c254:	79bb      	ldrb	r3, [r7, #6]
3418c256:	2100      	movs	r1, #0
3418c258:	4618      	mov	r0, r3
3418c25a:	f000 f98b 	bl	3418c574 <EXTMEM_MemoryMappedMode>
3418c25e:	4603      	mov	r3, r0
3418c260:	2b00      	cmp	r3, #0
3418c262:	d007      	beq.n	3418c274 <MapMemory+0x4c>
      {
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418c264:	2303      	movs	r3, #3
3418c266:	71fb      	strb	r3, [r7, #7]
      }
      break;
3418c268:	e004      	b.n	3418c274 <MapMemory+0x4c>
      case EXTMEM_ERROR_NOTSUPPORTED :{
        /* the memory doesn't support map mode, nothing to do */
        break;
      }
      default :{
        retr = BOOT_ERROR_NOBASEADDRESS;
3418c26a:	2302      	movs	r3, #2
3418c26c:	71fb      	strb	r3, [r7, #7]
      break;
3418c26e:	e002      	b.n	3418c276 <MapMemory+0x4e>
        break;
3418c270:	bf00      	nop
3418c272:	e000      	b.n	3418c276 <MapMemory+0x4e>
      break;
3418c274:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418c276:	79bb      	ldrb	r3, [r7, #6]
3418c278:	3301      	adds	r3, #1
3418c27a:	71bb      	strb	r3, [r7, #6]
3418c27c:	79bb      	ldrb	r3, [r7, #6]
3418c27e:	2b00      	cmp	r3, #0
3418c280:	d0dc      	beq.n	3418c23c <MapMemory+0x14>
      }
    }
  }
  return retr;
3418c282:	79fb      	ldrb	r3, [r7, #7]
}
3418c284:	4618      	mov	r0, r3
3418c286:	3708      	adds	r7, #8
3418c288:	46bd      	mov	sp, r7
3418c28a:	bd80      	pop	{r7, pc}

3418c28c <CopyApplication>:
/**
  * @brief  This function copy the data from source to destination
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef CopyApplication(void)
{
3418c28c:	b580      	push	{r7, lr}
3418c28e:	b086      	sub	sp, #24
3418c290:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418c292:	2300      	movs	r3, #0
3418c294:	75fb      	strb	r3, [r7, #23]
  uint32_t MapAddress;
  uint32_t img_size;

#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  /* this case correspond to copy the SW from external memory into internal memory */
  destination = (uint8_t *)EXTMEM_LRUN_DESTINATION_ADDRESS;
3418c296:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
3418c29a:	60fb      	str	r3, [r7, #12]
  }
  destination = (uint8_t *)(MapAddress + EXTMEM_LRUN_DESTINATION_ADDRESS);
#endif

  /* get the map address of the source memory */
  switch(EXTMEM_GetMapAddress(EXTMEM_LRUN_SOURCE, &MapAddress)){
3418c29c:	463b      	mov	r3, r7
3418c29e:	4619      	mov	r1, r3
3418c2a0:	2000      	movs	r0, #0
3418c2a2:	f000 f9b5 	bl	3418c610 <EXTMEM_GetMapAddress>
3418c2a6:	4603      	mov	r3, r0
3418c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c2ac:	d01d      	beq.n	3418c2ea <CopyApplication+0x5e>
3418c2ae:	2b00      	cmp	r3, #0
3418c2b0:	d12d      	bne.n	3418c30e <CopyApplication+0x82>
  case EXTMEM_OK :{
    /* manage the copy in mapped mode */
    source = (uint8_t*)(MapAddress + EXTMEM_LRUN_SOURCE_ADDRESS);
3418c2b2:	683b      	ldr	r3, [r7, #0]
3418c2b4:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
3418c2b8:	60bb      	str	r3, [r7, #8]
    img_size = BOOT_GetApplicationSize((uint32_t) source);
3418c2ba:	68bb      	ldr	r3, [r7, #8]
3418c2bc:	4618      	mov	r0, r3
3418c2be:	f000 f8c3 	bl	3418c448 <BOOT_GetApplicationSize>
3418c2c2:	6078      	str	r0, [r7, #4]
    /* copy form source to destination in mapped mode */
    for (uint32_t index=0; index < img_size; index++)
3418c2c4:	2300      	movs	r3, #0
3418c2c6:	613b      	str	r3, [r7, #16]
3418c2c8:	e00a      	b.n	3418c2e0 <CopyApplication+0x54>
    {
      destination[index] = source[index];
3418c2ca:	68ba      	ldr	r2, [r7, #8]
3418c2cc:	693b      	ldr	r3, [r7, #16]
3418c2ce:	441a      	add	r2, r3
3418c2d0:	68f9      	ldr	r1, [r7, #12]
3418c2d2:	693b      	ldr	r3, [r7, #16]
3418c2d4:	440b      	add	r3, r1
3418c2d6:	7812      	ldrb	r2, [r2, #0]
3418c2d8:	701a      	strb	r2, [r3, #0]
    for (uint32_t index=0; index < img_size; index++)
3418c2da:	693b      	ldr	r3, [r7, #16]
3418c2dc:	3301      	adds	r3, #1
3418c2de:	613b      	str	r3, [r7, #16]
3418c2e0:	693a      	ldr	r2, [r7, #16]
3418c2e2:	687b      	ldr	r3, [r7, #4]
3418c2e4:	429a      	cmp	r2, r3
3418c2e6:	d3f0      	bcc.n	3418c2ca <CopyApplication+0x3e>
    for (uint32_t index=0; index < img_size; index++)
    {
      destination[index] = source[index];
    }
#endif
    break;
3418c2e8:	e015      	b.n	3418c316 <CopyApplication+0x8a>
  }

  case EXTMEM_ERROR_NOTSUPPORTED:{
    img_size = BOOT_GetApplicationSize(EXTMEM_LRUN_SOURCE_ADDRESS);
3418c2ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
3418c2ee:	f000 f8ab 	bl	3418c448 <BOOT_GetApplicationSize>
3418c2f2:	6078      	str	r0, [r7, #4]
    /* manage the copy using EXTMEM_Read */
    if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS, destination, img_size))
3418c2f4:	687b      	ldr	r3, [r7, #4]
3418c2f6:	68fa      	ldr	r2, [r7, #12]
3418c2f8:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
3418c2fc:	2000      	movs	r0, #0
3418c2fe:	f000 f903 	bl	3418c508 <EXTMEM_Read>
3418c302:	4603      	mov	r3, r0
3418c304:	2b00      	cmp	r3, #0
3418c306:	d005      	beq.n	3418c314 <CopyApplication+0x88>
    {
      retr = BOOT_ERROR_COPY;
3418c308:	2304      	movs	r3, #4
3418c30a:	75fb      	strb	r3, [r7, #23]
     if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS_NS, destination, img_size))
    {
      retr = BOOT_ERROR_COPY;
    }
#endif
    break;
3418c30c:	e002      	b.n	3418c314 <CopyApplication+0x88>
  }

  default :{
    /* return an error */
    retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418c30e:	2303      	movs	r3, #3
3418c310:	75fb      	strb	r3, [r7, #23]
    break;
3418c312:	e000      	b.n	3418c316 <CopyApplication+0x8a>
    break;
3418c314:	bf00      	nop
  }
}
  return retr;
3418c316:	7dfb      	ldrb	r3, [r7, #23]
}
3418c318:	4618      	mov	r0, r3
3418c31a:	3718      	adds	r7, #24
3418c31c:	46bd      	mov	sp, r7
3418c31e:	bd80      	pop	{r7, pc}

3418c320 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
3418c320:	b580      	push	{r7, lr}
3418c322:	b08a      	sub	sp, #40	@ 0x28
3418c324:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;
  /* Suspend SysTick */
  HAL_SuspendTick();
3418c326:	f7f4 ffbd 	bl	341812a4 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
3418c32a:	4b45      	ldr	r3, [pc, #276]	@ (3418c440 <JumpToApplication+0x120>)
3418c32c:	695b      	ldr	r3, [r3, #20]
3418c32e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418c332:	2b00      	cmp	r3, #0
3418c334:	d016      	beq.n	3418c364 <JumpToApplication+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
3418c336:	f3bf 8f4f 	dsb	sy
}
3418c33a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c33c:	f3bf 8f6f 	isb	sy
}
3418c340:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
3418c342:	4b3f      	ldr	r3, [pc, #252]	@ (3418c440 <JumpToApplication+0x120>)
3418c344:	695b      	ldr	r3, [r3, #20]
3418c346:	4a3e      	ldr	r2, [pc, #248]	@ (3418c440 <JumpToApplication+0x120>)
3418c348:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418c34c:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3418c34e:	4b3c      	ldr	r3, [pc, #240]	@ (3418c440 <JumpToApplication+0x120>)
3418c350:	2200      	movs	r2, #0
3418c352:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3418c356:	f3bf 8f4f 	dsb	sy
}
3418c35a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c35c:	f3bf 8f6f 	isb	sy
}
3418c360:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
3418c362:	bf00      	nop
  }
#endif /* defined(ICACHE_PRESENT) && (ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
3418c364:	4b36      	ldr	r3, [pc, #216]	@ (3418c440 <JumpToApplication+0x120>)
3418c366:	695b      	ldr	r3, [r3, #20]
3418c368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418c36c:	2b00      	cmp	r3, #0
3418c36e:	d039      	beq.n	3418c3e4 <JumpToApplication+0xc4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3418c370:	4b33      	ldr	r3, [pc, #204]	@ (3418c440 <JumpToApplication+0x120>)
3418c372:	2200      	movs	r2, #0
3418c374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418c378:	f3bf 8f4f 	dsb	sy
}
3418c37c:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
3418c37e:	4b30      	ldr	r3, [pc, #192]	@ (3418c440 <JumpToApplication+0x120>)
3418c380:	695b      	ldr	r3, [r3, #20]
3418c382:	4a2f      	ldr	r2, [pc, #188]	@ (3418c440 <JumpToApplication+0x120>)
3418c384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c388:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418c38a:	f3bf 8f4f 	dsb	sy
}
3418c38e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
3418c390:	4b2b      	ldr	r3, [pc, #172]	@ (3418c440 <JumpToApplication+0x120>)
3418c392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418c396:	61fb      	str	r3, [r7, #28]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3418c398:	69fb      	ldr	r3, [r7, #28]
3418c39a:	0b5b      	lsrs	r3, r3, #13
3418c39c:	f3c3 030e 	ubfx	r3, r3, #0, #15
3418c3a0:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3418c3a2:	69fb      	ldr	r3, [r7, #28]
3418c3a4:	08db      	lsrs	r3, r3, #3
3418c3a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418c3aa:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418c3ac:	69bb      	ldr	r3, [r7, #24]
3418c3ae:	015a      	lsls	r2, r3, #5
3418c3b0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3418c3b4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
3418c3b6:	697a      	ldr	r2, [r7, #20]
3418c3b8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418c3ba:	4921      	ldr	r1, [pc, #132]	@ (3418c440 <JumpToApplication+0x120>)
3418c3bc:	4313      	orrs	r3, r2
3418c3be:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
3418c3c2:	697b      	ldr	r3, [r7, #20]
3418c3c4:	1e5a      	subs	r2, r3, #1
3418c3c6:	617a      	str	r2, [r7, #20]
3418c3c8:	2b00      	cmp	r3, #0
3418c3ca:	d1ef      	bne.n	3418c3ac <JumpToApplication+0x8c>
    } while(sets-- != 0U);
3418c3cc:	69bb      	ldr	r3, [r7, #24]
3418c3ce:	1e5a      	subs	r2, r3, #1
3418c3d0:	61ba      	str	r2, [r7, #24]
3418c3d2:	2b00      	cmp	r3, #0
3418c3d4:	d1e5      	bne.n	3418c3a2 <JumpToApplication+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
3418c3d6:	f3bf 8f4f 	dsb	sy
}
3418c3da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c3dc:	f3bf 8f6f 	isb	sy
}
3418c3e0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
3418c3e2:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418c3e4:	f3ef 8310 	mrs	r3, PRIMASK
3418c3e8:	607b      	str	r3, [r7, #4]
  return(result);
3418c3ea:	687b      	ldr	r3, [r7, #4]
    SCB_DisableDCache();
  }
#endif /* defined(DCACHE_PRESENT) && (DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
3418c3ec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
3418c3ee:	b672      	cpsid	i
}
3418c3f0:	bf00      	nop
  __disable_irq();

  Application_vector = BOOT_GetApplicationVectorTable();
3418c3f2:	f000 f835 	bl	3418c460 <BOOT_GetApplicationVectorTable>
3418c3f6:	6238      	str	r0, [r7, #32]

  SCB->VTOR = (uint32_t)Application_vector;
3418c3f8:	4a11      	ldr	r2, [pc, #68]	@ (3418c440 <JumpToApplication+0x120>)
3418c3fa:	6a3b      	ldr	r3, [r7, #32]
3418c3fc:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4));
3418c3fe:	6a3b      	ldr	r3, [r7, #32]
3418c400:	3304      	adds	r3, #4
3418c402:	681b      	ldr	r3, [r3, #0]
3418c404:	461a      	mov	r2, r3
3418c406:	4b0f      	ldr	r3, [pc, #60]	@ (3418c444 <JumpToApplication+0x124>)
3418c408:	601a      	str	r2, [r3, #0]
3418c40a:	2300      	movs	r3, #0
3418c40c:	60bb      	str	r3, [r7, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
3418c40e:	68bb      	ldr	r3, [r7, #8]
3418c410:	f383 880a 	msr	MSPLIM, r3
#endif
}
3418c414:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*)Application_vector);
3418c416:	6a3b      	ldr	r3, [r7, #32]
3418c418:	681b      	ldr	r3, [r3, #0]
3418c41a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
3418c41c:	68fb      	ldr	r3, [r7, #12]
3418c41e:	f383 8808 	msr	MSP, r3
}
3418c422:	bf00      	nop
3418c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418c428:	693b      	ldr	r3, [r7, #16]
3418c42a:	f383 8810 	msr	PRIMASK, r3
}
3418c42e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
3418c430:	4b04      	ldr	r3, [pc, #16]	@ (3418c444 <JumpToApplication+0x124>)
3418c432:	681b      	ldr	r3, [r3, #0]
3418c434:	4798      	blx	r3
  return BOOT_OK;
3418c436:	2300      	movs	r3, #0
}
3418c438:	4618      	mov	r0, r3
3418c43a:	3728      	adds	r7, #40	@ 0x28
3418c43c:	46bd      	mov	sp, r7
3418c43e:	bd80      	pop	{r7, pc}
3418c440:	e000ed00 	.word	0xe000ed00
3418c444:	341c0094 	.word	0x341c0094

3418c448 <BOOT_GetApplicationSize>:


 __weak uint32_t BOOT_GetApplicationSize(uint32_t img_addr)
{
3418c448:	b480      	push	{r7}
3418c44a:	b083      	sub	sp, #12
3418c44c:	af00      	add	r7, sp, #0
3418c44e:	6078      	str	r0, [r7, #4]
  UNUSED(img_addr);
  return EXTMEM_LRUN_SOURCE_SIZE;
3418c450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
}
3418c454:	4618      	mov	r0, r3
3418c456:	370c      	adds	r7, #12
3418c458:	46bd      	mov	sp, r7
3418c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c45e:	4770      	bx	lr

3418c460 <BOOT_GetApplicationVectorTable>:

__weak uint32_t BOOT_GetApplicationVectorTable(void)
{
3418c460:	b480      	push	{r7}
3418c462:	b083      	sub	sp, #12
3418c464:	af00      	add	r7, sp, #0
  uint32_t vector_table;
#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  vector_table = EXTMEM_LRUN_DESTINATION_ADDRESS;
3418c466:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
3418c46a:	607b      	str	r3, [r7, #4]
  {
    return 0xffffffff;
  }
  vector_table += EXTMEM_LRUN_DESTINATION_ADDRESS;
#endif
  vector_table += EXTMEM_HEADER_OFFSET;
3418c46c:	687b      	ldr	r3, [r7, #4]
3418c46e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418c472:	607b      	str	r3, [r7, #4]
  return vector_table;
3418c474:	687b      	ldr	r3, [r7, #4]
}
3418c476:	4618      	mov	r0, r3
3418c478:	370c      	adds	r7, #12
3418c47a:	46bd      	mov	sp, r7
3418c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c480:	4770      	bx	lr
	...

3418c484 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
3418c484:	b580      	push	{r7, lr}
3418c486:	b084      	sub	sp, #16
3418c488:	af00      	add	r7, sp, #0
3418c48a:	6078      	str	r0, [r7, #4]
3418c48c:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418c48e:	23fb      	movs	r3, #251	@ 0xfb
3418c490:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418c492:	687b      	ldr	r3, [r7, #4]
3418c494:	2b00      	cmp	r3, #0
3418c496:	d12f      	bne.n	3418c4f8 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
3418c498:	2300      	movs	r3, #0
3418c49a:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418c49c:	4a19      	ldr	r2, [pc, #100]	@ (3418c504 <EXTMEM_Init+0x80>)
3418c49e:	687b      	ldr	r3, [r7, #4]
3418c4a0:	21ac      	movs	r1, #172	@ 0xac
3418c4a2:	fb01 f303 	mul.w	r3, r1, r3
3418c4a6:	4413      	add	r3, r2
3418c4a8:	781b      	ldrb	r3, [r3, #0]
3418c4aa:	2b00      	cmp	r3, #0
3418c4ac:	d120      	bne.n	3418c4f0 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
3418c4ae:	4a15      	ldr	r2, [pc, #84]	@ (3418c504 <EXTMEM_Init+0x80>)
3418c4b0:	687b      	ldr	r3, [r7, #4]
3418c4b2:	21ac      	movs	r1, #172	@ 0xac
3418c4b4:	fb01 f303 	mul.w	r3, r1, r3
3418c4b8:	4413      	add	r3, r2
3418c4ba:	3304      	adds	r3, #4
3418c4bc:	6818      	ldr	r0, [r3, #0]
3418c4be:	4a11      	ldr	r2, [pc, #68]	@ (3418c504 <EXTMEM_Init+0x80>)
3418c4c0:	687b      	ldr	r3, [r7, #4]
3418c4c2:	21ac      	movs	r1, #172	@ 0xac
3418c4c4:	fb01 f303 	mul.w	r3, r1, r3
3418c4c8:	4413      	add	r3, r2
3418c4ca:	3308      	adds	r3, #8
3418c4cc:	7819      	ldrb	r1, [r3, #0]
3418c4ce:	687b      	ldr	r3, [r7, #4]
3418c4d0:	22ac      	movs	r2, #172	@ 0xac
3418c4d2:	fb02 f303 	mul.w	r3, r2, r3
3418c4d6:	3308      	adds	r3, #8
3418c4d8:	4a0a      	ldr	r2, [pc, #40]	@ (3418c504 <EXTMEM_Init+0x80>)
3418c4da:	4413      	add	r3, r2
3418c4dc:	3304      	adds	r3, #4
3418c4de:	683a      	ldr	r2, [r7, #0]
3418c4e0:	f002 faec 	bl	3418eabc <EXTMEM_DRIVER_NOR_SFDP_Init>
3418c4e4:	4603      	mov	r3, r0
3418c4e6:	2b00      	cmp	r3, #0
3418c4e8:	d005      	beq.n	3418c4f6 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418c4ea:	23fd      	movs	r3, #253	@ 0xfd
3418c4ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418c4ee:	e002      	b.n	3418c4f6 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418c4f0:	23fe      	movs	r3, #254	@ 0xfe
3418c4f2:	73fb      	strb	r3, [r7, #15]
        break;
3418c4f4:	e000      	b.n	3418c4f8 <EXTMEM_Init+0x74>
        break;
3418c4f6:	bf00      	nop
      }
    }
  }
  return retr;
3418c4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418c4fc:	4618      	mov	r0, r3
3418c4fe:	3710      	adds	r7, #16
3418c500:	46bd      	mov	sp, r7
3418c502:	bd80      	pop	{r7, pc}
3418c504:	341c0098 	.word	0x341c0098

3418c508 <EXTMEM_Read>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_Read(uint32_t MemId, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418c508:	b580      	push	{r7, lr}
3418c50a:	b086      	sub	sp, #24
3418c50c:	af00      	add	r7, sp, #0
3418c50e:	60f8      	str	r0, [r7, #12]
3418c510:	60b9      	str	r1, [r7, #8]
3418c512:	607a      	str	r2, [r7, #4]
3418c514:	603b      	str	r3, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418c516:	23fb      	movs	r3, #251	@ 0xfb
3418c518:	75fb      	strb	r3, [r7, #23]
  EXTMEM_FUNC_CALL()

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418c51a:	68fb      	ldr	r3, [r7, #12]
3418c51c:	2b00      	cmp	r3, #0
3418c51e:	d121      	bne.n	3418c564 <EXTMEM_Read+0x5c>
  {
    retr = EXTMEM_OK;
3418c520:	2300      	movs	r3, #0
3418c522:	75fb      	strb	r3, [r7, #23]
    switch (extmem_list_config[MemId].MemType)
3418c524:	4a12      	ldr	r2, [pc, #72]	@ (3418c570 <EXTMEM_Read+0x68>)
3418c526:	68fb      	ldr	r3, [r7, #12]
3418c528:	21ac      	movs	r1, #172	@ 0xac
3418c52a:	fb01 f303 	mul.w	r3, r1, r3
3418c52e:	4413      	add	r3, r2
3418c530:	781b      	ldrb	r3, [r3, #0]
3418c532:	2b00      	cmp	r3, #0
3418c534:	d112      	bne.n	3418c55c <EXTMEM_Read+0x54>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
    case EXTMEM_NOR_SFDP:{
      if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Read(&extmem_list_config[MemId].NorSfdpObject,
3418c536:	68fb      	ldr	r3, [r7, #12]
3418c538:	22ac      	movs	r2, #172	@ 0xac
3418c53a:	fb02 f303 	mul.w	r3, r2, r3
3418c53e:	3308      	adds	r3, #8
3418c540:	4a0b      	ldr	r2, [pc, #44]	@ (3418c570 <EXTMEM_Read+0x68>)
3418c542:	4413      	add	r3, r2
3418c544:	1d18      	adds	r0, r3, #4
3418c546:	683b      	ldr	r3, [r7, #0]
3418c548:	687a      	ldr	r2, [r7, #4]
3418c54a:	68b9      	ldr	r1, [r7, #8]
3418c54c:	f002 fb70 	bl	3418ec30 <EXTMEM_DRIVER_NOR_SFDP_Read>
3418c550:	4603      	mov	r3, r0
3418c552:	2b00      	cmp	r3, #0
3418c554:	d005      	beq.n	3418c562 <EXTMEM_Read+0x5a>
                                                           Address, Data, Size))
      {
        retr = EXTMEM_ERROR_DRIVER;
3418c556:	23fd      	movs	r3, #253	@ 0xfd
3418c558:	75fb      	strb	r3, [r7, #23]
      }
      break;
3418c55a:	e002      	b.n	3418c562 <EXTMEM_Read+0x5a>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
      EXTMEM_DEBUG("\terror unknown type\n");
      retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418c55c:	23fe      	movs	r3, #254	@ 0xfe
3418c55e:	75fb      	strb	r3, [r7, #23]
      break;
3418c560:	e000      	b.n	3418c564 <EXTMEM_Read+0x5c>
      break;
3418c562:	bf00      	nop
    }
    }
  }
  return retr;
3418c564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418c568:	4618      	mov	r0, r3
3418c56a:	3718      	adds	r7, #24
3418c56c:	46bd      	mov	sp, r7
3418c56e:	bd80      	pop	{r7, pc}
3418c570:	341c0098 	.word	0x341c0098

3418c574 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
3418c574:	b580      	push	{r7, lr}
3418c576:	b084      	sub	sp, #16
3418c578:	af00      	add	r7, sp, #0
3418c57a:	6078      	str	r0, [r7, #4]
3418c57c:	460b      	mov	r3, r1
3418c57e:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418c580:	23fb      	movs	r3, #251	@ 0xfb
3418c582:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418c584:	687b      	ldr	r3, [r7, #4]
3418c586:	2b00      	cmp	r3, #0
3418c588:	d139      	bne.n	3418c5fe <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
3418c58a:	2300      	movs	r3, #0
3418c58c:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418c58e:	4a1f      	ldr	r2, [pc, #124]	@ (3418c60c <EXTMEM_MemoryMappedMode+0x98>)
3418c590:	687b      	ldr	r3, [r7, #4]
3418c592:	21ac      	movs	r1, #172	@ 0xac
3418c594:	fb01 f303 	mul.w	r3, r1, r3
3418c598:	4413      	add	r3, r2
3418c59a:	781b      	ldrb	r3, [r3, #0]
3418c59c:	2b00      	cmp	r3, #0
3418c59e:	d002      	beq.n	3418c5a6 <EXTMEM_MemoryMappedMode+0x32>
3418c5a0:	2b03      	cmp	r3, #3
3418c5a2:	d025      	beq.n	3418c5f0 <EXTMEM_MemoryMappedMode+0x7c>
3418c5a4:	e027      	b.n	3418c5f6 <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
3418c5a6:	78fb      	ldrb	r3, [r7, #3]
3418c5a8:	2b00      	cmp	r3, #0
3418c5aa:	d110      	bne.n	3418c5ce <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418c5ac:	687b      	ldr	r3, [r7, #4]
3418c5ae:	22ac      	movs	r2, #172	@ 0xac
3418c5b0:	fb02 f303 	mul.w	r3, r2, r3
3418c5b4:	3308      	adds	r3, #8
3418c5b6:	4a15      	ldr	r2, [pc, #84]	@ (3418c60c <EXTMEM_MemoryMappedMode+0x98>)
3418c5b8:	4413      	add	r3, r2
3418c5ba:	3304      	adds	r3, #4
3418c5bc:	4618      	mov	r0, r3
3418c5be:	f002 fb64 	bl	3418ec8a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
3418c5c2:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418c5c4:	2b00      	cmp	r3, #0
3418c5c6:	d019      	beq.n	3418c5fc <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418c5c8:	f06f 0302 	mvn.w	r3, #2
3418c5cc:	e019      	b.n	3418c602 <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418c5ce:	687b      	ldr	r3, [r7, #4]
3418c5d0:	22ac      	movs	r2, #172	@ 0xac
3418c5d2:	fb02 f303 	mul.w	r3, r2, r3
3418c5d6:	3308      	adds	r3, #8
3418c5d8:	4a0c      	ldr	r2, [pc, #48]	@ (3418c60c <EXTMEM_MemoryMappedMode+0x98>)
3418c5da:	4413      	add	r3, r2
3418c5dc:	3304      	adds	r3, #4
3418c5de:	4618      	mov	r0, r3
3418c5e0:	f002 fb74 	bl	3418eccc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
3418c5e4:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418c5e6:	2b00      	cmp	r3, #0
3418c5e8:	d008      	beq.n	3418c5fc <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418c5ea:	f06f 0302 	mvn.w	r3, #2
3418c5ee:	e008      	b.n	3418c602 <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418c5f0:	23ff      	movs	r3, #255	@ 0xff
3418c5f2:	73fb      	strb	r3, [r7, #15]
    break;
3418c5f4:	e003      	b.n	3418c5fe <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418c5f6:	23fe      	movs	r3, #254	@ 0xfe
3418c5f8:	73fb      	strb	r3, [r7, #15]
        break;
3418c5fa:	e000      	b.n	3418c5fe <EXTMEM_MemoryMappedMode+0x8a>
        break;
3418c5fc:	bf00      	nop
      }
    }
  }
  return retr;
3418c5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418c602:	4618      	mov	r0, r3
3418c604:	3710      	adds	r7, #16
3418c606:	46bd      	mov	sp, r7
3418c608:	bd80      	pop	{r7, pc}
3418c60a:	bf00      	nop
3418c60c:	341c0098 	.word	0x341c0098

3418c610 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
3418c610:	b480      	push	{r7}
3418c612:	b085      	sub	sp, #20
3418c614:	af00      	add	r7, sp, #0
3418c616:	6078      	str	r0, [r7, #4]
3418c618:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418c61a:	23fb      	movs	r3, #251	@ 0xfb
3418c61c:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418c61e:	687b      	ldr	r3, [r7, #4]
3418c620:	2b00      	cmp	r3, #0
3418c622:	d145      	bne.n	3418c6b0 <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
3418c624:	2300      	movs	r3, #0
3418c626:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418c628:	4a25      	ldr	r2, [pc, #148]	@ (3418c6c0 <EXTMEM_GetMapAddress+0xb0>)
3418c62a:	687b      	ldr	r3, [r7, #4]
3418c62c:	21ac      	movs	r1, #172	@ 0xac
3418c62e:	fb01 f303 	mul.w	r3, r1, r3
3418c632:	4413      	add	r3, r2
3418c634:	781b      	ldrb	r3, [r3, #0]
3418c636:	2b00      	cmp	r3, #0
3418c638:	d001      	beq.n	3418c63e <EXTMEM_GetMapAddress+0x2e>
3418c63a:	2b02      	cmp	r3, #2
3418c63c:	d135      	bne.n	3418c6aa <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
3418c63e:	4a20      	ldr	r2, [pc, #128]	@ (3418c6c0 <EXTMEM_GetMapAddress+0xb0>)
3418c640:	687b      	ldr	r3, [r7, #4]
3418c642:	21ac      	movs	r1, #172	@ 0xac
3418c644:	fb01 f303 	mul.w	r3, r1, r3
3418c648:	4413      	add	r3, r2
3418c64a:	3304      	adds	r3, #4
3418c64c:	681b      	ldr	r3, [r3, #0]
3418c64e:	681b      	ldr	r3, [r3, #0]
3418c650:	4a1c      	ldr	r2, [pc, #112]	@ (3418c6c4 <EXTMEM_GetMapAddress+0xb4>)
3418c652:	4293      	cmp	r3, r2
3418c654:	d104      	bne.n	3418c660 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
3418c656:	683b      	ldr	r3, [r7, #0]
3418c658:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3418c65c:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
3418c65e:	e027      	b.n	3418c6b0 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
3418c660:	4a17      	ldr	r2, [pc, #92]	@ (3418c6c0 <EXTMEM_GetMapAddress+0xb0>)
3418c662:	687b      	ldr	r3, [r7, #4]
3418c664:	21ac      	movs	r1, #172	@ 0xac
3418c666:	fb01 f303 	mul.w	r3, r1, r3
3418c66a:	4413      	add	r3, r2
3418c66c:	3304      	adds	r3, #4
3418c66e:	681b      	ldr	r3, [r3, #0]
3418c670:	681b      	ldr	r3, [r3, #0]
3418c672:	4a15      	ldr	r2, [pc, #84]	@ (3418c6c8 <EXTMEM_GetMapAddress+0xb8>)
3418c674:	4293      	cmp	r3, r2
3418c676:	d104      	bne.n	3418c682 <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
3418c678:	683b      	ldr	r3, [r7, #0]
3418c67a:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
3418c67e:	601a      	str	r2, [r3, #0]
       break;
3418c680:	e016      	b.n	3418c6b0 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
3418c682:	4a0f      	ldr	r2, [pc, #60]	@ (3418c6c0 <EXTMEM_GetMapAddress+0xb0>)
3418c684:	687b      	ldr	r3, [r7, #4]
3418c686:	21ac      	movs	r1, #172	@ 0xac
3418c688:	fb01 f303 	mul.w	r3, r1, r3
3418c68c:	4413      	add	r3, r2
3418c68e:	3304      	adds	r3, #4
3418c690:	681b      	ldr	r3, [r3, #0]
3418c692:	681b      	ldr	r3, [r3, #0]
3418c694:	4a0d      	ldr	r2, [pc, #52]	@ (3418c6cc <EXTMEM_GetMapAddress+0xbc>)
3418c696:	4293      	cmp	r3, r2
3418c698:	d104      	bne.n	3418c6a4 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
3418c69a:	683b      	ldr	r3, [r7, #0]
3418c69c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418c6a0:	601a      	str	r2, [r3, #0]
       break;
3418c6a2:	e005      	b.n	3418c6b0 <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
3418c6a4:	23fd      	movs	r3, #253	@ 0xfd
3418c6a6:	73fb      	strb	r3, [r7, #15]
       break;
3418c6a8:	e002      	b.n	3418c6b0 <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418c6aa:	23fe      	movs	r3, #254	@ 0xfe
3418c6ac:	73fb      	strb	r3, [r7, #15]
        break;
3418c6ae:	bf00      	nop
      }
    }
  }
  return retr;
3418c6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418c6b4:	4618      	mov	r0, r3
3418c6b6:	3714      	adds	r7, #20
3418c6b8:	46bd      	mov	sp, r7
3418c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c6be:	4770      	bx	lr
3418c6c0:	341c0098 	.word	0x341c0098
3418c6c4:	58025000 	.word	0x58025000
3418c6c8:	5802a000 	.word	0x5802a000
3418c6cc:	5802d000 	.word	0x5802d000

3418c6d0 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
3418c6d0:	b480      	push	{r7}
3418c6d2:	b087      	sub	sp, #28
3418c6d4:	af00      	add	r7, sp, #0
3418c6d6:	60f8      	str	r0, [r7, #12]
3418c6d8:	60b9      	str	r1, [r7, #8]
3418c6da:	607a      	str	r2, [r7, #4]
3418c6dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
3418c6de:	2300      	movs	r3, #0
3418c6e0:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
3418c6e2:	687b      	ldr	r3, [r7, #4]
3418c6e4:	2b00      	cmp	r3, #0
3418c6e6:	d102      	bne.n	3418c6ee <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
3418c6e8:	2301      	movs	r3, #1
3418c6ea:	75fb      	strb	r3, [r7, #23]
3418c6ec:	e028      	b.n	3418c740 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
3418c6ee:	68ba      	ldr	r2, [r7, #8]
3418c6f0:	687b      	ldr	r3, [r7, #4]
3418c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418c6f6:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
3418c6f8:	693b      	ldr	r3, [r7, #16]
3418c6fa:	2b00      	cmp	r3, #0
3418c6fc:	d00d      	beq.n	3418c71a <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
3418c6fe:	68ba      	ldr	r2, [r7, #8]
3418c700:	693b      	ldr	r3, [r7, #16]
3418c702:	fbb2 f2f3 	udiv	r2, r2, r3
3418c706:	683b      	ldr	r3, [r7, #0]
3418c708:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
3418c70a:	683b      	ldr	r3, [r7, #0]
3418c70c:	681b      	ldr	r3, [r3, #0]
3418c70e:	687a      	ldr	r2, [r7, #4]
3418c710:	429a      	cmp	r2, r3
3418c712:	d302      	bcc.n	3418c71a <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
3418c714:	693b      	ldr	r3, [r7, #16]
3418c716:	3b01      	subs	r3, #1
3418c718:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
3418c71a:	693b      	ldr	r3, [r7, #16]
3418c71c:	3301      	adds	r3, #1
3418c71e:	68ba      	ldr	r2, [r7, #8]
3418c720:	fbb2 f2f3 	udiv	r2, r2, r3
3418c724:	683b      	ldr	r3, [r7, #0]
3418c726:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
3418c728:	68fb      	ldr	r3, [r7, #12]
3418c72a:	681b      	ldr	r3, [r3, #0]
3418c72c:	681b      	ldr	r3, [r3, #0]
3418c72e:	68db      	ldr	r3, [r3, #12]
3418c730:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418c734:	68fb      	ldr	r3, [r7, #12]
3418c736:	681b      	ldr	r3, [r3, #0]
3418c738:	681b      	ldr	r3, [r3, #0]
3418c73a:	693a      	ldr	r2, [r7, #16]
3418c73c:	430a      	orrs	r2, r1
3418c73e:	60da      	str	r2, [r3, #12]
  }

  return retr;
3418c740:	7dfb      	ldrb	r3, [r7, #23]
}
3418c742:	4618      	mov	r0, r3
3418c744:	371c      	adds	r7, #28
3418c746:	46bd      	mov	sp, r7
3418c748:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c74c:	4770      	bx	lr

3418c74e <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
3418c74e:	b580      	push	{r7, lr}
3418c750:	b096      	sub	sp, #88	@ 0x58
3418c752:	af00      	add	r7, sp, #0
3418c754:	6078      	str	r0, [r7, #4]
3418c756:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
3418c758:	f107 030c 	add.w	r3, r7, #12
3418c75c:	224c      	movs	r2, #76	@ 0x4c
3418c75e:	2100      	movs	r1, #0
3418c760:	4618      	mov	r0, r3
3418c762:	f002 fac9 	bl	3418ecf8 <memset>
3418c766:	235a      	movs	r3, #90	@ 0x5a
3418c768:	617b      	str	r3, [r7, #20]
3418c76a:	2301      	movs	r3, #1
3418c76c:	61bb      	str	r3, [r7, #24]
3418c76e:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418c772:	62bb      	str	r3, [r7, #40]	@ 0x28
3418c774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418c778:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418c77a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418c77e:	647b      	str	r3, [r7, #68]	@ 0x44
3418c780:	2308      	movs	r3, #8
3418c782:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
3418c784:	687b      	ldr	r3, [r7, #4]
3418c786:	683a      	ldr	r2, [r7, #0]
3418c788:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3418c78a:	687b      	ldr	r3, [r7, #4]
3418c78c:	3304      	adds	r3, #4
3418c78e:	f107 010c 	add.w	r1, r7, #12
3418c792:	224c      	movs	r2, #76	@ 0x4c
3418c794:	4618      	mov	r0, r3
3418c796:	f002 fadb 	bl	3418ed50 <memcpy>
  SalXspi->CommandExtension = 0;
3418c79a:	687b      	ldr	r3, [r7, #4]
3418c79c:	2200      	movs	r2, #0
3418c79e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
3418c7a2:	687b      	ldr	r3, [r7, #4]
3418c7a4:	2200      	movs	r2, #0
3418c7a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3418c7aa:	2300      	movs	r3, #0
}
3418c7ac:	4618      	mov	r0, r3
3418c7ae:	3758      	adds	r7, #88	@ 0x58
3418c7b0:	46bd      	mov	sp, r7
3418c7b2:	bd80      	pop	{r7, pc}

3418c7b4 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
3418c7b4:	b580      	push	{r7, lr}
3418c7b6:	b098      	sub	sp, #96	@ 0x60
3418c7b8:	af00      	add	r7, sp, #0
3418c7ba:	60f8      	str	r0, [r7, #12]
3418c7bc:	460b      	mov	r3, r1
3418c7be:	607a      	str	r2, [r7, #4]
3418c7c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
3418c7c2:	2300      	movs	r3, #0
3418c7c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
3418c7c8:	68fb      	ldr	r3, [r7, #12]
3418c7ca:	f107 0010 	add.w	r0, r7, #16
3418c7ce:	3304      	adds	r3, #4
3418c7d0:	224c      	movs	r2, #76	@ 0x4c
3418c7d2:	4619      	mov	r1, r3
3418c7d4:	f002 fabc 	bl	3418ed50 <memcpy>

  switch (ParmetersType) {
3418c7d8:	7afb      	ldrb	r3, [r7, #11]
3418c7da:	2b04      	cmp	r3, #4
3418c7dc:	f200 812a 	bhi.w	3418ca34 <SAL_XSPI_MemoryConfig+0x280>
3418c7e0:	a201      	add	r2, pc, #4	@ (adr r2, 3418c7e8 <SAL_XSPI_MemoryConfig+0x34>)
3418c7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418c7e6:	bf00      	nop
3418c7e8:	3418c7fd 	.word	0x3418c7fd
3418c7ec:	3418ca25 	.word	0x3418ca25
3418c7f0:	3418c9f7 	.word	0x3418c9f7
3418c7f4:	3418ca35 	.word	0x3418ca35
3418c7f8:	3418c9ff 	.word	0x3418c9ff
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3418c7fc:	687b      	ldr	r3, [r7, #4]
3418c7fe:	781a      	ldrb	r2, [r3, #0]
3418c800:	68fb      	ldr	r3, [r7, #12]
3418c802:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
3418c806:	68fb      	ldr	r3, [r7, #12]
3418c808:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418c80c:	2b0b      	cmp	r3, #11
3418c80e:	f200 80ed 	bhi.w	3418c9ec <SAL_XSPI_MemoryConfig+0x238>
3418c812:	a201      	add	r2, pc, #4	@ (adr r2, 3418c818 <SAL_XSPI_MemoryConfig+0x64>)
3418c814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418c818:	3418c849 	.word	0x3418c849
3418c81c:	3418c849 	.word	0x3418c849
3418c820:	3418c849 	.word	0x3418c849
3418c824:	3418c849 	.word	0x3418c849
3418c828:	3418c879 	.word	0x3418c879
3418c82c:	3418c879 	.word	0x3418c879
3418c830:	3418c8a9 	.word	0x3418c8a9
3418c834:	3418c8dd 	.word	0x3418c8dd
3418c838:	3418c90d 	.word	0x3418c90d
3418c83c:	3418c943 	.word	0x3418c943
3418c840:	3418c979 	.word	0x3418c979
3418c844:	3418c9b3 	.word	0x3418c9b3
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418c848:	2301      	movs	r3, #1
3418c84a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418c84c:	2300      	movs	r3, #0
3418c84e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c850:	2300      	movs	r3, #0
3418c852:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
3418c854:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418c858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418c85a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418c85e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418c860:	2300      	movs	r3, #0
3418c862:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
3418c864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418c868:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418c86a:	2300      	movs	r3, #0
3418c86c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418c86e:	2308      	movs	r3, #8
3418c870:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418c872:	2300      	movs	r3, #0
3418c874:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c876:	e0bd      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418c878:	2303      	movs	r3, #3
3418c87a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418c87c:	2300      	movs	r3, #0
3418c87e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c880:	2300      	movs	r3, #0
3418c882:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418c884:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418c888:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418c88a:	2300      	movs	r3, #0
3418c88c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418c88e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418c892:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418c894:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418c898:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418c89a:	2300      	movs	r3, #0
3418c89c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418c89e:	2306      	movs	r3, #6
3418c8a0:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418c8a2:	2300      	movs	r3, #0
3418c8a4:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c8a6:	e0a5      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418c8a8:	2303      	movs	r3, #3
3418c8aa:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418c8ac:	2300      	movs	r3, #0
3418c8ae:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418c8b0:	2308      	movs	r3, #8
3418c8b2:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418c8b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418c8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418c8ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418c8be:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418c8c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c8c4:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418c8c6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418c8ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418c8cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418c8d0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418c8d2:	2306      	movs	r3, #6
3418c8d4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418c8d6:	2300      	movs	r3, #0
3418c8d8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c8da:	e08b      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418c8dc:	2301      	movs	r3, #1
3418c8de:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418c8e0:	2300      	movs	r3, #0
3418c8e2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c8e4:	2300      	movs	r3, #0
3418c8e6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418c8e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418c8ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c8f2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418c8f4:	2300      	movs	r3, #0
3418c8f6:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418c8f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418c8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418c8fe:	2300      	movs	r3, #0
3418c900:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418c902:	2308      	movs	r3, #8
3418c904:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418c906:	2300      	movs	r3, #0
3418c908:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c90a:	e073      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418c90c:	2304      	movs	r3, #4
3418c90e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418c910:	2300      	movs	r3, #0
3418c912:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c914:	2300      	movs	r3, #0
3418c916:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418c918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418c91e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c922:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418c924:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c928:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418c92a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418c92e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418c930:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418c934:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418c936:	2308      	movs	r3, #8
3418c938:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418c93a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418c93e:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c940:	e058      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418c942:	2304      	movs	r3, #4
3418c944:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3418c946:	2310      	movs	r3, #16
3418c948:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418c94a:	2308      	movs	r3, #8
3418c94c:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418c94e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418c954:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c958:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418c95a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c95e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418c960:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418c964:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418c966:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418c96a:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3418c96c:	2314      	movs	r3, #20
3418c96e:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418c970:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418c974:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c976:	e03d      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418c978:	2304      	movs	r3, #4
3418c97a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418c97c:	2300      	movs	r3, #0
3418c97e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c980:	2300      	movs	r3, #0
3418c982:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418c984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c988:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418c98a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c98e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418c990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c994:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418c996:	2300      	movs	r3, #0
3418c998:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3418c99a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418c99e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418c9a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418c9a4:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418c9a6:	230a      	movs	r3, #10
3418c9a8:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418c9aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418c9ae:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c9b0:	e020      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418c9b2:	2304      	movs	r3, #4
3418c9b4:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418c9b6:	2300      	movs	r3, #0
3418c9b8:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418c9ba:	2300      	movs	r3, #0
3418c9bc:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418c9be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418c9c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c9c8:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418c9ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c9ce:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418c9d0:	2300      	movs	r3, #0
3418c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
3418c9d4:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
3418c9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418c9da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418c9de:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418c9e0:	230a      	movs	r3, #10
3418c9e2:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418c9e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418c9e8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418c9ea:	e003      	b.n	3418c9f4 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3418c9ec:	2301      	movs	r3, #1
3418c9ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
3418c9f2:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
3418c9f4:	e022      	b.n	3418ca3c <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418c9f6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418c9fa:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3418c9fc:	e01e      	b.n	3418ca3c <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418c9fe:	687b      	ldr	r3, [r7, #4]
3418ca00:	781b      	ldrb	r3, [r3, #0]
3418ca02:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
3418ca06:	68fb      	ldr	r3, [r7, #12]
3418ca08:	681b      	ldr	r3, [r3, #0]
3418ca0a:	681b      	ldr	r3, [r3, #0]
3418ca0c:	689b      	ldr	r3, [r3, #8]
3418ca0e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418ca12:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
3418ca16:	041a      	lsls	r2, r3, #16
3418ca18:	68fb      	ldr	r3, [r7, #12]
3418ca1a:	681b      	ldr	r3, [r3, #0]
3418ca1c:	681b      	ldr	r3, [r3, #0]
3418ca1e:	430a      	orrs	r2, r1
3418ca20:	609a      	str	r2, [r3, #8]
    break;
3418ca22:	e00b      	b.n	3418ca3c <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418ca24:	687b      	ldr	r3, [r7, #4]
3418ca26:	781b      	ldrb	r3, [r3, #0]
3418ca28:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
3418ca2c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
3418ca30:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
3418ca32:	e003      	b.n	3418ca3c <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
3418ca34:	2301      	movs	r3, #1
3418ca36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
3418ca3a:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
3418ca3c:	68fb      	ldr	r3, [r7, #12]
3418ca3e:	3304      	adds	r3, #4
3418ca40:	f107 0110 	add.w	r1, r7, #16
3418ca44:	224c      	movs	r2, #76	@ 0x4c
3418ca46:	4618      	mov	r0, r3
3418ca48:	f002 f982 	bl	3418ed50 <memcpy>
  return retr;
3418ca4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418ca50:	4618      	mov	r0, r3
3418ca52:	3760      	adds	r7, #96	@ 0x60
3418ca54:	46bd      	mov	sp, r7
3418ca56:	bd80      	pop	{r7, pc}

3418ca58 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418ca58:	b580      	push	{r7, lr}
3418ca5a:	b098      	sub	sp, #96	@ 0x60
3418ca5c:	af00      	add	r7, sp, #0
3418ca5e:	60f8      	str	r0, [r7, #12]
3418ca60:	60b9      	str	r1, [r7, #8]
3418ca62:	607a      	str	r2, [r7, #4]
3418ca64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418ca66:	68fb      	ldr	r3, [r7, #12]
3418ca68:	f107 0010 	add.w	r0, r7, #16
3418ca6c:	3304      	adds	r3, #4
3418ca6e:	224c      	movs	r2, #76	@ 0x4c
3418ca70:	4619      	mov	r1, r3
3418ca72:	f002 f96d 	bl	3418ed50 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
3418ca76:	68fb      	ldr	r3, [r7, #12]
3418ca78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ca7c:	6a39      	ldr	r1, [r7, #32]
3418ca7e:	225a      	movs	r2, #90	@ 0x5a
3418ca80:	4618      	mov	r0, r3
3418ca82:	f000 fb7a 	bl	3418d17a <XSPI_FormatCommand>
3418ca86:	4603      	mov	r3, r0
3418ca88:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
3418ca8a:	68bb      	ldr	r3, [r7, #8]
3418ca8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3418ca8e:	683b      	ldr	r3, [r7, #0]
3418ca90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
3418ca92:	68fb      	ldr	r3, [r7, #12]
3418ca94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418ca98:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3418ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418ca9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418caa0:	d102      	bne.n	3418caa8 <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418caa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418caa6:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418caa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418caaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418caae:	d103      	bne.n	3418cab8 <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3418cab0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418cab4:	65bb      	str	r3, [r7, #88]	@ 0x58
3418cab6:	e001      	b.n	3418cabc <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3418cab8:	2300      	movs	r3, #0
3418caba:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cabc:	68fb      	ldr	r3, [r7, #12]
3418cabe:	681b      	ldr	r3, [r3, #0]
3418cac0:	f107 0110 	add.w	r1, r7, #16
3418cac4:	2264      	movs	r2, #100	@ 0x64
3418cac6:	4618      	mov	r0, r3
3418cac8:	f7fe fd02 	bl	3418b4d0 <HAL_XSPI_Command>
3418cacc:	4603      	mov	r3, r0
3418cace:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418cad2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cad6:	2b00      	cmp	r3, #0
3418cad8:	d10a      	bne.n	3418caf0 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cada:	68fb      	ldr	r3, [r7, #12]
3418cadc:	681b      	ldr	r3, [r3, #0]
3418cade:	2264      	movs	r2, #100	@ 0x64
3418cae0:	6879      	ldr	r1, [r7, #4]
3418cae2:	4618      	mov	r0, r3
3418cae4:	f7fe fdf7 	bl	3418b6d6 <HAL_XSPI_Receive>
3418cae8:	4603      	mov	r3, r0
3418caea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418caee:	e000      	b.n	3418caf2 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
3418caf0:	bf00      	nop

error:
  if (retr != HAL_OK )
3418caf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418caf6:	2b00      	cmp	r3, #0
3418caf8:	d004      	beq.n	3418cb04 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cafa:	68fb      	ldr	r3, [r7, #12]
3418cafc:	681b      	ldr	r3, [r3, #0]
3418cafe:	4618      	mov	r0, r3
3418cb00:	f7fe ff82 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cb04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cb08:	4618      	mov	r0, r3
3418cb0a:	3760      	adds	r7, #96	@ 0x60
3418cb0c:	46bd      	mov	sp, r7
3418cb0e:	bd80      	pop	{r7, pc}

3418cb10 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
3418cb10:	b580      	push	{r7, lr}
3418cb12:	b098      	sub	sp, #96	@ 0x60
3418cb14:	af00      	add	r7, sp, #0
3418cb16:	60f8      	str	r0, [r7, #12]
3418cb18:	60b9      	str	r1, [r7, #8]
3418cb1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418cb1c:	68fb      	ldr	r3, [r7, #12]
3418cb1e:	f107 0010 	add.w	r0, r7, #16
3418cb22:	3304      	adds	r3, #4
3418cb24:	224c      	movs	r2, #76	@ 0x4c
3418cb26:	4619      	mov	r1, r3
3418cb28:	f002 f912 	bl	3418ed50 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
3418cb2c:	68fb      	ldr	r3, [r7, #12]
3418cb2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418cb32:	6a39      	ldr	r1, [r7, #32]
3418cb34:	229f      	movs	r2, #159	@ 0x9f
3418cb36:	4618      	mov	r0, r3
3418cb38:	f000 fb1f 	bl	3418d17a <XSPI_FormatCommand>
3418cb3c:	4603      	mov	r3, r0
3418cb3e:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
3418cb40:	687b      	ldr	r3, [r7, #4]
3418cb42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
3418cb44:	2300      	movs	r3, #0
3418cb46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418cb48:	69fb      	ldr	r3, [r7, #28]
3418cb4a:	2b01      	cmp	r3, #1
3418cb4c:	d105      	bne.n	3418cb5a <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
3418cb4e:	2300      	movs	r3, #0
3418cb50:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
3418cb52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418cb56:	64bb      	str	r3, [r7, #72]	@ 0x48
3418cb58:	e003      	b.n	3418cb62 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
3418cb5a:	2300      	movs	r3, #0
3418cb5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
3418cb5e:	2308      	movs	r3, #8
3418cb60:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cb62:	68fb      	ldr	r3, [r7, #12]
3418cb64:	681b      	ldr	r3, [r3, #0]
3418cb66:	f107 0110 	add.w	r1, r7, #16
3418cb6a:	2264      	movs	r2, #100	@ 0x64
3418cb6c:	4618      	mov	r0, r3
3418cb6e:	f7fe fcaf 	bl	3418b4d0 <HAL_XSPI_Command>
3418cb72:	4603      	mov	r3, r0
3418cb74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418cb78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cb7c:	2b00      	cmp	r3, #0
3418cb7e:	d10a      	bne.n	3418cb96 <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cb80:	68fb      	ldr	r3, [r7, #12]
3418cb82:	681b      	ldr	r3, [r3, #0]
3418cb84:	2264      	movs	r2, #100	@ 0x64
3418cb86:	68b9      	ldr	r1, [r7, #8]
3418cb88:	4618      	mov	r0, r3
3418cb8a:	f7fe fda4 	bl	3418b6d6 <HAL_XSPI_Receive>
3418cb8e:	4603      	mov	r3, r0
3418cb90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418cb94:	e000      	b.n	3418cb98 <SAL_XSPI_GetId+0x88>
    goto error;
3418cb96:	bf00      	nop

error:
  if (retr != HAL_OK )
3418cb98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cb9c:	2b00      	cmp	r3, #0
3418cb9e:	d004      	beq.n	3418cbaa <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cba0:	68fb      	ldr	r3, [r7, #12]
3418cba2:	681b      	ldr	r3, [r3, #0]
3418cba4:	4618      	mov	r0, r3
3418cba6:	f7fe ff2f 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cbaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cbae:	4618      	mov	r0, r3
3418cbb0:	3760      	adds	r7, #96	@ 0x60
3418cbb2:	46bd      	mov	sp, r7
3418cbb4:	bd80      	pop	{r7, pc}

3418cbb6 <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418cbb6:	b580      	push	{r7, lr}
3418cbb8:	b098      	sub	sp, #96	@ 0x60
3418cbba:	af00      	add	r7, sp, #0
3418cbbc:	60f8      	str	r0, [r7, #12]
3418cbbe:	607a      	str	r2, [r7, #4]
3418cbc0:	603b      	str	r3, [r7, #0]
3418cbc2:	460b      	mov	r3, r1
3418cbc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418cbc6:	68fb      	ldr	r3, [r7, #12]
3418cbc8:	f107 0010 	add.w	r0, r7, #16
3418cbcc:	3304      	adds	r3, #4
3418cbce:	224c      	movs	r2, #76	@ 0x4c
3418cbd0:	4619      	mov	r1, r3
3418cbd2:	f002 f8bd 	bl	3418ed50 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418cbd6:	68fb      	ldr	r3, [r7, #12]
3418cbd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418cbdc:	6a39      	ldr	r1, [r7, #32]
3418cbde:	7afa      	ldrb	r2, [r7, #11]
3418cbe0:	4618      	mov	r0, r3
3418cbe2:	f000 faca 	bl	3418d17a <XSPI_FormatCommand>
3418cbe6:	4603      	mov	r3, r0
3418cbe8:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418cbea:	687b      	ldr	r3, [r7, #4]
3418cbec:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418cbee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418cbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
3418cbf2:	68fb      	ldr	r3, [r7, #12]
3418cbf4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418cbf8:	2b05      	cmp	r3, #5
3418cbfa:	d006      	beq.n	3418cc0a <SAL_XSPI_Read+0x54>
3418cbfc:	2b05      	cmp	r3, #5
3418cbfe:	dc1a      	bgt.n	3418cc36 <SAL_XSPI_Read+0x80>
3418cc00:	2b01      	cmp	r3, #1
3418cc02:	d014      	beq.n	3418cc2e <SAL_XSPI_Read+0x78>
3418cc04:	2b02      	cmp	r3, #2
3418cc06:	d00b      	beq.n	3418cc20 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
3418cc08:	e015      	b.n	3418cc36 <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418cc0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418cc0e:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
3418cc10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418cc14:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
3418cc16:	68fb      	ldr	r3, [r7, #12]
3418cc18:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418cc1c:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
3418cc1e:	e00b      	b.n	3418cc38 <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
3418cc20:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418cc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418cc26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418cc2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418cc2c:	e004      	b.n	3418cc38 <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418cc2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418cc32:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418cc34:	e000      	b.n	3418cc38 <SAL_XSPI_Read+0x82>
   break;
3418cc36:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cc38:	68fb      	ldr	r3, [r7, #12]
3418cc3a:	681b      	ldr	r3, [r3, #0]
3418cc3c:	f107 0110 	add.w	r1, r7, #16
3418cc40:	2264      	movs	r2, #100	@ 0x64
3418cc42:	4618      	mov	r0, r3
3418cc44:	f7fe fc44 	bl	3418b4d0 <HAL_XSPI_Command>
3418cc48:	4603      	mov	r3, r0
3418cc4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418cc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cc52:	2b00      	cmp	r3, #0
3418cc54:	d107      	bne.n	3418cc66 <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
3418cc56:	6839      	ldr	r1, [r7, #0]
3418cc58:	68f8      	ldr	r0, [r7, #12]
3418cc5a:	f000 faca 	bl	3418d1f2 <XSPI_Receive>
3418cc5e:	4603      	mov	r3, r0
3418cc60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418cc64:	e000      	b.n	3418cc68 <SAL_XSPI_Read+0xb2>
    goto error;
3418cc66:	bf00      	nop

error:
  if (retr != HAL_OK )
3418cc68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cc6c:	2b00      	cmp	r3, #0
3418cc6e:	d004      	beq.n	3418cc7a <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cc70:	68fb      	ldr	r3, [r7, #12]
3418cc72:	681b      	ldr	r3, [r3, #0]
3418cc74:	4618      	mov	r0, r3
3418cc76:	f7fe fec7 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cc7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cc7e:	4618      	mov	r0, r3
3418cc80:	3760      	adds	r7, #96	@ 0x60
3418cc82:	46bd      	mov	sp, r7
3418cc84:	bd80      	pop	{r7, pc}

3418cc86 <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
3418cc86:	b580      	push	{r7, lr}
3418cc88:	b098      	sub	sp, #96	@ 0x60
3418cc8a:	af00      	add	r7, sp, #0
3418cc8c:	60f8      	str	r0, [r7, #12]
3418cc8e:	607a      	str	r2, [r7, #4]
3418cc90:	603b      	str	r3, [r7, #0]
3418cc92:	460b      	mov	r3, r1
3418cc94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418cc96:	68fb      	ldr	r3, [r7, #12]
3418cc98:	f107 0010 	add.w	r0, r7, #16
3418cc9c:	3304      	adds	r3, #4
3418cc9e:	224c      	movs	r2, #76	@ 0x4c
3418cca0:	4619      	mov	r1, r3
3418cca2:	f002 f855 	bl	3418ed50 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418cca6:	68fb      	ldr	r3, [r7, #12]
3418cca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ccac:	6a39      	ldr	r1, [r7, #32]
3418ccae:	7afa      	ldrb	r2, [r7, #11]
3418ccb0:	4618      	mov	r0, r3
3418ccb2:	f000 fa62 	bl	3418d17a <XSPI_FormatCommand>
3418ccb6:	4603      	mov	r3, r0
3418ccb8:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418ccba:	687b      	ldr	r3, [r7, #4]
3418ccbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418ccbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418ccc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
3418ccc2:	2300      	movs	r3, #0
3418ccc4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
3418ccc6:	2300      	movs	r3, #0
3418ccc8:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ccca:	68fb      	ldr	r3, [r7, #12]
3418cccc:	681b      	ldr	r3, [r3, #0]
3418ccce:	f107 0110 	add.w	r1, r7, #16
3418ccd2:	2264      	movs	r2, #100	@ 0x64
3418ccd4:	4618      	mov	r0, r3
3418ccd6:	f7fe fbfb 	bl	3418b4d0 <HAL_XSPI_Command>
3418ccda:	4603      	mov	r3, r0
3418ccdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
3418cce0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cce4:	2b00      	cmp	r3, #0
3418cce6:	d107      	bne.n	3418ccf8 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
3418cce8:	6839      	ldr	r1, [r7, #0]
3418ccea:	68f8      	ldr	r0, [r7, #12]
3418ccec:	f000 fa6e 	bl	3418d1cc <XSPI_Transmit>
3418ccf0:	4603      	mov	r3, r0
3418ccf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418ccf6:	e000      	b.n	3418ccfa <SAL_XSPI_Write+0x74>
    goto error;
3418ccf8:	bf00      	nop

error:
  if (retr != HAL_OK )
3418ccfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418ccfe:	2b00      	cmp	r3, #0
3418cd00:	d004      	beq.n	3418cd0c <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cd02:	68fb      	ldr	r3, [r7, #12]
3418cd04:	681b      	ldr	r3, [r3, #0]
3418cd06:	4618      	mov	r0, r3
3418cd08:	f7fe fe7e 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cd10:	4618      	mov	r0, r3
3418cd12:	3760      	adds	r7, #96	@ 0x60
3418cd14:	46bd      	mov	sp, r7
3418cd16:	bd80      	pop	{r7, pc}

3418cd18 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418cd18:	b580      	push	{r7, lr}
3418cd1a:	b098      	sub	sp, #96	@ 0x60
3418cd1c:	af00      	add	r7, sp, #0
3418cd1e:	60f8      	str	r0, [r7, #12]
3418cd20:	607a      	str	r2, [r7, #4]
3418cd22:	461a      	mov	r2, r3
3418cd24:	460b      	mov	r3, r1
3418cd26:	72fb      	strb	r3, [r7, #11]
3418cd28:	4613      	mov	r3, r2
3418cd2a:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418cd2c:	68fb      	ldr	r3, [r7, #12]
3418cd2e:	f107 0010 	add.w	r0, r7, #16
3418cd32:	3304      	adds	r3, #4
3418cd34:	224c      	movs	r2, #76	@ 0x4c
3418cd36:	4619      	mov	r1, r3
3418cd38:	f002 f80a 	bl	3418ed50 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418cd3c:	68fb      	ldr	r3, [r7, #12]
3418cd3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418cd42:	6a39      	ldr	r1, [r7, #32]
3418cd44:	7afa      	ldrb	r2, [r7, #11]
3418cd46:	4618      	mov	r0, r3
3418cd48:	f000 fa17 	bl	3418d17a <XSPI_FormatCommand>
3418cd4c:	4603      	mov	r3, r0
3418cd4e:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418cd50:	2300      	movs	r3, #0
3418cd52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
3418cd54:	2300      	movs	r3, #0
3418cd56:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418cd58:	893b      	ldrh	r3, [r7, #8]
3418cd5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418cd5c:	2300      	movs	r3, #0
3418cd5e:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418cd60:	893b      	ldrh	r3, [r7, #8]
3418cd62:	2b00      	cmp	r3, #0
3418cd64:	d101      	bne.n	3418cd6a <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418cd66:	2300      	movs	r3, #0
3418cd68:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cd6a:	68fb      	ldr	r3, [r7, #12]
3418cd6c:	681b      	ldr	r3, [r3, #0]
3418cd6e:	f107 0110 	add.w	r1, r7, #16
3418cd72:	2264      	movs	r2, #100	@ 0x64
3418cd74:	4618      	mov	r0, r3
3418cd76:	f7fe fbab 	bl	3418b4d0 <HAL_XSPI_Command>
3418cd7a:	4603      	mov	r3, r0
3418cd7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418cd80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cd84:	2b00      	cmp	r3, #0
3418cd86:	d10c      	bne.n	3418cda2 <SAL_XSPI_CommandSendData+0x8a>
3418cd88:	893b      	ldrh	r3, [r7, #8]
3418cd8a:	2b00      	cmp	r3, #0
3418cd8c:	d009      	beq.n	3418cda2 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cd8e:	68fb      	ldr	r3, [r7, #12]
3418cd90:	681b      	ldr	r3, [r3, #0]
3418cd92:	2264      	movs	r2, #100	@ 0x64
3418cd94:	6879      	ldr	r1, [r7, #4]
3418cd96:	4618      	mov	r0, r3
3418cd98:	f7fe fc2a 	bl	3418b5f0 <HAL_XSPI_Transmit>
3418cd9c:	4603      	mov	r3, r0
3418cd9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418cda2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cda6:	2b00      	cmp	r3, #0
3418cda8:	d004      	beq.n	3418cdb4 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cdaa:	68fb      	ldr	r3, [r7, #12]
3418cdac:	681b      	ldr	r3, [r3, #0]
3418cdae:	4618      	mov	r0, r3
3418cdb0:	f7fe fe2a 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cdb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cdb8:	4618      	mov	r0, r3
3418cdba:	3760      	adds	r7, #96	@ 0x60
3418cdbc:	46bd      	mov	sp, r7
3418cdbe:	bd80      	pop	{r7, pc}

3418cdc0 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418cdc0:	b580      	push	{r7, lr}
3418cdc2:	b098      	sub	sp, #96	@ 0x60
3418cdc4:	af00      	add	r7, sp, #0
3418cdc6:	60f8      	str	r0, [r7, #12]
3418cdc8:	607a      	str	r2, [r7, #4]
3418cdca:	461a      	mov	r2, r3
3418cdcc:	460b      	mov	r3, r1
3418cdce:	72fb      	strb	r3, [r7, #11]
3418cdd0:	4613      	mov	r3, r2
3418cdd2:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418cdd4:	68fb      	ldr	r3, [r7, #12]
3418cdd6:	f107 0010 	add.w	r0, r7, #16
3418cdda:	3304      	adds	r3, #4
3418cddc:	224c      	movs	r2, #76	@ 0x4c
3418cdde:	4619      	mov	r1, r3
3418cde0:	f001 ffb6 	bl	3418ed50 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418cde4:	68fb      	ldr	r3, [r7, #12]
3418cde6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418cdea:	6a39      	ldr	r1, [r7, #32]
3418cdec:	7afa      	ldrb	r2, [r7, #11]
3418cdee:	4618      	mov	r0, r3
3418cdf0:	f000 f9c3 	bl	3418d17a <XSPI_FormatCommand>
3418cdf4:	4603      	mov	r3, r0
3418cdf6:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418cdf8:	2300      	movs	r3, #0
3418cdfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3418cdfc:	2300      	movs	r3, #0
3418cdfe:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418ce00:	893b      	ldrh	r3, [r7, #8]
3418ce02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418ce04:	2300      	movs	r3, #0
3418ce06:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418ce08:	893b      	ldrh	r3, [r7, #8]
3418ce0a:	2b00      	cmp	r3, #0
3418ce0c:	d101      	bne.n	3418ce12 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418ce0e:	2300      	movs	r3, #0
3418ce10:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ce12:	68fb      	ldr	r3, [r7, #12]
3418ce14:	681b      	ldr	r3, [r3, #0]
3418ce16:	f107 0110 	add.w	r1, r7, #16
3418ce1a:	2264      	movs	r2, #100	@ 0x64
3418ce1c:	4618      	mov	r0, r3
3418ce1e:	f7fe fb57 	bl	3418b4d0 <HAL_XSPI_Command>
3418ce22:	4603      	mov	r3, r0
3418ce24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418ce28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418ce2c:	2b00      	cmp	r3, #0
3418ce2e:	d10c      	bne.n	3418ce4a <SAL_XSPI_SendReadCommand+0x8a>
3418ce30:	893b      	ldrh	r3, [r7, #8]
3418ce32:	2b00      	cmp	r3, #0
3418ce34:	d009      	beq.n	3418ce4a <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ce36:	68fb      	ldr	r3, [r7, #12]
3418ce38:	681b      	ldr	r3, [r3, #0]
3418ce3a:	2264      	movs	r2, #100	@ 0x64
3418ce3c:	6879      	ldr	r1, [r7, #4]
3418ce3e:	4618      	mov	r0, r3
3418ce40:	f7fe fc49 	bl	3418b6d6 <HAL_XSPI_Receive>
3418ce44:	4603      	mov	r3, r0
3418ce46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418ce4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418ce4e:	2b00      	cmp	r3, #0
3418ce50:	d004      	beq.n	3418ce5c <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418ce52:	68fb      	ldr	r3, [r7, #12]
3418ce54:	681b      	ldr	r3, [r3, #0]
3418ce56:	4618      	mov	r0, r3
3418ce58:	f7fe fdd6 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418ce5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418ce60:	4618      	mov	r0, r3
3418ce62:	3760      	adds	r7, #96	@ 0x60
3418ce64:	46bd      	mov	sp, r7
3418ce66:	bd80      	pop	{r7, pc}

3418ce68 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
3418ce68:	b580      	push	{r7, lr}
3418ce6a:	b098      	sub	sp, #96	@ 0x60
3418ce6c:	af00      	add	r7, sp, #0
3418ce6e:	60f8      	str	r0, [r7, #12]
3418ce70:	607a      	str	r2, [r7, #4]
3418ce72:	603b      	str	r3, [r7, #0]
3418ce74:	460b      	mov	r3, r1
3418ce76:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418ce78:	68fb      	ldr	r3, [r7, #12]
3418ce7a:	f107 0010 	add.w	r0, r7, #16
3418ce7e:	3304      	adds	r3, #4
3418ce80:	224c      	movs	r2, #76	@ 0x4c
3418ce82:	4619      	mov	r1, r3
3418ce84:	f001 ff64 	bl	3418ed50 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418ce88:	68fb      	ldr	r3, [r7, #12]
3418ce8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ce8e:	6a39      	ldr	r1, [r7, #32]
3418ce90:	7afa      	ldrb	r2, [r7, #11]
3418ce92:	4618      	mov	r0, r3
3418ce94:	f000 f971 	bl	3418d17a <XSPI_FormatCommand>
3418ce98:	4603      	mov	r3, r0
3418ce9a:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3418ce9c:	687b      	ldr	r3, [r7, #4]
3418ce9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
3418cea0:	68fb      	ldr	r3, [r7, #12]
3418cea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418cea6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418cea8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3418ceac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418ceae:	2300      	movs	r3, #0
3418ceb0:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ceb2:	68fb      	ldr	r3, [r7, #12]
3418ceb4:	681b      	ldr	r3, [r3, #0]
3418ceb6:	f107 0110 	add.w	r1, r7, #16
3418ceba:	2264      	movs	r2, #100	@ 0x64
3418cebc:	4618      	mov	r0, r3
3418cebe:	f7fe fb07 	bl	3418b4d0 <HAL_XSPI_Command>
3418cec2:	4603      	mov	r3, r0
3418cec4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
3418cec8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cecc:	2b00      	cmp	r3, #0
3418cece:	d109      	bne.n	3418cee4 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ced0:	68fb      	ldr	r3, [r7, #12]
3418ced2:	681b      	ldr	r3, [r3, #0]
3418ced4:	2264      	movs	r2, #100	@ 0x64
3418ced6:	6839      	ldr	r1, [r7, #0]
3418ced8:	4618      	mov	r0, r3
3418ceda:	f7fe fbfc 	bl	3418b6d6 <HAL_XSPI_Receive>
3418cede:	4603      	mov	r3, r0
3418cee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418cee4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418cee8:	2b00      	cmp	r3, #0
3418ceea:	d004      	beq.n	3418cef6 <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418ceec:	68fb      	ldr	r3, [r7, #12]
3418ceee:	681b      	ldr	r3, [r3, #0]
3418cef0:	4618      	mov	r0, r3
3418cef2:	f7fe fd89 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  return retr;
3418cef6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418cefa:	4618      	mov	r0, r3
3418cefc:	3760      	adds	r7, #96	@ 0x60
3418cefe:	46bd      	mov	sp, r7
3418cf00:	bd80      	pop	{r7, pc}

3418cf02 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
3418cf02:	b580      	push	{r7, lr}
3418cf04:	b09e      	sub	sp, #120	@ 0x78
3418cf06:	af00      	add	r7, sp, #0
3418cf08:	60f8      	str	r0, [r7, #12]
3418cf0a:	607a      	str	r2, [r7, #4]
3418cf0c:	461a      	mov	r2, r3
3418cf0e:	460b      	mov	r3, r1
3418cf10:	72fb      	strb	r3, [r7, #11]
3418cf12:	4613      	mov	r3, r2
3418cf14:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418cf16:	68fb      	ldr	r3, [r7, #12]
3418cf18:	f107 0028 	add.w	r0, r7, #40	@ 0x28
3418cf1c:	3304      	adds	r3, #4
3418cf1e:	224c      	movs	r2, #76	@ 0x4c
3418cf20:	4619      	mov	r1, r3
3418cf22:	f001 ff15 	bl	3418ed50 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
3418cf26:	7abb      	ldrb	r3, [r7, #10]
3418cf28:	617b      	str	r3, [r7, #20]
3418cf2a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
3418cf2e:	61bb      	str	r3, [r7, #24]
3418cf30:	2300      	movs	r3, #0
3418cf32:	61fb      	str	r3, [r7, #28]
3418cf34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3418cf38:	623b      	str	r3, [r7, #32]
3418cf3a:	2310      	movs	r3, #16
3418cf3c:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418cf3e:	68fb      	ldr	r3, [r7, #12]
3418cf40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418cf44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
3418cf46:	7afa      	ldrb	r2, [r7, #11]
3418cf48:	4618      	mov	r0, r3
3418cf4a:	f000 f916 	bl	3418d17a <XSPI_FormatCommand>
3418cf4e:	4603      	mov	r3, r0
3418cf50:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
3418cf52:	2301      	movs	r3, #1
3418cf54:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
3418cf56:	2300      	movs	r3, #0
3418cf58:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418cf5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418cf5c:	2b01      	cmp	r3, #1
3418cf5e:	d106      	bne.n	3418cf6e <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
3418cf60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418cf64:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
3418cf66:	2300      	movs	r3, #0
3418cf68:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3418cf6a:	2300      	movs	r3, #0
3418cf6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3418cf6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418cf70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418cf74:	d107      	bne.n	3418cf86 <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
3418cf76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418cf7a:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3418cf7c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418cf80:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
3418cf82:	687b      	ldr	r3, [r7, #4]
3418cf84:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cf86:	68fb      	ldr	r3, [r7, #12]
3418cf88:	681b      	ldr	r3, [r3, #0]
3418cf8a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3418cf8e:	2264      	movs	r2, #100	@ 0x64
3418cf90:	4618      	mov	r0, r3
3418cf92:	f7fe fa9d 	bl	3418b4d0 <HAL_XSPI_Command>
3418cf96:	4603      	mov	r3, r0
3418cf98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3418cf9c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418cfa0:	2b00      	cmp	r3, #0
3418cfa2:	d10b      	bne.n	3418cfbc <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
3418cfa4:	68fb      	ldr	r3, [r7, #12]
3418cfa6:	681b      	ldr	r3, [r3, #0]
3418cfa8:	f107 0114 	add.w	r1, r7, #20
3418cfac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
3418cfb0:	4618      	mov	r0, r3
3418cfb2:	f7fe fc33 	bl	3418b81c <HAL_XSPI_AutoPolling>
3418cfb6:	4603      	mov	r3, r0
3418cfb8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3418cfbc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418cfc0:	2b00      	cmp	r3, #0
3418cfc2:	d004      	beq.n	3418cfce <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418cfc4:	68fb      	ldr	r3, [r7, #12]
3418cfc6:	681b      	ldr	r3, [r3, #0]
3418cfc8:	4618      	mov	r0, r3
3418cfca:	f7fe fd1d 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418cfce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
3418cfd2:	4618      	mov	r0, r3
3418cfd4:	3778      	adds	r7, #120	@ 0x78
3418cfd6:	46bd      	mov	sp, r7
3418cfd8:	bd80      	pop	{r7, pc}

3418cfda <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3418cfda:	b580      	push	{r7, lr}
3418cfdc:	b09a      	sub	sp, #104	@ 0x68
3418cfde:	af00      	add	r7, sp, #0
3418cfe0:	6078      	str	r0, [r7, #4]
3418cfe2:	4608      	mov	r0, r1
3418cfe4:	4611      	mov	r1, r2
3418cfe6:	461a      	mov	r2, r3
3418cfe8:	4603      	mov	r3, r0
3418cfea:	70fb      	strb	r3, [r7, #3]
3418cfec:	460b      	mov	r3, r1
3418cfee:	70bb      	strb	r3, [r7, #2]
3418cff0:	4613      	mov	r3, r2
3418cff2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418cff4:	687b      	ldr	r3, [r7, #4]
3418cff6:	f107 0018 	add.w	r0, r7, #24
3418cffa:	3304      	adds	r3, #4
3418cffc:	224c      	movs	r2, #76	@ 0x4c
3418cffe:	4619      	mov	r1, r3
3418d000:	f001 fea6 	bl	3418ed50 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3418d004:	f107 0308 	add.w	r3, r7, #8
3418d008:	2200      	movs	r2, #0
3418d00a:	601a      	str	r2, [r3, #0]
3418d00c:	605a      	str	r2, [r3, #4]
3418d00e:	609a      	str	r2, [r3, #8]
3418d010:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3418d012:	2301      	movs	r3, #1
3418d014:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
3418d016:	687b      	ldr	r3, [r7, #4]
3418d018:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d01c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d01e:	78fa      	ldrb	r2, [r7, #3]
3418d020:	4618      	mov	r0, r3
3418d022:	f000 f8aa 	bl	3418d17a <XSPI_FormatCommand>
3418d026:	4603      	mov	r3, r0
3418d028:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
3418d02a:	78bb      	ldrb	r3, [r7, #2]
3418d02c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d02e:	687b      	ldr	r3, [r7, #4]
3418d030:	681b      	ldr	r3, [r3, #0]
3418d032:	f107 0118 	add.w	r1, r7, #24
3418d036:	2264      	movs	r2, #100	@ 0x64
3418d038:	4618      	mov	r0, r3
3418d03a:	f7fe fa49 	bl	3418b4d0 <HAL_XSPI_Command>
3418d03e:	4603      	mov	r3, r0
3418d040:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418d044:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d048:	2b00      	cmp	r3, #0
3418d04a:	d12d      	bne.n	3418d0a8 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
3418d04c:	2302      	movs	r3, #2
3418d04e:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
3418d050:	687b      	ldr	r3, [r7, #4]
3418d052:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d058:	787a      	ldrb	r2, [r7, #1]
3418d05a:	4618      	mov	r0, r3
3418d05c:	f000 f88d 	bl	3418d17a <XSPI_FormatCommand>
3418d060:	4603      	mov	r3, r0
3418d062:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
3418d064:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
3418d068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d06a:	687b      	ldr	r3, [r7, #4]
3418d06c:	681b      	ldr	r3, [r3, #0]
3418d06e:	f107 0118 	add.w	r1, r7, #24
3418d072:	2264      	movs	r2, #100	@ 0x64
3418d074:	4618      	mov	r0, r3
3418d076:	f7fe fa2b 	bl	3418b4d0 <HAL_XSPI_Command>
3418d07a:	4603      	mov	r3, r0
3418d07c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418d080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d084:	2b00      	cmp	r3, #0
3418d086:	d111      	bne.n	3418d0ac <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3418d088:	2300      	movs	r3, #0
3418d08a:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3418d08c:	2350      	movs	r3, #80	@ 0x50
3418d08e:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
3418d090:	687b      	ldr	r3, [r7, #4]
3418d092:	681b      	ldr	r3, [r3, #0]
3418d094:	f107 0208 	add.w	r2, r7, #8
3418d098:	4611      	mov	r1, r2
3418d09a:	4618      	mov	r0, r3
3418d09c:	f7fe fc48 	bl	3418b930 <HAL_XSPI_MemoryMapped>
3418d0a0:	4603      	mov	r3, r0
3418d0a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
3418d0a6:	e002      	b.n	3418d0ae <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418d0a8:	bf00      	nop
3418d0aa:	e000      	b.n	3418d0ae <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418d0ac:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d0ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d0b2:	2b00      	cmp	r3, #0
3418d0b4:	d004      	beq.n	3418d0c0 <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d0b6:	687b      	ldr	r3, [r7, #4]
3418d0b8:	681b      	ldr	r3, [r3, #0]
3418d0ba:	4618      	mov	r0, r3
3418d0bc:	f7fe fca4 	bl	3418ba08 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418d0c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
3418d0c4:	4618      	mov	r0, r3
3418d0c6:	3768      	adds	r7, #104	@ 0x68
3418d0c8:	46bd      	mov	sp, r7
3418d0ca:	bd80      	pop	{r7, pc}

3418d0cc <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418d0cc:	b580      	push	{r7, lr}
3418d0ce:	b082      	sub	sp, #8
3418d0d0:	af00      	add	r7, sp, #0
3418d0d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418d0d4:	f3bf 8f4f 	dsb	sy
}
3418d0d8:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418d0da:	687b      	ldr	r3, [r7, #4]
3418d0dc:	681b      	ldr	r3, [r3, #0]
3418d0de:	4618      	mov	r0, r3
3418d0e0:	f7fe fc92 	bl	3418ba08 <HAL_XSPI_Abort>
3418d0e4:	4603      	mov	r3, r0
}
3418d0e6:	4618      	mov	r0, r3
3418d0e8:	3708      	adds	r7, #8
3418d0ea:	46bd      	mov	sp, r7
3418d0ec:	bd80      	pop	{r7, pc}

3418d0ee <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3418d0ee:	b480      	push	{r7}
3418d0f0:	b085      	sub	sp, #20
3418d0f2:	af00      	add	r7, sp, #0
3418d0f4:	6078      	str	r0, [r7, #4]
3418d0f6:	460b      	mov	r3, r1
3418d0f8:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3418d0fa:	2300      	movs	r3, #0
3418d0fc:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3418d0fe:	687b      	ldr	r3, [r7, #4]
3418d100:	681b      	ldr	r3, [r3, #0]
3418d102:	681b      	ldr	r3, [r3, #0]
3418d104:	689b      	ldr	r3, [r3, #8]
3418d106:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
3418d10a:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
3418d10c:	78fb      	ldrb	r3, [r7, #3]
3418d10e:	2b00      	cmp	r3, #0
3418d110:	d11e      	bne.n	3418d150 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
3418d112:	68bb      	ldr	r3, [r7, #8]
3418d114:	2b00      	cmp	r3, #0
3418d116:	d103      	bne.n	3418d120 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
3418d118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d11c:	60bb      	str	r3, [r7, #8]
3418d11e:	e008      	b.n	3418d132 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
3418d120:	68bb      	ldr	r3, [r7, #8]
3418d122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418d126:	d102      	bne.n	3418d12e <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
3418d128:	2300      	movs	r3, #0
3418d12a:	60bb      	str	r3, [r7, #8]
3418d12c:	e001      	b.n	3418d132 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
3418d12e:	2301      	movs	r3, #1
3418d130:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
3418d132:	687b      	ldr	r3, [r7, #4]
3418d134:	681b      	ldr	r3, [r3, #0]
3418d136:	681b      	ldr	r3, [r3, #0]
3418d138:	689b      	ldr	r3, [r3, #8]
3418d13a:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
3418d13e:	687b      	ldr	r3, [r7, #4]
3418d140:	681b      	ldr	r3, [r3, #0]
3418d142:	681b      	ldr	r3, [r3, #0]
3418d144:	68ba      	ldr	r2, [r7, #8]
3418d146:	430a      	orrs	r2, r1
3418d148:	609a      	str	r2, [r3, #8]
    break;
3418d14a:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
3418d14c:	7bfb      	ldrb	r3, [r7, #15]
3418d14e:	e000      	b.n	3418d152 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
3418d150:	2301      	movs	r3, #1
}
3418d152:	4618      	mov	r0, r3
3418d154:	3714      	adds	r7, #20
3418d156:	46bd      	mov	sp, r7
3418d158:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d15c:	4770      	bx	lr

3418d15e <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418d15e:	b580      	push	{r7, lr}
3418d160:	b082      	sub	sp, #8
3418d162:	af00      	add	r7, sp, #0
3418d164:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418d166:	687b      	ldr	r3, [r7, #4]
3418d168:	681b      	ldr	r3, [r3, #0]
3418d16a:	4618      	mov	r0, r3
3418d16c:	f7fe fc4c 	bl	3418ba08 <HAL_XSPI_Abort>
3418d170:	4603      	mov	r3, r0
}
3418d172:	4618      	mov	r0, r3
3418d174:	3708      	adds	r7, #8
3418d176:	46bd      	mov	sp, r7
3418d178:	bd80      	pop	{r7, pc}

3418d17a <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
3418d17a:	b480      	push	{r7}
3418d17c:	b085      	sub	sp, #20
3418d17e:	af00      	add	r7, sp, #0
3418d180:	4603      	mov	r3, r0
3418d182:	6039      	str	r1, [r7, #0]
3418d184:	71fb      	strb	r3, [r7, #7]
3418d186:	4613      	mov	r3, r2
3418d188:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
3418d18a:	683b      	ldr	r3, [r7, #0]
3418d18c:	2b10      	cmp	r3, #16
3418d18e:	d114      	bne.n	3418d1ba <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
3418d190:	79bb      	ldrb	r3, [r7, #6]
3418d192:	b29b      	uxth	r3, r3
3418d194:	021b      	lsls	r3, r3, #8
3418d196:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
3418d198:	79fb      	ldrb	r3, [r7, #7]
3418d19a:	2b01      	cmp	r3, #1
3418d19c:	d107      	bne.n	3418d1ae <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
3418d19e:	79bb      	ldrb	r3, [r7, #6]
3418d1a0:	43db      	mvns	r3, r3
3418d1a2:	b2db      	uxtb	r3, r3
3418d1a4:	461a      	mov	r2, r3
3418d1a6:	89fb      	ldrh	r3, [r7, #14]
3418d1a8:	4313      	orrs	r3, r2
3418d1aa:	81fb      	strh	r3, [r7, #14]
3418d1ac:	e007      	b.n	3418d1be <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
3418d1ae:	79bb      	ldrb	r3, [r7, #6]
3418d1b0:	b29a      	uxth	r2, r3
3418d1b2:	89fb      	ldrh	r3, [r7, #14]
3418d1b4:	4313      	orrs	r3, r2
3418d1b6:	81fb      	strh	r3, [r7, #14]
3418d1b8:	e001      	b.n	3418d1be <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
3418d1ba:	79bb      	ldrb	r3, [r7, #6]
3418d1bc:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
3418d1be:	89fb      	ldrh	r3, [r7, #14]
}
3418d1c0:	4618      	mov	r0, r3
3418d1c2:	3714      	adds	r7, #20
3418d1c4:	46bd      	mov	sp, r7
3418d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d1ca:	4770      	bx	lr

3418d1cc <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
3418d1cc:	b580      	push	{r7, lr}
3418d1ce:	b084      	sub	sp, #16
3418d1d0:	af00      	add	r7, sp, #0
3418d1d2:	6078      	str	r0, [r7, #4]
3418d1d4:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d1d6:	687b      	ldr	r3, [r7, #4]
3418d1d8:	681b      	ldr	r3, [r3, #0]
3418d1da:	2264      	movs	r2, #100	@ 0x64
3418d1dc:	6839      	ldr	r1, [r7, #0]
3418d1de:	4618      	mov	r0, r3
3418d1e0:	f7fe fa06 	bl	3418b5f0 <HAL_XSPI_Transmit>
3418d1e4:	4603      	mov	r3, r0
3418d1e6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
3418d1e8:	7bfb      	ldrb	r3, [r7, #15]
}
3418d1ea:	4618      	mov	r0, r3
3418d1ec:	3710      	adds	r7, #16
3418d1ee:	46bd      	mov	sp, r7
3418d1f0:	bd80      	pop	{r7, pc}

3418d1f2 <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
3418d1f2:	b580      	push	{r7, lr}
3418d1f4:	b084      	sub	sp, #16
3418d1f6:	af00      	add	r7, sp, #0
3418d1f8:	6078      	str	r0, [r7, #4]
3418d1fa:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d1fc:	687b      	ldr	r3, [r7, #4]
3418d1fe:	681b      	ldr	r3, [r3, #0]
3418d200:	2264      	movs	r2, #100	@ 0x64
3418d202:	6839      	ldr	r1, [r7, #0]
3418d204:	4618      	mov	r0, r3
3418d206:	f7fe fa66 	bl	3418b6d6 <HAL_XSPI_Receive>
3418d20a:	4603      	mov	r3, r0
3418d20c:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
3418d20e:	7bfb      	ldrb	r3, [r7, #15]
}
3418d210:	4618      	mov	r0, r3
3418d212:	3710      	adds	r7, #16
3418d214:	46bd      	mov	sp, r7
3418d216:	bd80      	pop	{r7, pc}

3418d218 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418d218:	b580      	push	{r7, lr}
3418d21a:	b084      	sub	sp, #16
3418d21c:	af00      	add	r7, sp, #0
3418d21e:	6078      	str	r0, [r7, #4]
3418d220:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
3418d222:	2300      	movs	r3, #0
3418d224:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
3418d226:	683b      	ldr	r3, [r7, #0]
3418d228:	2200      	movs	r2, #0
3418d22a:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
3418d22c:	687b      	ldr	r3, [r7, #4]
3418d22e:	f103 0008 	add.w	r0, r3, #8
3418d232:	2308      	movs	r3, #8
3418d234:	683a      	ldr	r2, [r7, #0]
3418d236:	2100      	movs	r1, #0
3418d238:	f7ff fc0e 	bl	3418ca58 <SAL_XSPI_GetSFDP>
3418d23c:	4603      	mov	r3, r0
3418d23e:	2b00      	cmp	r3, #0
3418d240:	d002      	beq.n	3418d248 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418d242:	2303      	movs	r3, #3
3418d244:	73fb      	strb	r3, [r7, #15]
      goto error;
3418d246:	e01f      	b.n	3418d288 <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
3418d248:	683b      	ldr	r3, [r7, #0]
3418d24a:	681b      	ldr	r3, [r3, #0]
3418d24c:	4619      	mov	r1, r3
3418d24e:	6878      	ldr	r0, [r7, #4]
3418d250:	f001 fc0a 	bl	3418ea68 <CheckSFDP_Signature>
3418d254:	4603      	mov	r3, r0
3418d256:	2b00      	cmp	r3, #0
3418d258:	d002      	beq.n	3418d260 <SFDP_ReadHeader+0x48>
3418d25a:	2b05      	cmp	r3, #5
3418d25c:	d005      	beq.n	3418d26a <SFDP_ReadHeader+0x52>
3418d25e:	e00a      	b.n	3418d276 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
3418d260:	2300      	movs	r3, #0
3418d262:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418d264:	2302      	movs	r3, #2
3418d266:	73bb      	strb	r3, [r7, #14]
    break;
3418d268:	e00a      	b.n	3418d280 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418d26a:	2304      	movs	r3, #4
3418d26c:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
3418d26e:	7bbb      	ldrb	r3, [r7, #14]
3418d270:	3301      	adds	r3, #1
3418d272:	73bb      	strb	r3, [r7, #14]
      break;
3418d274:	e004      	b.n	3418d280 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418d276:	2304      	movs	r3, #4
3418d278:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418d27a:	2302      	movs	r3, #2
3418d27c:	73bb      	strb	r3, [r7, #14]
      break;
3418d27e:	bf00      	nop
    }
  } while(retry_counter < 2u);
3418d280:	7bbb      	ldrb	r3, [r7, #14]
3418d282:	2b01      	cmp	r3, #1
3418d284:	d9cf      	bls.n	3418d226 <SFDP_ReadHeader+0xe>

error:
3418d286:	bf00      	nop
  return retr;
3418d288:	7bfb      	ldrb	r3, [r7, #15]
}
3418d28a:	4618      	mov	r0, r3
3418d28c:	3710      	adds	r7, #16
3418d28e:	46bd      	mov	sp, r7
3418d290:	bd80      	pop	{r7, pc}
	...

3418d294 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418d294:	b590      	push	{r4, r7, lr}
3418d296:	b089      	sub	sp, #36	@ 0x24
3418d298:	af00      	add	r7, sp, #0
3418d29a:	6078      	str	r0, [r7, #4]
3418d29c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418d29e:	2304      	movs	r3, #4
3418d2a0:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
3418d2a2:	4b2a      	ldr	r3, [pc, #168]	@ (3418d34c <SFDP_GetHeader+0xb8>)
3418d2a4:	f107 040c 	add.w	r4, r7, #12
3418d2a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418d2aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
3418d2ae:	2300      	movs	r3, #0
3418d2b0:	77bb      	strb	r3, [r7, #30]
3418d2b2:	e040      	b.n	3418d336 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
3418d2b4:	7fbb      	ldrb	r3, [r7, #30]
3418d2b6:	005b      	lsls	r3, r3, #1
3418d2b8:	3320      	adds	r3, #32
3418d2ba:	443b      	add	r3, r7
3418d2bc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
3418d2c0:	687b      	ldr	r3, [r7, #4]
3418d2c2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
3418d2c6:	687b      	ldr	r3, [r7, #4]
3418d2c8:	f103 0008 	add.w	r0, r3, #8
3418d2cc:	687b      	ldr	r3, [r7, #4]
3418d2ce:	3364      	adds	r3, #100	@ 0x64
3418d2d0:	461a      	mov	r2, r3
3418d2d2:	2100      	movs	r1, #0
3418d2d4:	f7ff fa6e 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
3418d2d8:	7fbb      	ldrb	r3, [r7, #30]
3418d2da:	005b      	lsls	r3, r3, #1
3418d2dc:	3320      	adds	r3, #32
3418d2de:	443b      	add	r3, r7
3418d2e0:	f813 2c13 	ldrb.w	r2, [r3, #-19]
3418d2e4:	687b      	ldr	r3, [r7, #4]
3418d2e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
3418d2ea:	2300      	movs	r3, #0
3418d2ec:	777b      	strb	r3, [r7, #29]
3418d2ee:	e017      	b.n	3418d320 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
3418d2f0:	687b      	ldr	r3, [r7, #4]
3418d2f2:	7f7a      	ldrb	r2, [r7, #29]
3418d2f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
3418d2f8:	6839      	ldr	r1, [r7, #0]
3418d2fa:	6878      	ldr	r0, [r7, #4]
3418d2fc:	f7ff ff8c 	bl	3418d218 <SFDP_ReadHeader>
3418d300:	4603      	mov	r3, r0
3418d302:	2b00      	cmp	r3, #0
3418d304:	d101      	bne.n	3418d30a <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
3418d306:	2300      	movs	r3, #0
3418d308:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
3418d30a:	7fbb      	ldrb	r3, [r7, #30]
3418d30c:	005b      	lsls	r3, r3, #1
3418d30e:	3320      	adds	r3, #32
3418d310:	443b      	add	r3, r7
3418d312:	f813 3c14 	ldrb.w	r3, [r3, #-20]
3418d316:	2b03      	cmp	r3, #3
3418d318:	d909      	bls.n	3418d32e <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
3418d31a:	7f7b      	ldrb	r3, [r7, #29]
3418d31c:	3301      	adds	r3, #1
3418d31e:	777b      	strb	r3, [r7, #29]
3418d320:	7f7b      	ldrb	r3, [r7, #29]
3418d322:	2b01      	cmp	r3, #1
3418d324:	d804      	bhi.n	3418d330 <SFDP_GetHeader+0x9c>
3418d326:	7ffb      	ldrb	r3, [r7, #31]
3418d328:	2b04      	cmp	r3, #4
3418d32a:	d0e1      	beq.n	3418d2f0 <SFDP_GetHeader+0x5c>
3418d32c:	e000      	b.n	3418d330 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
3418d32e:	bf00      	nop
           ; index++)
3418d330:	7fbb      	ldrb	r3, [r7, #30]
3418d332:	3301      	adds	r3, #1
3418d334:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
3418d336:	7fbb      	ldrb	r3, [r7, #30]
3418d338:	2b07      	cmp	r3, #7
3418d33a:	d802      	bhi.n	3418d342 <SFDP_GetHeader+0xae>
3418d33c:	7ffb      	ldrb	r3, [r7, #31]
3418d33e:	2b04      	cmp	r3, #4
3418d340:	d0b8      	beq.n	3418d2b4 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
3418d342:	7ffb      	ldrb	r3, [r7, #31]
}
3418d344:	4618      	mov	r0, r3
3418d346:	3724      	adds	r7, #36	@ 0x24
3418d348:	46bd      	mov	sp, r7
3418d34a:	bd90      	pop	{r4, r7, pc}
3418d34c:	3418ed84 	.word	0x3418ed84

3418d350 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418d350:	b580      	push	{r7, lr}
3418d352:	b088      	sub	sp, #32
3418d354:	af00      	add	r7, sp, #0
3418d356:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418d358:	2300      	movs	r3, #0
3418d35a:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418d35c:	2308      	movs	r3, #8
3418d35e:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
3418d360:	687b      	ldr	r3, [r7, #4]
3418d362:	2200      	movs	r2, #0
3418d364:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
3418d368:	2278      	movs	r2, #120	@ 0x78
3418d36a:	2100      	movs	r1, #0
3418d36c:	485f      	ldr	r0, [pc, #380]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d36e:	f001 fcc3 	bl	3418ecf8 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418d372:	2300      	movs	r3, #0
3418d374:	75fb      	strb	r3, [r7, #23]
3418d376:	e027      	b.n	3418d3c8 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
3418d378:	7dfa      	ldrb	r2, [r7, #23]
3418d37a:	4613      	mov	r3, r2
3418d37c:	005b      	lsls	r3, r3, #1
3418d37e:	4413      	add	r3, r2
3418d380:	009b      	lsls	r3, r3, #2
3418d382:	4a5a      	ldr	r2, [pc, #360]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d384:	4413      	add	r3, r2
3418d386:	461a      	mov	r2, r3
3418d388:	69b9      	ldr	r1, [r7, #24]
3418d38a:	6878      	ldr	r0, [r7, #4]
3418d38c:	f000 ffae 	bl	3418e2ec <sfdp_get_paraminfo>
3418d390:	4603      	mov	r3, r0
3418d392:	77fb      	strb	r3, [r7, #31]
3418d394:	7ffb      	ldrb	r3, [r7, #31]
3418d396:	2b00      	cmp	r3, #0
3418d398:	f040 80a2 	bne.w	3418d4e0 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
3418d39c:	687b      	ldr	r3, [r7, #4]
3418d39e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3418d3a2:	7dfa      	ldrb	r2, [r7, #23]
3418d3a4:	4851      	ldr	r0, [pc, #324]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d3a6:	4613      	mov	r3, r2
3418d3a8:	005b      	lsls	r3, r3, #1
3418d3aa:	4413      	add	r3, r2
3418d3ac:	009b      	lsls	r3, r3, #2
3418d3ae:	4403      	add	r3, r0
3418d3b0:	681b      	ldr	r3, [r3, #0]
3418d3b2:	ea41 0203 	orr.w	r2, r1, r3
3418d3b6:	687b      	ldr	r3, [r7, #4]
3418d3b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418d3bc:	69bb      	ldr	r3, [r7, #24]
3418d3be:	3308      	adds	r3, #8
3418d3c0:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418d3c2:	7dfb      	ldrb	r3, [r7, #23]
3418d3c4:	3301      	adds	r3, #1
3418d3c6:	75fb      	strb	r3, [r7, #23]
3418d3c8:	7dfa      	ldrb	r2, [r7, #23]
3418d3ca:	687b      	ldr	r3, [r7, #4]
3418d3cc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418d3d0:	3301      	adds	r3, #1
3418d3d2:	429a      	cmp	r2, r3
3418d3d4:	d3d0      	bcc.n	3418d378 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418d3d6:	2300      	movs	r3, #0
3418d3d8:	75bb      	strb	r3, [r7, #22]
3418d3da:	e075      	b.n	3418d4c8 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
3418d3dc:	2300      	movs	r3, #0
3418d3de:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
3418d3e0:	7dba      	ldrb	r2, [r7, #22]
3418d3e2:	4942      	ldr	r1, [pc, #264]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d3e4:	4613      	mov	r3, r2
3418d3e6:	005b      	lsls	r3, r3, #1
3418d3e8:	4413      	add	r3, r2
3418d3ea:	009b      	lsls	r3, r3, #2
3418d3ec:	440b      	add	r3, r1
3418d3ee:	3308      	adds	r3, #8
3418d3f0:	781b      	ldrb	r3, [r3, #0]
3418d3f2:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
3418d3f4:	7dba      	ldrb	r2, [r7, #22]
3418d3f6:	493d      	ldr	r1, [pc, #244]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d3f8:	4613      	mov	r3, r2
3418d3fa:	005b      	lsls	r3, r3, #1
3418d3fc:	4413      	add	r3, r2
3418d3fe:	009b      	lsls	r3, r3, #2
3418d400:	440b      	add	r3, r1
3418d402:	681b      	ldr	r3, [r3, #0]
3418d404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418d408:	d029      	beq.n	3418d45e <SFDP_CollectData+0x10e>
3418d40a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418d40e:	d829      	bhi.n	3418d464 <SFDP_CollectData+0x114>
3418d410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418d414:	d01d      	beq.n	3418d452 <SFDP_CollectData+0x102>
3418d416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418d41a:	d823      	bhi.n	3418d464 <SFDP_CollectData+0x114>
3418d41c:	2b80      	cmp	r3, #128	@ 0x80
3418d41e:	d01b      	beq.n	3418d458 <SFDP_CollectData+0x108>
3418d420:	2b80      	cmp	r3, #128	@ 0x80
3418d422:	d81f      	bhi.n	3418d464 <SFDP_CollectData+0x114>
3418d424:	2b08      	cmp	r3, #8
3418d426:	d002      	beq.n	3418d42e <SFDP_CollectData+0xde>
3418d428:	2b40      	cmp	r3, #64	@ 0x40
3418d42a:	d00f      	beq.n	3418d44c <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
3418d42c:	e01a      	b.n	3418d464 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
3418d42e:	7dba      	ldrb	r2, [r7, #22]
3418d430:	492e      	ldr	r1, [pc, #184]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d432:	4613      	mov	r3, r2
3418d434:	005b      	lsls	r3, r3, #1
3418d436:	4413      	add	r3, r2
3418d438:	009b      	lsls	r3, r3, #2
3418d43a:	440b      	add	r3, r1
3418d43c:	3308      	adds	r3, #8
3418d43e:	781b      	ldrb	r3, [r3, #0]
3418d440:	461a      	mov	r2, r3
3418d442:	4b2b      	ldr	r3, [pc, #172]	@ (3418d4f0 <SFDP_CollectData+0x1a0>)
3418d444:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
3418d446:	4b2b      	ldr	r3, [pc, #172]	@ (3418d4f4 <SFDP_CollectData+0x1a4>)
3418d448:	613b      	str	r3, [r7, #16]
      break;
3418d44a:	e00c      	b.n	3418d466 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
3418d44c:	4b2a      	ldr	r3, [pc, #168]	@ (3418d4f8 <SFDP_CollectData+0x1a8>)
3418d44e:	613b      	str	r3, [r7, #16]
      break;
3418d450:	e009      	b.n	3418d466 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
3418d452:	4b2a      	ldr	r3, [pc, #168]	@ (3418d4fc <SFDP_CollectData+0x1ac>)
3418d454:	613b      	str	r3, [r7, #16]
      break;
3418d456:	e006      	b.n	3418d466 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
3418d458:	4b29      	ldr	r3, [pc, #164]	@ (3418d500 <SFDP_CollectData+0x1b0>)
3418d45a:	613b      	str	r3, [r7, #16]
      break;
3418d45c:	e003      	b.n	3418d466 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
3418d45e:	4b29      	ldr	r3, [pc, #164]	@ (3418d504 <SFDP_CollectData+0x1b4>)
3418d460:	613b      	str	r3, [r7, #16]
      break;
3418d462:	e000      	b.n	3418d466 <SFDP_CollectData+0x116>
      break;
3418d464:	bf00      	nop
    }
    if (ptr != NULL)
3418d466:	693b      	ldr	r3, [r7, #16]
3418d468:	2b00      	cmp	r3, #0
3418d46a:	d016      	beq.n	3418d49a <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418d46c:	687b      	ldr	r3, [r7, #4]
3418d46e:	f103 0008 	add.w	r0, r3, #8
3418d472:	7dba      	ldrb	r2, [r7, #22]
3418d474:	491d      	ldr	r1, [pc, #116]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d476:	4613      	mov	r3, r2
3418d478:	005b      	lsls	r3, r3, #1
3418d47a:	4413      	add	r3, r2
3418d47c:	009b      	lsls	r3, r3, #2
3418d47e:	440b      	add	r3, r1
3418d480:	3304      	adds	r3, #4
3418d482:	6819      	ldr	r1, [r3, #0]
3418d484:	68fb      	ldr	r3, [r7, #12]
3418d486:	009b      	lsls	r3, r3, #2
3418d488:	693a      	ldr	r2, [r7, #16]
3418d48a:	f7ff fae5 	bl	3418ca58 <SAL_XSPI_GetSFDP>
3418d48e:	4603      	mov	r3, r0
3418d490:	2b00      	cmp	r3, #0
3418d492:	d002      	beq.n	3418d49a <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418d494:	230c      	movs	r3, #12
3418d496:	77fb      	strb	r3, [r7, #31]
        goto error;
3418d498:	e022      	b.n	3418d4e0 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
3418d49a:	7dba      	ldrb	r2, [r7, #22]
3418d49c:	4913      	ldr	r1, [pc, #76]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d49e:	4613      	mov	r3, r2
3418d4a0:	005b      	lsls	r3, r3, #1
3418d4a2:	4413      	add	r3, r2
3418d4a4:	009b      	lsls	r3, r3, #2
3418d4a6:	440b      	add	r3, r1
3418d4a8:	681b      	ldr	r3, [r3, #0]
3418d4aa:	2b08      	cmp	r3, #8
3418d4ac:	d109      	bne.n	3418d4c2 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
3418d4ae:	4b10      	ldr	r3, [pc, #64]	@ (3418d4f0 <SFDP_CollectData+0x1a0>)
3418d4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d4b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d4b8:	b2db      	uxtb	r3, r3
3418d4ba:	461a      	mov	r2, r3
3418d4bc:	687b      	ldr	r3, [r7, #4]
3418d4be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418d4c2:	7dbb      	ldrb	r3, [r7, #22]
3418d4c4:	3301      	adds	r3, #1
3418d4c6:	75bb      	strb	r3, [r7, #22]
3418d4c8:	7dba      	ldrb	r2, [r7, #22]
3418d4ca:	4908      	ldr	r1, [pc, #32]	@ (3418d4ec <SFDP_CollectData+0x19c>)
3418d4cc:	4613      	mov	r3, r2
3418d4ce:	005b      	lsls	r3, r3, #1
3418d4d0:	4413      	add	r3, r2
3418d4d2:	009b      	lsls	r3, r3, #2
3418d4d4:	440b      	add	r3, r1
3418d4d6:	681b      	ldr	r3, [r3, #0]
3418d4d8:	2b00      	cmp	r3, #0
3418d4da:	f47f af7f 	bne.w	3418d3dc <SFDP_CollectData+0x8c>
    }
  }

error:
3418d4de:	bf00      	nop
  return retr;
3418d4e0:	7ffb      	ldrb	r3, [r7, #31]
}
3418d4e2:	4618      	mov	r0, r3
3418d4e4:	3720      	adds	r7, #32
3418d4e6:	46bd      	mov	sp, r7
3418d4e8:	bd80      	pop	{r7, pc}
3418d4ea:	bf00      	nop
3418d4ec:	341c0144 	.word	0x341c0144
3418d4f0:	341c01bc 	.word	0x341c01bc
3418d4f4:	341c01c0 	.word	0x341c01c0
3418d4f8:	341c021c 	.word	0x341c021c
3418d4fc:	341c023c 	.word	0x341c023c
3418d500:	341c0224 	.word	0x341c0224
3418d504:	341c02ac 	.word	0x341c02ac

3418d508 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418d508:	b580      	push	{r7, lr}
3418d50a:	b086      	sub	sp, #24
3418d50c:	af00      	add	r7, sp, #0
3418d50e:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418d510:	2307      	movs	r3, #7
3418d512:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418d514:	2308      	movs	r3, #8
3418d516:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
3418d518:	2300      	movs	r3, #0
3418d51a:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418d51c:	2300      	movs	r3, #0
3418d51e:	73bb      	strb	r3, [r7, #14]
3418d520:	e02e      	b.n	3418d580 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
3418d522:	4a64      	ldr	r2, [pc, #400]	@ (3418d6b4 <SFDP_MemoryReset+0x1ac>)
3418d524:	6939      	ldr	r1, [r7, #16]
3418d526:	6878      	ldr	r0, [r7, #4]
3418d528:	f000 fee0 	bl	3418e2ec <sfdp_get_paraminfo>
3418d52c:	4603      	mov	r3, r0
3418d52e:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
3418d530:	7dbb      	ldrb	r3, [r7, #22]
3418d532:	2b00      	cmp	r3, #0
3418d534:	d118      	bne.n	3418d568 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
3418d536:	4b5f      	ldr	r3, [pc, #380]	@ (3418d6b4 <SFDP_MemoryReset+0x1ac>)
3418d538:	681b      	ldr	r3, [r3, #0]
3418d53a:	2b08      	cmp	r3, #8
3418d53c:	d114      	bne.n	3418d568 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418d53e:	687b      	ldr	r3, [r7, #4]
3418d540:	f103 0008 	add.w	r0, r3, #8
3418d544:	4b5b      	ldr	r3, [pc, #364]	@ (3418d6b4 <SFDP_MemoryReset+0x1ac>)
3418d546:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
3418d548:	4b5a      	ldr	r3, [pc, #360]	@ (3418d6b4 <SFDP_MemoryReset+0x1ac>)
3418d54a:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418d54c:	009b      	lsls	r3, r3, #2
3418d54e:	4a5a      	ldr	r2, [pc, #360]	@ (3418d6b8 <SFDP_MemoryReset+0x1b0>)
3418d550:	f7ff fa82 	bl	3418ca58 <SAL_XSPI_GetSFDP>
3418d554:	4603      	mov	r3, r0
3418d556:	2b00      	cmp	r3, #0
3418d558:	d002      	beq.n	3418d560 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418d55a:	230c      	movs	r3, #12
3418d55c:	75bb      	strb	r3, [r7, #22]
3418d55e:	e003      	b.n	3418d568 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
3418d560:	2300      	movs	r3, #0
3418d562:	75bb      	strb	r3, [r7, #22]
          find = 1u;
3418d564:	2301      	movs	r3, #1
3418d566:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
3418d568:	7dbb      	ldrb	r3, [r7, #22]
3418d56a:	2b00      	cmp	r3, #0
3418d56c:	d10f      	bne.n	3418d58e <SFDP_MemoryReset+0x86>
3418d56e:	7bfb      	ldrb	r3, [r7, #15]
3418d570:	2b01      	cmp	r3, #1
3418d572:	d00c      	beq.n	3418d58e <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418d574:	693b      	ldr	r3, [r7, #16]
3418d576:	3308      	adds	r3, #8
3418d578:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418d57a:	7bbb      	ldrb	r3, [r7, #14]
3418d57c:	3301      	adds	r3, #1
3418d57e:	73bb      	strb	r3, [r7, #14]
3418d580:	7bba      	ldrb	r2, [r7, #14]
3418d582:	687b      	ldr	r3, [r7, #4]
3418d584:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418d588:	3301      	adds	r3, #1
3418d58a:	429a      	cmp	r2, r3
3418d58c:	d3c9      	bcc.n	3418d522 <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
3418d58e:	7dbb      	ldrb	r3, [r7, #22]
3418d590:	2b00      	cmp	r3, #0
3418d592:	d102      	bne.n	3418d59a <SFDP_MemoryReset+0x92>
3418d594:	7bfb      	ldrb	r3, [r7, #15]
3418d596:	2b00      	cmp	r3, #0
3418d598:	d102      	bne.n	3418d5a0 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418d59a:	230c      	movs	r3, #12
3418d59c:	75bb      	strb	r3, [r7, #22]
    goto error;
3418d59e:	e083      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
3418d5a0:	4b46      	ldr	r3, [pc, #280]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d5a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418d5aa:	b2db      	uxtb	r3, r3
3418d5ac:	2b00      	cmp	r3, #0
3418d5ae:	d102      	bne.n	3418d5b6 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
3418d5b0:	2300      	movs	r3, #0
3418d5b2:	75fb      	strb	r3, [r7, #23]
3418d5b4:	e053      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d5b6:	4b41      	ldr	r3, [pc, #260]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d5bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d5c0:	b2db      	uxtb	r3, r3
3418d5c2:	f003 0301 	and.w	r3, r3, #1
3418d5c6:	b2db      	uxtb	r3, r3
3418d5c8:	2b00      	cmp	r3, #0
3418d5ca:	d002      	beq.n	3418d5d2 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
3418d5cc:	2301      	movs	r3, #1
3418d5ce:	75fb      	strb	r3, [r7, #23]
3418d5d0:	e045      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d5d2:	4b3a      	ldr	r3, [pc, #232]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d5d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d5dc:	b2db      	uxtb	r3, r3
3418d5de:	f003 0302 	and.w	r3, r3, #2
3418d5e2:	b2db      	uxtb	r3, r3
3418d5e4:	2b00      	cmp	r3, #0
3418d5e6:	d002      	beq.n	3418d5ee <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
3418d5e8:	2302      	movs	r3, #2
3418d5ea:	75fb      	strb	r3, [r7, #23]
3418d5ec:	e037      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d5ee:	4b33      	ldr	r3, [pc, #204]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d5f4:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d5f8:	b2db      	uxtb	r3, r3
3418d5fa:	f003 0304 	and.w	r3, r3, #4
3418d5fe:	b2db      	uxtb	r3, r3
3418d600:	2b00      	cmp	r3, #0
3418d602:	d002      	beq.n	3418d60a <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
3418d604:	2303      	movs	r3, #3
3418d606:	75fb      	strb	r3, [r7, #23]
3418d608:	e029      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d60a:	4b2c      	ldr	r3, [pc, #176]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d60c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d610:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d614:	b2db      	uxtb	r3, r3
3418d616:	f003 0308 	and.w	r3, r3, #8
3418d61a:	b2db      	uxtb	r3, r3
3418d61c:	2b00      	cmp	r3, #0
3418d61e:	d002      	beq.n	3418d626 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
3418d620:	2304      	movs	r3, #4
3418d622:	75fb      	strb	r3, [r7, #23]
3418d624:	e01b      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d626:	4b25      	ldr	r3, [pc, #148]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d62c:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d630:	b2db      	uxtb	r3, r3
3418d632:	f003 0310 	and.w	r3, r3, #16
3418d636:	b2db      	uxtb	r3, r3
3418d638:	2b00      	cmp	r3, #0
3418d63a:	d002      	beq.n	3418d642 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
3418d63c:	2305      	movs	r3, #5
3418d63e:	75fb      	strb	r3, [r7, #23]
3418d640:	e00d      	b.n	3418d65e <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418d642:	4b1e      	ldr	r3, [pc, #120]	@ (3418d6bc <SFDP_MemoryReset+0x1b4>)
3418d644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418d648:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418d64c:	b2db      	uxtb	r3, r3
3418d64e:	2b1f      	cmp	r3, #31
3418d650:	d902      	bls.n	3418d658 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418d652:	230f      	movs	r3, #15
3418d654:	75bb      	strb	r3, [r7, #22]
    goto error;
3418d656:	e027      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418d658:	230c      	movs	r3, #12
3418d65a:	75bb      	strb	r3, [r7, #22]
    goto error;
3418d65c:	e024      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_methode)
3418d65e:	7dfb      	ldrb	r3, [r7, #23]
3418d660:	2b05      	cmp	r3, #5
3418d662:	d009      	beq.n	3418d678 <SFDP_MemoryReset+0x170>
3418d664:	2b05      	cmp	r3, #5
3418d666:	dc1b      	bgt.n	3418d6a0 <SFDP_MemoryReset+0x198>
3418d668:	2b00      	cmp	r3, #0
3418d66a:	d01c      	beq.n	3418d6a6 <SFDP_MemoryReset+0x19e>
3418d66c:	2b00      	cmp	r3, #0
3418d66e:	db17      	blt.n	3418d6a0 <SFDP_MemoryReset+0x198>
3418d670:	3b01      	subs	r3, #1
3418d672:	2b03      	cmp	r3, #3
3418d674:	d814      	bhi.n	3418d6a0 <SFDP_MemoryReset+0x198>
3418d676:	e010      	b.n	3418d69a <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
3418d678:	687b      	ldr	r3, [r7, #4]
3418d67a:	f103 0008 	add.w	r0, r3, #8
3418d67e:	2300      	movs	r3, #0
3418d680:	2200      	movs	r2, #0
3418d682:	2166      	movs	r1, #102	@ 0x66
3418d684:	f7ff fb48 	bl	3418cd18 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
3418d688:	687b      	ldr	r3, [r7, #4]
3418d68a:	f103 0008 	add.w	r0, r3, #8
3418d68e:	2300      	movs	r3, #0
3418d690:	2200      	movs	r2, #0
3418d692:	2199      	movs	r1, #153	@ 0x99
3418d694:	f7ff fb40 	bl	3418cd18 <SAL_XSPI_CommandSendData>
    break;
3418d698:	e006      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418d69a:	230f      	movs	r3, #15
3418d69c:	75bb      	strb	r3, [r7, #22]
    break;
3418d69e:	e003      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
3418d6a0:	2301      	movs	r3, #1
3418d6a2:	75bb      	strb	r3, [r7, #22]
    break;
3418d6a4:	e000      	b.n	3418d6a8 <SFDP_MemoryReset+0x1a0>
    break;
3418d6a6:	bf00      	nop
  }
error :
  return retr;
3418d6a8:	7dbb      	ldrb	r3, [r7, #22]
}
3418d6aa:	4618      	mov	r0, r3
3418d6ac:	3718      	adds	r7, #24
3418d6ae:	46bd      	mov	sp, r7
3418d6b0:	bd80      	pop	{r7, pc}
3418d6b2:	bf00      	nop
3418d6b4:	341c0144 	.word	0x341c0144
3418d6b8:	341c01c0 	.word	0x341c01c0
3418d6bc:	341c01bc 	.word	0x341c01bc

3418d6c0 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
3418d6c0:	b5b0      	push	{r4, r5, r7, lr}
3418d6c2:	b08c      	sub	sp, #48	@ 0x30
3418d6c4:	af02      	add	r7, sp, #8
3418d6c6:	6078      	str	r0, [r7, #4]
3418d6c8:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418d6ca:	2300      	movs	r3, #0
3418d6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
3418d6d0:	2300      	movs	r3, #0
3418d6d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418d6d6:	687b      	ldr	r3, [r7, #4]
3418d6d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418d6dc:	f003 0308 	and.w	r3, r3, #8
3418d6e0:	2b00      	cmp	r3, #0
3418d6e2:	d104      	bne.n	3418d6ee <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418d6e4:	2307      	movs	r3, #7
3418d6e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418d6ea:	f000 bd93 	b.w	3418e214 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
3418d6ee:	4bba      	ldr	r3, [pc, #744]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d6f0:	689b      	ldr	r3, [r3, #8]
3418d6f2:	2b00      	cmp	r3, #0
3418d6f4:	db13      	blt.n	3418d71e <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
3418d6f6:	4bb8      	ldr	r3, [pc, #736]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d6f8:	689b      	ldr	r3, [r3, #8]
3418d6fa:	3301      	adds	r3, #1
3418d6fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
3418d6fe:	69bb      	ldr	r3, [r7, #24]
3418d700:	2b00      	cmp	r3, #0
3418d702:	d101      	bne.n	3418d708 <SFDP_BuildGenericDriver+0x48>
    return 32U;
3418d704:	2320      	movs	r3, #32
3418d706:	e003      	b.n	3418d710 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
3418d708:	69bb      	ldr	r3, [r7, #24]
3418d70a:	fab3 f383 	clz	r3, r3
3418d70e:	b2db      	uxtb	r3, r3
3418d710:	f1c3 031f 	rsb	r3, r3, #31
3418d714:	b2da      	uxtb	r2, r3
3418d716:	687b      	ldr	r3, [r7, #4]
3418d718:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
3418d71c:	e005      	b.n	3418d72a <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
3418d71e:	4bae      	ldr	r3, [pc, #696]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d720:	689b      	ldr	r3, [r3, #8]
3418d722:	b2da      	uxtb	r2, r3
3418d724:	687b      	ldr	r3, [r7, #4]
3418d726:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
3418d72a:	687b      	ldr	r3, [r7, #4]
3418d72c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418d730:	3b03      	subs	r3, #3
3418d732:	b2da      	uxtb	r2, r3
3418d734:	687b      	ldr	r3, [r7, #4]
3418d736:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
3418d73a:	687b      	ldr	r3, [r7, #4]
3418d73c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418d740:	3b01      	subs	r3, #1
3418d742:	b2db      	uxtb	r3, r3
3418d744:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
3418d746:	687b      	ldr	r3, [r7, #4]
3418d748:	3308      	adds	r3, #8
3418d74a:	f107 0213 	add.w	r2, r7, #19
3418d74e:	2104      	movs	r1, #4
3418d750:	4618      	mov	r0, r3
3418d752:	f7ff f82f 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
3418d756:	4ba0      	ldr	r3, [pc, #640]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d758:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
3418d75c:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418d760:	b2db      	uxtb	r3, r3
3418d762:	461a      	mov	r2, r3
3418d764:	2301      	movs	r3, #1
3418d766:	fa03 f202 	lsl.w	r2, r3, r2
3418d76a:	687b      	ldr	r3, [r7, #4]
3418d76c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
3418d76e:	687b      	ldr	r3, [r7, #4]
3418d770:	2202      	movs	r2, #2
3418d772:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
3418d776:	4b98      	ldr	r3, [pc, #608]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d778:	f893 2020 	ldrb.w	r2, [r3, #32]
3418d77c:	687b      	ldr	r3, [r7, #4]
3418d77e:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
3418d782:	4b95      	ldr	r3, [pc, #596]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d784:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
3418d788:	687b      	ldr	r3, [r7, #4]
3418d78a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3418d78e:	4b92      	ldr	r3, [pc, #584]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d790:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
3418d794:	687b      	ldr	r3, [r7, #4]
3418d796:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
3418d79a:	4b8f      	ldr	r3, [pc, #572]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d79c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
3418d7a0:	687b      	ldr	r3, [r7, #4]
3418d7a2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
3418d7a6:	4b8c      	ldr	r3, [pc, #560]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7a8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
3418d7ac:	687b      	ldr	r3, [r7, #4]
3418d7ae:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
3418d7b2:	4b89      	ldr	r3, [pc, #548]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7b4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
3418d7b8:	687b      	ldr	r3, [r7, #4]
3418d7ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3418d7be:	4b86      	ldr	r3, [pc, #536]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7c0:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
3418d7c4:	687b      	ldr	r3, [r7, #4]
3418d7c6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
3418d7ca:	4b83      	ldr	r3, [pc, #524]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7cc:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
3418d7d0:	687b      	ldr	r3, [r7, #4]
3418d7d2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
3418d7d6:	687b      	ldr	r3, [r7, #4]
3418d7d8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
3418d7dc:	2b00      	cmp	r3, #0
3418d7de:	d01d      	beq.n	3418d81c <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
3418d7e0:	4b7d      	ldr	r3, [pc, #500]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418d7e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418d7ea:	b2db      	uxtb	r3, r3
3418d7ec:	461a      	mov	r2, r3
3418d7ee:	4b7a      	ldr	r3, [pc, #488]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418d7f2:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418d7f6:	b2db      	uxtb	r3, r3
3418d7f8:	3301      	adds	r3, #1
3418d7fa:	fb02 f303 	mul.w	r3, r2, r3
3418d7fe:	4a76      	ldr	r2, [pc, #472]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d800:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
3418d804:	f3c2 0241 	ubfx	r2, r2, #1, #2
3418d808:	b2d2      	uxtb	r2, r2
3418d80a:	4611      	mov	r1, r2
3418d80c:	4a73      	ldr	r2, [pc, #460]	@ (3418d9dc <SFDP_BuildGenericDriver+0x31c>)
3418d80e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418d812:	fb03 f202 	mul.w	r2, r3, r2
3418d816:	687b      	ldr	r3, [r7, #4]
3418d818:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
3418d81c:	687b      	ldr	r3, [r7, #4]
3418d81e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
3418d822:	2b00      	cmp	r3, #0
3418d824:	d01e      	beq.n	3418d864 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
3418d826:	4b6c      	ldr	r3, [pc, #432]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418d82c:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418d830:	b2db      	uxtb	r3, r3
3418d832:	461a      	mov	r2, r3
3418d834:	4b68      	ldr	r3, [pc, #416]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d836:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
3418d83a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418d83e:	b2db      	uxtb	r3, r3
3418d840:	3301      	adds	r3, #1
3418d842:	fb02 f303 	mul.w	r3, r2, r3
3418d846:	4a64      	ldr	r2, [pc, #400]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d848:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
3418d84c:	f3c2 0201 	ubfx	r2, r2, #0, #2
3418d850:	b2d2      	uxtb	r2, r2
3418d852:	4611      	mov	r1, r2
3418d854:	4a61      	ldr	r2, [pc, #388]	@ (3418d9dc <SFDP_BuildGenericDriver+0x31c>)
3418d856:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418d85a:	fb03 f202 	mul.w	r2, r3, r2
3418d85e:	687b      	ldr	r3, [r7, #4]
3418d860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
3418d864:	687b      	ldr	r3, [r7, #4]
3418d866:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
3418d86a:	2b00      	cmp	r3, #0
3418d86c:	d01d      	beq.n	3418d8aa <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3418d86e:	4b5a      	ldr	r3, [pc, #360]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418d874:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418d878:	b2db      	uxtb	r3, r3
3418d87a:	461a      	mov	r2, r3
3418d87c:	4b56      	ldr	r3, [pc, #344]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d87e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3418d882:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418d886:	b2db      	uxtb	r3, r3
3418d888:	3301      	adds	r3, #1
3418d88a:	fb02 f303 	mul.w	r3, r2, r3
3418d88e:	4a52      	ldr	r2, [pc, #328]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d890:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
3418d892:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3418d896:	b2d2      	uxtb	r2, r2
3418d898:	4611      	mov	r1, r2
3418d89a:	4a50      	ldr	r2, [pc, #320]	@ (3418d9dc <SFDP_BuildGenericDriver+0x31c>)
3418d89c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418d8a0:	fb03 f202 	mul.w	r2, r3, r2
3418d8a4:	687b      	ldr	r3, [r7, #4]
3418d8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
3418d8aa:	687b      	ldr	r3, [r7, #4]
3418d8ac:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
3418d8b0:	2b00      	cmp	r3, #0
3418d8b2:	d01e      	beq.n	3418d8f2 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
3418d8b4:	4b48      	ldr	r3, [pc, #288]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418d8ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418d8be:	b2db      	uxtb	r3, r3
3418d8c0:	461a      	mov	r2, r3
3418d8c2:	4b45      	ldr	r3, [pc, #276]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d8c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
3418d8c8:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418d8cc:	b2db      	uxtb	r3, r3
3418d8ce:	3301      	adds	r3, #1
3418d8d0:	fb02 f303 	mul.w	r3, r2, r3
3418d8d4:	4a40      	ldr	r2, [pc, #256]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d8d6:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
3418d8da:	f3c2 1281 	ubfx	r2, r2, #6, #2
3418d8de:	b2d2      	uxtb	r2, r2
3418d8e0:	4611      	mov	r1, r2
3418d8e2:	4a3e      	ldr	r2, [pc, #248]	@ (3418d9dc <SFDP_BuildGenericDriver+0x31c>)
3418d8e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418d8e8:	fb03 f202 	mul.w	r2, r3, r2
3418d8ec:	687b      	ldr	r3, [r7, #4]
3418d8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
3418d8f2:	4b39      	ldr	r3, [pc, #228]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418d8f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418d8fc:	b2db      	uxtb	r3, r3
3418d8fe:	461a      	mov	r2, r3
3418d900:	4b35      	ldr	r3, [pc, #212]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d902:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
3418d906:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418d90a:	b2db      	uxtb	r3, r3
3418d90c:	3301      	adds	r3, #1
3418d90e:	fb02 f303 	mul.w	r3, r2, r3
3418d912:	4a31      	ldr	r2, [pc, #196]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d914:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
3418d918:	f3c2 1241 	ubfx	r2, r2, #5, #2
3418d91c:	b2d2      	uxtb	r2, r2
3418d91e:	4611      	mov	r1, r2
3418d920:	4a2f      	ldr	r2, [pc, #188]	@ (3418d9e0 <SFDP_BuildGenericDriver+0x320>)
3418d922:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
3418d926:	fb03 f202 	mul.w	r2, r3, r2
3418d92a:	687b      	ldr	r3, [r7, #4]
3418d92c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
3418d930:	687b      	ldr	r3, [r7, #4]
3418d932:	2205      	movs	r2, #5
3418d934:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418d938:	687b      	ldr	r3, [r7, #4]
3418d93a:	2205      	movs	r2, #5
3418d93c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
3418d940:	4b25      	ldr	r3, [pc, #148]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d942:	791b      	ldrb	r3, [r3, #4]
3418d944:	f003 0310 	and.w	r3, r3, #16
3418d948:	b2db      	uxtb	r3, r3
3418d94a:	2b00      	cmp	r3, #0
3418d94c:	d104      	bne.n	3418d958 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
3418d94e:	687b      	ldr	r3, [r7, #4]
3418d950:	2250      	movs	r2, #80	@ 0x50
3418d952:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418d956:	e003      	b.n	3418d960 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
3418d958:	687b      	ldr	r3, [r7, #4]
3418d95a:	2206      	movs	r2, #6
3418d95c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
3418d960:	4b1d      	ldr	r3, [pc, #116]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418d966:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418d96a:	b2db      	uxtb	r3, r3
3418d96c:	f003 0301 	and.w	r3, r3, #1
3418d970:	2b00      	cmp	r3, #0
3418d972:	d004      	beq.n	3418d97e <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418d974:	687b      	ldr	r3, [r7, #4]
3418d976:	2206      	movs	r2, #6
3418d978:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418d97c:	e046      	b.n	3418da0c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3418d97e:	4b16      	ldr	r3, [pc, #88]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418d984:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418d988:	b2db      	uxtb	r3, r3
3418d98a:	f003 0302 	and.w	r3, r3, #2
3418d98e:	2b00      	cmp	r3, #0
3418d990:	d004      	beq.n	3418d99c <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418d992:	687b      	ldr	r3, [r7, #4]
3418d994:	2206      	movs	r2, #6
3418d996:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418d99a:	e037      	b.n	3418da0c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
3418d99c:	4b0e      	ldr	r3, [pc, #56]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d99e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418d9a2:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418d9a6:	b2db      	uxtb	r3, r3
3418d9a8:	f003 0304 	and.w	r3, r3, #4
3418d9ac:	2b00      	cmp	r3, #0
3418d9ae:	d004      	beq.n	3418d9ba <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
3418d9b0:	687b      	ldr	r3, [r7, #4]
3418d9b2:	2250      	movs	r2, #80	@ 0x50
3418d9b4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418d9b8:	e028      	b.n	3418da0c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
3418d9ba:	4b07      	ldr	r3, [pc, #28]	@ (3418d9d8 <SFDP_BuildGenericDriver+0x318>)
3418d9bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418d9c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418d9c4:	b2db      	uxtb	r3, r3
3418d9c6:	f003 0308 	and.w	r3, r3, #8
3418d9ca:	2b00      	cmp	r3, #0
3418d9cc:	d00a      	beq.n	3418d9e4 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418d9ce:	687b      	ldr	r3, [r7, #4]
3418d9d0:	2206      	movs	r2, #6
3418d9d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418d9d6:	e019      	b.n	3418da0c <SFDP_BuildGenericDriver+0x34c>
3418d9d8:	341c01bc 	.word	0x341c01bc
3418d9dc:	3418edb0 	.word	0x3418edb0
3418d9e0:	3418edb8 	.word	0x3418edb8
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
3418d9e4:	4b66      	ldr	r3, [pc, #408]	@ (3418db80 <SFDP_BuildGenericDriver+0x4c0>)
3418d9e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418d9ea:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418d9ee:	b2db      	uxtb	r3, r3
3418d9f0:	f003 0310 	and.w	r3, r3, #16
3418d9f4:	2b00      	cmp	r3, #0
3418d9f6:	d004      	beq.n	3418da02 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418d9f8:	687b      	ldr	r3, [r7, #4]
3418d9fa:	2206      	movs	r2, #6
3418d9fc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418da00:	e004      	b.n	3418da0c <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
3418da02:	230a      	movs	r3, #10
3418da04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418da08:	f000 bc04 	b.w	3418e214 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418da0c:	687b      	ldr	r3, [r7, #4]
3418da0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418da12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418da16:	2b00      	cmp	r3, #0
3418da18:	d078      	beq.n	3418db0c <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
3418da1a:	4b5a      	ldr	r3, [pc, #360]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da1c:	7cdb      	ldrb	r3, [r3, #19]
3418da1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418da22:	b2db      	uxtb	r3, r3
3418da24:	2b00      	cmp	r3, #0
3418da26:	d034      	beq.n	3418da92 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
3418da28:	4b56      	ldr	r3, [pc, #344]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da2a:	7c5a      	ldrb	r2, [r3, #17]
3418da2c:	687b      	ldr	r3, [r7, #4]
3418da2e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418da32:	4b54      	ldr	r3, [pc, #336]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da34:	7cdb      	ldrb	r3, [r3, #19]
3418da36:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418da3a:	b2db      	uxtb	r3, r3
3418da3c:	461a      	mov	r2, r3
3418da3e:	687b      	ldr	r3, [r7, #4]
3418da40:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
3418da44:	4b4f      	ldr	r3, [pc, #316]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da46:	7cdb      	ldrb	r3, [r3, #19]
3418da48:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418da4c:	b2db      	uxtb	r3, r3
3418da4e:	461a      	mov	r2, r3
3418da50:	687b      	ldr	r3, [r7, #4]
3418da52:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418da56:	4b4b      	ldr	r3, [pc, #300]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da58:	7cdb      	ldrb	r3, [r3, #19]
3418da5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418da5e:	b2db      	uxtb	r3, r3
3418da60:	461a      	mov	r2, r3
3418da62:	687b      	ldr	r3, [r7, #4]
3418da64:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418da68:	4b46      	ldr	r3, [pc, #280]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da6a:	7cdb      	ldrb	r3, [r3, #19]
3418da6c:	f003 0310 	and.w	r3, r3, #16
3418da70:	b2db      	uxtb	r3, r3
3418da72:	2b00      	cmp	r3, #0
3418da74:	d009      	beq.n	3418da8a <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
3418da76:	4b43      	ldr	r3, [pc, #268]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da78:	7cdb      	ldrb	r3, [r3, #19]
3418da7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418da7e:	b2db      	uxtb	r3, r3
3418da80:	461a      	mov	r2, r3
3418da82:	687b      	ldr	r3, [r7, #4]
3418da84:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
3418da88:	e003      	b.n	3418da92 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
3418da8a:	687b      	ldr	r3, [r7, #4]
3418da8c:	22ff      	movs	r2, #255	@ 0xff
3418da8e:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
3418da92:	4b3c      	ldr	r3, [pc, #240]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418da94:	7ddb      	ldrb	r3, [r3, #23]
3418da96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418da9a:	b2db      	uxtb	r3, r3
3418da9c:	2b00      	cmp	r3, #0
3418da9e:	d073      	beq.n	3418db88 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
3418daa0:	4b38      	ldr	r3, [pc, #224]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418daa2:	7d5a      	ldrb	r2, [r3, #21]
3418daa4:	687b      	ldr	r3, [r7, #4]
3418daa6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418daaa:	4b36      	ldr	r3, [pc, #216]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418daac:	7ddb      	ldrb	r3, [r3, #23]
3418daae:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418dab2:	b2db      	uxtb	r3, r3
3418dab4:	461a      	mov	r2, r3
3418dab6:	687b      	ldr	r3, [r7, #4]
3418dab8:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
3418dabc:	4b31      	ldr	r3, [pc, #196]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418dabe:	7ddb      	ldrb	r3, [r3, #23]
3418dac0:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418dac4:	b2db      	uxtb	r3, r3
3418dac6:	461a      	mov	r2, r3
3418dac8:	687b      	ldr	r3, [r7, #4]
3418daca:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418dace:	4b2d      	ldr	r3, [pc, #180]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418dad0:	7ddb      	ldrb	r3, [r3, #23]
3418dad2:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418dad6:	b2db      	uxtb	r3, r3
3418dad8:	461a      	mov	r2, r3
3418dada:	687b      	ldr	r3, [r7, #4]
3418dadc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418dae0:	4b28      	ldr	r3, [pc, #160]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418dae2:	7cdb      	ldrb	r3, [r3, #19]
3418dae4:	f003 0310 	and.w	r3, r3, #16
3418dae8:	b2db      	uxtb	r3, r3
3418daea:	2b00      	cmp	r3, #0
3418daec:	d009      	beq.n	3418db02 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
3418daee:	4b25      	ldr	r3, [pc, #148]	@ (3418db84 <SFDP_BuildGenericDriver+0x4c4>)
3418daf0:	7ddb      	ldrb	r3, [r3, #23]
3418daf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418daf6:	b2db      	uxtb	r3, r3
3418daf8:	461a      	mov	r2, r3
3418dafa:	687b      	ldr	r3, [r7, #4]
3418dafc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418db00:	e042      	b.n	3418db88 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
3418db02:	687b      	ldr	r3, [r7, #4]
3418db04:	22ff      	movs	r2, #255	@ 0xff
3418db06:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418db0a:	e03d      	b.n	3418db88 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
3418db0c:	687b      	ldr	r3, [r7, #4]
3418db0e:	2201      	movs	r2, #1
3418db10:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
3418db14:	687b      	ldr	r3, [r7, #4]
3418db16:	2200      	movs	r2, #0
3418db18:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
3418db1c:	4b18      	ldr	r3, [pc, #96]	@ (3418db80 <SFDP_BuildGenericDriver+0x4c0>)
3418db1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418db22:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418db26:	b2db      	uxtb	r3, r3
3418db28:	f003 0301 	and.w	r3, r3, #1
3418db2c:	2b00      	cmp	r3, #0
3418db2e:	d00c      	beq.n	3418db4a <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418db30:	687b      	ldr	r3, [r7, #4]
3418db32:	2205      	movs	r2, #5
3418db34:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
3418db38:	687b      	ldr	r3, [r7, #4]
3418db3a:	2200      	movs	r2, #0
3418db3c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418db40:	687b      	ldr	r3, [r7, #4]
3418db42:	2200      	movs	r2, #0
3418db44:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418db48:	e01e      	b.n	3418db88 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
3418db4a:	4b0d      	ldr	r3, [pc, #52]	@ (3418db80 <SFDP_BuildGenericDriver+0x4c0>)
3418db4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418db50:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418db54:	b2db      	uxtb	r3, r3
3418db56:	f003 0302 	and.w	r3, r3, #2
3418db5a:	2b00      	cmp	r3, #0
3418db5c:	d00c      	beq.n	3418db78 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
3418db5e:	687b      	ldr	r3, [r7, #4]
3418db60:	2270      	movs	r2, #112	@ 0x70
3418db62:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
3418db66:	687b      	ldr	r3, [r7, #4]
3418db68:	2207      	movs	r2, #7
3418db6a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418db6e:	687b      	ldr	r3, [r7, #4]
3418db70:	2200      	movs	r2, #0
3418db72:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418db76:	e007      	b.n	3418db88 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
3418db78:	2309      	movs	r3, #9
3418db7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418db7e:	e349      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
3418db80:	341c01bc 	.word	0x341c01bc
3418db84:	341c023c 	.word	0x341c023c
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
3418db88:	687b      	ldr	r3, [r7, #4]
3418db8a:	2203      	movs	r2, #3
3418db8c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418db90:	687b      	ldr	r3, [r7, #4]
3418db92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418db96:	2b08      	cmp	r3, #8
3418db98:	f040 80a9 	bne.w	3418dcee <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
3418db9c:	2300      	movs	r3, #0
3418db9e:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418dba0:	687b      	ldr	r3, [r7, #4]
3418dba2:	2200      	movs	r2, #0
3418dba4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
3418dba8:	687b      	ldr	r3, [r7, #4]
3418dbaa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418dbae:	2b00      	cmp	r3, #0
3418dbb0:	d04c      	beq.n	3418dc4c <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
3418dbb2:	4bb4      	ldr	r3, [pc, #720]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbb4:	7c5b      	ldrb	r3, [r3, #17]
3418dbb6:	2b00      	cmp	r3, #0
3418dbb8:	d015      	beq.n	3418dbe6 <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
3418dbba:	4bb2      	ldr	r3, [pc, #712]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbbc:	7c1b      	ldrb	r3, [r3, #16]
3418dbbe:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418dbc2:	b2db      	uxtb	r3, r3
3418dbc4:	461a      	mov	r2, r3
3418dbc6:	4baf      	ldr	r3, [pc, #700]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbc8:	7c1b      	ldrb	r3, [r3, #16]
3418dbca:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418dbce:	b2db      	uxtb	r3, r3
3418dbd0:	4413      	add	r3, r2
3418dbd2:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
3418dbd4:	4bab      	ldr	r3, [pc, #684]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbd6:	7c5a      	ldrb	r2, [r3, #17]
3418dbd8:	687b      	ldr	r3, [r7, #4]
3418dbda:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
3418dbde:	687b      	ldr	r3, [r7, #4]
3418dbe0:	2201      	movs	r2, #1
3418dbe2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
3418dbe6:	4ba7      	ldr	r3, [pc, #668]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbe8:	7cdb      	ldrb	r3, [r3, #19]
3418dbea:	2b00      	cmp	r3, #0
3418dbec:	d015      	beq.n	3418dc1a <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
3418dbee:	4ba5      	ldr	r3, [pc, #660]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbf0:	7c9b      	ldrb	r3, [r3, #18]
3418dbf2:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418dbf6:	b2db      	uxtb	r3, r3
3418dbf8:	461a      	mov	r2, r3
3418dbfa:	4ba2      	ldr	r3, [pc, #648]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dbfc:	7c9b      	ldrb	r3, [r3, #18]
3418dbfe:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418dc02:	b2db      	uxtb	r3, r3
3418dc04:	4413      	add	r3, r2
3418dc06:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
3418dc08:	4b9e      	ldr	r3, [pc, #632]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc0a:	7cda      	ldrb	r2, [r3, #19]
3418dc0c:	687b      	ldr	r3, [r7, #4]
3418dc0e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
3418dc12:	687b      	ldr	r3, [r7, #4]
3418dc14:	2202      	movs	r2, #2
3418dc16:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
3418dc1a:	4b9a      	ldr	r3, [pc, #616]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc1c:	7d1b      	ldrb	r3, [r3, #20]
3418dc1e:	f003 0301 	and.w	r3, r3, #1
3418dc22:	b2db      	uxtb	r3, r3
3418dc24:	2b00      	cmp	r3, #0
3418dc26:	d011      	beq.n	3418dc4c <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
3418dc28:	4b96      	ldr	r3, [pc, #600]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc2a:	7e9b      	ldrb	r3, [r3, #26]
3418dc2c:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418dc30:	b2db      	uxtb	r3, r3
3418dc32:	461a      	mov	r2, r3
3418dc34:	4b93      	ldr	r3, [pc, #588]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc36:	7e9b      	ldrb	r3, [r3, #26]
3418dc38:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418dc3c:	b2db      	uxtb	r3, r3
3418dc3e:	4413      	add	r3, r2
3418dc40:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
3418dc42:	4b90      	ldr	r3, [pc, #576]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc44:	7eda      	ldrb	r2, [r3, #27]
3418dc46:	687b      	ldr	r3, [r7, #4]
3418dc48:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
3418dc4c:	687b      	ldr	r3, [r7, #4]
3418dc4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418dc52:	2b01      	cmp	r3, #1
3418dc54:	d92c      	bls.n	3418dcb0 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
3418dc56:	4b8b      	ldr	r3, [pc, #556]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc58:	7d1b      	ldrb	r3, [r3, #20]
3418dc5a:	f003 0310 	and.w	r3, r3, #16
3418dc5e:	b2db      	uxtb	r3, r3
3418dc60:	2b00      	cmp	r3, #0
3418dc62:	d020      	beq.n	3418dca6 <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
3418dc64:	4b87      	ldr	r3, [pc, #540]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc66:	7f9b      	ldrb	r3, [r3, #30]
3418dc68:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418dc6c:	b2db      	uxtb	r3, r3
3418dc6e:	461a      	mov	r2, r3
3418dc70:	4b84      	ldr	r3, [pc, #528]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc72:	7f9b      	ldrb	r3, [r3, #30]
3418dc74:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418dc78:	b2db      	uxtb	r3, r3
3418dc7a:	4413      	add	r3, r2
3418dc7c:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3418dc7e:	4b81      	ldr	r3, [pc, #516]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dc80:	7fda      	ldrb	r2, [r3, #31]
3418dc82:	687b      	ldr	r3, [r7, #4]
3418dc84:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
3418dc88:	687b      	ldr	r3, [r7, #4]
3418dc8a:	2204      	movs	r2, #4
3418dc8c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
3418dc90:	6878      	ldr	r0, [r7, #4]
3418dc92:	f000 feab 	bl	3418e9ec <JEDEC_Basic_Manage4S4S4SEnableSequence>
3418dc96:	4603      	mov	r3, r0
3418dc98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
3418dc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418dca0:	2b00      	cmp	r3, #0
3418dca2:	f040 82b4 	bne.w	3418e20e <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
3418dca6:	697b      	ldr	r3, [r7, #20]
3418dca8:	b2da      	uxtb	r2, r3
3418dcaa:	687b      	ldr	r3, [r7, #4]
3418dcac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418dcb0:	687b      	ldr	r3, [r7, #4]
3418dcb2:	f103 0008 	add.w	r0, r3, #8
3418dcb6:	687b      	ldr	r3, [r7, #4]
3418dcb8:	3364      	adds	r3, #100	@ 0x64
3418dcba:	461a      	mov	r2, r3
3418dcbc:	2100      	movs	r1, #0
3418dcbe:	f7fe fd79 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418dcc2:	4603      	mov	r3, r0
3418dcc4:	2b00      	cmp	r3, #0
3418dcc6:	d003      	beq.n	3418dcd0 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418dcc8:	230c      	movs	r3, #12
3418dcca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418dcce:	e2a1      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
3418dcd0:	687b      	ldr	r3, [r7, #4]
3418dcd2:	3308      	adds	r3, #8
3418dcd4:	f107 0214 	add.w	r2, r7, #20
3418dcd8:	2101      	movs	r1, #1
3418dcda:	4618      	mov	r0, r3
3418dcdc:	f7fe fd6a 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418dce0:	4603      	mov	r3, r0
3418dce2:	2b00      	cmp	r3, #0
3418dce4:	d003      	beq.n	3418dcee <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418dce6:	230c      	movs	r3, #12
3418dce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418dcec:	e292      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR))
3418dcee:	687b      	ldr	r3, [r7, #4]
3418dcf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418dcf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418dcf8:	2b00      	cmp	r3, #0
3418dcfa:	d069      	beq.n	3418ddd0 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
3418dcfc:	687b      	ldr	r3, [r7, #4]
3418dcfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418dd02:	2b03      	cmp	r3, #3
3418dd04:	d164      	bne.n	3418ddd0 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
3418dd06:	687b      	ldr	r3, [r7, #4]
3418dd08:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418dd0c:	2b09      	cmp	r3, #9
3418dd0e:	d103      	bne.n	3418dd18 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
3418dd10:	2301      	movs	r3, #1
3418dd12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
3418dd16:	e03a      	b.n	3418dd8e <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
3418dd18:	6878      	ldr	r0, [r7, #4]
3418dd1a:	f000 fbdb 	bl	3418e4d4 <sfpd_enter_octal_mode>
3418dd1e:	4603      	mov	r3, r0
3418dd20:	2b00      	cmp	r3, #0
3418dd22:	d134      	bne.n	3418dd8e <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
3418dd24:	2301      	movs	r3, #1
3418dd26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
3418dd2a:	687b      	ldr	r3, [r7, #4]
3418dd2c:	2209      	movs	r2, #9
3418dd2e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418dd32:	687b      	ldr	r3, [r7, #4]
3418dd34:	f103 0008 	add.w	r0, r3, #8
3418dd38:	687b      	ldr	r3, [r7, #4]
3418dd3a:	3364      	adds	r3, #100	@ 0x64
3418dd3c:	461a      	mov	r2, r3
3418dd3e:	2100      	movs	r1, #0
3418dd40:	f7fe fd38 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418dd44:	4603      	mov	r3, r0
3418dd46:	2b00      	cmp	r3, #0
3418dd48:	d003      	beq.n	3418dd52 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418dd4a:	230c      	movs	r3, #12
3418dd4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418dd50:	e260      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }

        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
3418dd52:	687b      	ldr	r3, [r7, #4]
3418dd54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418dd58:	2bfd      	cmp	r3, #253	@ 0xfd
3418dd5a:	d109      	bne.n	3418dd70 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
3418dd5c:	2314      	movs	r3, #20
3418dd5e:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418dd60:	687b      	ldr	r3, [r7, #4]
3418dd62:	3308      	adds	r3, #8
3418dd64:	f107 0214 	add.w	r2, r7, #20
3418dd68:	2101      	movs	r1, #1
3418dd6a:	4618      	mov	r0, r3
3418dd6c:	f7fe fd22 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
3418dd70:	687b      	ldr	r3, [r7, #4]
3418dd72:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418dd76:	2bfe      	cmp	r3, #254	@ 0xfe
3418dd78:	d109      	bne.n	3418dd8e <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3418dd7a:	2308      	movs	r3, #8
3418dd7c:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418dd7e:	687b      	ldr	r3, [r7, #4]
3418dd80:	3308      	adds	r3, #8
3418dd82:	f107 0214 	add.w	r2, r7, #20
3418dd86:	2101      	movs	r1, #1
3418dd88:	4618      	mov	r0, r3
3418dd8a:	f7fe fd13 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418dd8e:	687b      	ldr	r3, [r7, #4]
3418dd90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418dd94:	f003 0308 	and.w	r3, r3, #8
3418dd98:	2b00      	cmp	r3, #0
3418dd9a:	d019      	beq.n	3418ddd0 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
3418dd9c:	4b39      	ldr	r3, [pc, #228]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dd9e:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418dda0:	2b10      	cmp	r3, #16
3418dda2:	d915      	bls.n	3418ddd0 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
3418dda4:	4b37      	ldr	r3, [pc, #220]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418dda6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418ddaa:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418ddae:	b2db      	uxtb	r3, r3
3418ddb0:	2b01      	cmp	r3, #1
3418ddb2:	d903      	bls.n	3418ddbc <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418ddb4:	230f      	movs	r3, #15
3418ddb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418ddba:	e22b      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
3418ddbc:	4b31      	ldr	r3, [pc, #196]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418ddbe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418ddc2:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418ddc6:	b2db      	uxtb	r3, r3
3418ddc8:	461a      	mov	r2, r3
3418ddca:	687b      	ldr	r3, [r7, #4]
3418ddcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
3418ddd0:	687b      	ldr	r3, [r7, #4]
3418ddd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ddd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418ddda:	2b00      	cmp	r3, #0
3418dddc:	f000 813c 	beq.w	3418e058 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
3418dde0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
3418dde4:	2b00      	cmp	r3, #0
3418dde6:	f040 809e 	bne.w	3418df26 <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
3418ddea:	4b26      	ldr	r3, [pc, #152]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418ddec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418ddf0:	f003 0301 	and.w	r3, r3, #1
3418ddf4:	2b00      	cmp	r3, #0
3418ddf6:	d01c      	beq.n	3418de32 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
3418ddf8:	687b      	ldr	r3, [r7, #4]
3418ddfa:	f103 0008 	add.w	r0, r3, #8
3418ddfe:	2300      	movs	r3, #0
3418de00:	2200      	movs	r2, #0
3418de02:	21b7      	movs	r1, #183	@ 0xb7
3418de04:	f7fe ff88 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418de08:	4603      	mov	r3, r0
3418de0a:	2b00      	cmp	r3, #0
3418de0c:	d003      	beq.n	3418de16 <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418de0e:	230c      	movs	r3, #12
3418de10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418de14:	e1fe      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418de16:	687b      	ldr	r3, [r7, #4]
3418de18:	3308      	adds	r3, #8
3418de1a:	2200      	movs	r2, #0
3418de1c:	2102      	movs	r1, #2
3418de1e:	4618      	mov	r0, r3
3418de20:	f7fe fcc8 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418de24:	4603      	mov	r3, r0
3418de26:	2b00      	cmp	r3, #0
3418de28:	d06b      	beq.n	3418df02 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418de2a:	230c      	movs	r3, #12
3418de2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418de30:	e1f0      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
3418de32:	4b14      	ldr	r3, [pc, #80]	@ (3418de84 <SFDP_BuildGenericDriver+0x7c4>)
3418de34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418de38:	f003 0302 	and.w	r3, r3, #2
3418de3c:	2b00      	cmp	r3, #0
3418de3e:	d04e      	beq.n	3418dede <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418de40:	687b      	ldr	r3, [r7, #4]
3418de42:	f103 0008 	add.w	r0, r3, #8
3418de46:	687b      	ldr	r3, [r7, #4]
3418de48:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418de4c:	2300      	movs	r3, #0
3418de4e:	2200      	movs	r2, #0
3418de50:	f7fe ff62 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418de54:	4603      	mov	r3, r0
3418de56:	2b00      	cmp	r3, #0
3418de58:	d003      	beq.n	3418de62 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418de5a:	230c      	movs	r3, #12
3418de5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418de60:	e1d8      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418de62:	687b      	ldr	r3, [r7, #4]
3418de64:	f103 0008 	add.w	r0, r3, #8
3418de68:	687b      	ldr	r3, [r7, #4]
3418de6a:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418de6e:	687b      	ldr	r3, [r7, #4]
3418de70:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418de74:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418de76:	687b      	ldr	r3, [r7, #4]
3418de78:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418de7c:	2b00      	cmp	r3, #0
3418de7e:	d103      	bne.n	3418de88 <SFDP_BuildGenericDriver+0x7c8>
3418de80:	2301      	movs	r3, #1
3418de82:	e002      	b.n	3418de8a <SFDP_BuildGenericDriver+0x7ca>
3418de84:	341c01bc 	.word	0x341c01bc
3418de88:	2300      	movs	r3, #0
3418de8a:	687a      	ldr	r2, [r7, #4]
3418de8c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418de90:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418de92:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418de94:	687b      	ldr	r3, [r7, #4]
3418de96:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418de9a:	461c      	mov	r4, r3
3418de9c:	2301      	movs	r3, #1
3418de9e:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418dea0:	b2db      	uxtb	r3, r3
3418dea2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418dea6:	9401      	str	r4, [sp, #4]
3418dea8:	9300      	str	r3, [sp, #0]
3418deaa:	4613      	mov	r3, r2
3418deac:	462a      	mov	r2, r5
3418deae:	f7ff f828 	bl	3418cf02 <SAL_XSPI_CheckStatusRegister>
3418deb2:	4603      	mov	r3, r0
3418deb4:	2b00      	cmp	r3, #0
3418deb6:	d003      	beq.n	3418dec0 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418deb8:	230c      	movs	r3, #12
3418deba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418debe:	e1a9      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
3418dec0:	687b      	ldr	r3, [r7, #4]
3418dec2:	f103 0008 	add.w	r0, r3, #8
3418dec6:	2300      	movs	r3, #0
3418dec8:	2200      	movs	r2, #0
3418deca:	21b7      	movs	r1, #183	@ 0xb7
3418decc:	f7fe ff24 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418ded0:	4603      	mov	r3, r0
3418ded2:	2b00      	cmp	r3, #0
3418ded4:	d015      	beq.n	3418df02 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ded6:	230c      	movs	r3, #12
3418ded8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418dedc:	e19a      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
3418dede:	4ba3      	ldr	r3, [pc, #652]	@ (3418e16c <SFDP_BuildGenericDriver+0xaac>)
3418dee0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418dee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418dee8:	2b00      	cmp	r3, #0
3418deea:	d10a      	bne.n	3418df02 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
3418deec:	4b9f      	ldr	r3, [pc, #636]	@ (3418e16c <SFDP_BuildGenericDriver+0xaac>)
3418deee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418def2:	f003 0320 	and.w	r3, r3, #32
3418def6:	2b00      	cmp	r3, #0
3418def8:	d103      	bne.n	3418df02 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418defa:	230f      	movs	r3, #15
3418defc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418df00:	e188      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418df02:	687b      	ldr	r3, [r7, #4]
3418df04:	3308      	adds	r3, #8
3418df06:	2200      	movs	r2, #0
3418df08:	2102      	movs	r1, #2
3418df0a:	4618      	mov	r0, r3
3418df0c:	f7fe fc52 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418df10:	4603      	mov	r3, r0
3418df12:	2b00      	cmp	r3, #0
3418df14:	d003      	beq.n	3418df1e <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418df16:	230c      	movs	r3, #12
3418df18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418df1c:	e17a      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
      }

      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
3418df1e:	687b      	ldr	r3, [r7, #4]
3418df20:	2213      	movs	r2, #19
3418df22:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
3418df26:	687b      	ldr	r3, [r7, #4]
3418df28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418df2c:	2b03      	cmp	r3, #3
3418df2e:	d12e      	bne.n	3418df8e <SFDP_BuildGenericDriver+0x8ce>
3418df30:	687b      	ldr	r3, [r7, #4]
3418df32:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418df36:	2b00      	cmp	r3, #0
3418df38:	d129      	bne.n	3418df8e <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
3418df3a:	4b8d      	ldr	r3, [pc, #564]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418df3c:	789b      	ldrb	r3, [r3, #2]
3418df3e:	f003 0320 	and.w	r3, r3, #32
3418df42:	b2db      	uxtb	r3, r3
3418df44:	2b00      	cmp	r3, #0
3418df46:	d022      	beq.n	3418df8e <SFDP_BuildGenericDriver+0x8ce>
3418df48:	4b89      	ldr	r3, [pc, #548]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418df4a:	78db      	ldrb	r3, [r3, #3]
3418df4c:	f003 0301 	and.w	r3, r3, #1
3418df50:	b2db      	uxtb	r3, r3
3418df52:	2b00      	cmp	r3, #0
3418df54:	d01b      	beq.n	3418df8e <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
3418df56:	687b      	ldr	r3, [r7, #4]
3418df58:	2207      	movs	r2, #7
3418df5a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418df5e:	687b      	ldr	r3, [r7, #4]
3418df60:	f103 0008 	add.w	r0, r3, #8
3418df64:	687b      	ldr	r3, [r7, #4]
3418df66:	3364      	adds	r3, #100	@ 0x64
3418df68:	461a      	mov	r2, r3
3418df6a:	2100      	movs	r1, #0
3418df6c:	f7fe fc22 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
3418df70:	4603      	mov	r3, r0
3418df72:	2b00      	cmp	r3, #0
3418df74:	d003      	beq.n	3418df7e <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418df76:	230c      	movs	r3, #12
3418df78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418df7c:	e14a      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
3418df7e:	687b      	ldr	r3, [r7, #4]
3418df80:	22cc      	movs	r2, #204	@ 0xcc
3418df82:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
3418df86:	687b      	ldr	r3, [r7, #4]
3418df88:	228e      	movs	r2, #142	@ 0x8e
3418df8a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418df8e:	687b      	ldr	r3, [r7, #4]
3418df90:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418df94:	2b09      	cmp	r3, #9
3418df96:	d004      	beq.n	3418dfa2 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
3418df98:	687b      	ldr	r3, [r7, #4]
3418df9a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418df9e:	2b00      	cmp	r3, #0
3418dfa0:	d120      	bne.n	3418dfe4 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
3418dfa2:	4b73      	ldr	r3, [pc, #460]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418dfa4:	781b      	ldrb	r3, [r3, #0]
3418dfa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418dfaa:	b2db      	uxtb	r3, r3
3418dfac:	2b00      	cmp	r3, #0
3418dfae:	d003      	beq.n	3418dfb8 <SFDP_BuildGenericDriver+0x8f8>
3418dfb0:	687b      	ldr	r3, [r7, #4]
3418dfb2:	2212      	movs	r2, #18
3418dfb4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
3418dfb8:	4b6d      	ldr	r3, [pc, #436]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418dfba:	781b      	ldrb	r3, [r3, #0]
3418dfbc:	f003 0301 	and.w	r3, r3, #1
3418dfc0:	b2db      	uxtb	r3, r3
3418dfc2:	2b00      	cmp	r3, #0
3418dfc4:	d003      	beq.n	3418dfce <SFDP_BuildGenericDriver+0x90e>
3418dfc6:	687b      	ldr	r3, [r7, #4]
3418dfc8:	2213      	movs	r2, #19
3418dfca:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
3418dfce:	4b68      	ldr	r3, [pc, #416]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418dfd0:	781b      	ldrb	r3, [r3, #0]
3418dfd2:	f003 0302 	and.w	r3, r3, #2
3418dfd6:	b2db      	uxtb	r3, r3
3418dfd8:	2b00      	cmp	r3, #0
3418dfda:	d003      	beq.n	3418dfe4 <SFDP_BuildGenericDriver+0x924>
3418dfdc:	687b      	ldr	r3, [r7, #4]
3418dfde:	220c      	movs	r2, #12
3418dfe0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
3418dfe4:	687b      	ldr	r3, [r7, #4]
3418dfe6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418dfea:	2b08      	cmp	r3, #8
3418dfec:	d120      	bne.n	3418e030 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
3418dfee:	4b60      	ldr	r3, [pc, #384]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418dff0:	78db      	ldrb	r3, [r3, #3]
3418dff2:	f003 0301 	and.w	r3, r3, #1
3418dff6:	b2db      	uxtb	r3, r3
3418dff8:	2b00      	cmp	r3, #0
3418dffa:	d003      	beq.n	3418e004 <SFDP_BuildGenericDriver+0x944>
3418dffc:	687b      	ldr	r3, [r7, #4]
3418dffe:	2202      	movs	r2, #2
3418e000:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
3418e004:	4b5a      	ldr	r3, [pc, #360]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e006:	789b      	ldrb	r3, [r3, #2]
3418e008:	f003 0320 	and.w	r3, r3, #32
3418e00c:	b2db      	uxtb	r3, r3
3418e00e:	2b00      	cmp	r3, #0
3418e010:	d003      	beq.n	3418e01a <SFDP_BuildGenericDriver+0x95a>
3418e012:	687b      	ldr	r3, [r7, #4]
3418e014:	22cc      	movs	r2, #204	@ 0xcc
3418e016:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
3418e01a:	4b55      	ldr	r3, [pc, #340]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e01c:	789b      	ldrb	r3, [r3, #2]
3418e01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e022:	b2db      	uxtb	r3, r3
3418e024:	2b00      	cmp	r3, #0
3418e026:	d003      	beq.n	3418e030 <SFDP_BuildGenericDriver+0x970>
3418e028:	687b      	ldr	r3, [r7, #4]
3418e02a:	22fd      	movs	r2, #253	@ 0xfd
3418e02c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
3418e030:	4b4f      	ldr	r3, [pc, #316]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e032:	791a      	ldrb	r2, [r3, #4]
3418e034:	687b      	ldr	r3, [r7, #4]
3418e036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
3418e03a:	4b4d      	ldr	r3, [pc, #308]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e03c:	795a      	ldrb	r2, [r3, #5]
3418e03e:	687b      	ldr	r3, [r7, #4]
3418e040:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
3418e044:	4b4a      	ldr	r3, [pc, #296]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e046:	799a      	ldrb	r2, [r3, #6]
3418e048:	687b      	ldr	r3, [r7, #4]
3418e04a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
3418e04e:	4b48      	ldr	r3, [pc, #288]	@ (3418e170 <SFDP_BuildGenericDriver+0xab0>)
3418e050:	79da      	ldrb	r2, [r3, #7]
3418e052:	687b      	ldr	r3, [r7, #4]
3418e054:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
3418e058:	687b      	ldr	r3, [r7, #4]
3418e05a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e05e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418e062:	2b00      	cmp	r3, #0
3418e064:	f000 80d5 	beq.w	3418e212 <SFDP_BuildGenericDriver+0xb52>
      &&
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418e068:	687b      	ldr	r3, [r7, #4]
3418e06a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
3418e06e:	2b09      	cmp	r3, #9
3418e070:	d005      	beq.n	3418e07e <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418e072:	687b      	ldr	r3, [r7, #4]
3418e074:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e078:	2b08      	cmp	r3, #8
3418e07a:	f040 80ca 	bne.w	3418e212 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
3418e07e:	2300      	movs	r3, #0
3418e080:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
3418e082:	4b3c      	ldr	r3, [pc, #240]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e084:	785b      	ldrb	r3, [r3, #1]
3418e086:	2b00      	cmp	r3, #0
3418e088:	d004      	beq.n	3418e094 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
3418e08a:	4b3a      	ldr	r3, [pc, #232]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e08c:	785a      	ldrb	r2, [r3, #1]
3418e08e:	687b      	ldr	r3, [r7, #4]
3418e090:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
3418e094:	4b37      	ldr	r3, [pc, #220]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e096:	7d1b      	ldrb	r3, [r3, #20]
3418e098:	f003 031f 	and.w	r3, r3, #31
3418e09c:	b2db      	uxtb	r3, r3
3418e09e:	2b00      	cmp	r3, #0
3418e0a0:	d00d      	beq.n	3418e0be <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
3418e0a2:	4b34      	ldr	r3, [pc, #208]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e0a4:	7d1b      	ldrb	r3, [r3, #20]
3418e0a6:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e0aa:	b2db      	uxtb	r3, r3
3418e0ac:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418e0ae:	687b      	ldr	r3, [r7, #4]
3418e0b0:	3308      	adds	r3, #8
3418e0b2:	f107 0214 	add.w	r2, r7, #20
3418e0b6:	2101      	movs	r1, #1
3418e0b8:	4618      	mov	r0, r3
3418e0ba:	f7fe fb7b 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
3418e0be:	4b2b      	ldr	r3, [pc, #172]	@ (3418e16c <SFDP_BuildGenericDriver+0xaac>)
3418e0c0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418e0c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418e0c8:	b2db      	uxtb	r3, r3
3418e0ca:	4618      	mov	r0, r3
3418e0cc:	f000 f8e8 	bl	3418e2a0 <sfdp_getfrequencevalue>
3418e0d0:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
3418e0d2:	687b      	ldr	r3, [r7, #4]
3418e0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418e0d6:	69fa      	ldr	r2, [r7, #28]
3418e0d8:	429a      	cmp	r2, r3
3418e0da:	d902      	bls.n	3418e0e2 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
3418e0dc:	687b      	ldr	r3, [r7, #4]
3418e0de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418e0e0:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
3418e0e2:	687b      	ldr	r3, [r7, #4]
3418e0e4:	f103 0008 	add.w	r0, r3, #8
3418e0e8:	687b      	ldr	r3, [r7, #4]
3418e0ea:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3418e0ec:	f107 030c 	add.w	r3, r7, #12
3418e0f0:	69fa      	ldr	r2, [r7, #28]
3418e0f2:	f7fe faed 	bl	3418c6d0 <SAL_XSPI_SetClock>
3418e0f6:	4603      	mov	r3, r0
3418e0f8:	2b00      	cmp	r3, #0
3418e0fa:	d003      	beq.n	3418e104 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
3418e0fc:	230d      	movs	r3, #13
3418e0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418e102:	e087      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
3418e104:	683b      	ldr	r3, [r7, #0]
3418e106:	2201      	movs	r2, #1
3418e108:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
3418e10a:	68fb      	ldr	r3, [r7, #12]
3418e10c:	4a1a      	ldr	r2, [pc, #104]	@ (3418e178 <SFDP_BuildGenericDriver+0xab8>)
3418e10e:	4293      	cmp	r3, r2
3418e110:	d913      	bls.n	3418e13a <SFDP_BuildGenericDriver+0xa7a>
3418e112:	4b18      	ldr	r3, [pc, #96]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e114:	899b      	ldrh	r3, [r3, #12]
3418e116:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
3418e11a:	b29b      	uxth	r3, r3
3418e11c:	2b00      	cmp	r3, #0
3418e11e:	d00c      	beq.n	3418e13a <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
3418e120:	4b14      	ldr	r3, [pc, #80]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e122:	899b      	ldrh	r3, [r3, #12]
3418e124:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418e128:	b2db      	uxtb	r3, r3
3418e12a:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
3418e12c:	4b11      	ldr	r3, [pc, #68]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e12e:	7b1b      	ldrb	r3, [r3, #12]
3418e130:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418e134:	b2db      	uxtb	r3, r3
3418e136:	623b      	str	r3, [r7, #32]
3418e138:	e046      	b.n	3418e1c8 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
3418e13a:	68fb      	ldr	r3, [r7, #12]
3418e13c:	4a0f      	ldr	r2, [pc, #60]	@ (3418e17c <SFDP_BuildGenericDriver+0xabc>)
3418e13e:	4293      	cmp	r3, r2
3418e140:	d91e      	bls.n	3418e180 <SFDP_BuildGenericDriver+0xac0>
3418e142:	4b0c      	ldr	r3, [pc, #48]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e144:	7cdb      	ldrb	r3, [r3, #19]
3418e146:	f023 0307 	bic.w	r3, r3, #7
3418e14a:	b2db      	uxtb	r3, r3
3418e14c:	2b00      	cmp	r3, #0
3418e14e:	d017      	beq.n	3418e180 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
3418e150:	4b08      	ldr	r3, [pc, #32]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e152:	7cdb      	ldrb	r3, [r3, #19]
3418e154:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418e158:	b2db      	uxtb	r3, r3
3418e15a:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
3418e15c:	4b05      	ldr	r3, [pc, #20]	@ (3418e174 <SFDP_BuildGenericDriver+0xab4>)
3418e15e:	8a5b      	ldrh	r3, [r3, #18]
3418e160:	f3c3 1384 	ubfx	r3, r3, #6, #5
3418e164:	b2db      	uxtb	r3, r3
3418e166:	623b      	str	r3, [r7, #32]
3418e168:	e02e      	b.n	3418e1c8 <SFDP_BuildGenericDriver+0xb08>
3418e16a:	bf00      	nop
3418e16c:	341c01bc 	.word	0x341c01bc
3418e170:	341c021c 	.word	0x341c021c
3418e174:	341c0224 	.word	0x341c0224
3418e178:	0bebc1ff 	.word	0x0bebc1ff
3418e17c:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
3418e180:	68fb      	ldr	r3, [r7, #12]
3418e182:	4a27      	ldr	r2, [pc, #156]	@ (3418e220 <SFDP_BuildGenericDriver+0xb60>)
3418e184:	4293      	cmp	r3, r2
3418e186:	d913      	bls.n	3418e1b0 <SFDP_BuildGenericDriver+0xaf0>
3418e188:	4b26      	ldr	r3, [pc, #152]	@ (3418e224 <SFDP_BuildGenericDriver+0xb64>)
3418e18a:	7c9b      	ldrb	r3, [r3, #18]
3418e18c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
3418e190:	b2db      	uxtb	r3, r3
3418e192:	2b00      	cmp	r3, #0
3418e194:	d00c      	beq.n	3418e1b0 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
3418e196:	4b23      	ldr	r3, [pc, #140]	@ (3418e224 <SFDP_BuildGenericDriver+0xb64>)
3418e198:	7c9b      	ldrb	r3, [r3, #18]
3418e19a:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418e19e:	b2db      	uxtb	r3, r3
3418e1a0:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
3418e1a2:	4b20      	ldr	r3, [pc, #128]	@ (3418e224 <SFDP_BuildGenericDriver+0xb64>)
3418e1a4:	691b      	ldr	r3, [r3, #16]
3418e1a6:	f3c3 3304 	ubfx	r3, r3, #12, #5
3418e1aa:	b2db      	uxtb	r3, r3
3418e1ac:	623b      	str	r3, [r7, #32]
3418e1ae:	e00b      	b.n	3418e1c8 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
3418e1b0:	4b1c      	ldr	r3, [pc, #112]	@ (3418e224 <SFDP_BuildGenericDriver+0xb64>)
3418e1b2:	8a1b      	ldrh	r3, [r3, #16]
3418e1b4:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418e1b8:	b2db      	uxtb	r3, r3
3418e1ba:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
3418e1bc:	4b19      	ldr	r3, [pc, #100]	@ (3418e224 <SFDP_BuildGenericDriver+0xb64>)
3418e1be:	7c1b      	ldrb	r3, [r3, #16]
3418e1c0:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418e1c4:	b2db      	uxtb	r3, r3
3418e1c6:	623b      	str	r3, [r7, #32]
    }

    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418e1c8:	687b      	ldr	r3, [r7, #4]
3418e1ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e1ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418e1d2:	2b00      	cmp	r3, #0
3418e1d4:	d017      	beq.n	3418e206 <SFDP_BuildGenericDriver+0xb46>
        && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
3418e1d6:	4b14      	ldr	r3, [pc, #80]	@ (3418e228 <SFDP_BuildGenericDriver+0xb68>)
3418e1d8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e1dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418e1e0:	b2db      	uxtb	r3, r3
3418e1e2:	2b00      	cmp	r3, #0
3418e1e4:	d00f      	beq.n	3418e206 <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418e1e6:	6a39      	ldr	r1, [r7, #32]
3418e1e8:	6878      	ldr	r0, [r7, #4]
3418e1ea:	f000 fa61 	bl	3418e6b0 <sfpd_set_dummycycle>
3418e1ee:	4603      	mov	r3, r0
3418e1f0:	2b00      	cmp	r3, #0
3418e1f2:	d10f      	bne.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418e1f4:	687b      	ldr	r3, [r7, #4]
3418e1f6:	3308      	adds	r3, #8
3418e1f8:	f107 0214 	add.w	r2, r7, #20
3418e1fc:	2101      	movs	r1, #1
3418e1fe:	4618      	mov	r0, r3
3418e200:	f7fe fad8 	bl	3418c7b4 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418e204:	e006      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
3418e206:	230e      	movs	r3, #14
3418e208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418e20c:	e002      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
          goto error;
3418e20e:	bf00      	nop
3418e210:	e000      	b.n	3418e214 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
3418e212:	bf00      	nop
  return retr;
3418e214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418e218:	4618      	mov	r0, r3
3418e21a:	3728      	adds	r7, #40	@ 0x28
3418e21c:	46bd      	mov	sp, r7
3418e21e:	bdb0      	pop	{r4, r5, r7, pc}
3418e220:	07ed6b3f 	.word	0x07ed6b3f
3418e224:	341c0224 	.word	0x341c0224
3418e228:	341c023c 	.word	0x341c023c

3418e22c <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
3418e22c:	b5b0      	push	{r4, r5, r7, lr}
3418e22e:	b086      	sub	sp, #24
3418e230:	af02      	add	r7, sp, #8
3418e232:	6078      	str	r0, [r7, #4]
3418e234:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
3418e236:	23fb      	movs	r3, #251	@ 0xfb
3418e238:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
3418e23a:	687b      	ldr	r3, [r7, #4]
3418e23c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3418e240:	2b00      	cmp	r3, #0
3418e242:	d026      	beq.n	3418e292 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418e244:	687b      	ldr	r3, [r7, #4]
3418e246:	f103 0008 	add.w	r0, r3, #8
3418e24a:	687b      	ldr	r3, [r7, #4]
3418e24c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
3418e250:	687b      	ldr	r3, [r7, #4]
3418e252:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418e256:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418e258:	687b      	ldr	r3, [r7, #4]
3418e25a:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
3418e25e:	461a      	mov	r2, r3
3418e260:	687b      	ldr	r3, [r7, #4]
3418e262:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418e266:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418e26a:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418e26c:	687b      	ldr	r3, [r7, #4]
3418e26e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418e272:	461a      	mov	r2, r3
3418e274:	2301      	movs	r3, #1
3418e276:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418e278:	b2db      	uxtb	r3, r3
3418e27a:	683a      	ldr	r2, [r7, #0]
3418e27c:	9201      	str	r2, [sp, #4]
3418e27e:	9300      	str	r3, [sp, #0]
3418e280:	4623      	mov	r3, r4
3418e282:	462a      	mov	r2, r5
3418e284:	f7fe fe3d 	bl	3418cf02 <SAL_XSPI_CheckStatusRegister>
3418e288:	4603      	mov	r3, r0
3418e28a:	2b00      	cmp	r3, #0
3418e28c:	d101      	bne.n	3418e292 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418e28e:	2300      	movs	r3, #0
3418e290:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
3418e292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418e296:	4618      	mov	r0, r3
3418e298:	3710      	adds	r7, #16
3418e29a:	46bd      	mov	sp, r7
3418e29c:	bdb0      	pop	{r4, r5, r7, pc}
	...

3418e2a0 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
3418e2a0:	b4b0      	push	{r4, r5, r7}
3418e2a2:	b08b      	sub	sp, #44	@ 0x2c
3418e2a4:	af00      	add	r7, sp, #0
3418e2a6:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
3418e2a8:	4b0e      	ldr	r3, [pc, #56]	@ (3418e2e4 <sfdp_getfrequencevalue+0x44>)
3418e2aa:	f107 040c 	add.w	r4, r7, #12
3418e2ae:	461d      	mov	r5, r3
3418e2b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418e2b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418e2b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
3418e2b8:	c403      	stmia	r4!, {r0, r1}
3418e2ba:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
3418e2bc:	687b      	ldr	r3, [r7, #4]
3418e2be:	2b09      	cmp	r3, #9
3418e2c0:	d80a      	bhi.n	3418e2d8 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
3418e2c2:	687b      	ldr	r3, [r7, #4]
3418e2c4:	005b      	lsls	r3, r3, #1
3418e2c6:	3328      	adds	r3, #40	@ 0x28
3418e2c8:	443b      	add	r3, r7
3418e2ca:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
3418e2ce:	461a      	mov	r2, r3
3418e2d0:	4b05      	ldr	r3, [pc, #20]	@ (3418e2e8 <sfdp_getfrequencevalue+0x48>)
3418e2d2:	fb02 f303 	mul.w	r3, r2, r3
3418e2d6:	e000      	b.n	3418e2da <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
3418e2d8:	2300      	movs	r3, #0
}
3418e2da:	4618      	mov	r0, r3
3418e2dc:	372c      	adds	r7, #44	@ 0x2c
3418e2de:	46bd      	mov	sp, r7
3418e2e0:	bcb0      	pop	{r4, r5, r7}
3418e2e2:	4770      	bx	lr
3418e2e4:	3418ed94 	.word	0x3418ed94
3418e2e8:	000f4240 	.word	0x000f4240

3418e2ec <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
3418e2ec:	b580      	push	{r7, lr}
3418e2ee:	b088      	sub	sp, #32
3418e2f0:	af00      	add	r7, sp, #0
3418e2f2:	60f8      	str	r0, [r7, #12]
3418e2f4:	60b9      	str	r1, [r7, #8]
3418e2f6:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418e2f8:	2300      	movs	r3, #0
3418e2fa:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
3418e2fc:	f107 0314 	add.w	r3, r7, #20
3418e300:	2200      	movs	r2, #0
3418e302:	601a      	str	r2, [r3, #0]
3418e304:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress,
3418e306:	68fb      	ldr	r3, [r7, #12]
3418e308:	f103 0008 	add.w	r0, r3, #8
3418e30c:	f107 0214 	add.w	r2, r7, #20
3418e310:	2308      	movs	r3, #8
3418e312:	68b9      	ldr	r1, [r7, #8]
3418e314:	f7fe fba0 	bl	3418ca58 <SAL_XSPI_GetSFDP>
3418e318:	4603      	mov	r3, r0
3418e31a:	2b00      	cmp	r3, #0
3418e31c:	d002      	beq.n	3418e324 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418e31e:	2303      	movs	r3, #3
3418e320:	77fb      	strb	r3, [r7, #31]
    goto error;
3418e322:	e0d1      	b.n	3418e4c8 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
3418e324:	687b      	ldr	r3, [r7, #4]
3418e326:	2200      	movs	r2, #0
3418e328:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
3418e32a:	7dfa      	ldrb	r2, [r7, #23]
3418e32c:	687b      	ldr	r3, [r7, #4]
3418e32e:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418e330:	7ebb      	ldrb	r3, [r7, #26]
3418e332:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
3418e334:	7e7b      	ldrb	r3, [r7, #25]
3418e336:	021b      	lsls	r3, r3, #8
3418e338:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
3418e33a:	7e3a      	ldrb	r2, [r7, #24]
3418e33c:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418e33e:	687b      	ldr	r3, [r7, #4]
3418e340:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
3418e342:	7efb      	ldrb	r3, [r7, #27]
3418e344:	2b00      	cmp	r3, #0
3418e346:	d010      	beq.n	3418e36a <sfdp_get_paraminfo+0x7e>
3418e348:	7efb      	ldrb	r3, [r7, #27]
3418e34a:	b25b      	sxtb	r3, r3
3418e34c:	2b00      	cmp	r3, #0
3418e34e:	db0c      	blt.n	3418e36a <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418e350:	7efb      	ldrb	r3, [r7, #27]
3418e352:	f003 0301 	and.w	r3, r3, #1
3418e356:	2b00      	cmp	r3, #0
3418e358:	d003      	beq.n	3418e362 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
3418e35a:	687b      	ldr	r3, [r7, #4]
3418e35c:	2201      	movs	r2, #1
3418e35e:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418e360:	e0b2      	b.n	3418e4c8 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
3418e362:	687b      	ldr	r3, [r7, #4]
3418e364:	2202      	movs	r2, #2
3418e366:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418e368:	e0ae      	b.n	3418e4c8 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
3418e36a:	7d3b      	ldrb	r3, [r7, #20]
3418e36c:	f003 0301 	and.w	r3, r3, #1
3418e370:	2b00      	cmp	r3, #0
3418e372:	d102      	bne.n	3418e37a <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
3418e374:	687b      	ldr	r3, [r7, #4]
3418e376:	2204      	movs	r2, #4
3418e378:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
3418e37a:	7efb      	ldrb	r3, [r7, #27]
3418e37c:	2bff      	cmp	r3, #255	@ 0xff
3418e37e:	f040 80a2 	bne.w	3418e4c6 <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
3418e382:	7d3b      	ldrb	r3, [r7, #20]
3418e384:	2b0f      	cmp	r3, #15
3418e386:	dc4b      	bgt.n	3418e420 <sfdp_get_paraminfo+0x134>
3418e388:	2b00      	cmp	r3, #0
3418e38a:	da23      	bge.n	3418e3d4 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
3418e38c:	e09a      	b.n	3418e4c4 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
3418e38e:	3b81      	subs	r3, #129	@ 0x81
3418e390:	2b0d      	cmp	r3, #13
3418e392:	f200 8097 	bhi.w	3418e4c4 <sfdp_get_paraminfo+0x1d8>
3418e396:	a201      	add	r2, pc, #4	@ (adr r2, 3418e39c <sfdp_get_paraminfo+0xb0>)
3418e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e39c:	3418e441 	.word	0x3418e441
3418e3a0:	3418e4c5 	.word	0x3418e4c5
3418e3a4:	3418e4c5 	.word	0x3418e4c5
3418e3a8:	3418e451 	.word	0x3418e451
3418e3ac:	3418e4c5 	.word	0x3418e4c5
3418e3b0:	3418e4c5 	.word	0x3418e4c5
3418e3b4:	3418e46b 	.word	0x3418e46b
3418e3b8:	3418e475 	.word	0x3418e475
3418e3bc:	3418e4c5 	.word	0x3418e4c5
3418e3c0:	3418e4c5 	.word	0x3418e4c5
3418e3c4:	3418e493 	.word	0x3418e493
3418e3c8:	3418e4c5 	.word	0x3418e4c5
3418e3cc:	3418e4a7 	.word	0x3418e4a7
3418e3d0:	3418e4b1 	.word	0x3418e4b1
3418e3d4:	2b0f      	cmp	r3, #15
3418e3d6:	d875      	bhi.n	3418e4c4 <sfdp_get_paraminfo+0x1d8>
3418e3d8:	a201      	add	r2, pc, #4	@ (adr r2, 3418e3e0 <sfdp_get_paraminfo+0xf4>)
3418e3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e3de:	bf00      	nop
3418e3e0:	3418e42b 	.word	0x3418e42b
3418e3e4:	3418e4c5 	.word	0x3418e4c5
3418e3e8:	3418e4c5 	.word	0x3418e4c5
3418e3ec:	3418e449 	.word	0x3418e449
3418e3f0:	3418e4c5 	.word	0x3418e4c5
3418e3f4:	3418e459 	.word	0x3418e459
3418e3f8:	3418e461 	.word	0x3418e461
3418e3fc:	3418e4c5 	.word	0x3418e4c5
3418e400:	3418e4c5 	.word	0x3418e4c5
3418e404:	3418e47f 	.word	0x3418e47f
3418e408:	3418e489 	.word	0x3418e489
3418e40c:	3418e4c5 	.word	0x3418e4c5
3418e410:	3418e49d 	.word	0x3418e49d
3418e414:	3418e4c5 	.word	0x3418e4c5
3418e418:	3418e4c5 	.word	0x3418e4c5
3418e41c:	3418e4bb 	.word	0x3418e4bb
3418e420:	2b8e      	cmp	r3, #142	@ 0x8e
3418e422:	dc4f      	bgt.n	3418e4c4 <sfdp_get_paraminfo+0x1d8>
3418e424:	2b81      	cmp	r3, #129	@ 0x81
3418e426:	dab2      	bge.n	3418e38e <sfdp_get_paraminfo+0xa2>
        break;
3418e428:	e04c      	b.n	3418e4c4 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
3418e42a:	687b      	ldr	r3, [r7, #4]
3418e42c:	2208      	movs	r2, #8
3418e42e:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
3418e430:	7dfb      	ldrb	r3, [r7, #23]
3418e432:	2b10      	cmp	r3, #16
3418e434:	bf38      	it	cc
3418e436:	2310      	movcc	r3, #16
3418e438:	b2da      	uxtb	r2, r3
3418e43a:	687b      	ldr	r3, [r7, #4]
3418e43c:	721a      	strb	r2, [r3, #8]
        break;
3418e43e:	e042      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
3418e440:	687b      	ldr	r3, [r7, #4]
3418e442:	2210      	movs	r2, #16
3418e444:	601a      	str	r2, [r3, #0]
        break;
3418e446:	e03e      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
3418e448:	687b      	ldr	r3, [r7, #4]
3418e44a:	2220      	movs	r2, #32
3418e44c:	601a      	str	r2, [r3, #0]
        break;
3418e44e:	e03a      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
3418e450:	687b      	ldr	r3, [r7, #4]
3418e452:	2240      	movs	r2, #64	@ 0x40
3418e454:	601a      	str	r2, [r3, #0]
        break;
3418e456:	e036      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
3418e458:	687b      	ldr	r3, [r7, #4]
3418e45a:	2280      	movs	r2, #128	@ 0x80
3418e45c:	601a      	str	r2, [r3, #0]
        break;
3418e45e:	e032      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
3418e460:	687b      	ldr	r3, [r7, #4]
3418e462:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418e466:	601a      	str	r2, [r3, #0]
        break;
3418e468:	e02d      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
3418e46a:	687b      	ldr	r3, [r7, #4]
3418e46c:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418e470:	601a      	str	r2, [r3, #0]
        break;
3418e472:	e028      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
3418e474:	687b      	ldr	r3, [r7, #4]
3418e476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3418e47a:	601a      	str	r2, [r3, #0]
        break;
3418e47c:	e023      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
3418e47e:	687b      	ldr	r3, [r7, #4]
3418e480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418e484:	601a      	str	r2, [r3, #0]
        break;
3418e486:	e01e      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
3418e488:	687b      	ldr	r3, [r7, #4]
3418e48a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418e48e:	601a      	str	r2, [r3, #0]
        break;
3418e490:	e019      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
3418e492:	687b      	ldr	r3, [r7, #4]
3418e494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418e498:	601a      	str	r2, [r3, #0]
        break;
3418e49a:	e014      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
3418e49c:	687b      	ldr	r3, [r7, #4]
3418e49e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418e4a2:	601a      	str	r2, [r3, #0]
        break;
3418e4a4:	e00f      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
3418e4a6:	687b      	ldr	r3, [r7, #4]
3418e4a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418e4ac:	601a      	str	r2, [r3, #0]
        break;
3418e4ae:	e00a      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
3418e4b0:	687b      	ldr	r3, [r7, #4]
3418e4b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418e4b6:	601a      	str	r2, [r3, #0]
        break;
3418e4b8:	e005      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
3418e4ba:	687b      	ldr	r3, [r7, #4]
3418e4bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418e4c0:	601a      	str	r2, [r3, #0]
        break;
3418e4c2:	e000      	b.n	3418e4c6 <sfdp_get_paraminfo+0x1da>
        break;
3418e4c4:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }

error:
3418e4c6:	bf00      	nop
  return retr;
3418e4c8:	7ffb      	ldrb	r3, [r7, #31]
}
3418e4ca:	4618      	mov	r0, r3
3418e4cc:	3720      	adds	r7, #32
3418e4ce:	46bd      	mov	sp, r7
3418e4d0:	bd80      	pop	{r7, pc}
3418e4d2:	bf00      	nop

3418e4d4 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418e4d4:	b590      	push	{r4, r7, lr}
3418e4d6:	b085      	sub	sp, #20
3418e4d8:	af00      	add	r7, sp, #0
3418e4da:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418e4dc:	2300      	movs	r3, #0
3418e4de:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
3418e4e0:	4b72      	ldr	r3, [pc, #456]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e4e2:	78db      	ldrb	r3, [r3, #3]
3418e4e4:	2b00      	cmp	r3, #0
3418e4e6:	d032      	beq.n	3418e54e <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
3418e4e8:	4b70      	ldr	r3, [pc, #448]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e4ea:	789b      	ldrb	r3, [r3, #2]
3418e4ec:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
3418e4ee:	4b6f      	ldr	r3, [pc, #444]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e4f0:	785b      	ldrb	r3, [r3, #1]
3418e4f2:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
3418e4f4:	4b6d      	ldr	r3, [pc, #436]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e4f6:	781b      	ldrb	r3, [r3, #0]
3418e4f8:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
3418e4fa:	4b6c      	ldr	r3, [pc, #432]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e4fc:	79db      	ldrb	r3, [r3, #7]
3418e4fe:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
3418e500:	4b6a      	ldr	r3, [pc, #424]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e502:	799b      	ldrb	r3, [r3, #6]
3418e504:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
3418e506:	4b69      	ldr	r3, [pc, #420]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e508:	795b      	ldrb	r3, [r3, #5]
3418e50a:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
3418e50c:	4b67      	ldr	r3, [pc, #412]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e50e:	791b      	ldrb	r3, [r3, #4]
3418e510:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e512:	687b      	ldr	r3, [r7, #4]
3418e514:	f103 0008 	add.w	r0, r3, #8
3418e518:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
3418e51a:	4b64      	ldr	r3, [pc, #400]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e51c:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e51e:	3b01      	subs	r3, #1
3418e520:	b29c      	uxth	r4, r3
3418e522:	f107 0308 	add.w	r3, r7, #8
3418e526:	1c5a      	adds	r2, r3, #1
3418e528:	4623      	mov	r3, r4
3418e52a:	f7fe fbf5 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e52e:	4603      	mov	r3, r0
3418e530:	2b00      	cmp	r3, #0
3418e532:	d002      	beq.n	3418e53a <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418e534:	230b      	movs	r3, #11
3418e536:	73fb      	strb	r3, [r7, #15]
       goto error;
3418e538:	e0b3      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418e53a:	2164      	movs	r1, #100	@ 0x64
3418e53c:	6878      	ldr	r0, [r7, #4]
3418e53e:	f7ff fe75 	bl	3418e22c <driver_check_FlagBUSY>
3418e542:	4603      	mov	r3, r0
3418e544:	2b00      	cmp	r3, #0
3418e546:	d002      	beq.n	3418e54e <sfpd_enter_octal_mode+0x7a>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e548:	230c      	movs	r3, #12
3418e54a:	73fb      	strb	r3, [r7, #15]
       goto error;
3418e54c:	e0a9      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
3418e54e:	4b57      	ldr	r3, [pc, #348]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e550:	7adb      	ldrb	r3, [r3, #11]
3418e552:	2b00      	cmp	r3, #0
3418e554:	d032      	beq.n	3418e5bc <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
3418e556:	4b55      	ldr	r3, [pc, #340]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e558:	7a9b      	ldrb	r3, [r3, #10]
3418e55a:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
3418e55c:	4b53      	ldr	r3, [pc, #332]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e55e:	7a5b      	ldrb	r3, [r3, #9]
3418e560:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
3418e562:	4b52      	ldr	r3, [pc, #328]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e564:	7a1b      	ldrb	r3, [r3, #8]
3418e566:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
3418e568:	4b50      	ldr	r3, [pc, #320]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e56a:	7bdb      	ldrb	r3, [r3, #15]
3418e56c:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
3418e56e:	4b4f      	ldr	r3, [pc, #316]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e570:	7b9b      	ldrb	r3, [r3, #14]
3418e572:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
3418e574:	4b4d      	ldr	r3, [pc, #308]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e576:	7b5b      	ldrb	r3, [r3, #13]
3418e578:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
3418e57a:	4b4c      	ldr	r3, [pc, #304]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e57c:	7b1b      	ldrb	r3, [r3, #12]
3418e57e:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e580:	687b      	ldr	r3, [r7, #4]
3418e582:	f103 0008 	add.w	r0, r3, #8
3418e586:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
3418e588:	4b48      	ldr	r3, [pc, #288]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e58a:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e58c:	3b01      	subs	r3, #1
3418e58e:	b29c      	uxth	r4, r3
3418e590:	f107 0308 	add.w	r3, r7, #8
3418e594:	1c5a      	adds	r2, r3, #1
3418e596:	4623      	mov	r3, r4
3418e598:	f7fe fbbe 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e59c:	4603      	mov	r3, r0
3418e59e:	2b00      	cmp	r3, #0
3418e5a0:	d002      	beq.n	3418e5a8 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418e5a2:	230b      	movs	r3, #11
3418e5a4:	73fb      	strb	r3, [r7, #15]
       goto error;
3418e5a6:	e07c      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418e5a8:	2164      	movs	r1, #100	@ 0x64
3418e5aa:	6878      	ldr	r0, [r7, #4]
3418e5ac:	f7ff fe3e 	bl	3418e22c <driver_check_FlagBUSY>
3418e5b0:	4603      	mov	r3, r0
3418e5b2:	2b00      	cmp	r3, #0
3418e5b4:	d002      	beq.n	3418e5bc <sfpd_enter_octal_mode+0xe8>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e5b6:	230c      	movs	r3, #12
3418e5b8:	73fb      	strb	r3, [r7, #15]
       goto error;
3418e5ba:	e072      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
3418e5bc:	4b3b      	ldr	r3, [pc, #236]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5be:	7cdb      	ldrb	r3, [r3, #19]
3418e5c0:	2b00      	cmp	r3, #0
3418e5c2:	d032      	beq.n	3418e62a <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
3418e5c4:	4b39      	ldr	r3, [pc, #228]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5c6:	7c9b      	ldrb	r3, [r3, #18]
3418e5c8:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
3418e5ca:	4b38      	ldr	r3, [pc, #224]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5cc:	7c5b      	ldrb	r3, [r3, #17]
3418e5ce:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
3418e5d0:	4b36      	ldr	r3, [pc, #216]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5d2:	7c1b      	ldrb	r3, [r3, #16]
3418e5d4:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
3418e5d6:	4b35      	ldr	r3, [pc, #212]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5d8:	7ddb      	ldrb	r3, [r3, #23]
3418e5da:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
3418e5dc:	4b33      	ldr	r3, [pc, #204]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5de:	7d9b      	ldrb	r3, [r3, #22]
3418e5e0:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
3418e5e2:	4b32      	ldr	r3, [pc, #200]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5e4:	7d5b      	ldrb	r3, [r3, #21]
3418e5e6:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
3418e5e8:	4b30      	ldr	r3, [pc, #192]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5ea:	7d1b      	ldrb	r3, [r3, #20]
3418e5ec:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e5ee:	687b      	ldr	r3, [r7, #4]
3418e5f0:	f103 0008 	add.w	r0, r3, #8
3418e5f4:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
3418e5f6:	4b2d      	ldr	r3, [pc, #180]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e5f8:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e5fa:	3b01      	subs	r3, #1
3418e5fc:	b29c      	uxth	r4, r3
3418e5fe:	f107 0308 	add.w	r3, r7, #8
3418e602:	1c5a      	adds	r2, r3, #1
3418e604:	4623      	mov	r3, r4
3418e606:	f7fe fb87 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e60a:	4603      	mov	r3, r0
3418e60c:	2b00      	cmp	r3, #0
3418e60e:	d002      	beq.n	3418e616 <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418e610:	230b      	movs	r3, #11
3418e612:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e614:	e045      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418e616:	2164      	movs	r1, #100	@ 0x64
3418e618:	6878      	ldr	r0, [r7, #4]
3418e61a:	f7ff fe07 	bl	3418e22c <driver_check_FlagBUSY>
3418e61e:	4603      	mov	r3, r0
3418e620:	2b00      	cmp	r3, #0
3418e622:	d002      	beq.n	3418e62a <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e624:	230c      	movs	r3, #12
3418e626:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e628:	e03b      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
3418e62a:	4b20      	ldr	r3, [pc, #128]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e62c:	7edb      	ldrb	r3, [r3, #27]
3418e62e:	2b00      	cmp	r3, #0
3418e630:	d032      	beq.n	3418e698 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
3418e632:	4b1e      	ldr	r3, [pc, #120]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e634:	7e9b      	ldrb	r3, [r3, #26]
3418e636:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
3418e638:	4b1c      	ldr	r3, [pc, #112]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e63a:	7e5b      	ldrb	r3, [r3, #25]
3418e63c:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
3418e63e:	4b1b      	ldr	r3, [pc, #108]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e640:	7e1b      	ldrb	r3, [r3, #24]
3418e642:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
3418e644:	4b19      	ldr	r3, [pc, #100]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e646:	7fdb      	ldrb	r3, [r3, #31]
3418e648:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
3418e64a:	4b18      	ldr	r3, [pc, #96]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e64c:	7f9b      	ldrb	r3, [r3, #30]
3418e64e:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
3418e650:	4b16      	ldr	r3, [pc, #88]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e652:	7f5b      	ldrb	r3, [r3, #29]
3418e654:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
3418e656:	4b15      	ldr	r3, [pc, #84]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e658:	7f1b      	ldrb	r3, [r3, #28]
3418e65a:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e65c:	687b      	ldr	r3, [r7, #4]
3418e65e:	f103 0008 	add.w	r0, r3, #8
3418e662:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
3418e664:	4b11      	ldr	r3, [pc, #68]	@ (3418e6ac <sfpd_enter_octal_mode+0x1d8>)
3418e666:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418e668:	3b01      	subs	r3, #1
3418e66a:	b29c      	uxth	r4, r3
3418e66c:	f107 0308 	add.w	r3, r7, #8
3418e670:	1c5a      	adds	r2, r3, #1
3418e672:	4623      	mov	r3, r4
3418e674:	f7fe fb50 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e678:	4603      	mov	r3, r0
3418e67a:	2b00      	cmp	r3, #0
3418e67c:	d002      	beq.n	3418e684 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418e67e:	230b      	movs	r3, #11
3418e680:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e682:	e00e      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418e684:	2164      	movs	r1, #100	@ 0x64
3418e686:	6878      	ldr	r0, [r7, #4]
3418e688:	f7ff fdd0 	bl	3418e22c <driver_check_FlagBUSY>
3418e68c:	4603      	mov	r3, r0
3418e68e:	2b00      	cmp	r3, #0
3418e690:	d002      	beq.n	3418e698 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e692:	230c      	movs	r3, #12
3418e694:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e696:	e004      	b.n	3418e6a2 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* Abort any ongoing tranfert to avoid perofomance issue */
  SAL_XSPI_Abort(&Object->sfpd_private.SALObject);
3418e698:	687b      	ldr	r3, [r7, #4]
3418e69a:	3308      	adds	r3, #8
3418e69c:	4618      	mov	r0, r3
3418e69e:	f7fe fd5e 	bl	3418d15e <SAL_XSPI_Abort>

error:
  return retr;
3418e6a2:	7bfb      	ldrb	r3, [r7, #15]
}
3418e6a4:	4618      	mov	r0, r3
3418e6a6:	3714      	adds	r7, #20
3418e6a8:	46bd      	mov	sp, r7
3418e6aa:	bd90      	pop	{r4, r7, pc}
3418e6ac:	341c02ac 	.word	0x341c02ac

3418e6b0 <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
3418e6b0:	b5b0      	push	{r4, r5, r7, lr}
3418e6b2:	b088      	sub	sp, #32
3418e6b4:	af02      	add	r7, sp, #8
3418e6b6:	6078      	str	r0, [r7, #4]
3418e6b8:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
3418e6ba:	4b6d      	ldr	r3, [pc, #436]	@ (3418e870 <sfpd_set_dummycycle+0x1c0>)
3418e6bc:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418e6be:	2300      	movs	r3, #0
3418e6c0:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
3418e6c2:	2300      	movs	r3, #0
3418e6c4:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418e6c6:	4b6b      	ldr	r3, [pc, #428]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e6c8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e6cc:	f003 0310 	and.w	r3, r3, #16
3418e6d0:	b2db      	uxtb	r3, r3
3418e6d2:	2b00      	cmp	r3, #0
3418e6d4:	d10a      	bne.n	3418e6ec <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
3418e6d6:	4b67      	ldr	r3, [pc, #412]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e6d8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e6dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418e6e0:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418e6e2:	2b00      	cmp	r3, #0
3418e6e4:	d002      	beq.n	3418e6ec <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e6e6:	230c      	movs	r3, #12
3418e6e8:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e6ea:	e0bb      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
3418e6ec:	4b61      	ldr	r3, [pc, #388]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e6ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e6f2:	f003 0308 	and.w	r3, r3, #8
3418e6f6:	b2db      	uxtb	r3, r3
3418e6f8:	2b00      	cmp	r3, #0
3418e6fa:	d005      	beq.n	3418e708 <sfpd_set_dummycycle+0x58>
  {
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
3418e6fc:	4b5d      	ldr	r3, [pc, #372]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e6fe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
3418e702:	021b      	lsls	r3, r3, #8
3418e704:	613b      	str	r3, [r7, #16]
3418e706:	e001      	b.n	3418e70c <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1;
3418e708:	2301      	movs	r3, #1
3418e70a:	613b      	str	r3, [r7, #16]
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject,
3418e70c:	687b      	ldr	r3, [r7, #4]
3418e70e:	f103 0008 	add.w	r0, r3, #8
3418e712:	4b58      	ldr	r3, [pc, #352]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e714:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418e718:	f107 0308 	add.w	r3, r7, #8
3418e71c:	2202      	movs	r2, #2
3418e71e:	9200      	str	r2, [sp, #0]
3418e720:	693a      	ldr	r2, [r7, #16]
3418e722:	f7fe fba1 	bl	3418ce68 <SAL_XSPI_CommandSendReadAddress>
3418e726:	4603      	mov	r3, r0
3418e728:	2b00      	cmp	r3, #0
3418e72a:	d002      	beq.n	3418e732 <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
                   Address,
                   (uint8_t *)localValue,
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e72c:	230c      	movs	r3, #12
3418e72e:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e730:	e098      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418e732:	687b      	ldr	r3, [r7, #4]
3418e734:	f103 0008 	add.w	r0, r3, #8
3418e738:	687b      	ldr	r3, [r7, #4]
3418e73a:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418e73e:	2300      	movs	r3, #0
3418e740:	2200      	movs	r2, #0
3418e742:	f7fe fae9 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e746:	4603      	mov	r3, r0
3418e748:	2b00      	cmp	r3, #0
3418e74a:	d002      	beq.n	3418e752 <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e74c:	230c      	movs	r3, #12
3418e74e:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e750:	e088      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e752:	687b      	ldr	r3, [r7, #4]
3418e754:	f103 0008 	add.w	r0, r3, #8
3418e758:	687b      	ldr	r3, [r7, #4]
3418e75a:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418e75e:	687b      	ldr	r3, [r7, #4]
3418e760:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e764:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418e766:	687b      	ldr	r3, [r7, #4]
3418e768:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418e76c:	2b00      	cmp	r3, #0
3418e76e:	d101      	bne.n	3418e774 <sfpd_set_dummycycle+0xc4>
3418e770:	2301      	movs	r3, #1
3418e772:	e000      	b.n	3418e776 <sfpd_set_dummycycle+0xc6>
3418e774:	2300      	movs	r3, #0
3418e776:	687a      	ldr	r2, [r7, #4]
3418e778:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418e77c:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e77e:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418e780:	687b      	ldr	r3, [r7, #4]
3418e782:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418e786:	461c      	mov	r4, r3
3418e788:	2301      	movs	r3, #1
3418e78a:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e78c:	b2db      	uxtb	r3, r3
3418e78e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418e792:	9401      	str	r4, [sp, #4]
3418e794:	9300      	str	r3, [sp, #0]
3418e796:	4613      	mov	r3, r2
3418e798:	462a      	mov	r2, r5
3418e79a:	f7fe fbb2 	bl	3418cf02 <SAL_XSPI_CheckStatusRegister>
3418e79e:	4603      	mov	r3, r0
3418e7a0:	2b00      	cmp	r3, #0
3418e7a2:	d002      	beq.n	3418e7aa <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e7a4:	230c      	movs	r3, #12
3418e7a6:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e7a8:	e05c      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418e7aa:	7a3b      	ldrb	r3, [r7, #8]
3418e7ac:	b25a      	sxtb	r2, r3
3418e7ae:	4b31      	ldr	r3, [pc, #196]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e7b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e7b4:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418e7b8:	b2db      	uxtb	r3, r3
3418e7ba:	3318      	adds	r3, #24
3418e7bc:	443b      	add	r3, r7
3418e7be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
3418e7c2:	4619      	mov	r1, r3
3418e7c4:	4b2b      	ldr	r3, [pc, #172]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e7c6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e7ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e7ce:	b2db      	uxtb	r3, r3
3418e7d0:	fa01 f303 	lsl.w	r3, r1, r3
3418e7d4:	b25b      	sxtb	r3, r3
3418e7d6:	43db      	mvns	r3, r3
3418e7d8:	b25b      	sxtb	r3, r3
3418e7da:	4013      	ands	r3, r2
3418e7dc:	b25b      	sxtb	r3, r3
3418e7de:	b2db      	uxtb	r3, r3
3418e7e0:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418e7e2:	7a3a      	ldrb	r2, [r7, #8]
3418e7e4:	4b23      	ldr	r3, [pc, #140]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e7e6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418e7ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e7ee:	b2db      	uxtb	r3, r3
3418e7f0:	4619      	mov	r1, r3
3418e7f2:	683b      	ldr	r3, [r7, #0]
3418e7f4:	408b      	lsls	r3, r1
3418e7f6:	b2db      	uxtb	r3, r3
3418e7f8:	4313      	orrs	r3, r2
3418e7fa:	b2db      	uxtb	r3, r3
3418e7fc:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
3418e7fe:	7a3b      	ldrb	r3, [r7, #8]
3418e800:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
3418e802:	687b      	ldr	r3, [r7, #4]
3418e804:	f103 0008 	add.w	r0, r3, #8
3418e808:	4b1a      	ldr	r3, [pc, #104]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e80a:	f893 1020 	ldrb.w	r1, [r3, #32]
3418e80e:	f107 0308 	add.w	r3, r7, #8
3418e812:	2202      	movs	r2, #2
3418e814:	9200      	str	r2, [sp, #0]
3418e816:	693a      	ldr	r2, [r7, #16]
3418e818:	f7fe fa35 	bl	3418cc86 <SAL_XSPI_Write>
3418e81c:	4603      	mov	r3, r0
3418e81e:	2b00      	cmp	r3, #0
3418e820:	d002      	beq.n	3418e828 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e822:	230c      	movs	r3, #12
3418e824:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e826:	e01d      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418e828:	2164      	movs	r1, #100	@ 0x64
3418e82a:	6878      	ldr	r0, [r7, #4]
3418e82c:	f7ff fcfe 	bl	3418e22c <driver_check_FlagBUSY>
3418e830:	4603      	mov	r3, r0
3418e832:	2b00      	cmp	r3, #0
3418e834:	d002      	beq.n	3418e83c <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e836:	230c      	movs	r3, #12
3418e838:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e83a:	e013      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
3418e83c:	687b      	ldr	r3, [r7, #4]
3418e83e:	f103 0008 	add.w	r0, r3, #8
3418e842:	4b0c      	ldr	r3, [pc, #48]	@ (3418e874 <sfpd_set_dummycycle+0x1c4>)
3418e844:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418e848:	f107 0308 	add.w	r3, r7, #8
3418e84c:	2202      	movs	r2, #2
3418e84e:	9200      	str	r2, [sp, #0]
3418e850:	693a      	ldr	r2, [r7, #16]
3418e852:	f7fe f9b0 	bl	3418cbb6 <SAL_XSPI_Read>
3418e856:	4603      	mov	r3, r0
3418e858:	2b00      	cmp	r3, #0
3418e85a:	d002      	beq.n	3418e862 <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e85c:	230c      	movs	r3, #12
3418e85e:	75fb      	strb	r3, [r7, #23]
    goto error;
3418e860:	e000      	b.n	3418e864 <sfpd_set_dummycycle+0x1b4>
  }

error :
3418e862:	bf00      	nop
  return retr;
3418e864:	7dfb      	ldrb	r3, [r7, #23]
}
3418e866:	4618      	mov	r0, r3
3418e868:	3718      	adds	r7, #24
3418e86a:	46bd      	mov	sp, r7
3418e86c:	bdb0      	pop	{r4, r5, r7, pc}
3418e86e:	bf00      	nop
3418e870:	1f0f0703 	.word	0x1f0f0703
3418e874:	341c023c 	.word	0x341c023c

3418e878 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418e878:	b580      	push	{r7, lr}
3418e87a:	b084      	sub	sp, #16
3418e87c:	af00      	add	r7, sp, #0
3418e87e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e880:	230f      	movs	r3, #15
3418e882:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
3418e884:	4b58      	ldr	r3, [pc, #352]	@ (3418e9e8 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
3418e886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
3418e88a:	f3c3 1302 	ubfx	r3, r3, #4, #3
3418e88e:	b2db      	uxtb	r3, r3
3418e890:	2b07      	cmp	r3, #7
3418e892:	f200 80a1 	bhi.w	3418e9d8 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
3418e896:	a201      	add	r2, pc, #4	@ (adr r2, 3418e89c <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
3418e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e89c:	3418e9d9 	.word	0x3418e9d9
3418e8a0:	3418e9d9 	.word	0x3418e9d9
3418e8a4:	3418e8bd 	.word	0x3418e8bd
3418e8a8:	3418e9d9 	.word	0x3418e9d9
3418e8ac:	3418e93d 	.word	0x3418e93d
3418e8b0:	3418e9d9 	.word	0x3418e9d9
3418e8b4:	3418e9d9 	.word	0x3418e9d9
3418e8b8:	3418e9d9 	.word	0x3418e9d9
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418e8bc:	687b      	ldr	r3, [r7, #4]
3418e8be:	f103 0008 	add.w	r0, r3, #8
3418e8c2:	687b      	ldr	r3, [r7, #4]
3418e8c4:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418e8c8:	2300      	movs	r3, #0
3418e8ca:	2200      	movs	r2, #0
3418e8cc:	f7fe fa78 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
3418e8d0:	4603      	mov	r3, r0
3418e8d2:	2b00      	cmp	r3, #0
3418e8d4:	d002      	beq.n	3418e8dc <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e8d6:	230c      	movs	r3, #12
3418e8d8:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e8da:	e080      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
3418e8dc:	687b      	ldr	r3, [r7, #4]
3418e8de:	f103 0008 	add.w	r0, r3, #8
3418e8e2:	f107 020c 	add.w	r2, r7, #12
3418e8e6:	2301      	movs	r3, #1
3418e8e8:	2105      	movs	r1, #5
3418e8ea:	f7fe fa69 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
3418e8ee:	4603      	mov	r3, r0
3418e8f0:	2b00      	cmp	r3, #0
3418e8f2:	d002      	beq.n	3418e8fa <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e8f4:	230c      	movs	r3, #12
3418e8f6:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e8f8:	e071      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
3418e8fa:	7b3b      	ldrb	r3, [r7, #12]
3418e8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418e900:	b2db      	uxtb	r3, r3
3418e902:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
3418e904:	687b      	ldr	r3, [r7, #4]
3418e906:	f103 0008 	add.w	r0, r3, #8
3418e90a:	f107 020c 	add.w	r2, r7, #12
3418e90e:	2301      	movs	r3, #1
3418e910:	2101      	movs	r1, #1
3418e912:	f7fe fa01 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e916:	4603      	mov	r3, r0
3418e918:	2b00      	cmp	r3, #0
3418e91a:	d002      	beq.n	3418e922 <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e91c:	230c      	movs	r3, #12
3418e91e:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e920:	e05d      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418e922:	2164      	movs	r1, #100	@ 0x64
3418e924:	6878      	ldr	r0, [r7, #4]
3418e926:	f7ff fc81 	bl	3418e22c <driver_check_FlagBUSY>
3418e92a:	4603      	mov	r3, r0
3418e92c:	2b00      	cmp	r3, #0
3418e92e:	d002      	beq.n	3418e936 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e930:	230c      	movs	r3, #12
3418e932:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e934:	e053      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
3418e936:	2300      	movs	r3, #0
3418e938:	73fb      	strb	r3, [r7, #15]
    break;
3418e93a:	e050      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418e93c:	687b      	ldr	r3, [r7, #4]
3418e93e:	f103 0008 	add.w	r0, r3, #8
3418e942:	f107 020c 	add.w	r2, r7, #12
3418e946:	2302      	movs	r3, #2
3418e948:	2105      	movs	r1, #5
3418e94a:	f7fe fa39 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
3418e94e:	4603      	mov	r3, r0
3418e950:	2b00      	cmp	r3, #0
3418e952:	d002      	beq.n	3418e95a <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e954:	230c      	movs	r3, #12
3418e956:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e958:	e041      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* update the status register */
    localValue[1] |= 2u;
3418e95a:	7b7b      	ldrb	r3, [r7, #13]
3418e95c:	f043 0302 	orr.w	r3, r3, #2
3418e960:	b2db      	uxtb	r3, r3
3418e962:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418e964:	687b      	ldr	r3, [r7, #4]
3418e966:	f103 0008 	add.w	r0, r3, #8
3418e96a:	687b      	ldr	r3, [r7, #4]
3418e96c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418e970:	2300      	movs	r3, #0
3418e972:	2200      	movs	r2, #0
3418e974:	f7fe fa24 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
3418e978:	4603      	mov	r3, r0
3418e97a:	2b00      	cmp	r3, #0
3418e97c:	d002      	beq.n	3418e984 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e97e:	230c      	movs	r3, #12
3418e980:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e982:	e02c      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
3418e984:	687b      	ldr	r3, [r7, #4]
3418e986:	f103 0008 	add.w	r0, r3, #8
3418e98a:	f107 020c 	add.w	r2, r7, #12
3418e98e:	2302      	movs	r3, #2
3418e990:	2101      	movs	r1, #1
3418e992:	f7fe f9c1 	bl	3418cd18 <SAL_XSPI_CommandSendData>
3418e996:	4603      	mov	r3, r0
3418e998:	2b00      	cmp	r3, #0
3418e99a:	d002      	beq.n	3418e9a2 <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e99c:	230c      	movs	r3, #12
3418e99e:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e9a0:	e01d      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418e9a2:	2164      	movs	r1, #100	@ 0x64
3418e9a4:	6878      	ldr	r0, [r7, #4]
3418e9a6:	f7ff fc41 	bl	3418e22c <driver_check_FlagBUSY>
3418e9aa:	4603      	mov	r3, r0
3418e9ac:	2b00      	cmp	r3, #0
3418e9ae:	d002      	beq.n	3418e9b6 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e9b0:	230c      	movs	r3, #12
3418e9b2:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e9b4:	e013      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
3418e9b6:	23ff      	movs	r3, #255	@ 0xff
3418e9b8:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418e9ba:	687b      	ldr	r3, [r7, #4]
3418e9bc:	f103 0008 	add.w	r0, r3, #8
3418e9c0:	f107 020c 	add.w	r2, r7, #12
3418e9c4:	2302      	movs	r3, #2
3418e9c6:	2105      	movs	r1, #5
3418e9c8:	f7fe f9fa 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
3418e9cc:	4603      	mov	r3, r0
3418e9ce:	2b00      	cmp	r3, #0
3418e9d0:	d004      	beq.n	3418e9dc <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e9d2:	230c      	movs	r3, #12
3418e9d4:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e9d6:	e002      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
3418e9d8:	bf00      	nop
3418e9da:	e000      	b.n	3418e9de <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
3418e9dc:	bf00      	nop
  }
error :
  return retr;
3418e9de:	7bfb      	ldrb	r3, [r7, #15]
}
3418e9e0:	4618      	mov	r0, r3
3418e9e2:	3710      	adds	r7, #16
3418e9e4:	46bd      	mov	sp, r7
3418e9e6:	bd80      	pop	{r7, pc}
3418e9e8:	341c01bc 	.word	0x341c01bc

3418e9ec <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418e9ec:	b580      	push	{r7, lr}
3418e9ee:	b084      	sub	sp, #16
3418e9f0:	af00      	add	r7, sp, #0
3418e9f2:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e9f4:	230f      	movs	r3, #15
3418e9f6:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
3418e9f8:	2300      	movs	r3, #0
3418e9fa:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
3418e9fc:	4b19      	ldr	r3, [pc, #100]	@ (3418ea64 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418e9fe:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418ea00:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418ea04:	b2db      	uxtb	r3, r3
3418ea06:	f003 0301 	and.w	r3, r3, #1
3418ea0a:	2b00      	cmp	r3, #0
3418ea0c:	d007      	beq.n	3418ea1e <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
3418ea0e:	6878      	ldr	r0, [r7, #4]
3418ea10:	f7ff ff32 	bl	3418e878 <JEDEC_Basic_ManageQuadEnableRequierement>
3418ea14:	4603      	mov	r3, r0
3418ea16:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
3418ea18:	2338      	movs	r3, #56	@ 0x38
3418ea1a:	73bb      	strb	r3, [r7, #14]
3418ea1c:	e00c      	b.n	3418ea38 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
3418ea1e:	4b11      	ldr	r3, [pc, #68]	@ (3418ea64 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418ea20:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418ea22:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418ea26:	b2db      	uxtb	r3, r3
3418ea28:	f003 0304 	and.w	r3, r3, #4
3418ea2c:	2b00      	cmp	r3, #0
3418ea2e:	d003      	beq.n	3418ea38 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
3418ea30:	2300      	movs	r3, #0
3418ea32:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
3418ea34:	2335      	movs	r3, #53	@ 0x35
3418ea36:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
3418ea38:	7bfb      	ldrb	r3, [r7, #15]
3418ea3a:	2b00      	cmp	r3, #0
3418ea3c:	d10c      	bne.n	3418ea58 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
3418ea3e:	7bbb      	ldrb	r3, [r7, #14]
3418ea40:	2b00      	cmp	r3, #0
3418ea42:	d009      	beq.n	3418ea58 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
3418ea44:	687b      	ldr	r3, [r7, #4]
3418ea46:	f103 0008 	add.w	r0, r3, #8
3418ea4a:	7bb9      	ldrb	r1, [r7, #14]
3418ea4c:	2300      	movs	r3, #0
3418ea4e:	2200      	movs	r2, #0
3418ea50:	f7fe f9b6 	bl	3418cdc0 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
3418ea54:	2300      	movs	r3, #0
3418ea56:	73fb      	strb	r3, [r7, #15]

    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.

  return retr;
3418ea58:	7bfb      	ldrb	r3, [r7, #15]
}
3418ea5a:	4618      	mov	r0, r3
3418ea5c:	3710      	adds	r7, #16
3418ea5e:	46bd      	mov	sp, r7
3418ea60:	bd80      	pop	{r7, pc}
3418ea62:	bf00      	nop
3418ea64:	341c01bc 	.word	0x341c01bc

3418ea68 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
3418ea68:	b580      	push	{r7, lr}
3418ea6a:	b084      	sub	sp, #16
3418ea6c:	af00      	add	r7, sp, #0
3418ea6e:	6078      	str	r0, [r7, #4]
3418ea70:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418ea72:	2304      	movs	r3, #4
3418ea74:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
3418ea76:	683b      	ldr	r3, [r7, #0]
3418ea78:	4a0e      	ldr	r2, [pc, #56]	@ (3418eab4 <CheckSFDP_Signature+0x4c>)
3418ea7a:	4293      	cmp	r3, r2
3418ea7c:	d006      	beq.n	3418ea8c <CheckSFDP_Signature+0x24>
3418ea7e:	683b      	ldr	r3, [r7, #0]
3418ea80:	4a0d      	ldr	r2, [pc, #52]	@ (3418eab8 <CheckSFDP_Signature+0x50>)
3418ea82:	4293      	cmp	r3, r2
3418ea84:	d10e      	bne.n	3418eaa4 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
3418ea86:	2300      	movs	r3, #0
3418ea88:	73fb      	strb	r3, [r7, #15]
    break;
3418ea8a:	e00e      	b.n	3418eaaa <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
3418ea8c:	687b      	ldr	r3, [r7, #4]
3418ea8e:	3308      	adds	r3, #8
3418ea90:	2100      	movs	r1, #0
3418ea92:	4618      	mov	r0, r3
3418ea94:	f7fe fb2b 	bl	3418d0ee <SAL_XSPI_UpdateMemoryType>
3418ea98:	4603      	mov	r3, r0
3418ea9a:	2b00      	cmp	r3, #0
3418ea9c:	d104      	bne.n	3418eaa8 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
3418ea9e:	2305      	movs	r3, #5
3418eaa0:	73fb      	strb	r3, [r7, #15]
    }
    break;
3418eaa2:	e001      	b.n	3418eaa8 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
3418eaa4:	bf00      	nop
3418eaa6:	e000      	b.n	3418eaaa <CheckSFDP_Signature+0x42>
    break;
3418eaa8:	bf00      	nop
  }
  return retr;
3418eaaa:	7bfb      	ldrb	r3, [r7, #15]
}
3418eaac:	4618      	mov	r0, r3
3418eaae:	3710      	adds	r7, #16
3418eab0:	46bd      	mov	sp, r7
3418eab2:	bd80      	pop	{r7, pc}
3418eab4:	44505346 	.word	0x44505346
3418eab8:	50444653 	.word	0x50444653

3418eabc <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418eabc:	b580      	push	{r7, lr}
3418eabe:	b08a      	sub	sp, #40	@ 0x28
3418eac0:	af00      	add	r7, sp, #0
3418eac2:	60f8      	str	r0, [r7, #12]
3418eac4:	607a      	str	r2, [r7, #4]
3418eac6:	603b      	str	r3, [r7, #0]
3418eac8:	460b      	mov	r3, r1
3418eaca:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418eacc:	2300      	movs	r3, #0
3418eace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
3418ead2:	2300      	movs	r3, #0
3418ead4:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
3418ead6:	683b      	ldr	r3, [r7, #0]
3418ead8:	3308      	adds	r3, #8
3418eada:	2298      	movs	r2, #152	@ 0x98
3418eadc:	2100      	movs	r1, #0
3418eade:	4618      	mov	r0, r3
3418eae0:	f000 f90a 	bl	3418ecf8 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
3418eae4:	683b      	ldr	r3, [r7, #0]
3418eae6:	7afa      	ldrb	r2, [r7, #11]
3418eae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418eaec:	683b      	ldr	r3, [r7, #0]
3418eaee:	2200      	movs	r2, #0
3418eaf0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
3418eaf4:	683b      	ldr	r3, [r7, #0]
3418eaf6:	687a      	ldr	r2, [r7, #4]
3418eaf8:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
3418eafa:	683b      	ldr	r3, [r7, #0]
3418eafc:	2208      	movs	r2, #8
3418eafe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
3418eb02:	683b      	ldr	r3, [r7, #0]
3418eb04:	3308      	adds	r3, #8
3418eb06:	68f9      	ldr	r1, [r7, #12]
3418eb08:	4618      	mov	r0, r3
3418eb0a:	f7fd fe20 	bl	3418c74e <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
3418eb0e:	683b      	ldr	r3, [r7, #0]
3418eb10:	f103 0008 	add.w	r0, r3, #8
3418eb14:	f107 0310 	add.w	r3, r7, #16
3418eb18:	4a44      	ldr	r2, [pc, #272]	@ (3418ec2c <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
3418eb1a:	6879      	ldr	r1, [r7, #4]
3418eb1c:	f7fd fdd8 	bl	3418c6d0 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
3418eb20:	683b      	ldr	r3, [r7, #0]
3418eb22:	3308      	adds	r3, #8
3418eb24:	4618      	mov	r0, r3
3418eb26:	f7fe fad1 	bl	3418d0cc <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418eb2a:	f107 031c 	add.w	r3, r7, #28
3418eb2e:	4619      	mov	r1, r3
3418eb30:	6838      	ldr	r0, [r7, #0]
3418eb32:	f7fe fbaf 	bl	3418d294 <SFDP_GetHeader>
3418eb36:	4603      	mov	r3, r0
3418eb38:	2b00      	cmp	r3, #0
3418eb3a:	d003      	beq.n	3418eb44 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418eb3c:	23ff      	movs	r3, #255	@ 0xff
3418eb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418eb42:	e06c      	b.n	3418ec1e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
3418eb44:	6838      	ldr	r0, [r7, #0]
3418eb46:	f7fe fcdf 	bl	3418d508 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
3418eb4a:	200a      	movs	r0, #10
3418eb4c:	f7f2 fb86 	bl	3418125c <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418eb50:	f107 031c 	add.w	r3, r7, #28
3418eb54:	4619      	mov	r1, r3
3418eb56:	6838      	ldr	r0, [r7, #0]
3418eb58:	f7fe fb9c 	bl	3418d294 <SFDP_GetHeader>
3418eb5c:	4603      	mov	r3, r0
3418eb5e:	2b00      	cmp	r3, #0
3418eb60:	d003      	beq.n	3418eb6a <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418eb62:	23ff      	movs	r3, #255	@ 0xff
3418eb64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418eb68:	e059      	b.n	3418ec1e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
3418eb6a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
3418eb6e:	683b      	ldr	r3, [r7, #0]
3418eb70:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
3418eb74:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
3418eb78:	683b      	ldr	r3, [r7, #0]
3418eb7a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418eb7e:	683b      	ldr	r3, [r7, #0]
3418eb80:	3308      	adds	r3, #8
3418eb82:	f107 0114 	add.w	r1, r7, #20
3418eb86:	2204      	movs	r2, #4
3418eb88:	4618      	mov	r0, r3
3418eb8a:	f7fd ffc1 	bl	3418cb10 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
3418eb8e:	7d3a      	ldrb	r2, [r7, #20]
3418eb90:	683b      	ldr	r3, [r7, #0]
3418eb92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
3418eb96:	6838      	ldr	r0, [r7, #0]
3418eb98:	f7fe fbda 	bl	3418d350 <SFDP_CollectData>
3418eb9c:	4603      	mov	r3, r0
3418eb9e:	2b00      	cmp	r3, #0
3418eba0:	d003      	beq.n	3418ebaa <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418eba2:	23ff      	movs	r3, #255	@ 0xff
3418eba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418eba8:	e039      	b.n	3418ec1e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
3418ebaa:	f107 031b 	add.w	r3, r7, #27
3418ebae:	4619      	mov	r1, r3
3418ebb0:	6838      	ldr	r0, [r7, #0]
3418ebb2:	f7fe fd85 	bl	3418d6c0 <SFDP_BuildGenericDriver>
3418ebb6:	4603      	mov	r3, r0
3418ebb8:	2b00      	cmp	r3, #0
3418ebba:	d003      	beq.n	3418ebc4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
3418ebbc:	23fd      	movs	r3, #253	@ 0xfd
3418ebbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418ebc2:	e02c      	b.n	3418ec1e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
3418ebc4:	7efb      	ldrb	r3, [r7, #27]
3418ebc6:	2b00      	cmp	r3, #0
3418ebc8:	d10d      	bne.n	3418ebe6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
3418ebca:	683b      	ldr	r3, [r7, #0]
3418ebcc:	681b      	ldr	r3, [r3, #0]
3418ebce:	2b00      	cmp	r3, #0
3418ebd0:	d009      	beq.n	3418ebe6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
3418ebd2:	683b      	ldr	r3, [r7, #0]
3418ebd4:	f103 0008 	add.w	r0, r3, #8
3418ebd8:	683b      	ldr	r3, [r7, #0]
3418ebda:	681a      	ldr	r2, [r3, #0]
3418ebdc:	f107 0310 	add.w	r3, r7, #16
3418ebe0:	6879      	ldr	r1, [r7, #4]
3418ebe2:	f7fd fd75 	bl	3418c6d0 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
3418ebe6:	f107 031c 	add.w	r3, r7, #28
3418ebea:	4619      	mov	r1, r3
3418ebec:	6838      	ldr	r0, [r7, #0]
3418ebee:	f7fe fb13 	bl	3418d218 <SFDP_ReadHeader>
3418ebf2:	4603      	mov	r3, r0
3418ebf4:	2b00      	cmp	r3, #0
3418ebf6:	d003      	beq.n	3418ec00 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
3418ebf8:	23f2      	movs	r3, #242	@ 0xf2
3418ebfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418ebfe:	e00e      	b.n	3418ec1e <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
3418ec00:	f107 0314 	add.w	r3, r7, #20
3418ec04:	2206      	movs	r2, #6
3418ec06:	21aa      	movs	r1, #170	@ 0xaa
3418ec08:	4618      	mov	r0, r3
3418ec0a:	f000 f875 	bl	3418ecf8 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418ec0e:	683b      	ldr	r3, [r7, #0]
3418ec10:	3308      	adds	r3, #8
3418ec12:	f107 0114 	add.w	r1, r7, #20
3418ec16:	2204      	movs	r2, #4
3418ec18:	4618      	mov	r0, r3
3418ec1a:	f7fd ff79 	bl	3418cb10 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
3418ec1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
3418ec22:	4618      	mov	r0, r3
3418ec24:	3728      	adds	r7, #40	@ 0x28
3418ec26:	46bd      	mov	sp, r7
3418ec28:	bd80      	pop	{r7, pc}
3418ec2a:	bf00      	nop
3418ec2c:	02faf080 	.word	0x02faf080

3418ec30 <EXTMEM_DRIVER_NOR_SFDP_Read>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Read(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418ec30:	b580      	push	{r7, lr}
3418ec32:	b088      	sub	sp, #32
3418ec34:	af02      	add	r7, sp, #8
3418ec36:	60f8      	str	r0, [r7, #12]
3418ec38:	60b9      	str	r1, [r7, #8]
3418ec3a:	607a      	str	r2, [r7, #4]
3418ec3c:	603b      	str	r3, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr;
  DEBUG_DRIVER((uint8_t *)__func__)
  /* check busy flag */
  retr = driver_check_FlagBUSY(SFDPObject, 5000);
3418ec3e:	f241 3188 	movw	r1, #5000	@ 0x1388
3418ec42:	68f8      	ldr	r0, [r7, #12]
3418ec44:	f7ff faf2 	bl	3418e22c <driver_check_FlagBUSY>
3418ec48:	4603      	mov	r3, r0
3418ec4a:	75fb      	strb	r3, [r7, #23]
  if ( EXTMEM_DRIVER_NOR_SFDP_OK != retr)
3418ec4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
3418ec50:	2b00      	cmp	r3, #0
3418ec52:	d111      	bne.n	3418ec78 <EXTMEM_DRIVER_NOR_SFDP_Read+0x48>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_CHECK_BUSY")
    goto error;
  }

  if (HAL_OK != SAL_XSPI_Read(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction, Address, Data, Size))
3418ec54:	68fb      	ldr	r3, [r7, #12]
3418ec56:	f103 0008 	add.w	r0, r3, #8
3418ec5a:	68fb      	ldr	r3, [r7, #12]
3418ec5c:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
3418ec60:	683b      	ldr	r3, [r7, #0]
3418ec62:	9300      	str	r3, [sp, #0]
3418ec64:	687b      	ldr	r3, [r7, #4]
3418ec66:	68ba      	ldr	r2, [r7, #8]
3418ec68:	f7fd ffa5 	bl	3418cbb6 <SAL_XSPI_Read>
3418ec6c:	4603      	mov	r3, r0
3418ec6e:	2b00      	cmp	r3, #0
3418ec70:	d004      	beq.n	3418ec7c <EXTMEM_DRIVER_NOR_SFDP_Read+0x4c>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_READ")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_READ;
3418ec72:	23fe      	movs	r3, #254	@ 0xfe
3418ec74:	75fb      	strb	r3, [r7, #23]
3418ec76:	e002      	b.n	3418ec7e <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
    goto error;
3418ec78:	bf00      	nop
3418ec7a:	e000      	b.n	3418ec7e <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
  }
error :
3418ec7c:	bf00      	nop
  return retr;
3418ec7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418ec82:	4618      	mov	r0, r3
3418ec84:	3718      	adds	r7, #24
3418ec86:	46bd      	mov	sp, r7
3418ec88:	bd80      	pop	{r7, pc}

3418ec8a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418ec8a:	b590      	push	{r4, r7, lr}
3418ec8c:	b087      	sub	sp, #28
3418ec8e:	af02      	add	r7, sp, #8
3418ec90:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418ec92:	2300      	movs	r3, #0
3418ec94:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418ec96:	687b      	ldr	r3, [r7, #4]
3418ec98:	f103 0008 	add.w	r0, r3, #8
3418ec9c:	687b      	ldr	r3, [r7, #4]
3418ec9e:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
3418eca2:	687b      	ldr	r3, [r7, #4]
3418eca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418eca6:	b2da      	uxtb	r2, r3
3418eca8:	687b      	ldr	r3, [r7, #4]
3418ecaa:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
3418ecae:	2400      	movs	r4, #0
3418ecb0:	9400      	str	r4, [sp, #0]
3418ecb2:	f7fe f992 	bl	3418cfda <SAL_XSPI_EnableMapMode>
3418ecb6:	4603      	mov	r3, r0
3418ecb8:	2b00      	cmp	r3, #0
3418ecba:	d001      	beq.n	3418ecc0 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418ecbc:	23f3      	movs	r3, #243	@ 0xf3
3418ecbe:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418ecc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418ecc4:	4618      	mov	r0, r3
3418ecc6:	3714      	adds	r7, #20
3418ecc8:	46bd      	mov	sp, r7
3418ecca:	bd90      	pop	{r4, r7, pc}

3418eccc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418eccc:	b580      	push	{r7, lr}
3418ecce:	b084      	sub	sp, #16
3418ecd0:	af00      	add	r7, sp, #0
3418ecd2:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418ecd4:	2300      	movs	r3, #0
3418ecd6:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
3418ecd8:	687b      	ldr	r3, [r7, #4]
3418ecda:	3308      	adds	r3, #8
3418ecdc:	4618      	mov	r0, r3
3418ecde:	f7fe f9f5 	bl	3418d0cc <SAL_XSPI_DisableMapMode>
3418ece2:	4603      	mov	r3, r0
3418ece4:	2b00      	cmp	r3, #0
3418ece6:	d001      	beq.n	3418ecec <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418ece8:	23f3      	movs	r3, #243	@ 0xf3
3418ecea:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418ecec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418ecf0:	4618      	mov	r0, r3
3418ecf2:	3710      	adds	r7, #16
3418ecf4:	46bd      	mov	sp, r7
3418ecf6:	bd80      	pop	{r7, pc}

3418ecf8 <memset>:
3418ecf8:	4402      	add	r2, r0
3418ecfa:	4603      	mov	r3, r0
3418ecfc:	4293      	cmp	r3, r2
3418ecfe:	d100      	bne.n	3418ed02 <memset+0xa>
3418ed00:	4770      	bx	lr
3418ed02:	f803 1b01 	strb.w	r1, [r3], #1
3418ed06:	e7f9      	b.n	3418ecfc <memset+0x4>

3418ed08 <__libc_init_array>:
3418ed08:	b570      	push	{r4, r5, r6, lr}
3418ed0a:	4d0d      	ldr	r5, [pc, #52]	@ (3418ed40 <__libc_init_array+0x38>)
3418ed0c:	2600      	movs	r6, #0
3418ed0e:	4c0d      	ldr	r4, [pc, #52]	@ (3418ed44 <__libc_init_array+0x3c>)
3418ed10:	1b64      	subs	r4, r4, r5
3418ed12:	10a4      	asrs	r4, r4, #2
3418ed14:	42a6      	cmp	r6, r4
3418ed16:	d109      	bne.n	3418ed2c <__libc_init_array+0x24>
3418ed18:	4d0b      	ldr	r5, [pc, #44]	@ (3418ed48 <__libc_init_array+0x40>)
3418ed1a:	2600      	movs	r6, #0
3418ed1c:	4c0b      	ldr	r4, [pc, #44]	@ (3418ed4c <__libc_init_array+0x44>)
3418ed1e:	f000 f825 	bl	3418ed6c <_init>
3418ed22:	1b64      	subs	r4, r4, r5
3418ed24:	10a4      	asrs	r4, r4, #2
3418ed26:	42a6      	cmp	r6, r4
3418ed28:	d105      	bne.n	3418ed36 <__libc_init_array+0x2e>
3418ed2a:	bd70      	pop	{r4, r5, r6, pc}
3418ed2c:	f855 3b04 	ldr.w	r3, [r5], #4
3418ed30:	3601      	adds	r6, #1
3418ed32:	4798      	blx	r3
3418ed34:	e7ee      	b.n	3418ed14 <__libc_init_array+0xc>
3418ed36:	f855 3b04 	ldr.w	r3, [r5], #4
3418ed3a:	3601      	adds	r6, #1
3418ed3c:	4798      	blx	r3
3418ed3e:	e7f2      	b.n	3418ed26 <__libc_init_array+0x1e>
3418ed40:	3418edc8 	.word	0x3418edc8
3418ed44:	3418edc8 	.word	0x3418edc8
3418ed48:	3418edc8 	.word	0x3418edc8
3418ed4c:	3418edcc 	.word	0x3418edcc

3418ed50 <memcpy>:
3418ed50:	440a      	add	r2, r1
3418ed52:	1e43      	subs	r3, r0, #1
3418ed54:	4291      	cmp	r1, r2
3418ed56:	d100      	bne.n	3418ed5a <memcpy+0xa>
3418ed58:	4770      	bx	lr
3418ed5a:	b510      	push	{r4, lr}
3418ed5c:	f811 4b01 	ldrb.w	r4, [r1], #1
3418ed60:	4291      	cmp	r1, r2
3418ed62:	f803 4f01 	strb.w	r4, [r3, #1]!
3418ed66:	d1f9      	bne.n	3418ed5c <memcpy+0xc>
3418ed68:	bd10      	pop	{r4, pc}
	...

3418ed6c <_init>:
3418ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418ed6e:	bf00      	nop
3418ed70:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418ed72:	bc08      	pop	{r3}
3418ed74:	469e      	mov	lr, r3
3418ed76:	4770      	bx	lr

3418ed78 <_fini>:
3418ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418ed7a:	bf00      	nop
3418ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418ed7e:	bc08      	pop	{r3}
3418ed80:	469e      	mov	lr, r3
3418ed82:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3418ede0 <SECURE_SystemCoreClockUpdate>:
3418ede0:	e97f e97f 	sg
3418ede4:	f7f2 b98a 	b.w	341810fc <__acle_se_SECURE_SystemCoreClockUpdate>
	...
