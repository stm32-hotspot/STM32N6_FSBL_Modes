
PSRAM_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef34  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  3418f680  3418f680  0000f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  3418f6c4  3418f6c4  00010700  2**0
                  CONTENTS
  4 .ARM          00000000  3418f6c4  3418f6c4  00010700  2**0
                  CONTENTS
  5 .preinit_array 00000000  3418f6c4  3418f6c4  00010700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  3418f6c4  3418f6c4  0000f6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  3418f6c8  3418f6c8  0000f6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  341c0000  3418f6cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c000c  3418f6d8  0001000c  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  3418f6e0  3418f6e0  000106e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000003d0  341c0010  341c0010  00011010  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  341c03e0  341c03e0  00011010  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00010700  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f465  00000000  00000000  0001073a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d7c  00000000  00000000  0002fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  00032920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000129e  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00052662  00000000  00000000  00035446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000178c5  00000000  00000000  00087aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00207e3f  00000000  00000000  0009f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a71ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000065a0  00000000  00000000  002a71f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000094  00000000  00000000  002ad790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0010 	.word	0x341c0010
34180768:	00000000 	.word	0x00000000
3418076c:	3418f668 	.word	0x3418f668

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c0014 	.word	0x341c0014
34180788:	3418f668 	.word	0x3418f668

3418078c <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
3418078c:	b580      	push	{r7, lr}
3418078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
34180790:	f44f 72ac 	mov.w	r2, #344	@ 0x158
34180794:	2100      	movs	r1, #0
34180796:	4836      	ldr	r0, [pc, #216]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180798:	f00e ff2c 	bl	3418f5f4 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
3418079c:	4b34      	ldr	r3, [pc, #208]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
3418079e:	2200      	movs	r2, #0
341807a0:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
341807a2:	4b33      	ldr	r3, [pc, #204]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807a4:	4a33      	ldr	r2, [pc, #204]	@ (34180874 <MX_EXTMEM_MANAGER_Init+0xe8>)
341807a6:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
341807a8:	4b31      	ldr	r3, [pc, #196]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807aa:	2203      	movs	r2, #3
341807ac:	721a      	strb	r2, [r3, #8]

  /* EXTMEMORY_2 */
  extmem_list_config[1].MemType = EXTMEM_PSRAM;
341807ae:	4b30      	ldr	r3, [pc, #192]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807b0:	2202      	movs	r2, #2
341807b2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
  extmem_list_config[1].Handle = (void*)&hxspi1;
341807b6:	4b2e      	ldr	r3, [pc, #184]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807b8:	4a2f      	ldr	r2, [pc, #188]	@ (34180878 <MX_EXTMEM_MANAGER_Init+0xec>)
341807ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  extmem_list_config[1].ConfigType = EXTMEM_LINK_CONFIG_16LINES;
341807be:	4b2c      	ldr	r3, [pc, #176]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807c0:	2204      	movs	r2, #4
341807c2:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

  extmem_list_config[1].PsramObject.psram_public.MemorySize = HAL_XSPI_SIZE_256MB;
341807c6:	4b2a      	ldr	r3, [pc, #168]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807c8:	2218      	movs	r2, #24
341807ca:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  extmem_list_config[1].PsramObject.psram_public.FreqMax = 200 * 1000000u;
341807ce:	4b28      	ldr	r3, [pc, #160]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807d0:	4a2a      	ldr	r2, [pc, #168]	@ (3418087c <MX_EXTMEM_MANAGER_Init+0xf0>)
341807d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  extmem_list_config[1].PsramObject.psram_public.NumberOfConfig = 1u;
341807d6:	4b26      	ldr	r3, [pc, #152]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807d8:	2201      	movs	r2, #1
341807da:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114

  /* Config */
  extmem_list_config[1].PsramObject.psram_public.config[0].WriteMask = 0x40u;
341807de:	4b24      	ldr	r3, [pc, #144]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807e0:	2240      	movs	r2, #64	@ 0x40
341807e2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
  extmem_list_config[1].PsramObject.psram_public.config[0].WriteValue = 0x40u;
341807e6:	4b22      	ldr	r3, [pc, #136]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807e8:	2240      	movs	r2, #64	@ 0x40
341807ea:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
  extmem_list_config[1].PsramObject.psram_public.config[0].REGAddress = 0x08u;
341807ee:	4b20      	ldr	r3, [pc, #128]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807f0:	2208      	movs	r2, #8
341807f2:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

  /* Memory command configuration */
  extmem_list_config[1].PsramObject.psram_public.ReadREG           = 0x40u;
341807f6:	4b1e      	ldr	r3, [pc, #120]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
341807f8:	2240      	movs	r2, #64	@ 0x40
341807fa:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
  extmem_list_config[1].PsramObject.psram_public.WriteREG          = 0xC0u;
341807fe:	4b1c      	ldr	r3, [pc, #112]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180800:	22c0      	movs	r2, #192	@ 0xc0
34180802:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
  extmem_list_config[1].PsramObject.psram_public.ReadREGSize       = 2u;
34180806:	4b1a      	ldr	r3, [pc, #104]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180808:	2202      	movs	r2, #2
3418080a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  extmem_list_config[1].PsramObject.psram_public.REG_DummyCycle    = 4u;
3418080e:	4b18      	ldr	r3, [pc, #96]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180810:	2204      	movs	r2, #4
34180812:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  extmem_list_config[1].PsramObject.psram_public.Write_command     = 0xA0u;
34180816:	4b16      	ldr	r3, [pc, #88]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180818:	22a0      	movs	r2, #160	@ 0xa0
3418081a:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
  extmem_list_config[1].PsramObject.psram_public.Write_DummyCycle  = 4u;
3418081e:	4b14      	ldr	r3, [pc, #80]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180820:	2204      	movs	r2, #4
34180822:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
  extmem_list_config[1].PsramObject.psram_public.Read_command      = 0x20u;
34180826:	4b12      	ldr	r3, [pc, #72]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180828:	2220      	movs	r2, #32
3418082a:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
  extmem_list_config[1].PsramObject.psram_public.WrapRead_command  = 0x00u;
3418082e:	4b10      	ldr	r3, [pc, #64]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180830:	2200      	movs	r2, #0
34180832:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
  extmem_list_config[1].PsramObject.psram_public.Read_DummyCycle   = 4u;
34180836:	4b0e      	ldr	r3, [pc, #56]	@ (34180870 <MX_EXTMEM_MANAGER_Init+0xe4>)
34180838:	2204      	movs	r2, #4
3418083a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
3418083e:	f04f 0000 	mov.w	r0, #0
34180842:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34180846:	f006 fe0b 	bl	34187460 <HAL_RCCEx_GetPeriphCLKFreq>
3418084a:	4603      	mov	r3, r0
3418084c:	4619      	mov	r1, r3
3418084e:	2000      	movs	r0, #0
34180850:	f00c f8e8 	bl	3418ca24 <EXTMEM_Init>
  EXTMEM_Init(EXTMEMORY_2, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1));
34180854:	f04f 0000 	mov.w	r0, #0
34180858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3418085c:	f006 fe00 	bl	34187460 <HAL_RCCEx_GetPeriphCLKFreq>
34180860:	4603      	mov	r3, r0
34180862:	4619      	mov	r1, r3
34180864:	2001      	movs	r0, #1
34180866:	f00c f8dd 	bl	3418ca24 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
3418086a:	bf00      	nop
3418086c:	bd80      	pop	{r7, pc}
3418086e:	bf00      	nop
34180870:	341c0100 	.word	0x341c0100
34180874:	341c0090 	.word	0x341c0090
34180878:	341c002c 	.word	0x341c002c
3418087c:	0bebc200 	.word	0x0bebc200

34180880 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180880:	b480      	push	{r7}
34180882:	b085      	sub	sp, #20
34180884:	af00      	add	r7, sp, #0
34180886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180888:	4a07      	ldr	r2, [pc, #28]	@ (341808a8 <LL_AHB4_GRP1_EnableClock+0x28>)
3418088a:	687b      	ldr	r3, [r7, #4]
3418088c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180890:	4b05      	ldr	r3, [pc, #20]	@ (341808a8 <LL_AHB4_GRP1_EnableClock+0x28>)
34180892:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180898:	68fb      	ldr	r3, [r7, #12]
}
3418089a:	bf00      	nop
3418089c:	3714      	adds	r7, #20
3418089e:	46bd      	mov	sp, r7
341808a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341808a4:	4770      	bx	lr
341808a6:	bf00      	nop
341808a8:	56028000 	.word	0x56028000

341808ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
341808ac:	b580      	push	{r7, lr}
341808ae:	b084      	sub	sp, #16
341808b0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
341808b2:	4b3d      	ldr	r3, [pc, #244]	@ (341809a8 <main+0xfc>)
341808b4:	695b      	ldr	r3, [r3, #20]
341808b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341808ba:	2b00      	cmp	r3, #0
341808bc:	d11b      	bne.n	341808f6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
341808be:	f3bf 8f4f 	dsb	sy
}
341808c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341808c4:	f3bf 8f6f 	isb	sy
}
341808c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
341808ca:	4b37      	ldr	r3, [pc, #220]	@ (341809a8 <main+0xfc>)
341808cc:	2200      	movs	r2, #0
341808ce:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
341808d2:	f3bf 8f4f 	dsb	sy
}
341808d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341808d8:	f3bf 8f6f 	isb	sy
}
341808dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
341808de:	4b32      	ldr	r3, [pc, #200]	@ (341809a8 <main+0xfc>)
341808e0:	695b      	ldr	r3, [r3, #20]
341808e2:	4a31      	ldr	r2, [pc, #196]	@ (341809a8 <main+0xfc>)
341808e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341808e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
341808ea:	f3bf 8f4f 	dsb	sy
}
341808ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341808f0:	f3bf 8f6f 	isb	sy
}
341808f4:	e000      	b.n	341808f8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
341808f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
341808f8:	4b2b      	ldr	r3, [pc, #172]	@ (341809a8 <main+0xfc>)
341808fa:	695b      	ldr	r3, [r3, #20]
341808fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34180900:	2b00      	cmp	r3, #0
34180902:	d138      	bne.n	34180976 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34180904:	4b28      	ldr	r3, [pc, #160]	@ (341809a8 <main+0xfc>)
34180906:	2200      	movs	r2, #0
34180908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418090c:	f3bf 8f4f 	dsb	sy
}
34180910:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
34180912:	4b25      	ldr	r3, [pc, #148]	@ (341809a8 <main+0xfc>)
34180914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34180918:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3418091a:	68fb      	ldr	r3, [r7, #12]
3418091c:	0b5b      	lsrs	r3, r3, #13
3418091e:	f3c3 030e 	ubfx	r3, r3, #0, #15
34180922:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34180924:	68fb      	ldr	r3, [r7, #12]
34180926:	08db      	lsrs	r3, r3, #3
34180928:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418092c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3418092e:	68bb      	ldr	r3, [r7, #8]
34180930:	015a      	lsls	r2, r3, #5
34180932:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34180936:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
34180938:	687a      	ldr	r2, [r7, #4]
3418093a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3418093c:	491a      	ldr	r1, [pc, #104]	@ (341809a8 <main+0xfc>)
3418093e:	4313      	orrs	r3, r2
34180940:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
34180944:	687b      	ldr	r3, [r7, #4]
34180946:	1e5a      	subs	r2, r3, #1
34180948:	607a      	str	r2, [r7, #4]
3418094a:	2b00      	cmp	r3, #0
3418094c:	d1ef      	bne.n	3418092e <main+0x82>
    } while(sets-- != 0U);
3418094e:	68bb      	ldr	r3, [r7, #8]
34180950:	1e5a      	subs	r2, r3, #1
34180952:	60ba      	str	r2, [r7, #8]
34180954:	2b00      	cmp	r3, #0
34180956:	d1e5      	bne.n	34180924 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
34180958:	f3bf 8f4f 	dsb	sy
}
3418095c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
3418095e:	4b12      	ldr	r3, [pc, #72]	@ (341809a8 <main+0xfc>)
34180960:	695b      	ldr	r3, [r3, #20]
34180962:	4a11      	ldr	r2, [pc, #68]	@ (341809a8 <main+0xfc>)
34180964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34180968:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418096a:	f3bf 8f4f 	dsb	sy
}
3418096e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180970:	f3bf 8f6f 	isb	sy
}
34180974:	e000      	b.n	34180978 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34180976:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
34180978:	f000 f980 	bl	34180c7c <MPU_Config>
  HAL_Init();
3418097c:	f000 fdf8 	bl	34181570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34180980:	f000 f814 	bl	341809ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34180984:	f000 f96a 	bl	34180c5c <MX_GPIO_Init>
  MX_XSPI1_Init();
34180988:	f000 f8b0 	bl	34180aec <MX_XSPI1_Init>
  MX_XSPI2_Init();
3418098c:	f000 f90a 	bl	34180ba4 <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
34180990:	f7ff fefc 	bl	3418078c <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
34180994:	f00b fee8 	bl	3418c768 <BOOT_Application>
34180998:	4603      	mov	r3, r0
3418099a:	2b00      	cmp	r3, #0
3418099c:	d002      	beq.n	341809a4 <main+0xf8>
  {
    Error_Handler();
3418099e:	f000 f9b1 	bl	34180d04 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
341809a2:	bf00      	nop
341809a4:	bf00      	nop
341809a6:	e7fd      	b.n	341809a4 <main+0xf8>
341809a8:	e000ed00 	.word	0xe000ed00

341809ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
341809ac:	b580      	push	{r7, lr}
341809ae:	b0b6      	sub	sp, #216	@ 0xd8
341809b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
341809b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
341809b6:	2298      	movs	r2, #152	@ 0x98
341809b8:	2100      	movs	r1, #0
341809ba:	4618      	mov	r0, r3
341809bc:	f00e fe1a 	bl	3418f5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
341809c0:	463b      	mov	r3, r7
341809c2:	2240      	movs	r2, #64	@ 0x40
341809c4:	2100      	movs	r1, #0
341809c6:	4618      	mov	r0, r3
341809c8:	f00e fe14 	bl	3418f5f4 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
341809cc:	2000      	movs	r0, #0
341809ce:	f001 fa47 	bl	34181e60 <HAL_PWREx_ConfigSupply>
341809d2:	4603      	mov	r3, r0
341809d4:	2b00      	cmp	r3, #0
341809d6:	d001      	beq.n	341809dc <SystemClock_Config+0x30>
  {
    Error_Handler();
341809d8:	f000 f994 	bl	34180d04 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
341809dc:	2302      	movs	r3, #2
341809de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
341809e0:	2308      	movs	r3, #8
341809e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
341809e4:	2300      	movs	r3, #0
341809e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
341809e8:	2300      	movs	r3, #0
341809ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
341809ec:	2300      	movs	r3, #0
341809ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
341809f0:	2300      	movs	r3, #0
341809f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
341809f6:	2300      	movs	r3, #0
341809f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
341809fc:	2300      	movs	r3, #0
341809fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180a02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180a06:	4618      	mov	r0, r3
34180a08:	f001 fcec 	bl	341823e4 <HAL_RCC_OscConfig>
34180a0c:	4603      	mov	r3, r0
34180a0e:	2b00      	cmp	r3, #0
34180a10:	d001      	beq.n	34180a16 <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180a12:	f000 f977 	bl	34180d04 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180a16:	463b      	mov	r3, r7
34180a18:	4618      	mov	r0, r3
34180a1a:	f002 fbc3 	bl	341831a4 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180a1e:	687b      	ldr	r3, [r7, #4]
34180a20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180a24:	d003      	beq.n	34180a2e <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180a26:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180a28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180a2c:	d10e      	bne.n	34180a4c <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180a2e:	2303      	movs	r3, #3
34180a30:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180a32:	2300      	movs	r3, #0
34180a34:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180a36:	2300      	movs	r3, #0
34180a38:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180a3a:	463b      	mov	r3, r7
34180a3c:	4618      	mov	r0, r3
34180a3e:	f002 f8b1 	bl	34182ba4 <HAL_RCC_ClockConfig>
34180a42:	4603      	mov	r3, r0
34180a44:	2b00      	cmp	r3, #0
34180a46:	d001      	beq.n	34180a4c <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34180a48:	f000 f95c 	bl	34180d04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34180a4c:	2300      	movs	r3, #0
34180a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180a50:	2302      	movs	r3, #2
34180a52:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180a54:	2300      	movs	r3, #0
34180a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 1;
34180a58:	2301      	movs	r3, #1
34180a5a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 25;
34180a5c:	2319      	movs	r3, #25
34180a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180a60:	2300      	movs	r3, #0
34180a62:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180a64:	2301      	movs	r3, #1
34180a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180a68:	2301      	movs	r3, #1
34180a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180a6e:	2300      	movs	r3, #0
34180a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180a74:	2300      	movs	r3, #0
34180a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180a7a:	2300      	movs	r3, #0
34180a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180a80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180a84:	4618      	mov	r0, r3
34180a86:	f001 fcad 	bl	341823e4 <HAL_RCC_OscConfig>
34180a8a:	4603      	mov	r3, r0
34180a8c:	2b00      	cmp	r3, #0
34180a8e:	d001      	beq.n	34180a94 <SystemClock_Config+0xe8>
  {
    Error_Handler();
34180a90:	f000 f938 	bl	34180d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180a94:	237f      	movs	r3, #127	@ 0x7f
34180a96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180a98:	2300      	movs	r3, #0
34180a9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34180a9c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34180aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180aa2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180aa8:	2300      	movs	r3, #0
34180aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180aac:	2300      	movs	r3, #0
34180aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180ab0:	2300      	movs	r3, #0
34180ab2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180ab4:	2300      	movs	r3, #0
34180ab6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180ab8:	2300      	movs	r3, #0
34180aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 25;
34180abc:	2319      	movs	r3, #25
34180abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180ac0:	2300      	movs	r3, #0
34180ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
34180ac4:	2304      	movs	r3, #4
34180ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180ac8:	2300      	movs	r3, #0
34180aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 4;
34180acc:	2304      	movs	r3, #4
34180ace:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180ad0:	463b      	mov	r3, r7
34180ad2:	4618      	mov	r0, r3
34180ad4:	f002 f866 	bl	34182ba4 <HAL_RCC_ClockConfig>
34180ad8:	4603      	mov	r3, r0
34180ada:	2b00      	cmp	r3, #0
34180adc:	d001      	beq.n	34180ae2 <SystemClock_Config+0x136>
  {
    Error_Handler();
34180ade:	f000 f911 	bl	34180d04 <Error_Handler>
  }
}
34180ae2:	bf00      	nop
34180ae4:	37d8      	adds	r7, #216	@ 0xd8
34180ae6:	46bd      	mov	sp, r7
34180ae8:	bd80      	pop	{r7, pc}
	...

34180aec <MX_XSPI1_Init>:
  * @brief XSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI1_Init(void)
{
34180aec:	b580      	push	{r7, lr}
34180aee:	b084      	sub	sp, #16
34180af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34180af2:	1d3b      	adds	r3, r7, #4
34180af4:	2200      	movs	r2, #0
34180af6:	601a      	str	r2, [r3, #0]
34180af8:	605a      	str	r2, [r3, #4]
34180afa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
34180afc:	4b27      	ldr	r3, [pc, #156]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180afe:	4a28      	ldr	r2, [pc, #160]	@ (34180ba0 <MX_XSPI1_Init+0xb4>)
34180b00:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
34180b02:	4b26      	ldr	r3, [pc, #152]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b04:	2204      	movs	r2, #4
34180b06:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34180b08:	4b24      	ldr	r3, [pc, #144]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b0a:	2200      	movs	r2, #0
34180b0c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
34180b0e:	4b23      	ldr	r3, [pc, #140]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b10:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
34180b14:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_256MB;
34180b16:	4b21      	ldr	r3, [pc, #132]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b18:	2218      	movs	r2, #24
34180b1a:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
34180b1c:	4b1f      	ldr	r3, [pc, #124]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b1e:	2201      	movs	r2, #1
34180b20:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34180b22:	4b1e      	ldr	r3, [pc, #120]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b24:	2200      	movs	r2, #0
34180b26:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34180b28:	4b1c      	ldr	r3, [pc, #112]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b2a:	2200      	movs	r2, #0
34180b2c:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34180b2e:	4b1b      	ldr	r3, [pc, #108]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b30:	2200      	movs	r2, #0
34180b32:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
34180b34:	4b19      	ldr	r3, [pc, #100]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b36:	2200      	movs	r2, #0
34180b38:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34180b3a:	4b18      	ldr	r3, [pc, #96]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b3c:	2200      	movs	r2, #0
34180b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34180b40:	4b16      	ldr	r3, [pc, #88]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b42:	2200      	movs	r2, #0
34180b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34180b46:	4b15      	ldr	r3, [pc, #84]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b48:	2200      	movs	r2, #0
34180b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
34180b4c:	4b13      	ldr	r3, [pc, #76]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b4e:	2200      	movs	r2, #0
34180b50:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
34180b52:	4b12      	ldr	r3, [pc, #72]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b54:	2200      	movs	r2, #0
34180b56:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34180b58:	4b10      	ldr	r3, [pc, #64]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b5a:	2200      	movs	r2, #0
34180b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
34180b5e:	480f      	ldr	r0, [pc, #60]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b60:	f00a fe5e 	bl	3418b820 <HAL_XSPI_Init>
34180b64:	4603      	mov	r3, r0
34180b66:	2b00      	cmp	r3, #0
34180b68:	d001      	beq.n	34180b6e <MX_XSPI1_Init+0x82>
  {
    Error_Handler();
34180b6a:	f000 f8cb 	bl	34180d04 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34180b6e:	2310      	movs	r3, #16
34180b70:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
34180b72:	2300      	movs	r3, #0
34180b74:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34180b76:	2301      	movs	r3, #1
34180b78:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34180b7a:	1d3b      	adds	r3, r7, #4
34180b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
34180b80:	4619      	mov	r1, r3
34180b82:	4806      	ldr	r0, [pc, #24]	@ (34180b9c <MX_XSPI1_Init+0xb0>)
34180b84:	f00b fa90 	bl	3418c0a8 <HAL_XSPIM_Config>
34180b88:	4603      	mov	r3, r0
34180b8a:	2b00      	cmp	r3, #0
34180b8c:	d001      	beq.n	34180b92 <MX_XSPI1_Init+0xa6>
  {
    Error_Handler();
34180b8e:	f000 f8b9 	bl	34180d04 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
34180b92:	bf00      	nop
34180b94:	3710      	adds	r7, #16
34180b96:	46bd      	mov	sp, r7
34180b98:	bd80      	pop	{r7, pc}
34180b9a:	bf00      	nop
34180b9c:	341c002c 	.word	0x341c002c
34180ba0:	58025000 	.word	0x58025000

34180ba4 <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
34180ba4:	b580      	push	{r7, lr}
34180ba6:	b084      	sub	sp, #16
34180ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34180baa:	1d3b      	adds	r3, r7, #4
34180bac:	2200      	movs	r2, #0
34180bae:	601a      	str	r2, [r3, #0]
34180bb0:	605a      	str	r2, [r3, #4]
34180bb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
34180bb4:	4b27      	ldr	r3, [pc, #156]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bb6:	4a28      	ldr	r2, [pc, #160]	@ (34180c58 <MX_XSPI2_Init+0xb4>)
34180bb8:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
34180bba:	4b26      	ldr	r3, [pc, #152]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bbc:	2204      	movs	r2, #4
34180bbe:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34180bc0:	4b24      	ldr	r3, [pc, #144]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bc2:	2200      	movs	r2, #0
34180bc4:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
34180bc6:	4b23      	ldr	r3, [pc, #140]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34180bcc:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
34180bce:	4b21      	ldr	r3, [pc, #132]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bd0:	221a      	movs	r2, #26
34180bd2:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
34180bd4:	4b1f      	ldr	r3, [pc, #124]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bd6:	2201      	movs	r2, #1
34180bd8:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34180bda:	4b1e      	ldr	r3, [pc, #120]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bdc:	2200      	movs	r2, #0
34180bde:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34180be0:	4b1c      	ldr	r3, [pc, #112]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180be2:	2200      	movs	r2, #0
34180be4:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34180be6:	4b1b      	ldr	r3, [pc, #108]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180be8:	2200      	movs	r2, #0
34180bea:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
34180bec:	4b19      	ldr	r3, [pc, #100]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bee:	2200      	movs	r2, #0
34180bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34180bf2:	4b18      	ldr	r3, [pc, #96]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bf4:	2200      	movs	r2, #0
34180bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34180bf8:	4b16      	ldr	r3, [pc, #88]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34180bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34180c00:	4b14      	ldr	r3, [pc, #80]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c02:	2200      	movs	r2, #0
34180c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
34180c06:	4b13      	ldr	r3, [pc, #76]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c08:	2200      	movs	r2, #0
34180c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
34180c0c:	4b11      	ldr	r3, [pc, #68]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c0e:	2200      	movs	r2, #0
34180c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34180c12:	4b10      	ldr	r3, [pc, #64]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c14:	2200      	movs	r2, #0
34180c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
34180c18:	480e      	ldr	r0, [pc, #56]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c1a:	f00a fe01 	bl	3418b820 <HAL_XSPI_Init>
34180c1e:	4603      	mov	r3, r0
34180c20:	2b00      	cmp	r3, #0
34180c22:	d001      	beq.n	34180c28 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
34180c24:	f000 f86e 	bl	34180d04 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34180c28:	2310      	movs	r3, #16
34180c2a:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
34180c2c:	2301      	movs	r3, #1
34180c2e:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34180c30:	2301      	movs	r3, #1
34180c32:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34180c34:	1d3b      	adds	r3, r7, #4
34180c36:	f241 3288 	movw	r2, #5000	@ 0x1388
34180c3a:	4619      	mov	r1, r3
34180c3c:	4805      	ldr	r0, [pc, #20]	@ (34180c54 <MX_XSPI2_Init+0xb0>)
34180c3e:	f00b fa33 	bl	3418c0a8 <HAL_XSPIM_Config>
34180c42:	4603      	mov	r3, r0
34180c44:	2b00      	cmp	r3, #0
34180c46:	d001      	beq.n	34180c4c <MX_XSPI2_Init+0xa8>
  {
    Error_Handler();
34180c48:	f000 f85c 	bl	34180d04 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
34180c4c:	bf00      	nop
34180c4e:	3710      	adds	r7, #16
34180c50:	46bd      	mov	sp, r7
34180c52:	bd80      	pop	{r7, pc}
34180c54:	341c0090 	.word	0x341c0090
34180c58:	5802a000 	.word	0x5802a000

34180c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34180c5c:	b580      	push	{r7, lr}
34180c5e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOP_CLK_ENABLE();
34180c60:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34180c64:	f7ff fe0c 	bl	34180880 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
34180c68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34180c6c:	f7ff fe08 	bl	34180880 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
34180c70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180c74:	f7ff fe04 	bl	34180880 <LL_AHB4_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
34180c78:	bf00      	nop
34180c7a:	bd80      	pop	{r7, pc}

34180c7c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
34180c7c:	b580      	push	{r7, lr}
34180c7e:	b086      	sub	sp, #24
34180c80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
34180c82:	f107 0308 	add.w	r3, r7, #8
34180c86:	2200      	movs	r2, #0
34180c88:	601a      	str	r2, [r3, #0]
34180c8a:	605a      	str	r2, [r3, #4]
34180c8c:	609a      	str	r2, [r3, #8]
34180c8e:	60da      	str	r2, [r3, #12]
  MPU_Attributes_InitTypeDef MPU_AttributesInit = {0};
34180c90:	2300      	movs	r3, #0
34180c92:	80bb      	strh	r3, [r7, #4]

  /* Disables the MPU */
  HAL_MPU_Disable();
34180c94:	f000 fe12 	bl	341818bc <HAL_MPU_Disable>

  /** Initializes and configures the Region 0 and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
34180c98:	2301      	movs	r3, #1
34180c9a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
34180c9c:	2300      	movs	r3, #0
34180c9e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.BaseAddress = 0x70000000;
34180ca0:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
34180ca4:	60fb      	str	r3, [r7, #12]
  MPU_InitStruct.LimitAddress = 0x78000000-1;
34180ca6:	f06f 4308 	mvn.w	r3, #2281701376	@ 0x88000000
34180caa:	613b      	str	r3, [r7, #16]
  MPU_InitStruct.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
34180cac:	2300      	movs	r3, #0
34180cae:	753b      	strb	r3, [r7, #20]
  MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
34180cb0:	2303      	movs	r3, #3
34180cb2:	757b      	strb	r3, [r7, #21]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
34180cb4:	2300      	movs	r3, #0
34180cb6:	75bb      	strb	r3, [r7, #22]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
34180cb8:	2300      	movs	r3, #0
34180cba:	75fb      	strb	r3, [r7, #23]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
34180cbc:	f107 0308 	add.w	r3, r7, #8
34180cc0:	4618      	mov	r0, r3
34180cc2:	f000 fe1b 	bl	341818fc <HAL_MPU_ConfigRegion>
  MPU_AttributesInit.Number = MPU_ATTRIBUTES_NUMBER0;
34180cc6:	2300      	movs	r3, #0
34180cc8:	713b      	strb	r3, [r7, #4]
  MPU_AttributesInit.Attributes = INNER_OUTER(MPU_WRITE_BACK|MPU_TRANSIENT
34180cca:	2377      	movs	r3, #119	@ 0x77
34180ccc:	717b      	strb	r3, [r7, #5]
                              |MPU_RW_ALLOCATE);

  HAL_MPU_ConfigMemoryAttributes(&MPU_AttributesInit);
34180cce:	1d3b      	adds	r3, r7, #4
34180cd0:	4618      	mov	r0, r3
34180cd2:	f000 fe21 	bl	34181918 <HAL_MPU_ConfigMemoryAttributes>

  /** Initializes and configures the Region 1 and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
34180cd6:	2301      	movs	r3, #1
34180cd8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.BaseAddress = 0x91000000;
34180cda:	f04f 4311 	mov.w	r3, #2432696320	@ 0x91000000
34180cde:	60fb      	str	r3, [r7, #12]
  MPU_InitStruct.LimitAddress = 0x91080000-1;
34180ce0:	4b07      	ldr	r3, [pc, #28]	@ (34180d00 <MPU_Config+0x84>)
34180ce2:	613b      	str	r3, [r7, #16]
  MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RW;
34180ce4:	2301      	movs	r3, #1
34180ce6:	757b      	strb	r3, [r7, #21]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
34180ce8:	f107 0308 	add.w	r3, r7, #8
34180cec:	4618      	mov	r0, r3
34180cee:	f000 fe05 	bl	341818fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
34180cf2:	2004      	movs	r0, #4
34180cf4:	f000 fdc0 	bl	34181878 <HAL_MPU_Enable>

}
34180cf8:	bf00      	nop
34180cfa:	3718      	adds	r7, #24
34180cfc:	46bd      	mov	sp, r7
34180cfe:	bd80      	pop	{r7, pc}
34180d00:	9107ffff 	.word	0x9107ffff

34180d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34180d04:	b480      	push	{r7}
34180d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34180d08:	b672      	cpsid	i
}
34180d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34180d0c:	bf00      	nop
34180d0e:	e7fd      	b.n	34180d0c <Error_Handler+0x8>

34180d10 <LL_AHB4_GRP1_EnableClock>:
{
34180d10:	b480      	push	{r7}
34180d12:	b085      	sub	sp, #20
34180d14:	af00      	add	r7, sp, #0
34180d16:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180d18:	4a07      	ldr	r2, [pc, #28]	@ (34180d38 <LL_AHB4_GRP1_EnableClock+0x28>)
34180d1a:	687b      	ldr	r3, [r7, #4]
34180d1c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34180d20:	4b05      	ldr	r3, [pc, #20]	@ (34180d38 <LL_AHB4_GRP1_EnableClock+0x28>)
34180d22:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180d26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180d28:	68fb      	ldr	r3, [r7, #12]
}
34180d2a:	bf00      	nop
34180d2c:	3714      	adds	r7, #20
34180d2e:	46bd      	mov	sp, r7
34180d30:	f85d 7b04 	ldr.w	r7, [sp], #4
34180d34:	4770      	bx	lr
34180d36:	bf00      	nop
34180d38:	56028000 	.word	0x56028000

34180d3c <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34180d3c:	b480      	push	{r7}
34180d3e:	b085      	sub	sp, #20
34180d40:	af00      	add	r7, sp, #0
34180d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34180d44:	4a07      	ldr	r2, [pc, #28]	@ (34180d64 <LL_AHB5_GRP1_EnableClock+0x28>)
34180d46:	687b      	ldr	r3, [r7, #4]
34180d48:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34180d4c:	4b05      	ldr	r3, [pc, #20]	@ (34180d64 <LL_AHB5_GRP1_EnableClock+0x28>)
34180d4e:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34180d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180d54:	68fb      	ldr	r3, [r7, #12]
}
34180d56:	bf00      	nop
34180d58:	3714      	adds	r7, #20
34180d5a:	46bd      	mov	sp, r7
34180d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34180d60:	4770      	bx	lr
34180d62:	bf00      	nop
34180d64:	56028000 	.word	0x56028000

34180d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34180d68:	b580      	push	{r7, lr}
34180d6a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34180d6c:	f001 f8a0 	bl	34181eb0 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34180d70:	f001 f8ae 	bl	34181ed0 <HAL_PWREx_EnableVddIO3>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34180d74:	bf00      	nop
34180d76:	bd80      	pop	{r7, pc}

34180d78 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
34180d78:	b580      	push	{r7, lr}
34180d7a:	b0ec      	sub	sp, #432	@ 0x1b0
34180d7c:	af00      	add	r7, sp, #0
34180d7e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180d82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180d86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180d88:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180d8c:	2200      	movs	r2, #0
34180d8e:	601a      	str	r2, [r3, #0]
34180d90:	605a      	str	r2, [r3, #4]
34180d92:	609a      	str	r2, [r3, #8]
34180d94:	60da      	str	r2, [r3, #12]
34180d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180d98:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180d9c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180da0:	4618      	mov	r0, r3
34180da2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180da6:	461a      	mov	r2, r3
34180da8:	2100      	movs	r1, #0
34180daa:	f00e fc23 	bl	3418f5f4 <memset>
  if(hxspi->Instance==XSPI1)
34180dae:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180db2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180db6:	681b      	ldr	r3, [r3, #0]
34180db8:	681b      	ldr	r3, [r3, #0]
34180dba:	4a61      	ldr	r2, [pc, #388]	@ (34180f40 <HAL_XSPI_MspInit+0x1c8>)
34180dbc:	4293      	cmp	r3, r2
34180dbe:	d15e      	bne.n	34180e7e <HAL_XSPI_MspInit+0x106>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
34180dc0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180dc4:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34180dc8:	f04f 0200 	mov.w	r2, #0
34180dcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34180dd0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34180dd4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180dd8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180ddc:	4a59      	ldr	r2, [pc, #356]	@ (34180f44 <HAL_XSPI_MspInit+0x1cc>)
34180dde:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180de2:	f107 0308 	add.w	r3, r7, #8
34180de6:	4618      	mov	r0, r3
34180de8:	f004 f856 	bl	34184e98 <HAL_RCCEx_PeriphCLKConfig>
34180dec:	4603      	mov	r3, r0
34180dee:	2b00      	cmp	r3, #0
34180df0:	d001      	beq.n	34180df6 <HAL_XSPI_MspInit+0x7e>
    {
      Error_Handler();
34180df2:	f7ff ff87 	bl	34180d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
34180df6:	4b54      	ldr	r3, [pc, #336]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180df8:	681b      	ldr	r3, [r3, #0]
34180dfa:	3301      	adds	r3, #1
34180dfc:	4a52      	ldr	r2, [pc, #328]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180dfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34180e00:	4b51      	ldr	r3, [pc, #324]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180e02:	681b      	ldr	r3, [r3, #0]
34180e04:	2b01      	cmp	r3, #1
34180e06:	d103      	bne.n	34180e10 <HAL_XSPI_MspInit+0x98>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34180e08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180e0c:	f7ff ff96 	bl	34180d3c <LL_AHB5_GRP1_EnableClock>
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
34180e10:	2020      	movs	r0, #32
34180e12:	f7ff ff93 	bl	34180d3c <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOP_CLK_ENABLE();
34180e16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34180e1a:	f7ff ff79 	bl	34180d10 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOO_CLK_ENABLE();
34180e1e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34180e22:	f7ff ff75 	bl	34180d10 <LL_AHB4_GRP1_EnableClock>
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    PP10     ------> XSPIM_P1_IO10
    PO4     ------> XSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_4
34180e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34180e2a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                          |GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180e2e:	2302      	movs	r3, #2
34180e30:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34180e34:	2300      	movs	r3, #0
34180e36:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34180e3a:	2303      	movs	r3, #3
34180e3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34180e40:	2309      	movs	r3, #9
34180e42:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
34180e46:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180e4a:	4619      	mov	r1, r3
34180e4c:	483f      	ldr	r0, [pc, #252]	@ (34180f4c <HAL_XSPI_MspInit+0x1d4>)
34180e4e:	f000 fe55 	bl	34181afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_4;
34180e52:	231d      	movs	r3, #29
34180e54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180e58:	2302      	movs	r3, #2
34180e5a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34180e5e:	2300      	movs	r3, #0
34180e60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34180e64:	2303      	movs	r3, #3
34180e66:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34180e6a:	2309      	movs	r3, #9
34180e6c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34180e70:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180e74:	4619      	mov	r1, r3
34180e76:	4836      	ldr	r0, [pc, #216]	@ (34180f50 <HAL_XSPI_MspInit+0x1d8>)
34180e78:	f000 fe40 	bl	34181afc <HAL_GPIO_Init>
  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }

}
34180e7c:	e05a      	b.n	34180f34 <HAL_XSPI_MspInit+0x1bc>
  else if(hxspi->Instance==XSPI2)
34180e7e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180e82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180e86:	681b      	ldr	r3, [r3, #0]
34180e88:	681b      	ldr	r3, [r3, #0]
34180e8a:	4a32      	ldr	r2, [pc, #200]	@ (34180f54 <HAL_XSPI_MspInit+0x1dc>)
34180e8c:	4293      	cmp	r3, r2
34180e8e:	d151      	bne.n	34180f34 <HAL_XSPI_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34180e90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180e94:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34180e98:	f04f 0200 	mov.w	r2, #0
34180e9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34180ea0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
34180ea4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ea8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180eac:	4a2a      	ldr	r2, [pc, #168]	@ (34180f58 <HAL_XSPI_MspInit+0x1e0>)
34180eae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180eb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180eb6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180eba:	2200      	movs	r2, #0
34180ebc:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockDivider = 32;
34180ebe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ec2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180ec6:	2220      	movs	r2, #32
34180ec8:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180eca:	f107 0308 	add.w	r3, r7, #8
34180ece:	4618      	mov	r0, r3
34180ed0:	f003 ffe2 	bl	34184e98 <HAL_RCCEx_PeriphCLKConfig>
34180ed4:	4603      	mov	r3, r0
34180ed6:	2b00      	cmp	r3, #0
34180ed8:	d001      	beq.n	34180ede <HAL_XSPI_MspInit+0x166>
      Error_Handler();
34180eda:	f7ff ff13 	bl	34180d04 <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
34180ede:	4b1a      	ldr	r3, [pc, #104]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180ee0:	681b      	ldr	r3, [r3, #0]
34180ee2:	3301      	adds	r3, #1
34180ee4:	4a18      	ldr	r2, [pc, #96]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180ee6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34180ee8:	4b17      	ldr	r3, [pc, #92]	@ (34180f48 <HAL_XSPI_MspInit+0x1d0>)
34180eea:	681b      	ldr	r3, [r3, #0]
34180eec:	2b01      	cmp	r3, #1
34180eee:	d103      	bne.n	34180ef8 <HAL_XSPI_MspInit+0x180>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34180ef0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180ef4:	f7ff ff22 	bl	34180d3c <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34180ef8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34180efc:	f7ff ff1e 	bl	34180d3c <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_GPION_CLK_ENABLE();
34180f00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180f04:	f7ff ff04 	bl	34180d10 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_0
34180f08:	f640 737f 	movw	r3, #3967	@ 0xf7f
34180f0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180f10:	2302      	movs	r3, #2
34180f12:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34180f16:	2300      	movs	r3, #0
34180f18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34180f1c:	2303      	movs	r3, #3
34180f1e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34180f22:	2309      	movs	r3, #9
34180f24:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34180f28:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180f2c:	4619      	mov	r1, r3
34180f2e:	480b      	ldr	r0, [pc, #44]	@ (34180f5c <HAL_XSPI_MspInit+0x1e4>)
34180f30:	f000 fde4 	bl	34181afc <HAL_GPIO_Init>
}
34180f34:	bf00      	nop
34180f36:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34180f3a:	46bd      	mov	sp, r7
34180f3c:	bd80      	pop	{r7, pc}
34180f3e:	bf00      	nop
34180f40:	58025000 	.word	0x58025000
34180f44:	03000014 	.word	0x03000014
34180f48:	341c00f4 	.word	0x341c00f4
34180f4c:	56023c00 	.word	0x56023c00
34180f50:	56023800 	.word	0x56023800
34180f54:	5802a000 	.word	0x5802a000
34180f58:	03020414 	.word	0x03020414
34180f5c:	56023400 	.word	0x56023400

34180f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34180f60:	b480      	push	{r7}
34180f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34180f64:	bf00      	nop
34180f66:	e7fd      	b.n	34180f64 <NMI_Handler+0x4>

34180f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34180f68:	b480      	push	{r7}
34180f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34180f6c:	bf00      	nop
34180f6e:	e7fd      	b.n	34180f6c <HardFault_Handler+0x4>

34180f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34180f70:	b480      	push	{r7}
34180f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34180f74:	bf00      	nop
34180f76:	e7fd      	b.n	34180f74 <MemManage_Handler+0x4>

34180f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34180f78:	b480      	push	{r7}
34180f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34180f7c:	bf00      	nop
34180f7e:	e7fd      	b.n	34180f7c <BusFault_Handler+0x4>

34180f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34180f80:	b480      	push	{r7}
34180f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34180f84:	bf00      	nop
34180f86:	e7fd      	b.n	34180f84 <UsageFault_Handler+0x4>

34180f88 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34180f88:	b480      	push	{r7}
34180f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34180f8c:	bf00      	nop
34180f8e:	e7fd      	b.n	34180f8c <SecureFault_Handler+0x4>

34180f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34180f90:	b480      	push	{r7}
34180f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
34180f94:	bf00      	nop
34180f96:	46bd      	mov	sp, r7
34180f98:	f85d 7b04 	ldr.w	r7, [sp], #4
34180f9c:	4770      	bx	lr

34180f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
34180f9e:	b480      	push	{r7}
34180fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
34180fa2:	bf00      	nop
34180fa4:	46bd      	mov	sp, r7
34180fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34180faa:	4770      	bx	lr

34180fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
34180fac:	b480      	push	{r7}
34180fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
34180fb0:	bf00      	nop
34180fb2:	46bd      	mov	sp, r7
34180fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34180fb8:	4770      	bx	lr

34180fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
34180fba:	b580      	push	{r7, lr}
34180fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
34180fbe:	f000 fb21 	bl	34181604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
34180fc2:	bf00      	nop
34180fc4:	bd80      	pop	{r7, pc}
	...

34180fc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34180fc8:	480f      	ldr	r0, [pc, #60]	@ (34181008 <LoopForever+0x4>)
  msr   MSPLIM, r0
34180fca:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34180fce:	480f      	ldr	r0, [pc, #60]	@ (3418100c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34180fd0:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34180fd2:	f000 f829 	bl	34181028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34180fd6:	480e      	ldr	r0, [pc, #56]	@ (34181010 <LoopForever+0xc>)
  ldr r1, =_edata
34180fd8:	490e      	ldr	r1, [pc, #56]	@ (34181014 <LoopForever+0x10>)
  ldr r2, =_sidata
34180fda:	4a0f      	ldr	r2, [pc, #60]	@ (34181018 <LoopForever+0x14>)
  movs r3, #0
34180fdc:	2300      	movs	r3, #0
  b LoopCopyDataInit
34180fde:	e002      	b.n	34180fe6 <LoopCopyDataInit>

34180fe0 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34180fe0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34180fe2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34180fe4:	3304      	adds	r3, #4

34180fe6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34180fe6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34180fe8:	428c      	cmp	r4, r1
  bcc CopyDataInit
34180fea:	d3f9      	bcc.n	34180fe0 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34180fec:	4a0b      	ldr	r2, [pc, #44]	@ (3418101c <LoopForever+0x18>)
  ldr r4, =_ebss
34180fee:	4c0c      	ldr	r4, [pc, #48]	@ (34181020 <LoopForever+0x1c>)
  movs r3, #0
34180ff0:	2300      	movs	r3, #0
  b LoopFillZerobss
34180ff2:	e001      	b.n	34180ff8 <LoopFillZerobss>

34180ff4 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34180ff4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34180ff6:	3204      	adds	r2, #4

34180ff8 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34180ff8:	42a2      	cmp	r2, r4
  bcc FillZerobss
34180ffa:	d3fb      	bcc.n	34180ff4 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34180ffc:	f00e fb02 	bl	3418f604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34181000:	f7ff fc54 	bl	341808ac <main>

34181004 <LoopForever>:

LoopForever:
  b LoopForever
34181004:	e7fe      	b.n	34181004 <LoopForever>
34181006:	0000      	.short	0x0000
  ldr   r0, =_sstack
34181008:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
3418100c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34181010:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34181014:	341c000c 	.word	0x341c000c
  ldr r2, =_sidata
34181018:	3418f6cc 	.word	0x3418f6cc
  ldr r2, =_sbss
3418101c:	341c0010 	.word	0x341c0010
  ldr r4, =_ebss
34181020:	341c03e0 	.word	0x341c03e0

34181024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34181024:	e7fe      	b.n	34181024 <ADC1_2_IRQHandler>
	...

34181028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34181028:	b480      	push	{r7}
3418102a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
3418102c:	4b6a      	ldr	r3, [pc, #424]	@ (341811d8 <SystemInit+0x1b0>)
3418102e:	4a6b      	ldr	r2, [pc, #428]	@ (341811dc <SystemInit+0x1b4>)
34181030:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34181032:	4b6b      	ldr	r3, [pc, #428]	@ (341811e0 <SystemInit+0x1b8>)
34181034:	2201      	movs	r2, #1
34181036:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3418103a:	4b69      	ldr	r3, [pc, #420]	@ (341811e0 <SystemInit+0x1b8>)
3418103c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181040:	461a      	mov	r2, r3
34181042:	2301      	movs	r3, #1
34181044:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34181048:	4b65      	ldr	r3, [pc, #404]	@ (341811e0 <SystemInit+0x1b8>)
3418104a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418104e:	461a      	mov	r2, r3
34181050:	2301      	movs	r3, #1
34181052:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34181056:	4b63      	ldr	r3, [pc, #396]	@ (341811e4 <SystemInit+0x1bc>)
34181058:	2200      	movs	r2, #0
3418105a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418105c:	4b61      	ldr	r3, [pc, #388]	@ (341811e4 <SystemInit+0x1bc>)
3418105e:	2200      	movs	r2, #0
34181060:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181062:	4b60      	ldr	r3, [pc, #384]	@ (341811e4 <SystemInit+0x1bc>)
34181064:	2200      	movs	r2, #0
34181066:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34181068:	4b5e      	ldr	r3, [pc, #376]	@ (341811e4 <SystemInit+0x1bc>)
3418106a:	2201      	movs	r2, #1
3418106c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418106e:	4b5d      	ldr	r3, [pc, #372]	@ (341811e4 <SystemInit+0x1bc>)
34181070:	2200      	movs	r2, #0
34181072:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181074:	4b5b      	ldr	r3, [pc, #364]	@ (341811e4 <SystemInit+0x1bc>)
34181076:	2200      	movs	r2, #0
34181078:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
3418107a:	4b5a      	ldr	r3, [pc, #360]	@ (341811e4 <SystemInit+0x1bc>)
3418107c:	2202      	movs	r2, #2
3418107e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181080:	4b58      	ldr	r3, [pc, #352]	@ (341811e4 <SystemInit+0x1bc>)
34181082:	2200      	movs	r2, #0
34181084:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181086:	4b57      	ldr	r3, [pc, #348]	@ (341811e4 <SystemInit+0x1bc>)
34181088:	2200      	movs	r2, #0
3418108a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
3418108c:	4b55      	ldr	r3, [pc, #340]	@ (341811e4 <SystemInit+0x1bc>)
3418108e:	2203      	movs	r2, #3
34181090:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181092:	4b54      	ldr	r3, [pc, #336]	@ (341811e4 <SystemInit+0x1bc>)
34181094:	2200      	movs	r2, #0
34181096:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181098:	4b52      	ldr	r3, [pc, #328]	@ (341811e4 <SystemInit+0x1bc>)
3418109a:	2200      	movs	r2, #0
3418109c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
3418109e:	4b51      	ldr	r3, [pc, #324]	@ (341811e4 <SystemInit+0x1bc>)
341810a0:	2204      	movs	r2, #4
341810a2:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341810a4:	4b4f      	ldr	r3, [pc, #316]	@ (341811e4 <SystemInit+0x1bc>)
341810a6:	2200      	movs	r2, #0
341810a8:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341810aa:	4b4e      	ldr	r3, [pc, #312]	@ (341811e4 <SystemInit+0x1bc>)
341810ac:	2200      	movs	r2, #0
341810ae:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
341810b0:	4b4c      	ldr	r3, [pc, #304]	@ (341811e4 <SystemInit+0x1bc>)
341810b2:	2205      	movs	r2, #5
341810b4:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341810b6:	4b4b      	ldr	r3, [pc, #300]	@ (341811e4 <SystemInit+0x1bc>)
341810b8:	2200      	movs	r2, #0
341810ba:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341810bc:	4b49      	ldr	r3, [pc, #292]	@ (341811e4 <SystemInit+0x1bc>)
341810be:	2200      	movs	r2, #0
341810c0:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
341810c2:	4b48      	ldr	r3, [pc, #288]	@ (341811e4 <SystemInit+0x1bc>)
341810c4:	2206      	movs	r2, #6
341810c6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341810c8:	4b46      	ldr	r3, [pc, #280]	@ (341811e4 <SystemInit+0x1bc>)
341810ca:	2200      	movs	r2, #0
341810cc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341810ce:	4b45      	ldr	r3, [pc, #276]	@ (341811e4 <SystemInit+0x1bc>)
341810d0:	2200      	movs	r2, #0
341810d2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
341810d4:	4b43      	ldr	r3, [pc, #268]	@ (341811e4 <SystemInit+0x1bc>)
341810d6:	2207      	movs	r2, #7
341810d8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341810da:	4b42      	ldr	r3, [pc, #264]	@ (341811e4 <SystemInit+0x1bc>)
341810dc:	2200      	movs	r2, #0
341810de:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341810e0:	4b40      	ldr	r3, [pc, #256]	@ (341811e4 <SystemInit+0x1bc>)
341810e2:	2200      	movs	r2, #0
341810e4:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
341810e6:	4b3e      	ldr	r3, [pc, #248]	@ (341811e0 <SystemInit+0x1b8>)
341810e8:	2201      	movs	r2, #1
341810ea:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
341810ee:	4b3c      	ldr	r3, [pc, #240]	@ (341811e0 <SystemInit+0x1b8>)
341810f0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
341810f4:	4b38      	ldr	r3, [pc, #224]	@ (341811d8 <SystemInit+0x1b0>)
341810f6:	4a3c      	ldr	r2, [pc, #240]	@ (341811e8 <SystemInit+0x1c0>)
341810f8:	689b      	ldr	r3, [r3, #8]
341810fa:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
341810fc:	4b3b      	ldr	r3, [pc, #236]	@ (341811ec <SystemInit+0x1c4>)
341810fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181100:	4a3a      	ldr	r2, [pc, #232]	@ (341811ec <SystemInit+0x1c4>)
34181102:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34181106:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34181108:	4b38      	ldr	r3, [pc, #224]	@ (341811ec <SystemInit+0x1c4>)
3418110a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418110c:	4a37      	ldr	r2, [pc, #220]	@ (341811ec <SystemInit+0x1c4>)
3418110e:	f043 0310 	orr.w	r3, r3, #16
34181112:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34181114:	4b35      	ldr	r3, [pc, #212]	@ (341811ec <SystemInit+0x1c4>)
34181116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34181118:	4b31      	ldr	r3, [pc, #196]	@ (341811e0 <SystemInit+0x1b8>)
3418111a:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
3418111e:	4a30      	ldr	r2, [pc, #192]	@ (341811e0 <SystemInit+0x1b8>)
34181120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34181124:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34181128:	4b2d      	ldr	r3, [pc, #180]	@ (341811e0 <SystemInit+0x1b8>)
3418112a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
3418112e:	4a2c      	ldr	r2, [pc, #176]	@ (341811e0 <SystemInit+0x1b8>)
34181130:	f043 0310 	orr.w	r3, r3, #16
34181134:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34181138:	4b29      	ldr	r3, [pc, #164]	@ (341811e0 <SystemInit+0x1b8>)
3418113a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3418113e:	4b28      	ldr	r3, [pc, #160]	@ (341811e0 <SystemInit+0x1b8>)
34181140:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181144:	4a26      	ldr	r2, [pc, #152]	@ (341811e0 <SystemInit+0x1b8>)
34181146:	f023 0310 	bic.w	r3, r3, #16
3418114a:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3418114e:	4b24      	ldr	r3, [pc, #144]	@ (341811e0 <SystemInit+0x1b8>)
34181150:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34181154:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34181158:	4b21      	ldr	r3, [pc, #132]	@ (341811e0 <SystemInit+0x1b8>)
3418115a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418115e:	461a      	mov	r2, r3
34181160:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34181164:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34181168:	4b1d      	ldr	r3, [pc, #116]	@ (341811e0 <SystemInit+0x1b8>)
3418116a:	2201      	movs	r2, #1
3418116c:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34181170:	4b1b      	ldr	r3, [pc, #108]	@ (341811e0 <SystemInit+0x1b8>)
34181172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181176:	461a      	mov	r2, r3
34181178:	2301      	movs	r3, #1
3418117a:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3418117e:	4b18      	ldr	r3, [pc, #96]	@ (341811e0 <SystemInit+0x1b8>)
34181180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181184:	461a      	mov	r2, r3
34181186:	2301      	movs	r3, #1
34181188:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3418118c:	4b14      	ldr	r3, [pc, #80]	@ (341811e0 <SystemInit+0x1b8>)
3418118e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181192:	461a      	mov	r2, r3
34181194:	2340      	movs	r3, #64	@ 0x40
34181196:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3418119a:	4b13      	ldr	r3, [pc, #76]	@ (341811e8 <SystemInit+0x1c0>)
3418119c:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3418119e:	4b10      	ldr	r3, [pc, #64]	@ (341811e0 <SystemInit+0x1b8>)
341811a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341811a4:	461a      	mov	r2, r3
341811a6:	2301      	movs	r3, #1
341811a8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341811ac:	4b0a      	ldr	r3, [pc, #40]	@ (341811d8 <SystemInit+0x1b0>)
341811ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341811b2:	4a09      	ldr	r2, [pc, #36]	@ (341811d8 <SystemInit+0x1b0>)
341811b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341811b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341811bc:	4b0c      	ldr	r3, [pc, #48]	@ (341811f0 <SystemInit+0x1c8>)
341811be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341811c2:	4a0b      	ldr	r2, [pc, #44]	@ (341811f0 <SystemInit+0x1c8>)
341811c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341811c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
341811cc:	bf00      	nop
341811ce:	46bd      	mov	sp, r7
341811d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341811d4:	4770      	bx	lr
341811d6:	bf00      	nop
341811d8:	e000ed00 	.word	0xe000ed00
341811dc:	34180400 	.word	0x34180400
341811e0:	56028000 	.word	0x56028000
341811e4:	e000edd0 	.word	0xe000edd0
341811e8:	56008000 	.word	0x56008000
341811ec:	56024800 	.word	0x56024800
341811f0:	e002ed00 	.word	0xe002ed00

341811f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
341811f4:	b480      	push	{r7}
341811f6:	b08d      	sub	sp, #52	@ 0x34
341811f8:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
341811fa:	2300      	movs	r3, #0
341811fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
341811fe:	2300      	movs	r3, #0
34181200:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34181202:	2300      	movs	r3, #0
34181204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34181206:	2300      	movs	r3, #0
34181208:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
3418120a:	2300      	movs	r3, #0
3418120c:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
3418120e:	2300      	movs	r3, #0
34181210:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34181212:	4b9b      	ldr	r3, [pc, #620]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181214:	6a1b      	ldr	r3, [r3, #32]
34181216:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
3418121a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418121e:	d029      	beq.n	34181274 <SystemCoreClockUpdate+0x80>
34181220:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34181224:	f200 8180 	bhi.w	34181528 <SystemCoreClockUpdate+0x334>
34181228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418122c:	d01f      	beq.n	3418126e <SystemCoreClockUpdate+0x7a>
3418122e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34181232:	f200 8179 	bhi.w	34181528 <SystemCoreClockUpdate+0x334>
34181236:	2b00      	cmp	r3, #0
34181238:	d003      	beq.n	34181242 <SystemCoreClockUpdate+0x4e>
3418123a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418123e:	d00a      	beq.n	34181256 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34181240:	e172      	b.n	34181528 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181242:	4b8f      	ldr	r3, [pc, #572]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181246:	09db      	lsrs	r3, r3, #7
34181248:	f003 0303 	and.w	r3, r3, #3
3418124c:	4a8d      	ldr	r2, [pc, #564]	@ (34181484 <SystemCoreClockUpdate+0x290>)
3418124e:	fa22 f303 	lsr.w	r3, r2, r3
34181252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181254:	e169      	b.n	3418152a <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181256:	4b8a      	ldr	r3, [pc, #552]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418125a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418125e:	2b00      	cmp	r3, #0
34181260:	d102      	bne.n	34181268 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34181262:	4b89      	ldr	r3, [pc, #548]	@ (34181488 <SystemCoreClockUpdate+0x294>)
34181264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181266:	e160      	b.n	3418152a <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34181268:	4b88      	ldr	r3, [pc, #544]	@ (3418148c <SystemCoreClockUpdate+0x298>)
3418126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3418126c:	e15d      	b.n	3418152a <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3418126e:	4b88      	ldr	r3, [pc, #544]	@ (34181490 <SystemCoreClockUpdate+0x29c>)
34181270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181272:	e15a      	b.n	3418152a <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34181274:	4b82      	ldr	r3, [pc, #520]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181276:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418127a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3418127e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181282:	d066      	beq.n	34181352 <SystemCoreClockUpdate+0x15e>
34181284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181288:	f200 8091 	bhi.w	341813ae <SystemCoreClockUpdate+0x1ba>
3418128c:	2b00      	cmp	r3, #0
3418128e:	d003      	beq.n	34181298 <SystemCoreClockUpdate+0xa4>
34181290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181294:	d02f      	beq.n	341812f6 <SystemCoreClockUpdate+0x102>
34181296:	e08a      	b.n	341813ae <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34181298:	4b79      	ldr	r3, [pc, #484]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
3418129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418129e:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
341812a0:	68fb      	ldr	r3, [r7, #12]
341812a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341812a6:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
341812a8:	68fb      	ldr	r3, [r7, #12]
341812aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341812ae:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341812b0:	693b      	ldr	r3, [r7, #16]
341812b2:	2b00      	cmp	r3, #0
341812b4:	f040 80a9 	bne.w	3418140a <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
341812b8:	68fb      	ldr	r3, [r7, #12]
341812ba:	0d1b      	lsrs	r3, r3, #20
341812bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341812c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
341812c2:	68fb      	ldr	r3, [r7, #12]
341812c4:	0a1b      	lsrs	r3, r3, #8
341812c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
341812ca:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
341812cc:	4b6c      	ldr	r3, [pc, #432]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341812ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341812d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341812d6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
341812d8:	4b69      	ldr	r3, [pc, #420]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341812da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341812de:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
341812e0:	68fb      	ldr	r3, [r7, #12]
341812e2:	0edb      	lsrs	r3, r3, #27
341812e4:	f003 0307 	and.w	r3, r3, #7
341812e8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
341812ea:	68fb      	ldr	r3, [r7, #12]
341812ec:	0e1b      	lsrs	r3, r3, #24
341812ee:	f003 0307 	and.w	r3, r3, #7
341812f2:	61bb      	str	r3, [r7, #24]
      break;
341812f4:	e089      	b.n	3418140a <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
341812f6:	4b62      	ldr	r3, [pc, #392]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341812f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341812fc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
341812fe:	68fb      	ldr	r3, [r7, #12]
34181300:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181304:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34181306:	68fb      	ldr	r3, [r7, #12]
34181308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418130c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418130e:	693b      	ldr	r3, [r7, #16]
34181310:	2b00      	cmp	r3, #0
34181312:	d17c      	bne.n	3418140e <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34181314:	68fb      	ldr	r3, [r7, #12]
34181316:	0d1b      	lsrs	r3, r3, #20
34181318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418131c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3418131e:	68fb      	ldr	r3, [r7, #12]
34181320:	0a1b      	lsrs	r3, r3, #8
34181322:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181326:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34181328:	4b55      	ldr	r3, [pc, #340]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
3418132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418132e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181332:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34181334:	4b52      	ldr	r3, [pc, #328]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418133a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3418133c:	68fb      	ldr	r3, [r7, #12]
3418133e:	0edb      	lsrs	r3, r3, #27
34181340:	f003 0307 	and.w	r3, r3, #7
34181344:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34181346:	68fb      	ldr	r3, [r7, #12]
34181348:	0e1b      	lsrs	r3, r3, #24
3418134a:	f003 0307 	and.w	r3, r3, #7
3418134e:	61bb      	str	r3, [r7, #24]
      break;
34181350:	e05d      	b.n	3418140e <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34181352:	4b4b      	ldr	r3, [pc, #300]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34181358:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3418135a:	68fb      	ldr	r3, [r7, #12]
3418135c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181360:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34181362:	68fb      	ldr	r3, [r7, #12]
34181364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181368:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418136a:	693b      	ldr	r3, [r7, #16]
3418136c:	2b00      	cmp	r3, #0
3418136e:	d150      	bne.n	34181412 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34181370:	68fb      	ldr	r3, [r7, #12]
34181372:	0d1b      	lsrs	r3, r3, #20
34181374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181378:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3418137a:	68fb      	ldr	r3, [r7, #12]
3418137c:	0a1b      	lsrs	r3, r3, #8
3418137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181382:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34181384:	4b3e      	ldr	r3, [pc, #248]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418138a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418138e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34181390:	4b3b      	ldr	r3, [pc, #236]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
34181392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34181396:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34181398:	68fb      	ldr	r3, [r7, #12]
3418139a:	0edb      	lsrs	r3, r3, #27
3418139c:	f003 0307 	and.w	r3, r3, #7
341813a0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
341813a2:	68fb      	ldr	r3, [r7, #12]
341813a4:	0e1b      	lsrs	r3, r3, #24
341813a6:	f003 0307 	and.w	r3, r3, #7
341813aa:	61bb      	str	r3, [r7, #24]
      break;
341813ac:	e031      	b.n	34181412 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
341813ae:	4b34      	ldr	r3, [pc, #208]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341813b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341813b4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
341813b6:	68fb      	ldr	r3, [r7, #12]
341813b8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341813bc:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
341813be:	68fb      	ldr	r3, [r7, #12]
341813c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341813c4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341813c6:	693b      	ldr	r3, [r7, #16]
341813c8:	2b00      	cmp	r3, #0
341813ca:	d124      	bne.n	34181416 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
341813cc:	68fb      	ldr	r3, [r7, #12]
341813ce:	0d1b      	lsrs	r3, r3, #20
341813d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341813d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341813d6:	68fb      	ldr	r3, [r7, #12]
341813d8:	0a1b      	lsrs	r3, r3, #8
341813da:	f3c3 030b 	ubfx	r3, r3, #0, #12
341813de:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341813e0:	4b27      	ldr	r3, [pc, #156]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341813e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341813e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341813ea:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
341813ec:	4b24      	ldr	r3, [pc, #144]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
341813ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341813f2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
341813f4:	68fb      	ldr	r3, [r7, #12]
341813f6:	0edb      	lsrs	r3, r3, #27
341813f8:	f003 0307 	and.w	r3, r3, #7
341813fc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
341813fe:	68fb      	ldr	r3, [r7, #12]
34181400:	0e1b      	lsrs	r3, r3, #24
34181402:	f003 0307 	and.w	r3, r3, #7
34181406:	61bb      	str	r3, [r7, #24]
      break;
34181408:	e005      	b.n	34181416 <SystemCoreClockUpdate+0x222>
      break;
3418140a:	bf00      	nop
3418140c:	e004      	b.n	34181418 <SystemCoreClockUpdate+0x224>
      break;
3418140e:	bf00      	nop
34181410:	e002      	b.n	34181418 <SystemCoreClockUpdate+0x224>
      break;
34181412:	bf00      	nop
34181414:	e000      	b.n	34181418 <SystemCoreClockUpdate+0x224>
      break;
34181416:	bf00      	nop
34181418:	697b      	ldr	r3, [r7, #20]
3418141a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418141e:	d02c      	beq.n	3418147a <SystemCoreClockUpdate+0x286>
34181420:	697b      	ldr	r3, [r7, #20]
34181422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34181426:	d839      	bhi.n	3418149c <SystemCoreClockUpdate+0x2a8>
34181428:	697b      	ldr	r3, [r7, #20]
3418142a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418142e:	d021      	beq.n	34181474 <SystemCoreClockUpdate+0x280>
34181430:	697b      	ldr	r3, [r7, #20]
34181432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181436:	d831      	bhi.n	3418149c <SystemCoreClockUpdate+0x2a8>
34181438:	697b      	ldr	r3, [r7, #20]
3418143a:	2b00      	cmp	r3, #0
3418143c:	d004      	beq.n	34181448 <SystemCoreClockUpdate+0x254>
3418143e:	697b      	ldr	r3, [r7, #20]
34181440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181444:	d00a      	beq.n	3418145c <SystemCoreClockUpdate+0x268>
      break;
34181446:	e029      	b.n	3418149c <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181448:	4b0d      	ldr	r3, [pc, #52]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
3418144a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418144c:	09db      	lsrs	r3, r3, #7
3418144e:	f003 0303 	and.w	r3, r3, #3
34181452:	4a0c      	ldr	r2, [pc, #48]	@ (34181484 <SystemCoreClockUpdate+0x290>)
34181454:	fa22 f303 	lsr.w	r3, r2, r3
34181458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418145a:	e020      	b.n	3418149e <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3418145c:	4b08      	ldr	r3, [pc, #32]	@ (34181480 <SystemCoreClockUpdate+0x28c>)
3418145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34181464:	2b00      	cmp	r3, #0
34181466:	d102      	bne.n	3418146e <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34181468:	4b07      	ldr	r3, [pc, #28]	@ (34181488 <SystemCoreClockUpdate+0x294>)
3418146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418146c:	e017      	b.n	3418149e <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
3418146e:	4b07      	ldr	r3, [pc, #28]	@ (3418148c <SystemCoreClockUpdate+0x298>)
34181470:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181472:	e014      	b.n	3418149e <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34181474:	4b06      	ldr	r3, [pc, #24]	@ (34181490 <SystemCoreClockUpdate+0x29c>)
34181476:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181478:	e011      	b.n	3418149e <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3418147a:	4b06      	ldr	r3, [pc, #24]	@ (34181494 <SystemCoreClockUpdate+0x2a0>)
3418147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418147e:	e00e      	b.n	3418149e <SystemCoreClockUpdate+0x2aa>
34181480:	56028000 	.word	0x56028000
34181484:	03d09000 	.word	0x03d09000
34181488:	003d0900 	.word	0x003d0900
3418148c:	00f42400 	.word	0x00f42400
34181490:	02dc6c00 	.word	0x02dc6c00
34181494:	00bb8000 	.word	0x00bb8000
34181498:	4b800000 	.word	0x4b800000
      break;
3418149c:	bf00      	nop
    if (pllbypass == 0U)
3418149e:	693b      	ldr	r3, [r7, #16]
341814a0:	2b00      	cmp	r3, #0
341814a2:	d134      	bne.n	3418150e <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
341814a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341814a6:	ee07 3a90 	vmov	s15, r3
341814aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341814ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341814b0:	ee07 3a90 	vmov	s15, r3
341814b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
341814b8:	6a3b      	ldr	r3, [r7, #32]
341814ba:	ee07 3a90 	vmov	s15, r3
341814be:	eeb8 6a67 	vcvt.f32.u32	s12, s15
341814c2:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34181498 <SystemCoreClockUpdate+0x2a4>
341814c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
341814ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
341814ce:	ee67 6a27 	vmul.f32	s13, s14, s15
341814d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341814d4:	ee07 3a90 	vmov	s15, r3
341814d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341814dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
341814e0:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
341814e4:	69fb      	ldr	r3, [r7, #28]
341814e6:	ee07 3a90 	vmov	s15, r3
341814ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341814ee:	69bb      	ldr	r3, [r7, #24]
341814f0:	ee07 3a90 	vmov	s15, r3
341814f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
341814f8:	ee27 7a27 	vmul.f32	s14, s14, s15
341814fc:	edd7 6a02 	vldr	s13, [r7, #8]
34181500:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34181508:	ee17 3a90 	vmov	r3, s15
3418150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3418150e:	4b0b      	ldr	r3, [pc, #44]	@ (3418153c <SystemCoreClockUpdate+0x348>)
34181510:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34181514:	0c1b      	lsrs	r3, r3, #16
34181516:	b2db      	uxtb	r3, r3
34181518:	3301      	adds	r3, #1
3418151a:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
3418151c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418151e:	687b      	ldr	r3, [r7, #4]
34181520:	fbb2 f3f3 	udiv	r3, r2, r3
34181524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181526:	e000      	b.n	3418152a <SystemCoreClockUpdate+0x336>
    break;
34181528:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3418152a:	4a05      	ldr	r2, [pc, #20]	@ (34181540 <SystemCoreClockUpdate+0x34c>)
3418152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418152e:	6013      	str	r3, [r2, #0]
}
34181530:	bf00      	nop
34181532:	3734      	adds	r7, #52	@ 0x34
34181534:	46bd      	mov	sp, r7
34181536:	f85d 7b04 	ldr.w	r7, [sp], #4
3418153a:	4770      	bx	lr
3418153c:	56028000 	.word	0x56028000
34181540:	341c0000 	.word	0x341c0000

34181544 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34181544:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34181548:	b588      	push	{r3, r7, lr}
3418154a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
3418154c:	f7ff fe52 	bl	341811f4 <SystemCoreClockUpdate>

  return SystemCoreClock;
34181550:	4b06      	ldr	r3, [pc, #24]	@ (3418156c <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34181552:	681b      	ldr	r3, [r3, #0]
}
34181554:	4618      	mov	r0, r3
34181556:	46bd      	mov	sp, r7
34181558:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
3418155c:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34181560:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34181564:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34181568:	4774      	bxns	lr
3418156a:	bf00      	nop
3418156c:	341c0000 	.word	0x341c0000

34181570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34181570:	b580      	push	{r7, lr}
34181572:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34181574:	2003      	movs	r0, #3
34181576:	f000 f94b 	bl	34181810 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3418157a:	f7ff fe3b 	bl	341811f4 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3418157e:	200f      	movs	r0, #15
34181580:	f000 f80a 	bl	34181598 <HAL_InitTick>
34181584:	4603      	mov	r3, r0
34181586:	2b00      	cmp	r3, #0
34181588:	d001      	beq.n	3418158e <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418158a:	2301      	movs	r3, #1
3418158c:	e002      	b.n	34181594 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
3418158e:	f7ff fbeb 	bl	34180d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34181592:	2300      	movs	r3, #0
}
34181594:	4618      	mov	r0, r3
34181596:	bd80      	pop	{r7, pc}

34181598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34181598:	b580      	push	{r7, lr}
3418159a:	b082      	sub	sp, #8
3418159c:	af00      	add	r7, sp, #0
3418159e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
341815a0:	4b15      	ldr	r3, [pc, #84]	@ (341815f8 <HAL_InitTick+0x60>)
341815a2:	781b      	ldrb	r3, [r3, #0]
341815a4:	2b00      	cmp	r3, #0
341815a6:	d101      	bne.n	341815ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
341815a8:	2301      	movs	r3, #1
341815aa:	e021      	b.n	341815f0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
341815ac:	4b13      	ldr	r3, [pc, #76]	@ (341815fc <HAL_InitTick+0x64>)
341815ae:	681a      	ldr	r2, [r3, #0]
341815b0:	4b11      	ldr	r3, [pc, #68]	@ (341815f8 <HAL_InitTick+0x60>)
341815b2:	781b      	ldrb	r3, [r3, #0]
341815b4:	4619      	mov	r1, r3
341815b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
341815ba:	fbb3 f3f1 	udiv	r3, r3, r1
341815be:	fbb2 f3f3 	udiv	r3, r2, r3
341815c2:	4618      	mov	r0, r3
341815c4:	f000 f94c 	bl	34181860 <HAL_SYSTICK_Config>
341815c8:	4603      	mov	r3, r0
341815ca:	2b00      	cmp	r3, #0
341815cc:	d001      	beq.n	341815d2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341815ce:	2301      	movs	r3, #1
341815d0:	e00e      	b.n	341815f0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341815d2:	687b      	ldr	r3, [r7, #4]
341815d4:	2b0f      	cmp	r3, #15
341815d6:	d80a      	bhi.n	341815ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341815d8:	2200      	movs	r2, #0
341815da:	6879      	ldr	r1, [r7, #4]
341815dc:	f04f 30ff 	mov.w	r0, #4294967295
341815e0:	f000 f921 	bl	34181826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341815e4:	4a06      	ldr	r2, [pc, #24]	@ (34181600 <HAL_InitTick+0x68>)
341815e6:	687b      	ldr	r3, [r7, #4]
341815e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341815ea:	2300      	movs	r3, #0
341815ec:	e000      	b.n	341815f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
341815ee:	2301      	movs	r3, #1
}
341815f0:	4618      	mov	r0, r3
341815f2:	3708      	adds	r7, #8
341815f4:	46bd      	mov	sp, r7
341815f6:	bd80      	pop	{r7, pc}
341815f8:	341c0008 	.word	0x341c0008
341815fc:	341c0000 	.word	0x341c0000
34181600:	341c0004 	.word	0x341c0004

34181604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34181604:	b480      	push	{r7}
34181606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34181608:	4b06      	ldr	r3, [pc, #24]	@ (34181624 <HAL_IncTick+0x20>)
3418160a:	781b      	ldrb	r3, [r3, #0]
3418160c:	461a      	mov	r2, r3
3418160e:	4b06      	ldr	r3, [pc, #24]	@ (34181628 <HAL_IncTick+0x24>)
34181610:	681b      	ldr	r3, [r3, #0]
34181612:	4413      	add	r3, r2
34181614:	4a04      	ldr	r2, [pc, #16]	@ (34181628 <HAL_IncTick+0x24>)
34181616:	6013      	str	r3, [r2, #0]
}
34181618:	bf00      	nop
3418161a:	46bd      	mov	sp, r7
3418161c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181620:	4770      	bx	lr
34181622:	bf00      	nop
34181624:	341c0008 	.word	0x341c0008
34181628:	341c00f8 	.word	0x341c00f8

3418162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
3418162c:	b480      	push	{r7}
3418162e:	af00      	add	r7, sp, #0
  return uwTick;
34181630:	4b03      	ldr	r3, [pc, #12]	@ (34181640 <HAL_GetTick+0x14>)
34181632:	681b      	ldr	r3, [r3, #0]
}
34181634:	4618      	mov	r0, r3
34181636:	46bd      	mov	sp, r7
34181638:	f85d 7b04 	ldr.w	r7, [sp], #4
3418163c:	4770      	bx	lr
3418163e:	bf00      	nop
34181640:	341c00f8 	.word	0x341c00f8

34181644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34181644:	b580      	push	{r7, lr}
34181646:	b084      	sub	sp, #16
34181648:	af00      	add	r7, sp, #0
3418164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
3418164c:	f7ff ffee 	bl	3418162c <HAL_GetTick>
34181650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34181652:	687b      	ldr	r3, [r7, #4]
34181654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34181656:	68fb      	ldr	r3, [r7, #12]
34181658:	f1b3 3fff 	cmp.w	r3, #4294967295
3418165c:	d005      	beq.n	3418166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
3418165e:	4b0a      	ldr	r3, [pc, #40]	@ (34181688 <HAL_Delay+0x44>)
34181660:	781b      	ldrb	r3, [r3, #0]
34181662:	461a      	mov	r2, r3
34181664:	68fb      	ldr	r3, [r7, #12]
34181666:	4413      	add	r3, r2
34181668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3418166a:	bf00      	nop
3418166c:	f7ff ffde 	bl	3418162c <HAL_GetTick>
34181670:	4602      	mov	r2, r0
34181672:	68bb      	ldr	r3, [r7, #8]
34181674:	1ad3      	subs	r3, r2, r3
34181676:	68fa      	ldr	r2, [r7, #12]
34181678:	429a      	cmp	r2, r3
3418167a:	d8f7      	bhi.n	3418166c <HAL_Delay+0x28>
  {
  }
}
3418167c:	bf00      	nop
3418167e:	bf00      	nop
34181680:	3710      	adds	r7, #16
34181682:	46bd      	mov	sp, r7
34181684:	bd80      	pop	{r7, pc}
34181686:	bf00      	nop
34181688:	341c0008 	.word	0x341c0008

3418168c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
3418168c:	b480      	push	{r7}
3418168e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
34181690:	4b05      	ldr	r3, [pc, #20]	@ (341816a8 <HAL_SuspendTick+0x1c>)
34181692:	681b      	ldr	r3, [r3, #0]
34181694:	4a04      	ldr	r2, [pc, #16]	@ (341816a8 <HAL_SuspendTick+0x1c>)
34181696:	f023 0302 	bic.w	r3, r3, #2
3418169a:	6013      	str	r3, [r2, #0]
}
3418169c:	bf00      	nop
3418169e:	46bd      	mov	sp, r7
341816a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341816a4:	4770      	bx	lr
341816a6:	bf00      	nop
341816a8:	e000e010 	.word	0xe000e010

341816ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341816ac:	b480      	push	{r7}
341816ae:	b085      	sub	sp, #20
341816b0:	af00      	add	r7, sp, #0
341816b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
341816b4:	687b      	ldr	r3, [r7, #4]
341816b6:	f003 0307 	and.w	r3, r3, #7
341816ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341816bc:	4b0c      	ldr	r3, [pc, #48]	@ (341816f0 <__NVIC_SetPriorityGrouping+0x44>)
341816be:	68db      	ldr	r3, [r3, #12]
341816c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341816c2:	68ba      	ldr	r2, [r7, #8]
341816c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
341816c8:	4013      	ands	r3, r2
341816ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341816cc:	68fb      	ldr	r3, [r7, #12]
341816ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
341816d0:	68bb      	ldr	r3, [r7, #8]
341816d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
341816d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341816d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341816dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
341816de:	4a04      	ldr	r2, [pc, #16]	@ (341816f0 <__NVIC_SetPriorityGrouping+0x44>)
341816e0:	68bb      	ldr	r3, [r7, #8]
341816e2:	60d3      	str	r3, [r2, #12]
}
341816e4:	bf00      	nop
341816e6:	3714      	adds	r7, #20
341816e8:	46bd      	mov	sp, r7
341816ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341816ee:	4770      	bx	lr
341816f0:	e000ed00 	.word	0xe000ed00

341816f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
341816f4:	b480      	push	{r7}
341816f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
341816f8:	4b04      	ldr	r3, [pc, #16]	@ (3418170c <__NVIC_GetPriorityGrouping+0x18>)
341816fa:	68db      	ldr	r3, [r3, #12]
341816fc:	0a1b      	lsrs	r3, r3, #8
341816fe:	f003 0307 	and.w	r3, r3, #7
}
34181702:	4618      	mov	r0, r3
34181704:	46bd      	mov	sp, r7
34181706:	f85d 7b04 	ldr.w	r7, [sp], #4
3418170a:	4770      	bx	lr
3418170c:	e000ed00 	.word	0xe000ed00

34181710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34181710:	b480      	push	{r7}
34181712:	b083      	sub	sp, #12
34181714:	af00      	add	r7, sp, #0
34181716:	4603      	mov	r3, r0
34181718:	6039      	str	r1, [r7, #0]
3418171a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3418171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34181720:	2b00      	cmp	r3, #0
34181722:	db0a      	blt.n	3418173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34181724:	683b      	ldr	r3, [r7, #0]
34181726:	b2da      	uxtb	r2, r3
34181728:	490c      	ldr	r1, [pc, #48]	@ (3418175c <__NVIC_SetPriority+0x4c>)
3418172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418172e:	0112      	lsls	r2, r2, #4
34181730:	b2d2      	uxtb	r2, r2
34181732:	440b      	add	r3, r1
34181734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34181738:	e00a      	b.n	34181750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418173a:	683b      	ldr	r3, [r7, #0]
3418173c:	b2da      	uxtb	r2, r3
3418173e:	4908      	ldr	r1, [pc, #32]	@ (34181760 <__NVIC_SetPriority+0x50>)
34181740:	88fb      	ldrh	r3, [r7, #6]
34181742:	f003 030f 	and.w	r3, r3, #15
34181746:	3b04      	subs	r3, #4
34181748:	0112      	lsls	r2, r2, #4
3418174a:	b2d2      	uxtb	r2, r2
3418174c:	440b      	add	r3, r1
3418174e:	761a      	strb	r2, [r3, #24]
}
34181750:	bf00      	nop
34181752:	370c      	adds	r7, #12
34181754:	46bd      	mov	sp, r7
34181756:	f85d 7b04 	ldr.w	r7, [sp], #4
3418175a:	4770      	bx	lr
3418175c:	e000e100 	.word	0xe000e100
34181760:	e000ed00 	.word	0xe000ed00

34181764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34181764:	b480      	push	{r7}
34181766:	b089      	sub	sp, #36	@ 0x24
34181768:	af00      	add	r7, sp, #0
3418176a:	60f8      	str	r0, [r7, #12]
3418176c:	60b9      	str	r1, [r7, #8]
3418176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34181770:	68fb      	ldr	r3, [r7, #12]
34181772:	f003 0307 	and.w	r3, r3, #7
34181776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34181778:	69fb      	ldr	r3, [r7, #28]
3418177a:	f1c3 0307 	rsb	r3, r3, #7
3418177e:	2b04      	cmp	r3, #4
34181780:	bf28      	it	cs
34181782:	2304      	movcs	r3, #4
34181784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34181786:	69fb      	ldr	r3, [r7, #28]
34181788:	3304      	adds	r3, #4
3418178a:	2b06      	cmp	r3, #6
3418178c:	d902      	bls.n	34181794 <NVIC_EncodePriority+0x30>
3418178e:	69fb      	ldr	r3, [r7, #28]
34181790:	3b03      	subs	r3, #3
34181792:	e000      	b.n	34181796 <NVIC_EncodePriority+0x32>
34181794:	2300      	movs	r3, #0
34181796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34181798:	f04f 32ff 	mov.w	r2, #4294967295
3418179c:	69bb      	ldr	r3, [r7, #24]
3418179e:	fa02 f303 	lsl.w	r3, r2, r3
341817a2:	43da      	mvns	r2, r3
341817a4:	68bb      	ldr	r3, [r7, #8]
341817a6:	401a      	ands	r2, r3
341817a8:	697b      	ldr	r3, [r7, #20]
341817aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
341817ac:	f04f 31ff 	mov.w	r1, #4294967295
341817b0:	697b      	ldr	r3, [r7, #20]
341817b2:	fa01 f303 	lsl.w	r3, r1, r3
341817b6:	43d9      	mvns	r1, r3
341817b8:	687b      	ldr	r3, [r7, #4]
341817ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341817bc:	4313      	orrs	r3, r2
         );
}
341817be:	4618      	mov	r0, r3
341817c0:	3724      	adds	r7, #36	@ 0x24
341817c2:	46bd      	mov	sp, r7
341817c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341817c8:	4770      	bx	lr
	...

341817cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
341817cc:	b580      	push	{r7, lr}
341817ce:	b082      	sub	sp, #8
341817d0:	af00      	add	r7, sp, #0
341817d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
341817d4:	687b      	ldr	r3, [r7, #4]
341817d6:	3b01      	subs	r3, #1
341817d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341817dc:	d301      	bcc.n	341817e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
341817de:	2301      	movs	r3, #1
341817e0:	e00f      	b.n	34181802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
341817e2:	4a0a      	ldr	r2, [pc, #40]	@ (3418180c <SysTick_Config+0x40>)
341817e4:	687b      	ldr	r3, [r7, #4]
341817e6:	3b01      	subs	r3, #1
341817e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
341817ea:	210f      	movs	r1, #15
341817ec:	f04f 30ff 	mov.w	r0, #4294967295
341817f0:	f7ff ff8e 	bl	34181710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
341817f4:	4b05      	ldr	r3, [pc, #20]	@ (3418180c <SysTick_Config+0x40>)
341817f6:	2200      	movs	r2, #0
341817f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
341817fa:	4b04      	ldr	r3, [pc, #16]	@ (3418180c <SysTick_Config+0x40>)
341817fc:	2207      	movs	r2, #7
341817fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34181800:	2300      	movs	r3, #0
}
34181802:	4618      	mov	r0, r3
34181804:	3708      	adds	r7, #8
34181806:	46bd      	mov	sp, r7
34181808:	bd80      	pop	{r7, pc}
3418180a:	bf00      	nop
3418180c:	e000e010 	.word	0xe000e010

34181810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34181810:	b580      	push	{r7, lr}
34181812:	b082      	sub	sp, #8
34181814:	af00      	add	r7, sp, #0
34181816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34181818:	6878      	ldr	r0, [r7, #4]
3418181a:	f7ff ff47 	bl	341816ac <__NVIC_SetPriorityGrouping>
}
3418181e:	bf00      	nop
34181820:	3708      	adds	r7, #8
34181822:	46bd      	mov	sp, r7
34181824:	bd80      	pop	{r7, pc}

34181826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34181826:	b580      	push	{r7, lr}
34181828:	b086      	sub	sp, #24
3418182a:	af00      	add	r7, sp, #0
3418182c:	4603      	mov	r3, r0
3418182e:	60b9      	str	r1, [r7, #8]
34181830:	607a      	str	r2, [r7, #4]
34181832:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34181834:	f7ff ff5e 	bl	341816f4 <__NVIC_GetPriorityGrouping>
34181838:	4603      	mov	r3, r0
3418183a:	f003 0307 	and.w	r3, r3, #7
3418183e:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34181840:	687a      	ldr	r2, [r7, #4]
34181842:	68b9      	ldr	r1, [r7, #8]
34181844:	6978      	ldr	r0, [r7, #20]
34181846:	f7ff ff8d 	bl	34181764 <NVIC_EncodePriority>
3418184a:	4602      	mov	r2, r0
3418184c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34181850:	4611      	mov	r1, r2
34181852:	4618      	mov	r0, r3
34181854:	f7ff ff5c 	bl	34181710 <__NVIC_SetPriority>
}
34181858:	bf00      	nop
3418185a:	3718      	adds	r7, #24
3418185c:	46bd      	mov	sp, r7
3418185e:	bd80      	pop	{r7, pc}

34181860 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34181860:	b580      	push	{r7, lr}
34181862:	b082      	sub	sp, #8
34181864:	af00      	add	r7, sp, #0
34181866:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34181868:	6878      	ldr	r0, [r7, #4]
3418186a:	f7ff ffaf 	bl	341817cc <SysTick_Config>
3418186e:	4603      	mov	r3, r0
}
34181870:	4618      	mov	r0, r3
34181872:	3708      	adds	r7, #8
34181874:	46bd      	mov	sp, r7
34181876:	bd80      	pop	{r7, pc}

34181878 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
34181878:	b480      	push	{r7}
3418187a:	b083      	sub	sp, #12
3418187c:	af00      	add	r7, sp, #0
3418187e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
34181880:	f3bf 8f5f 	dmb	sy
}
34181884:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before enabling MPU */

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
34181886:	4a0b      	ldr	r2, [pc, #44]	@ (341818b4 <HAL_MPU_Enable+0x3c>)
34181888:	687b      	ldr	r3, [r7, #4]
3418188a:	f043 0301 	orr.w	r3, r3, #1
3418188e:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
34181890:	4b09      	ldr	r3, [pc, #36]	@ (341818b8 <HAL_MPU_Enable+0x40>)
34181892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34181894:	4a08      	ldr	r2, [pc, #32]	@ (341818b8 <HAL_MPU_Enable+0x40>)
34181896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418189a:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
3418189c:	f3bf 8f4f 	dsb	sy
}
341818a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341818a2:	f3bf 8f6f 	isb	sy
}
341818a6:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
341818a8:	bf00      	nop
341818aa:	370c      	adds	r7, #12
341818ac:	46bd      	mov	sp, r7
341818ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341818b2:	4770      	bx	lr
341818b4:	e000ed90 	.word	0xe000ed90
341818b8:	e000ed00 	.word	0xe000ed00

341818bc <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
341818bc:	b480      	push	{r7}
341818be:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
341818c0:	f3bf 8f5f 	dmb	sy
}
341818c4:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
341818c6:	4b0b      	ldr	r3, [pc, #44]	@ (341818f4 <HAL_MPU_Disable+0x38>)
341818c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341818ca:	4a0a      	ldr	r2, [pc, #40]	@ (341818f4 <HAL_MPU_Disable+0x38>)
341818cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341818d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU */
  MPU->CTRL &= ~MPU_CTRL_ENABLE_Msk;
341818d2:	4b09      	ldr	r3, [pc, #36]	@ (341818f8 <HAL_MPU_Disable+0x3c>)
341818d4:	685b      	ldr	r3, [r3, #4]
341818d6:	4a08      	ldr	r2, [pc, #32]	@ (341818f8 <HAL_MPU_Disable+0x3c>)
341818d8:	f023 0301 	bic.w	r3, r3, #1
341818dc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
341818de:	f3bf 8f4f 	dsb	sy
}
341818e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341818e4:	f3bf 8f6f 	isb	sy
}
341818e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
341818ea:	bf00      	nop
341818ec:	46bd      	mov	sp, r7
341818ee:	f85d 7b04 	ldr.w	r7, [sp], #4
341818f2:	4770      	bx	lr
341818f4:	e000ed00 	.word	0xe000ed00
341818f8:	e000ed90 	.word	0xe000ed90

341818fc <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                         the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
341818fc:	b580      	push	{r7, lr}
341818fe:	b082      	sub	sp, #8
34181900:	af00      	add	r7, sp, #0
34181902:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
34181904:	6879      	ldr	r1, [r7, #4]
34181906:	4803      	ldr	r0, [pc, #12]	@ (34181914 <HAL_MPU_ConfigRegion+0x18>)
34181908:	f000 f814 	bl	34181934 <MPU_ConfigRegion>
}
3418190c:	bf00      	nop
3418190e:	3708      	adds	r7, #8
34181910:	46bd      	mov	sp, r7
34181912:	bd80      	pop	{r7, pc}
34181914:	e000ed90 	.word	0xe000ed90

34181918 <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                             the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
34181918:	b580      	push	{r7, lr}
3418191a:	b082      	sub	sp, #8
3418191c:	af00      	add	r7, sp, #0
3418191e:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
34181920:	6879      	ldr	r1, [r7, #4]
34181922:	4803      	ldr	r0, [pc, #12]	@ (34181930 <HAL_MPU_ConfigMemoryAttributes+0x18>)
34181924:	f000 f83a 	bl	3418199c <MPU_ConfigMemoryAttributes>
}
34181928:	bf00      	nop
3418192a:	3708      	adds	r7, #8
3418192c:	46bd      	mov	sp, r7
3418192e:	bd80      	pop	{r7, pc}
34181930:	e000ed90 	.word	0xe000ed90

34181934 <MPU_ConfigRegion>:

/** @addtogroup CORTEX_Private_Functions
  * @{
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
34181934:	b480      	push	{r7}
34181936:	b083      	sub	sp, #12
34181938:	af00      	add	r7, sp, #0
3418193a:	6078      	str	r0, [r7, #4]
3418193c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
3418193e:	683b      	ldr	r3, [r7, #0]
34181940:	785b      	ldrb	r3, [r3, #1]
34181942:	461a      	mov	r2, r3
34181944:	687b      	ldr	r3, [r7, #4]
34181946:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPUx->RLAR, MPU_RLAR_EN_Msk);
34181948:	687b      	ldr	r3, [r7, #4]
3418194a:	691b      	ldr	r3, [r3, #16]
3418194c:	f023 0201 	bic.w	r2, r3, #1
34181950:	687b      	ldr	r3, [r7, #4]
34181952:	611a      	str	r2, [r3, #16]
  assert_param(IS_MPU_INSTRUCTION_ACCESS(pMPU_RegionInit->DisableExec));
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
  assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_RegionInit->AttributesIndex));

  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34181954:	683b      	ldr	r3, [r7, #0]
34181956:	685b      	ldr	r3, [r3, #4]
34181958:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
3418195c:	683b      	ldr	r3, [r7, #0]
3418195e:	7bdb      	ldrb	r3, [r3, #15]
34181960:	00db      	lsls	r3, r3, #3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34181962:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
34181964:	683b      	ldr	r3, [r7, #0]
34181966:	7b5b      	ldrb	r3, [r3, #13]
34181968:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
3418196a:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
3418196c:	683a      	ldr	r2, [r7, #0]
3418196e:	7b92      	ldrb	r2, [r2, #14]
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
34181970:	431a      	orrs	r2, r3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34181972:	687b      	ldr	r3, [r7, #4]
34181974:	60da      	str	r2, [r3, #12]

  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34181976:	683b      	ldr	r3, [r7, #0]
34181978:	689b      	ldr	r3, [r3, #8]
3418197a:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
3418197e:	683b      	ldr	r3, [r7, #0]
34181980:	7b1b      	ldrb	r3, [r3, #12]
34181982:	005b      	lsls	r3, r3, #1
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34181984:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->Enable           << MPU_RLAR_EN_Pos));
34181986:	683a      	ldr	r2, [r7, #0]
34181988:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
3418198a:	431a      	orrs	r2, r3
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
3418198c:	687b      	ldr	r3, [r7, #4]
3418198e:	611a      	str	r2, [r3, #16]
}
34181990:	bf00      	nop
34181992:	370c      	adds	r7, #12
34181994:	46bd      	mov	sp, r7
34181996:	f85d 7b04 	ldr.w	r7, [sp], #4
3418199a:	4770      	bx	lr

3418199c <MPU_ConfigMemoryAttributes>:

static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
3418199c:	b480      	push	{r7}
3418199e:	b087      	sub	sp, #28
341819a0:	af00      	add	r7, sp, #0
341819a2:	6078      	str	r0, [r7, #4]
341819a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_AttributesInit->Number));
  /* No need to check Attributes value as all 0x0..0xFF possible */

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
341819a6:	683b      	ldr	r3, [r7, #0]
341819a8:	781b      	ldrb	r3, [r3, #0]
341819aa:	2b03      	cmp	r3, #3
341819ac:	d806      	bhi.n	341819bc <MPU_ConfigMemoryAttributes+0x20>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
341819ae:	687b      	ldr	r3, [r7, #4]
341819b0:	3330      	adds	r3, #48	@ 0x30
341819b2:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
341819b4:	683b      	ldr	r3, [r7, #0]
341819b6:	781b      	ldrb	r3, [r3, #0]
341819b8:	613b      	str	r3, [r7, #16]
341819ba:	e006      	b.n	341819ca <MPU_ConfigMemoryAttributes+0x2e>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
341819bc:	687b      	ldr	r3, [r7, #4]
341819be:	3334      	adds	r3, #52	@ 0x34
341819c0:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
341819c2:	683b      	ldr	r3, [r7, #0]
341819c4:	781b      	ldrb	r3, [r3, #0]
341819c6:	3b04      	subs	r3, #4
341819c8:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
341819ca:	697b      	ldr	r3, [r7, #20]
341819cc:	681b      	ldr	r3, [r3, #0]
341819ce:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFU << (attr_number * 8U));
341819d0:	693b      	ldr	r3, [r7, #16]
341819d2:	00db      	lsls	r3, r3, #3
341819d4:	22ff      	movs	r2, #255	@ 0xff
341819d6:	fa02 f303 	lsl.w	r3, r2, r3
341819da:	43db      	mvns	r3, r3
341819dc:	68fa      	ldr	r2, [r7, #12]
341819de:	4013      	ands	r3, r2
341819e0:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
341819e2:	683b      	ldr	r3, [r7, #0]
341819e4:	785b      	ldrb	r3, [r3, #1]
341819e6:	461a      	mov	r2, r3
341819e8:	693b      	ldr	r3, [r7, #16]
341819ea:	00db      	lsls	r3, r3, #3
341819ec:	409a      	lsls	r2, r3
341819ee:	68fb      	ldr	r3, [r7, #12]
341819f0:	431a      	orrs	r2, r3
341819f2:	697b      	ldr	r3, [r7, #20]
341819f4:	601a      	str	r2, [r3, #0]
}
341819f6:	bf00      	nop
341819f8:	371c      	adds	r7, #28
341819fa:	46bd      	mov	sp, r7
341819fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a00:	4770      	bx	lr

34181a02 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
34181a02:	b580      	push	{r7, lr}
34181a04:	b084      	sub	sp, #16
34181a06:	af00      	add	r7, sp, #0
34181a08:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
34181a0a:	f7ff fe0f 	bl	3418162c <HAL_GetTick>
34181a0e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34181a10:	687b      	ldr	r3, [r7, #4]
34181a12:	2b00      	cmp	r3, #0
34181a14:	d101      	bne.n	34181a1a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
34181a16:	2301      	movs	r3, #1
34181a18:	e06b      	b.n	34181af2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34181a1a:	687b      	ldr	r3, [r7, #4]
34181a1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34181a20:	b2db      	uxtb	r3, r3
34181a22:	2b02      	cmp	r3, #2
34181a24:	d008      	beq.n	34181a38 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34181a26:	687b      	ldr	r3, [r7, #4]
34181a28:	2220      	movs	r2, #32
34181a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34181a2c:	687b      	ldr	r3, [r7, #4]
34181a2e:	2200      	movs	r2, #0
34181a30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
34181a34:	2301      	movs	r3, #1
34181a36:	e05c      	b.n	34181af2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
34181a38:	687b      	ldr	r3, [r7, #4]
34181a3a:	681b      	ldr	r3, [r3, #0]
34181a3c:	695a      	ldr	r2, [r3, #20]
34181a3e:	687b      	ldr	r3, [r7, #4]
34181a40:	681b      	ldr	r3, [r3, #0]
34181a42:	f042 0204 	orr.w	r2, r2, #4
34181a46:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
34181a48:	687b      	ldr	r3, [r7, #4]
34181a4a:	2205      	movs	r2, #5
34181a4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34181a50:	e020      	b.n	34181a94 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
34181a52:	f7ff fdeb 	bl	3418162c <HAL_GetTick>
34181a56:	4602      	mov	r2, r0
34181a58:	68fb      	ldr	r3, [r7, #12]
34181a5a:	1ad3      	subs	r3, r2, r3
34181a5c:	2b05      	cmp	r3, #5
34181a5e:	d919      	bls.n	34181a94 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
34181a60:	687b      	ldr	r3, [r7, #4]
34181a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34181a64:	f043 0210 	orr.w	r2, r3, #16
34181a68:	687b      	ldr	r3, [r7, #4]
34181a6a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
34181a6c:	687b      	ldr	r3, [r7, #4]
34181a6e:	2203      	movs	r2, #3
34181a70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34181a74:	687b      	ldr	r3, [r7, #4]
34181a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34181a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34181a7c:	2b00      	cmp	r3, #0
34181a7e:	d003      	beq.n	34181a88 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34181a80:	687b      	ldr	r3, [r7, #4]
34181a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34181a84:	2201      	movs	r2, #1
34181a86:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34181a88:	687b      	ldr	r3, [r7, #4]
34181a8a:	2200      	movs	r2, #0
34181a8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
34181a90:	2301      	movs	r3, #1
34181a92:	e02e      	b.n	34181af2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34181a94:	687b      	ldr	r3, [r7, #4]
34181a96:	681b      	ldr	r3, [r3, #0]
34181a98:	691b      	ldr	r3, [r3, #16]
34181a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34181a9e:	2b00      	cmp	r3, #0
34181aa0:	d0d7      	beq.n	34181a52 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
34181aa2:	687b      	ldr	r3, [r7, #4]
34181aa4:	681b      	ldr	r3, [r3, #0]
34181aa6:	695a      	ldr	r2, [r3, #20]
34181aa8:	687b      	ldr	r3, [r7, #4]
34181aaa:	681b      	ldr	r3, [r3, #0]
34181aac:	f042 0202 	orr.w	r2, r2, #2
34181ab0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34181ab2:	687b      	ldr	r3, [r7, #4]
34181ab4:	2204      	movs	r2, #4
34181ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34181aba:	687b      	ldr	r3, [r7, #4]
34181abc:	681b      	ldr	r3, [r3, #0]
34181abe:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34181ac2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
34181ac4:	687b      	ldr	r3, [r7, #4]
34181ac6:	2201      	movs	r2, #1
34181ac8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34181acc:	687b      	ldr	r3, [r7, #4]
34181ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34181ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34181ad4:	2b00      	cmp	r3, #0
34181ad6:	d007      	beq.n	34181ae8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34181ad8:	687b      	ldr	r3, [r7, #4]
34181ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34181adc:	2201      	movs	r2, #1
34181ade:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
34181ae0:	687b      	ldr	r3, [r7, #4]
34181ae2:	681b      	ldr	r3, [r3, #0]
34181ae4:	2200      	movs	r2, #0
34181ae6:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34181ae8:	687b      	ldr	r3, [r7, #4]
34181aea:	2200      	movs	r2, #0
34181aec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
34181af0:	2300      	movs	r3, #0
}
34181af2:	4618      	mov	r0, r3
34181af4:	3710      	adds	r7, #16
34181af6:	46bd      	mov	sp, r7
34181af8:	bd80      	pop	{r7, pc}
	...

34181afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34181afc:	b480      	push	{r7}
34181afe:	b087      	sub	sp, #28
34181b00:	af00      	add	r7, sp, #0
34181b02:	6078      	str	r0, [r7, #4]
34181b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34181b06:	2300      	movs	r3, #0
34181b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34181b0a:	e180      	b.n	34181e0e <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34181b0c:	683b      	ldr	r3, [r7, #0]
34181b0e:	681a      	ldr	r2, [r3, #0]
34181b10:	2101      	movs	r1, #1
34181b12:	697b      	ldr	r3, [r7, #20]
34181b14:	fa01 f303 	lsl.w	r3, r1, r3
34181b18:	4013      	ands	r3, r2
34181b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34181b1c:	68fb      	ldr	r3, [r7, #12]
34181b1e:	2b00      	cmp	r3, #0
34181b20:	f000 8172 	beq.w	34181e08 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34181b24:	683b      	ldr	r3, [r7, #0]
34181b26:	685b      	ldr	r3, [r3, #4]
34181b28:	f003 0303 	and.w	r3, r3, #3
34181b2c:	2b01      	cmp	r3, #1
34181b2e:	d005      	beq.n	34181b3c <HAL_GPIO_Init+0x40>
34181b30:	683b      	ldr	r3, [r7, #0]
34181b32:	685b      	ldr	r3, [r3, #4]
34181b34:	f003 0303 	and.w	r3, r3, #3
34181b38:	2b02      	cmp	r3, #2
34181b3a:	d130      	bne.n	34181b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34181b3c:	687b      	ldr	r3, [r7, #4]
34181b3e:	689b      	ldr	r3, [r3, #8]
34181b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34181b42:	697b      	ldr	r3, [r7, #20]
34181b44:	005b      	lsls	r3, r3, #1
34181b46:	2203      	movs	r2, #3
34181b48:	fa02 f303 	lsl.w	r3, r2, r3
34181b4c:	43db      	mvns	r3, r3
34181b4e:	693a      	ldr	r2, [r7, #16]
34181b50:	4013      	ands	r3, r2
34181b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34181b54:	683b      	ldr	r3, [r7, #0]
34181b56:	68da      	ldr	r2, [r3, #12]
34181b58:	697b      	ldr	r3, [r7, #20]
34181b5a:	005b      	lsls	r3, r3, #1
34181b5c:	fa02 f303 	lsl.w	r3, r2, r3
34181b60:	693a      	ldr	r2, [r7, #16]
34181b62:	4313      	orrs	r3, r2
34181b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34181b66:	687b      	ldr	r3, [r7, #4]
34181b68:	693a      	ldr	r2, [r7, #16]
34181b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34181b6c:	687b      	ldr	r3, [r7, #4]
34181b6e:	685b      	ldr	r3, [r3, #4]
34181b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34181b72:	2201      	movs	r2, #1
34181b74:	697b      	ldr	r3, [r7, #20]
34181b76:	fa02 f303 	lsl.w	r3, r2, r3
34181b7a:	43db      	mvns	r3, r3
34181b7c:	693a      	ldr	r2, [r7, #16]
34181b7e:	4013      	ands	r3, r2
34181b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34181b82:	683b      	ldr	r3, [r7, #0]
34181b84:	685b      	ldr	r3, [r3, #4]
34181b86:	091b      	lsrs	r3, r3, #4
34181b88:	f003 0201 	and.w	r2, r3, #1
34181b8c:	697b      	ldr	r3, [r7, #20]
34181b8e:	fa02 f303 	lsl.w	r3, r2, r3
34181b92:	693a      	ldr	r2, [r7, #16]
34181b94:	4313      	orrs	r3, r2
34181b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34181b98:	687b      	ldr	r3, [r7, #4]
34181b9a:	693a      	ldr	r2, [r7, #16]
34181b9c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34181b9e:	683b      	ldr	r3, [r7, #0]
34181ba0:	685b      	ldr	r3, [r3, #4]
34181ba2:	f003 0303 	and.w	r3, r3, #3
34181ba6:	2b03      	cmp	r3, #3
34181ba8:	d109      	bne.n	34181bbe <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181baa:	683b      	ldr	r3, [r7, #0]
34181bac:	685b      	ldr	r3, [r3, #4]
34181bae:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34181bb2:	2b03      	cmp	r3, #3
34181bb4:	d11b      	bne.n	34181bee <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181bb6:	683b      	ldr	r3, [r7, #0]
34181bb8:	689b      	ldr	r3, [r3, #8]
34181bba:	2b01      	cmp	r3, #1
34181bbc:	d017      	beq.n	34181bee <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34181bbe:	687b      	ldr	r3, [r7, #4]
34181bc0:	68db      	ldr	r3, [r3, #12]
34181bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34181bc4:	697b      	ldr	r3, [r7, #20]
34181bc6:	005b      	lsls	r3, r3, #1
34181bc8:	2203      	movs	r2, #3
34181bca:	fa02 f303 	lsl.w	r3, r2, r3
34181bce:	43db      	mvns	r3, r3
34181bd0:	693a      	ldr	r2, [r7, #16]
34181bd2:	4013      	ands	r3, r2
34181bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34181bd6:	683b      	ldr	r3, [r7, #0]
34181bd8:	689a      	ldr	r2, [r3, #8]
34181bda:	697b      	ldr	r3, [r7, #20]
34181bdc:	005b      	lsls	r3, r3, #1
34181bde:	fa02 f303 	lsl.w	r3, r2, r3
34181be2:	693a      	ldr	r2, [r7, #16]
34181be4:	4313      	orrs	r3, r2
34181be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34181be8:	687b      	ldr	r3, [r7, #4]
34181bea:	693a      	ldr	r2, [r7, #16]
34181bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34181bee:	683b      	ldr	r3, [r7, #0]
34181bf0:	685b      	ldr	r3, [r3, #4]
34181bf2:	f003 0303 	and.w	r3, r3, #3
34181bf6:	2b02      	cmp	r3, #2
34181bf8:	d123      	bne.n	34181c42 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34181bfa:	697b      	ldr	r3, [r7, #20]
34181bfc:	08da      	lsrs	r2, r3, #3
34181bfe:	687b      	ldr	r3, [r7, #4]
34181c00:	3208      	adds	r2, #8
34181c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34181c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181c08:	697b      	ldr	r3, [r7, #20]
34181c0a:	f003 0307 	and.w	r3, r3, #7
34181c0e:	009b      	lsls	r3, r3, #2
34181c10:	220f      	movs	r2, #15
34181c12:	fa02 f303 	lsl.w	r3, r2, r3
34181c16:	43db      	mvns	r3, r3
34181c18:	693a      	ldr	r2, [r7, #16]
34181c1a:	4013      	ands	r3, r2
34181c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181c1e:	683b      	ldr	r3, [r7, #0]
34181c20:	691a      	ldr	r2, [r3, #16]
34181c22:	697b      	ldr	r3, [r7, #20]
34181c24:	f003 0307 	and.w	r3, r3, #7
34181c28:	009b      	lsls	r3, r3, #2
34181c2a:	fa02 f303 	lsl.w	r3, r2, r3
34181c2e:	693a      	ldr	r2, [r7, #16]
34181c30:	4313      	orrs	r3, r2
34181c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34181c34:	697b      	ldr	r3, [r7, #20]
34181c36:	08da      	lsrs	r2, r3, #3
34181c38:	687b      	ldr	r3, [r7, #4]
34181c3a:	3208      	adds	r2, #8
34181c3c:	6939      	ldr	r1, [r7, #16]
34181c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34181c42:	687b      	ldr	r3, [r7, #4]
34181c44:	681b      	ldr	r3, [r3, #0]
34181c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34181c48:	697b      	ldr	r3, [r7, #20]
34181c4a:	005b      	lsls	r3, r3, #1
34181c4c:	2203      	movs	r2, #3
34181c4e:	fa02 f303 	lsl.w	r3, r2, r3
34181c52:	43db      	mvns	r3, r3
34181c54:	693a      	ldr	r2, [r7, #16]
34181c56:	4013      	ands	r3, r2
34181c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34181c5a:	683b      	ldr	r3, [r7, #0]
34181c5c:	685b      	ldr	r3, [r3, #4]
34181c5e:	f003 0203 	and.w	r2, r3, #3
34181c62:	697b      	ldr	r3, [r7, #20]
34181c64:	005b      	lsls	r3, r3, #1
34181c66:	fa02 f303 	lsl.w	r3, r2, r3
34181c6a:	693a      	ldr	r2, [r7, #16]
34181c6c:	4313      	orrs	r3, r2
34181c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34181c70:	687b      	ldr	r3, [r7, #4]
34181c72:	693a      	ldr	r2, [r7, #16]
34181c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34181c76:	683b      	ldr	r3, [r7, #0]
34181c78:	685b      	ldr	r3, [r3, #4]
34181c7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34181c7e:	2b00      	cmp	r3, #0
34181c80:	f000 80c2 	beq.w	34181e08 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34181c84:	4a69      	ldr	r2, [pc, #420]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181c86:	697b      	ldr	r3, [r7, #20]
34181c88:	089b      	lsrs	r3, r3, #2
34181c8a:	3318      	adds	r3, #24
34181c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181c92:	697b      	ldr	r3, [r7, #20]
34181c94:	f003 0303 	and.w	r3, r3, #3
34181c98:	00db      	lsls	r3, r3, #3
34181c9a:	220f      	movs	r2, #15
34181c9c:	fa02 f303 	lsl.w	r3, r2, r3
34181ca0:	43db      	mvns	r3, r3
34181ca2:	693a      	ldr	r2, [r7, #16]
34181ca4:	4013      	ands	r3, r2
34181ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181ca8:	687b      	ldr	r3, [r7, #4]
34181caa:	4a61      	ldr	r2, [pc, #388]	@ (34181e30 <HAL_GPIO_Init+0x334>)
34181cac:	4293      	cmp	r3, r2
34181cae:	d043      	beq.n	34181d38 <HAL_GPIO_Init+0x23c>
34181cb0:	687b      	ldr	r3, [r7, #4]
34181cb2:	4a60      	ldr	r2, [pc, #384]	@ (34181e34 <HAL_GPIO_Init+0x338>)
34181cb4:	4293      	cmp	r3, r2
34181cb6:	d03d      	beq.n	34181d34 <HAL_GPIO_Init+0x238>
34181cb8:	687b      	ldr	r3, [r7, #4]
34181cba:	4a5f      	ldr	r2, [pc, #380]	@ (34181e38 <HAL_GPIO_Init+0x33c>)
34181cbc:	4293      	cmp	r3, r2
34181cbe:	d037      	beq.n	34181d30 <HAL_GPIO_Init+0x234>
34181cc0:	687b      	ldr	r3, [r7, #4]
34181cc2:	4a5e      	ldr	r2, [pc, #376]	@ (34181e3c <HAL_GPIO_Init+0x340>)
34181cc4:	4293      	cmp	r3, r2
34181cc6:	d031      	beq.n	34181d2c <HAL_GPIO_Init+0x230>
34181cc8:	687b      	ldr	r3, [r7, #4]
34181cca:	4a5d      	ldr	r2, [pc, #372]	@ (34181e40 <HAL_GPIO_Init+0x344>)
34181ccc:	4293      	cmp	r3, r2
34181cce:	d02b      	beq.n	34181d28 <HAL_GPIO_Init+0x22c>
34181cd0:	687b      	ldr	r3, [r7, #4]
34181cd2:	4a5c      	ldr	r2, [pc, #368]	@ (34181e44 <HAL_GPIO_Init+0x348>)
34181cd4:	4293      	cmp	r3, r2
34181cd6:	d025      	beq.n	34181d24 <HAL_GPIO_Init+0x228>
34181cd8:	687b      	ldr	r3, [r7, #4]
34181cda:	4a5b      	ldr	r2, [pc, #364]	@ (34181e48 <HAL_GPIO_Init+0x34c>)
34181cdc:	4293      	cmp	r3, r2
34181cde:	d01f      	beq.n	34181d20 <HAL_GPIO_Init+0x224>
34181ce0:	687b      	ldr	r3, [r7, #4]
34181ce2:	4a5a      	ldr	r2, [pc, #360]	@ (34181e4c <HAL_GPIO_Init+0x350>)
34181ce4:	4293      	cmp	r3, r2
34181ce6:	d019      	beq.n	34181d1c <HAL_GPIO_Init+0x220>
34181ce8:	687b      	ldr	r3, [r7, #4]
34181cea:	4a59      	ldr	r2, [pc, #356]	@ (34181e50 <HAL_GPIO_Init+0x354>)
34181cec:	4293      	cmp	r3, r2
34181cee:	d013      	beq.n	34181d18 <HAL_GPIO_Init+0x21c>
34181cf0:	687b      	ldr	r3, [r7, #4]
34181cf2:	4a58      	ldr	r2, [pc, #352]	@ (34181e54 <HAL_GPIO_Init+0x358>)
34181cf4:	4293      	cmp	r3, r2
34181cf6:	d00d      	beq.n	34181d14 <HAL_GPIO_Init+0x218>
34181cf8:	687b      	ldr	r3, [r7, #4]
34181cfa:	4a57      	ldr	r2, [pc, #348]	@ (34181e58 <HAL_GPIO_Init+0x35c>)
34181cfc:	4293      	cmp	r3, r2
34181cfe:	d007      	beq.n	34181d10 <HAL_GPIO_Init+0x214>
34181d00:	687b      	ldr	r3, [r7, #4]
34181d02:	4a56      	ldr	r2, [pc, #344]	@ (34181e5c <HAL_GPIO_Init+0x360>)
34181d04:	4293      	cmp	r3, r2
34181d06:	d101      	bne.n	34181d0c <HAL_GPIO_Init+0x210>
34181d08:	230b      	movs	r3, #11
34181d0a:	e016      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d0c:	2310      	movs	r3, #16
34181d0e:	e014      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d10:	230a      	movs	r3, #10
34181d12:	e012      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d14:	2309      	movs	r3, #9
34181d16:	e010      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d18:	2308      	movs	r3, #8
34181d1a:	e00e      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d1c:	2307      	movs	r3, #7
34181d1e:	e00c      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d20:	2306      	movs	r3, #6
34181d22:	e00a      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d24:	2305      	movs	r3, #5
34181d26:	e008      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d28:	2304      	movs	r3, #4
34181d2a:	e006      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d2c:	2303      	movs	r3, #3
34181d2e:	e004      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d30:	2302      	movs	r3, #2
34181d32:	e002      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d34:	2301      	movs	r3, #1
34181d36:	e000      	b.n	34181d3a <HAL_GPIO_Init+0x23e>
34181d38:	2300      	movs	r3, #0
34181d3a:	697a      	ldr	r2, [r7, #20]
34181d3c:	f002 0203 	and.w	r2, r2, #3
34181d40:	00d2      	lsls	r2, r2, #3
34181d42:	4093      	lsls	r3, r2
34181d44:	693a      	ldr	r2, [r7, #16]
34181d46:	4313      	orrs	r3, r2
34181d48:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34181d4a:	4938      	ldr	r1, [pc, #224]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181d4c:	697b      	ldr	r3, [r7, #20]
34181d4e:	089b      	lsrs	r3, r3, #2
34181d50:	3318      	adds	r3, #24
34181d52:	693a      	ldr	r2, [r7, #16]
34181d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34181d58:	4b34      	ldr	r3, [pc, #208]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34181d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181d60:	68fb      	ldr	r3, [r7, #12]
34181d62:	43db      	mvns	r3, r3
34181d64:	693a      	ldr	r2, [r7, #16]
34181d66:	4013      	ands	r3, r2
34181d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34181d6a:	683b      	ldr	r3, [r7, #0]
34181d6c:	685b      	ldr	r3, [r3, #4]
34181d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34181d72:	2b00      	cmp	r3, #0
34181d74:	d003      	beq.n	34181d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34181d76:	693a      	ldr	r2, [r7, #16]
34181d78:	68fb      	ldr	r3, [r7, #12]
34181d7a:	4313      	orrs	r3, r2
34181d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34181d7e:	4a2b      	ldr	r2, [pc, #172]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181d80:	693b      	ldr	r3, [r7, #16]
34181d82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34181d86:	4b29      	ldr	r3, [pc, #164]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34181d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181d8e:	68fb      	ldr	r3, [r7, #12]
34181d90:	43db      	mvns	r3, r3
34181d92:	693a      	ldr	r2, [r7, #16]
34181d94:	4013      	ands	r3, r2
34181d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34181d98:	683b      	ldr	r3, [r7, #0]
34181d9a:	685b      	ldr	r3, [r3, #4]
34181d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34181da0:	2b00      	cmp	r3, #0
34181da2:	d003      	beq.n	34181dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34181da4:	693a      	ldr	r2, [r7, #16]
34181da6:	68fb      	ldr	r3, [r7, #12]
34181da8:	4313      	orrs	r3, r2
34181daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34181dac:	4a1f      	ldr	r2, [pc, #124]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181dae:	693b      	ldr	r3, [r7, #16]
34181db0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34181db4:	4b1d      	ldr	r3, [pc, #116]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181db6:	681b      	ldr	r3, [r3, #0]
34181db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181dba:	68fb      	ldr	r3, [r7, #12]
34181dbc:	43db      	mvns	r3, r3
34181dbe:	693a      	ldr	r2, [r7, #16]
34181dc0:	4013      	ands	r3, r2
34181dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34181dc4:	683b      	ldr	r3, [r7, #0]
34181dc6:	685b      	ldr	r3, [r3, #4]
34181dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34181dcc:	2b00      	cmp	r3, #0
34181dce:	d003      	beq.n	34181dd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34181dd0:	693a      	ldr	r2, [r7, #16]
34181dd2:	68fb      	ldr	r3, [r7, #12]
34181dd4:	4313      	orrs	r3, r2
34181dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34181dd8:	4a14      	ldr	r2, [pc, #80]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181dda:	693b      	ldr	r3, [r7, #16]
34181ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34181dde:	4b13      	ldr	r3, [pc, #76]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181de0:	685b      	ldr	r3, [r3, #4]
34181de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181de4:	68fb      	ldr	r3, [r7, #12]
34181de6:	43db      	mvns	r3, r3
34181de8:	693a      	ldr	r2, [r7, #16]
34181dea:	4013      	ands	r3, r2
34181dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34181dee:	683b      	ldr	r3, [r7, #0]
34181df0:	685b      	ldr	r3, [r3, #4]
34181df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34181df6:	2b00      	cmp	r3, #0
34181df8:	d003      	beq.n	34181e02 <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34181dfa:	693a      	ldr	r2, [r7, #16]
34181dfc:	68fb      	ldr	r3, [r7, #12]
34181dfe:	4313      	orrs	r3, r2
34181e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34181e02:	4a0a      	ldr	r2, [pc, #40]	@ (34181e2c <HAL_GPIO_Init+0x330>)
34181e04:	693b      	ldr	r3, [r7, #16]
34181e06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34181e08:	697b      	ldr	r3, [r7, #20]
34181e0a:	3301      	adds	r3, #1
34181e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34181e0e:	683b      	ldr	r3, [r7, #0]
34181e10:	681a      	ldr	r2, [r3, #0]
34181e12:	697b      	ldr	r3, [r7, #20]
34181e14:	fa22 f303 	lsr.w	r3, r2, r3
34181e18:	2b00      	cmp	r3, #0
34181e1a:	f47f ae77 	bne.w	34181b0c <HAL_GPIO_Init+0x10>
  }
}
34181e1e:	bf00      	nop
34181e20:	bf00      	nop
34181e22:	371c      	adds	r7, #28
34181e24:	46bd      	mov	sp, r7
34181e26:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e2a:	4770      	bx	lr
34181e2c:	56025000 	.word	0x56025000
34181e30:	56020000 	.word	0x56020000
34181e34:	56020400 	.word	0x56020400
34181e38:	56020800 	.word	0x56020800
34181e3c:	56020c00 	.word	0x56020c00
34181e40:	56021000 	.word	0x56021000
34181e44:	56021400 	.word	0x56021400
34181e48:	56021800 	.word	0x56021800
34181e4c:	56021c00 	.word	0x56021c00
34181e50:	56023400 	.word	0x56023400
34181e54:	56023800 	.word	0x56023800
34181e58:	56023c00 	.word	0x56023c00
34181e5c:	56024000 	.word	0x56024000

34181e60 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34181e60:	b580      	push	{r7, lr}
34181e62:	b084      	sub	sp, #16
34181e64:	af00      	add	r7, sp, #0
34181e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34181e68:	4b10      	ldr	r3, [pc, #64]	@ (34181eac <HAL_PWREx_ConfigSupply+0x4c>)
34181e6a:	681b      	ldr	r3, [r3, #0]
34181e6c:	f023 0204 	bic.w	r2, r3, #4
34181e70:	490e      	ldr	r1, [pc, #56]	@ (34181eac <HAL_PWREx_ConfigSupply+0x4c>)
34181e72:	687b      	ldr	r3, [r7, #4]
34181e74:	4313      	orrs	r3, r2
34181e76:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34181e78:	f7ff fbd8 	bl	3418162c <HAL_GetTick>
34181e7c:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181e7e:	e009      	b.n	34181e94 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34181e80:	f7ff fbd4 	bl	3418162c <HAL_GetTick>
34181e84:	4602      	mov	r2, r0
34181e86:	68fb      	ldr	r3, [r7, #12]
34181e88:	1ad3      	subs	r3, r2, r3
34181e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34181e8e:	d901      	bls.n	34181e94 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34181e90:	2301      	movs	r3, #1
34181e92:	e006      	b.n	34181ea2 <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181e94:	4b05      	ldr	r3, [pc, #20]	@ (34181eac <HAL_PWREx_ConfigSupply+0x4c>)
34181e96:	6a1b      	ldr	r3, [r3, #32]
34181e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34181e9c:	2b00      	cmp	r3, #0
34181e9e:	d0ef      	beq.n	34181e80 <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34181ea0:	2300      	movs	r3, #0
}
34181ea2:	4618      	mov	r0, r3
34181ea4:	3710      	adds	r7, #16
34181ea6:	46bd      	mov	sp, r7
34181ea8:	bd80      	pop	{r7, pc}
34181eaa:	bf00      	nop
34181eac:	56024800 	.word	0x56024800

34181eb0 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34181eb0:	b480      	push	{r7}
34181eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34181eb4:	4b05      	ldr	r3, [pc, #20]	@ (34181ecc <HAL_PWREx_EnableVddIO2+0x1c>)
34181eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181eb8:	4a04      	ldr	r2, [pc, #16]	@ (34181ecc <HAL_PWREx_EnableVddIO2+0x1c>)
34181eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181ebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181ec0:	bf00      	nop
34181ec2:	46bd      	mov	sp, r7
34181ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ec8:	4770      	bx	lr
34181eca:	bf00      	nop
34181ecc:	56024800 	.word	0x56024800

34181ed0 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34181ed0:	b480      	push	{r7}
34181ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34181ed4:	4b05      	ldr	r3, [pc, #20]	@ (34181eec <HAL_PWREx_EnableVddIO3+0x1c>)
34181ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181ed8:	4a04      	ldr	r2, [pc, #16]	@ (34181eec <HAL_PWREx_EnableVddIO3+0x1c>)
34181eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34181ede:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181ee0:	bf00      	nop
34181ee2:	46bd      	mov	sp, r7
34181ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ee8:	4770      	bx	lr
34181eea:	bf00      	nop
34181eec:	56024800 	.word	0x56024800

34181ef0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34181ef0:	b480      	push	{r7}
34181ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34181ef4:	4b06      	ldr	r3, [pc, #24]	@ (34181f10 <LL_RCC_HSE_IsReady+0x20>)
34181ef6:	685b      	ldr	r3, [r3, #4]
34181ef8:	f003 0310 	and.w	r3, r3, #16
34181efc:	2b00      	cmp	r3, #0
34181efe:	d001      	beq.n	34181f04 <LL_RCC_HSE_IsReady+0x14>
34181f00:	2301      	movs	r3, #1
34181f02:	e000      	b.n	34181f06 <LL_RCC_HSE_IsReady+0x16>
34181f04:	2300      	movs	r3, #0
}
34181f06:	4618      	mov	r0, r3
34181f08:	46bd      	mov	sp, r7
34181f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f0e:	4770      	bx	lr
34181f10:	56028000 	.word	0x56028000

34181f14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34181f14:	b480      	push	{r7}
34181f16:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34181f18:	4b04      	ldr	r3, [pc, #16]	@ (34181f2c <LL_RCC_HSI_Enable+0x18>)
34181f1a:	2208      	movs	r2, #8
34181f1c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34181f20:	bf00      	nop
34181f22:	46bd      	mov	sp, r7
34181f24:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f28:	4770      	bx	lr
34181f2a:	bf00      	nop
34181f2c:	56028000 	.word	0x56028000

34181f30 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34181f30:	b480      	push	{r7}
34181f32:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34181f34:	4b05      	ldr	r3, [pc, #20]	@ (34181f4c <LL_RCC_HSI_Disable+0x1c>)
34181f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181f3a:	461a      	mov	r2, r3
34181f3c:	2308      	movs	r3, #8
34181f3e:	6013      	str	r3, [r2, #0]
}
34181f40:	bf00      	nop
34181f42:	46bd      	mov	sp, r7
34181f44:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f48:	4770      	bx	lr
34181f4a:	bf00      	nop
34181f4c:	56028000 	.word	0x56028000

34181f50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34181f50:	b480      	push	{r7}
34181f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34181f54:	4b06      	ldr	r3, [pc, #24]	@ (34181f70 <LL_RCC_HSI_IsReady+0x20>)
34181f56:	685b      	ldr	r3, [r3, #4]
34181f58:	f003 0308 	and.w	r3, r3, #8
34181f5c:	2b00      	cmp	r3, #0
34181f5e:	d001      	beq.n	34181f64 <LL_RCC_HSI_IsReady+0x14>
34181f60:	2301      	movs	r3, #1
34181f62:	e000      	b.n	34181f66 <LL_RCC_HSI_IsReady+0x16>
34181f64:	2300      	movs	r3, #0
}
34181f66:	4618      	mov	r0, r3
34181f68:	46bd      	mov	sp, r7
34181f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f6e:	4770      	bx	lr
34181f70:	56028000 	.word	0x56028000

34181f74 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34181f74:	b480      	push	{r7}
34181f76:	b083      	sub	sp, #12
34181f78:	af00      	add	r7, sp, #0
34181f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34181f7c:	4b06      	ldr	r3, [pc, #24]	@ (34181f98 <LL_RCC_HSI_SetDivider+0x24>)
34181f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181f80:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34181f84:	4904      	ldr	r1, [pc, #16]	@ (34181f98 <LL_RCC_HSI_SetDivider+0x24>)
34181f86:	687b      	ldr	r3, [r7, #4]
34181f88:	4313      	orrs	r3, r2
34181f8a:	648b      	str	r3, [r1, #72]	@ 0x48
}
34181f8c:	bf00      	nop
34181f8e:	370c      	adds	r7, #12
34181f90:	46bd      	mov	sp, r7
34181f92:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f96:	4770      	bx	lr
34181f98:	56028000 	.word	0x56028000

34181f9c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34181f9c:	b480      	push	{r7}
34181f9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34181fa0:	4b04      	ldr	r3, [pc, #16]	@ (34181fb4 <LL_RCC_HSI_GetDivider+0x18>)
34181fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181fa4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34181fa8:	4618      	mov	r0, r3
34181faa:	46bd      	mov	sp, r7
34181fac:	f85d 7b04 	ldr.w	r7, [sp], #4
34181fb0:	4770      	bx	lr
34181fb2:	bf00      	nop
34181fb4:	56028000 	.word	0x56028000

34181fb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34181fb8:	b480      	push	{r7}
34181fba:	b083      	sub	sp, #12
34181fbc:	af00      	add	r7, sp, #0
34181fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34181fc0:	4b07      	ldr	r3, [pc, #28]	@ (34181fe0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34181fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181fc4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34181fc8:	687b      	ldr	r3, [r7, #4]
34181fca:	041b      	lsls	r3, r3, #16
34181fcc:	4904      	ldr	r1, [pc, #16]	@ (34181fe0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34181fce:	4313      	orrs	r3, r2
34181fd0:	648b      	str	r3, [r1, #72]	@ 0x48
}
34181fd2:	bf00      	nop
34181fd4:	370c      	adds	r7, #12
34181fd6:	46bd      	mov	sp, r7
34181fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34181fdc:	4770      	bx	lr
34181fde:	bf00      	nop
34181fe0:	56028000 	.word	0x56028000

34181fe4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34181fe4:	b480      	push	{r7}
34181fe6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34181fe8:	4b04      	ldr	r3, [pc, #16]	@ (34181ffc <LL_RCC_MSI_Enable+0x18>)
34181fea:	2204      	movs	r2, #4
34181fec:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34181ff0:	bf00      	nop
34181ff2:	46bd      	mov	sp, r7
34181ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181ff8:	4770      	bx	lr
34181ffa:	bf00      	nop
34181ffc:	56028000 	.word	0x56028000

34182000 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34182000:	b480      	push	{r7}
34182002:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34182004:	4b05      	ldr	r3, [pc, #20]	@ (3418201c <LL_RCC_MSI_Disable+0x1c>)
34182006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418200a:	461a      	mov	r2, r3
3418200c:	2304      	movs	r3, #4
3418200e:	6013      	str	r3, [r2, #0]
}
34182010:	bf00      	nop
34182012:	46bd      	mov	sp, r7
34182014:	f85d 7b04 	ldr.w	r7, [sp], #4
34182018:	4770      	bx	lr
3418201a:	bf00      	nop
3418201c:	56028000 	.word	0x56028000

34182020 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34182020:	b480      	push	{r7}
34182022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34182024:	4b06      	ldr	r3, [pc, #24]	@ (34182040 <LL_RCC_MSI_IsReady+0x20>)
34182026:	685b      	ldr	r3, [r3, #4]
34182028:	f003 0304 	and.w	r3, r3, #4
3418202c:	2b00      	cmp	r3, #0
3418202e:	d001      	beq.n	34182034 <LL_RCC_MSI_IsReady+0x14>
34182030:	2301      	movs	r3, #1
34182032:	e000      	b.n	34182036 <LL_RCC_MSI_IsReady+0x16>
34182034:	2300      	movs	r3, #0
}
34182036:	4618      	mov	r0, r3
34182038:	46bd      	mov	sp, r7
3418203a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418203e:	4770      	bx	lr
34182040:	56028000 	.word	0x56028000

34182044 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
34182044:	b480      	push	{r7}
34182046:	b083      	sub	sp, #12
34182048:	af00      	add	r7, sp, #0
3418204a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
3418204c:	4b06      	ldr	r3, [pc, #24]	@ (34182068 <LL_RCC_MSI_SetFrequency+0x24>)
3418204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34182054:	4904      	ldr	r1, [pc, #16]	@ (34182068 <LL_RCC_MSI_SetFrequency+0x24>)
34182056:	687b      	ldr	r3, [r7, #4]
34182058:	4313      	orrs	r3, r2
3418205a:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418205c:	bf00      	nop
3418205e:	370c      	adds	r7, #12
34182060:	46bd      	mov	sp, r7
34182062:	f85d 7b04 	ldr.w	r7, [sp], #4
34182066:	4770      	bx	lr
34182068:	56028000 	.word	0x56028000

3418206c <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
3418206c:	b480      	push	{r7}
3418206e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34182070:	4b04      	ldr	r3, [pc, #16]	@ (34182084 <LL_RCC_MSI_GetFrequency+0x18>)
34182072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34182078:	4618      	mov	r0, r3
3418207a:	46bd      	mov	sp, r7
3418207c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182080:	4770      	bx	lr
34182082:	bf00      	nop
34182084:	56028000 	.word	0x56028000

34182088 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34182088:	b480      	push	{r7}
3418208a:	b083      	sub	sp, #12
3418208c:	af00      	add	r7, sp, #0
3418208e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34182090:	4b07      	ldr	r3, [pc, #28]	@ (341820b0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34182092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182094:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34182098:	687b      	ldr	r3, [r7, #4]
3418209a:	041b      	lsls	r3, r3, #16
3418209c:	4904      	ldr	r1, [pc, #16]	@ (341820b0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418209e:	4313      	orrs	r3, r2
341820a0:	644b      	str	r3, [r1, #68]	@ 0x44
}
341820a2:	bf00      	nop
341820a4:	370c      	adds	r7, #12
341820a6:	46bd      	mov	sp, r7
341820a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341820ac:	4770      	bx	lr
341820ae:	bf00      	nop
341820b0:	56028000 	.word	0x56028000

341820b4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
341820b4:	b480      	push	{r7}
341820b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
341820b8:	4b06      	ldr	r3, [pc, #24]	@ (341820d4 <LL_RCC_LSE_IsReady+0x20>)
341820ba:	685b      	ldr	r3, [r3, #4]
341820bc:	f003 0302 	and.w	r3, r3, #2
341820c0:	2b00      	cmp	r3, #0
341820c2:	d001      	beq.n	341820c8 <LL_RCC_LSE_IsReady+0x14>
341820c4:	2301      	movs	r3, #1
341820c6:	e000      	b.n	341820ca <LL_RCC_LSE_IsReady+0x16>
341820c8:	2300      	movs	r3, #0
}
341820ca:	4618      	mov	r0, r3
341820cc:	46bd      	mov	sp, r7
341820ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341820d2:	4770      	bx	lr
341820d4:	56028000 	.word	0x56028000

341820d8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
341820d8:	b480      	push	{r7}
341820da:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
341820dc:	4b04      	ldr	r3, [pc, #16]	@ (341820f0 <LL_RCC_LSI_Enable+0x18>)
341820de:	2201      	movs	r2, #1
341820e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
341820e4:	bf00      	nop
341820e6:	46bd      	mov	sp, r7
341820e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341820ec:	4770      	bx	lr
341820ee:	bf00      	nop
341820f0:	56028000 	.word	0x56028000

341820f4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
341820f4:	b480      	push	{r7}
341820f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
341820f8:	4b05      	ldr	r3, [pc, #20]	@ (34182110 <LL_RCC_LSI_Disable+0x1c>)
341820fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341820fe:	461a      	mov	r2, r3
34182100:	2301      	movs	r3, #1
34182102:	6013      	str	r3, [r2, #0]
}
34182104:	bf00      	nop
34182106:	46bd      	mov	sp, r7
34182108:	f85d 7b04 	ldr.w	r7, [sp], #4
3418210c:	4770      	bx	lr
3418210e:	bf00      	nop
34182110:	56028000 	.word	0x56028000

34182114 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
34182114:	b480      	push	{r7}
34182116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34182118:	4b04      	ldr	r3, [pc, #16]	@ (3418212c <LL_RCC_LSI_IsReady+0x18>)
3418211a:	685b      	ldr	r3, [r3, #4]
3418211c:	f003 0301 	and.w	r3, r3, #1
}
34182120:	4618      	mov	r0, r3
34182122:	46bd      	mov	sp, r7
34182124:	f85d 7b04 	ldr.w	r7, [sp], #4
34182128:	4770      	bx	lr
3418212a:	bf00      	nop
3418212c:	56028000 	.word	0x56028000

34182130 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34182130:	b480      	push	{r7}
34182132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34182134:	4b04      	ldr	r3, [pc, #16]	@ (34182148 <LL_RCC_GetCpuClkSource+0x18>)
34182136:	6a1b      	ldr	r3, [r3, #32]
34182138:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418213c:	4618      	mov	r0, r3
3418213e:	46bd      	mov	sp, r7
34182140:	f85d 7b04 	ldr.w	r7, [sp], #4
34182144:	4770      	bx	lr
34182146:	bf00      	nop
34182148:	56028000 	.word	0x56028000

3418214c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
3418214c:	b480      	push	{r7}
3418214e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34182150:	4b04      	ldr	r3, [pc, #16]	@ (34182164 <LL_RCC_GetSysClkSource+0x18>)
34182152:	6a1b      	ldr	r3, [r3, #32]
34182154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182158:	4618      	mov	r0, r3
3418215a:	46bd      	mov	sp, r7
3418215c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182160:	4770      	bx	lr
34182162:	bf00      	nop
34182164:	56028000 	.word	0x56028000

34182168 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34182168:	b480      	push	{r7}
3418216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3418216c:	4b04      	ldr	r3, [pc, #16]	@ (34182180 <LL_RCC_PLL1_GetSource+0x18>)
3418216e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182172:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182176:	4618      	mov	r0, r3
34182178:	46bd      	mov	sp, r7
3418217a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418217e:	4770      	bx	lr
34182180:	56028000 	.word	0x56028000

34182184 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34182184:	b480      	push	{r7}
34182186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34182188:	4b07      	ldr	r3, [pc, #28]	@ (341821a8 <LL_RCC_PLL1_IsReady+0x24>)
3418218a:	685b      	ldr	r3, [r3, #4]
3418218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34182194:	d101      	bne.n	3418219a <LL_RCC_PLL1_IsReady+0x16>
34182196:	2301      	movs	r3, #1
34182198:	e000      	b.n	3418219c <LL_RCC_PLL1_IsReady+0x18>
3418219a:	2300      	movs	r3, #0
}
3418219c:	4618      	mov	r0, r3
3418219e:	46bd      	mov	sp, r7
341821a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341821a4:	4770      	bx	lr
341821a6:	bf00      	nop
341821a8:	56028000 	.word	0x56028000

341821ac <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
341821ac:	b480      	push	{r7}
341821ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
341821b0:	4b07      	ldr	r3, [pc, #28]	@ (341821d0 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
341821b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341821b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341821ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341821be:	d101      	bne.n	341821c4 <LL_RCC_PLL1_IsEnabledBypass+0x18>
341821c0:	2301      	movs	r3, #1
341821c2:	e000      	b.n	341821c6 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341821c4:	2300      	movs	r3, #0
}
341821c6:	4618      	mov	r0, r3
341821c8:	46bd      	mov	sp, r7
341821ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341821ce:	4770      	bx	lr
341821d0:	56028000 	.word	0x56028000

341821d4 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
341821d4:	b480      	push	{r7}
341821d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341821d8:	4b04      	ldr	r3, [pc, #16]	@ (341821ec <LL_RCC_PLL2_GetSource+0x18>)
341821da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341821de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341821e2:	4618      	mov	r0, r3
341821e4:	46bd      	mov	sp, r7
341821e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341821ea:	4770      	bx	lr
341821ec:	56028000 	.word	0x56028000

341821f0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
341821f0:	b480      	push	{r7}
341821f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341821f4:	4b07      	ldr	r3, [pc, #28]	@ (34182214 <LL_RCC_PLL2_IsReady+0x24>)
341821f6:	685b      	ldr	r3, [r3, #4]
341821f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341821fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34182200:	d101      	bne.n	34182206 <LL_RCC_PLL2_IsReady+0x16>
34182202:	2301      	movs	r3, #1
34182204:	e000      	b.n	34182208 <LL_RCC_PLL2_IsReady+0x18>
34182206:	2300      	movs	r3, #0
}
34182208:	4618      	mov	r0, r3
3418220a:	46bd      	mov	sp, r7
3418220c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182210:	4770      	bx	lr
34182212:	bf00      	nop
34182214:	56028000 	.word	0x56028000

34182218 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34182218:	b480      	push	{r7}
3418221a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418221c:	4b07      	ldr	r3, [pc, #28]	@ (3418223c <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34182222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418222a:	d101      	bne.n	34182230 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418222c:	2301      	movs	r3, #1
3418222e:	e000      	b.n	34182232 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34182230:	2300      	movs	r3, #0
}
34182232:	4618      	mov	r0, r3
34182234:	46bd      	mov	sp, r7
34182236:	f85d 7b04 	ldr.w	r7, [sp], #4
3418223a:	4770      	bx	lr
3418223c:	56028000 	.word	0x56028000

34182240 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34182240:	b480      	push	{r7}
34182242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34182244:	4b04      	ldr	r3, [pc, #16]	@ (34182258 <LL_RCC_PLL3_GetSource+0x18>)
34182246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418224a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418224e:	4618      	mov	r0, r3
34182250:	46bd      	mov	sp, r7
34182252:	f85d 7b04 	ldr.w	r7, [sp], #4
34182256:	4770      	bx	lr
34182258:	56028000 	.word	0x56028000

3418225c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
3418225c:	b480      	push	{r7}
3418225e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34182260:	4b07      	ldr	r3, [pc, #28]	@ (34182280 <LL_RCC_PLL3_IsReady+0x24>)
34182262:	685b      	ldr	r3, [r3, #4]
34182264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418226c:	d101      	bne.n	34182272 <LL_RCC_PLL3_IsReady+0x16>
3418226e:	2301      	movs	r3, #1
34182270:	e000      	b.n	34182274 <LL_RCC_PLL3_IsReady+0x18>
34182272:	2300      	movs	r3, #0
}
34182274:	4618      	mov	r0, r3
34182276:	46bd      	mov	sp, r7
34182278:	f85d 7b04 	ldr.w	r7, [sp], #4
3418227c:	4770      	bx	lr
3418227e:	bf00      	nop
34182280:	56028000 	.word	0x56028000

34182284 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34182284:	b480      	push	{r7}
34182286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34182288:	4b07      	ldr	r3, [pc, #28]	@ (341822a8 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418228a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418228e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182296:	d101      	bne.n	3418229c <LL_RCC_PLL3_IsEnabledBypass+0x18>
34182298:	2301      	movs	r3, #1
3418229a:	e000      	b.n	3418229e <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418229c:	2300      	movs	r3, #0
}
3418229e:	4618      	mov	r0, r3
341822a0:	46bd      	mov	sp, r7
341822a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341822a6:	4770      	bx	lr
341822a8:	56028000 	.word	0x56028000

341822ac <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
341822ac:	b480      	push	{r7}
341822ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
341822b0:	4b04      	ldr	r3, [pc, #16]	@ (341822c4 <LL_RCC_PLL4_GetSource+0x18>)
341822b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341822b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341822ba:	4618      	mov	r0, r3
341822bc:	46bd      	mov	sp, r7
341822be:	f85d 7b04 	ldr.w	r7, [sp], #4
341822c2:	4770      	bx	lr
341822c4:	56028000 	.word	0x56028000

341822c8 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
341822c8:	b480      	push	{r7}
341822ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
341822cc:	4b07      	ldr	r3, [pc, #28]	@ (341822ec <LL_RCC_PLL4_IsReady+0x24>)
341822ce:	685b      	ldr	r3, [r3, #4]
341822d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341822d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341822d8:	d101      	bne.n	341822de <LL_RCC_PLL4_IsReady+0x16>
341822da:	2301      	movs	r3, #1
341822dc:	e000      	b.n	341822e0 <LL_RCC_PLL4_IsReady+0x18>
341822de:	2300      	movs	r3, #0
}
341822e0:	4618      	mov	r0, r3
341822e2:	46bd      	mov	sp, r7
341822e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341822e8:	4770      	bx	lr
341822ea:	bf00      	nop
341822ec:	56028000 	.word	0x56028000

341822f0 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
341822f0:	b480      	push	{r7}
341822f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
341822f4:	4b07      	ldr	r3, [pc, #28]	@ (34182314 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
341822f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341822fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341822fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182302:	d101      	bne.n	34182308 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34182304:	2301      	movs	r3, #1
34182306:	e000      	b.n	3418230a <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34182308:	2300      	movs	r3, #0
}
3418230a:	4618      	mov	r0, r3
3418230c:	46bd      	mov	sp, r7
3418230e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182312:	4770      	bx	lr
34182314:	56028000 	.word	0x56028000

34182318 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34182318:	b480      	push	{r7}
3418231a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
3418231c:	4b04      	ldr	r3, [pc, #16]	@ (34182330 <LL_RCC_IC1_Enable+0x18>)
3418231e:	2201      	movs	r2, #1
34182320:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34182324:	bf00      	nop
34182326:	46bd      	mov	sp, r7
34182328:	f85d 7b04 	ldr.w	r7, [sp], #4
3418232c:	4770      	bx	lr
3418232e:	bf00      	nop
34182330:	56028000 	.word	0x56028000

34182334 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34182334:	b480      	push	{r7}
34182336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182338:	4b04      	ldr	r3, [pc, #16]	@ (3418234c <LL_RCC_IC1_GetSource+0x18>)
3418233a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418233e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182342:	4618      	mov	r0, r3
34182344:	46bd      	mov	sp, r7
34182346:	f85d 7b04 	ldr.w	r7, [sp], #4
3418234a:	4770      	bx	lr
3418234c:	56028000 	.word	0x56028000

34182350 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34182350:	b480      	push	{r7}
34182352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34182354:	4b05      	ldr	r3, [pc, #20]	@ (3418236c <LL_RCC_IC1_GetDivider+0x1c>)
34182356:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418235a:	0c1b      	lsrs	r3, r3, #16
3418235c:	b2db      	uxtb	r3, r3
3418235e:	3301      	adds	r3, #1
}
34182360:	4618      	mov	r0, r3
34182362:	46bd      	mov	sp, r7
34182364:	f85d 7b04 	ldr.w	r7, [sp], #4
34182368:	4770      	bx	lr
3418236a:	bf00      	nop
3418236c:	56028000 	.word	0x56028000

34182370 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34182370:	b480      	push	{r7}
34182372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182374:	4b04      	ldr	r3, [pc, #16]	@ (34182388 <LL_RCC_IC2_GetSource+0x18>)
34182376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418237a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418237e:	4618      	mov	r0, r3
34182380:	46bd      	mov	sp, r7
34182382:	f85d 7b04 	ldr.w	r7, [sp], #4
34182386:	4770      	bx	lr
34182388:	56028000 	.word	0x56028000

3418238c <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
3418238c:	b480      	push	{r7}
3418238e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34182390:	4b05      	ldr	r3, [pc, #20]	@ (341823a8 <LL_RCC_IC2_GetDivider+0x1c>)
34182392:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34182396:	0c1b      	lsrs	r3, r3, #16
34182398:	b2db      	uxtb	r3, r3
3418239a:	3301      	adds	r3, #1
}
3418239c:	4618      	mov	r0, r3
3418239e:	46bd      	mov	sp, r7
341823a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341823a4:	4770      	bx	lr
341823a6:	bf00      	nop
341823a8:	56028000 	.word	0x56028000

341823ac <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
341823ac:	b480      	push	{r7}
341823ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
341823b0:	4b04      	ldr	r3, [pc, #16]	@ (341823c4 <LL_RCC_IC6_GetSource+0x18>)
341823b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341823b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341823ba:	4618      	mov	r0, r3
341823bc:	46bd      	mov	sp, r7
341823be:	f85d 7b04 	ldr.w	r7, [sp], #4
341823c2:	4770      	bx	lr
341823c4:	56028000 	.word	0x56028000

341823c8 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
341823c8:	b480      	push	{r7}
341823ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341823cc:	4b04      	ldr	r3, [pc, #16]	@ (341823e0 <LL_RCC_IC11_GetSource+0x18>)
341823ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341823d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341823d6:	4618      	mov	r0, r3
341823d8:	46bd      	mov	sp, r7
341823da:	f85d 7b04 	ldr.w	r7, [sp], #4
341823de:	4770      	bx	lr
341823e0:	56028000 	.word	0x56028000

341823e4 <HAL_RCC_OscConfig>:
  * @note   This function does not protect the MCOxSEL, the PERSEL and the PPPSEL glitch-free muxes
  *         (Mux selection cannot be changed if selected input clock is inactive).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
341823e4:	b580      	push	{r7, lr}
341823e6:	b0a2      	sub	sp, #136	@ 0x88
341823e8:	af00      	add	r7, sp, #0
341823ea:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
341823ec:	687b      	ldr	r3, [r7, #4]
341823ee:	2b00      	cmp	r3, #0
341823f0:	d101      	bne.n	341823f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
341823f2:	2301      	movs	r3, #1
341823f4:	e3d1      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
341823f6:	f7ff fe9b 	bl	34182130 <LL_RCC_GetCpuClkSource>
341823fa:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
341823fe:	f7ff fea5 	bl	3418214c <LL_RCC_GetSysClkSource>
34182402:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
34182406:	f7ff feaf 	bl	34182168 <LL_RCC_PLL1_GetSource>
3418240a:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
3418240c:	f7ff fee2 	bl	341821d4 <LL_RCC_PLL2_GetSource>
34182410:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34182412:	f7ff ff15 	bl	34182240 <LL_RCC_PLL3_GetSource>
34182416:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34182418:	f7ff ff48 	bl	341822ac <LL_RCC_PLL4_GetSource>
3418241c:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
3418241e:	4b91      	ldr	r3, [pc, #580]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
34182420:	685b      	ldr	r3, [r3, #4]
34182422:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34182424:	687b      	ldr	r3, [r7, #4]
34182426:	681b      	ldr	r3, [r3, #0]
34182428:	f003 0301 	and.w	r3, r3, #1
3418242c:	2b00      	cmp	r3, #0
3418242e:	f000 80a8 	beq.w	34182582 <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34182432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418243a:	d028      	beq.n	3418248e <HAL_RCC_OscConfig+0xaa>
3418243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182444:	d023      	beq.n	3418248e <HAL_RCC_OscConfig+0xaa>
34182446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34182448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418244c:	d104      	bne.n	34182458 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418244e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182454:	2b00      	cmp	r3, #0
34182456:	d11a      	bne.n	3418248e <HAL_RCC_OscConfig+0xaa>
34182458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418245a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418245e:	d104      	bne.n	3418246a <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182466:	2b00      	cmp	r3, #0
34182468:	d111      	bne.n	3418248e <HAL_RCC_OscConfig+0xaa>
3418246a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418246c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182470:	d104      	bne.n	3418247c <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34182472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182478:	2b00      	cmp	r3, #0
3418247a:	d108      	bne.n	3418248e <HAL_RCC_OscConfig+0xaa>
3418247c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418247e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182482:	d10a      	bne.n	3418249a <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34182484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418248a:	2b00      	cmp	r3, #0
3418248c:	d005      	beq.n	3418249a <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3418248e:	687b      	ldr	r3, [r7, #4]
34182490:	685b      	ldr	r3, [r3, #4]
34182492:	2b00      	cmp	r3, #0
34182494:	d175      	bne.n	34182582 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
34182496:	2301      	movs	r3, #1
34182498:	e37f      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3418249a:	687b      	ldr	r3, [r7, #4]
3418249c:	685b      	ldr	r3, [r3, #4]
3418249e:	2b10      	cmp	r3, #16
341824a0:	d104      	bne.n	341824ac <HAL_RCC_OscConfig+0xc8>
341824a2:	4b70      	ldr	r3, [pc, #448]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824a4:	2210      	movs	r2, #16
341824a6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341824aa:	e043      	b.n	34182534 <HAL_RCC_OscConfig+0x150>
341824ac:	687b      	ldr	r3, [r7, #4]
341824ae:	685b      	ldr	r3, [r3, #4]
341824b0:	2b00      	cmp	r3, #0
341824b2:	d10c      	bne.n	341824ce <HAL_RCC_OscConfig+0xea>
341824b4:	4b6b      	ldr	r3, [pc, #428]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341824ba:	461a      	mov	r2, r3
341824bc:	2310      	movs	r3, #16
341824be:	6013      	str	r3, [r2, #0]
341824c0:	4b68      	ldr	r3, [pc, #416]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341824c4:	4a67      	ldr	r2, [pc, #412]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824c6:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
341824ca:	6553      	str	r3, [r2, #84]	@ 0x54
341824cc:	e032      	b.n	34182534 <HAL_RCC_OscConfig+0x150>
341824ce:	687b      	ldr	r3, [r7, #4]
341824d0:	685b      	ldr	r3, [r3, #4]
341824d2:	f248 0210 	movw	r2, #32784	@ 0x8010
341824d6:	4293      	cmp	r3, r2
341824d8:	d110      	bne.n	341824fc <HAL_RCC_OscConfig+0x118>
341824da:	4b62      	ldr	r3, [pc, #392]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341824de:	4a61      	ldr	r2, [pc, #388]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341824e4:	6553      	str	r3, [r2, #84]	@ 0x54
341824e6:	4b5f      	ldr	r3, [pc, #380]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341824ea:	4a5e      	ldr	r2, [pc, #376]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341824f0:	6553      	str	r3, [r2, #84]	@ 0x54
341824f2:	4b5c      	ldr	r3, [pc, #368]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
341824f4:	2210      	movs	r2, #16
341824f6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341824fa:	e01b      	b.n	34182534 <HAL_RCC_OscConfig+0x150>
341824fc:	687b      	ldr	r3, [r7, #4]
341824fe:	685b      	ldr	r3, [r3, #4]
34182500:	4a59      	ldr	r2, [pc, #356]	@ (34182668 <HAL_RCC_OscConfig+0x284>)
34182502:	4293      	cmp	r3, r2
34182504:	d10a      	bne.n	3418251c <HAL_RCC_OscConfig+0x138>
34182506:	4b57      	ldr	r3, [pc, #348]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
34182508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418250a:	4a56      	ldr	r2, [pc, #344]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
3418250c:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34182510:	6553      	str	r3, [r2, #84]	@ 0x54
34182512:	4b54      	ldr	r3, [pc, #336]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
34182514:	2210      	movs	r2, #16
34182516:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418251a:	e00b      	b.n	34182534 <HAL_RCC_OscConfig+0x150>
3418251c:	4b51      	ldr	r3, [pc, #324]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
3418251e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182522:	461a      	mov	r2, r3
34182524:	2310      	movs	r3, #16
34182526:	6013      	str	r3, [r2, #0]
34182528:	4b4e      	ldr	r3, [pc, #312]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
3418252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418252c:	4a4d      	ldr	r2, [pc, #308]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
3418252e:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34182532:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182534:	f7ff f87a 	bl	3418162c <HAL_GetTick>
34182538:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3418253a:	687b      	ldr	r3, [r7, #4]
3418253c:	685b      	ldr	r3, [r3, #4]
3418253e:	2b00      	cmp	r3, #0
34182540:	d019      	beq.n	34182576 <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34182542:	e008      	b.n	34182556 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182544:	f7ff f872 	bl	3418162c <HAL_GetTick>
34182548:	4602      	mov	r2, r0
3418254a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418254c:	1ad3      	subs	r3, r2, r3
3418254e:	2b64      	cmp	r3, #100	@ 0x64
34182550:	d901      	bls.n	34182556 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
34182552:	2303      	movs	r3, #3
34182554:	e321      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34182556:	4b43      	ldr	r3, [pc, #268]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
34182558:	685b      	ldr	r3, [r3, #4]
3418255a:	f003 0310 	and.w	r3, r3, #16
3418255e:	2b00      	cmp	r3, #0
34182560:	d0f0      	beq.n	34182544 <HAL_RCC_OscConfig+0x160>
34182562:	e00e      	b.n	34182582 <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182564:	f7ff f862 	bl	3418162c <HAL_GetTick>
34182568:	4602      	mov	r2, r0
3418256a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418256c:	1ad3      	subs	r3, r2, r3
3418256e:	2b64      	cmp	r3, #100	@ 0x64
34182570:	d901      	bls.n	34182576 <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
34182572:	2303      	movs	r3, #3
34182574:	e311      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34182576:	4b3b      	ldr	r3, [pc, #236]	@ (34182664 <HAL_RCC_OscConfig+0x280>)
34182578:	685b      	ldr	r3, [r3, #4]
3418257a:	f003 0310 	and.w	r3, r3, #16
3418257e:	2b00      	cmp	r3, #0
34182580:	d1f0      	bne.n	34182564 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34182582:	687b      	ldr	r3, [r7, #4]
34182584:	681b      	ldr	r3, [r3, #0]
34182586:	f003 0302 	and.w	r3, r3, #2
3418258a:	2b00      	cmp	r3, #0
3418258c:	d073      	beq.n	34182676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182592:	2b00      	cmp	r3, #0
34182594:	d023      	beq.n	341825de <HAL_RCC_OscConfig+0x1fa>
34182596:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418259a:	2b00      	cmp	r3, #0
3418259c:	d01f      	beq.n	341825de <HAL_RCC_OscConfig+0x1fa>
3418259e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341825a0:	2b00      	cmp	r3, #0
341825a2:	d104      	bne.n	341825ae <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341825a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341825a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341825aa:	2b00      	cmp	r3, #0
341825ac:	d117      	bne.n	341825de <HAL_RCC_OscConfig+0x1fa>
341825ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341825b0:	2b00      	cmp	r3, #0
341825b2:	d104      	bne.n	341825be <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341825b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341825b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341825ba:	2b00      	cmp	r3, #0
341825bc:	d10f      	bne.n	341825de <HAL_RCC_OscConfig+0x1fa>
341825be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341825c0:	2b00      	cmp	r3, #0
341825c2:	d104      	bne.n	341825ce <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341825c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341825c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341825ca:	2b00      	cmp	r3, #0
341825cc:	d107      	bne.n	341825de <HAL_RCC_OscConfig+0x1fa>
341825ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341825d0:	2b00      	cmp	r3, #0
341825d2:	d115      	bne.n	34182600 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341825d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341825d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341825da:	2b00      	cmp	r3, #0
341825dc:	d010      	beq.n	34182600 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341825de:	687b      	ldr	r3, [r7, #4]
341825e0:	68db      	ldr	r3, [r3, #12]
341825e2:	2b00      	cmp	r3, #0
341825e4:	d101      	bne.n	341825ea <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
341825e6:	2301      	movs	r3, #1
341825e8:	e2d7      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341825ea:	687b      	ldr	r3, [r7, #4]
341825ec:	691b      	ldr	r3, [r3, #16]
341825ee:	4618      	mov	r0, r3
341825f0:	f7ff fcc0 	bl	34181f74 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341825f4:	687b      	ldr	r3, [r7, #4]
341825f6:	695b      	ldr	r3, [r3, #20]
341825f8:	4618      	mov	r0, r3
341825fa:	f7ff fcdd 	bl	34181fb8 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341825fe:	e03a      	b.n	34182676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34182600:	687b      	ldr	r3, [r7, #4]
34182602:	68db      	ldr	r3, [r3, #12]
34182604:	2b00      	cmp	r3, #0
34182606:	d01e      	beq.n	34182646 <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34182608:	f7ff fc84 	bl	34181f14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418260c:	f7ff f80e 	bl	3418162c <HAL_GetTick>
34182610:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34182612:	e008      	b.n	34182626 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34182614:	f7ff f80a 	bl	3418162c <HAL_GetTick>
34182618:	4602      	mov	r2, r0
3418261a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418261c:	1ad3      	subs	r3, r2, r3
3418261e:	2b01      	cmp	r3, #1
34182620:	d901      	bls.n	34182626 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
34182622:	2303      	movs	r3, #3
34182624:	e2b9      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
34182626:	f7ff fc93 	bl	34181f50 <LL_RCC_HSI_IsReady>
3418262a:	4603      	mov	r3, r0
3418262c:	2b00      	cmp	r3, #0
3418262e:	d0f1      	beq.n	34182614 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34182630:	687b      	ldr	r3, [r7, #4]
34182632:	691b      	ldr	r3, [r3, #16]
34182634:	4618      	mov	r0, r3
34182636:	f7ff fc9d 	bl	34181f74 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418263a:	687b      	ldr	r3, [r7, #4]
3418263c:	695b      	ldr	r3, [r3, #20]
3418263e:	4618      	mov	r0, r3
34182640:	f7ff fcba 	bl	34181fb8 <LL_RCC_HSI_SetCalibTrimming>
34182644:	e017      	b.n	34182676 <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34182646:	f7ff fc73 	bl	34181f30 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418264a:	f7fe ffef 	bl	3418162c <HAL_GetTick>
3418264e:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34182650:	e00c      	b.n	3418266c <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34182652:	f7fe ffeb 	bl	3418162c <HAL_GetTick>
34182656:	4602      	mov	r2, r0
34182658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418265a:	1ad3      	subs	r3, r2, r3
3418265c:	2b01      	cmp	r3, #1
3418265e:	d905      	bls.n	3418266c <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
34182660:	2303      	movs	r3, #3
34182662:	e29a      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
34182664:	56028000 	.word	0x56028000
34182668:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
3418266c:	f7ff fc70 	bl	34181f50 <LL_RCC_HSI_IsReady>
34182670:	4603      	mov	r3, r0
34182672:	2b00      	cmp	r3, #0
34182674:	d1ed      	bne.n	34182652 <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34182676:	687b      	ldr	r3, [r7, #4]
34182678:	681b      	ldr	r3, [r3, #0]
3418267a:	f003 0310 	and.w	r3, r3, #16
3418267e:	2b00      	cmp	r3, #0
34182680:	d070      	beq.n	34182764 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34182682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418268a:	d028      	beq.n	341826de <HAL_RCC_OscConfig+0x2fa>
3418268c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182694:	d023      	beq.n	341826de <HAL_RCC_OscConfig+0x2fa>
34182696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34182698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418269c:	d104      	bne.n	341826a8 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418269e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341826a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341826a4:	2b00      	cmp	r3, #0
341826a6:	d11a      	bne.n	341826de <HAL_RCC_OscConfig+0x2fa>
341826a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341826aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341826ae:	d104      	bne.n	341826ba <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341826b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341826b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341826b6:	2b00      	cmp	r3, #0
341826b8:	d111      	bne.n	341826de <HAL_RCC_OscConfig+0x2fa>
341826ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341826bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341826c0:	d104      	bne.n	341826cc <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341826c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341826c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341826c8:	2b00      	cmp	r3, #0
341826ca:	d108      	bne.n	341826de <HAL_RCC_OscConfig+0x2fa>
341826cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341826ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341826d2:	d110      	bne.n	341826f6 <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341826d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341826d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341826da:	2b00      	cmp	r3, #0
341826dc:	d00b      	beq.n	341826f6 <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341826de:	687b      	ldr	r3, [r7, #4]
341826e0:	69db      	ldr	r3, [r3, #28]
341826e2:	2b00      	cmp	r3, #0
341826e4:	d101      	bne.n	341826ea <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
341826e6:	2301      	movs	r3, #1
341826e8:	e257      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341826ea:	687b      	ldr	r3, [r7, #4]
341826ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341826ee:	4618      	mov	r0, r3
341826f0:	f7ff fcca 	bl	34182088 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341826f4:	e036      	b.n	34182764 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
341826f6:	687b      	ldr	r3, [r7, #4]
341826f8:	69db      	ldr	r3, [r3, #28]
341826fa:	2b00      	cmp	r3, #0
341826fc:	d01e      	beq.n	3418273c <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
341826fe:	687b      	ldr	r3, [r7, #4]
34182700:	6a1b      	ldr	r3, [r3, #32]
34182702:	4618      	mov	r0, r3
34182704:	f7ff fc9e 	bl	34182044 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34182708:	f7ff fc6c 	bl	34181fe4 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418270c:	f7fe ff8e 	bl	3418162c <HAL_GetTick>
34182710:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34182712:	e008      	b.n	34182726 <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34182714:	f7fe ff8a 	bl	3418162c <HAL_GetTick>
34182718:	4602      	mov	r2, r0
3418271a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418271c:	1ad3      	subs	r3, r2, r3
3418271e:	2b01      	cmp	r3, #1
34182720:	d901      	bls.n	34182726 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
34182722:	2303      	movs	r3, #3
34182724:	e239      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
34182726:	f7ff fc7b 	bl	34182020 <LL_RCC_MSI_IsReady>
3418272a:	4603      	mov	r3, r0
3418272c:	2b00      	cmp	r3, #0
3418272e:	d0f1      	beq.n	34182714 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34182730:	687b      	ldr	r3, [r7, #4]
34182732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182734:	4618      	mov	r0, r3
34182736:	f7ff fca7 	bl	34182088 <LL_RCC_MSI_SetCalibTrimming>
3418273a:	e013      	b.n	34182764 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
3418273c:	f7ff fc60 	bl	34182000 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182740:	f7fe ff74 	bl	3418162c <HAL_GetTick>
34182744:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34182746:	e008      	b.n	3418275a <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34182748:	f7fe ff70 	bl	3418162c <HAL_GetTick>
3418274c:	4602      	mov	r2, r0
3418274e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182750:	1ad3      	subs	r3, r2, r3
34182752:	2b01      	cmp	r3, #1
34182754:	d901      	bls.n	3418275a <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
34182756:	2303      	movs	r3, #3
34182758:	e21f      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
3418275a:	f7ff fc61 	bl	34182020 <LL_RCC_MSI_IsReady>
3418275e:	4603      	mov	r3, r0
34182760:	2b00      	cmp	r3, #0
34182762:	d1f1      	bne.n	34182748 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34182764:	687b      	ldr	r3, [r7, #4]
34182766:	681b      	ldr	r3, [r3, #0]
34182768:	f003 0308 	and.w	r3, r3, #8
3418276c:	2b00      	cmp	r3, #0
3418276e:	d02c      	beq.n	341827ca <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34182770:	687b      	ldr	r3, [r7, #4]
34182772:	699b      	ldr	r3, [r3, #24]
34182774:	2b00      	cmp	r3, #0
34182776:	d014      	beq.n	341827a2 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34182778:	f7ff fcae 	bl	341820d8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418277c:	f7fe ff56 	bl	3418162c <HAL_GetTick>
34182780:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34182782:	e008      	b.n	34182796 <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34182784:	f7fe ff52 	bl	3418162c <HAL_GetTick>
34182788:	4602      	mov	r2, r0
3418278a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418278c:	1ad3      	subs	r3, r2, r3
3418278e:	2b01      	cmp	r3, #1
34182790:	d901      	bls.n	34182796 <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
34182792:	2303      	movs	r3, #3
34182794:	e201      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
34182796:	f7ff fcbd 	bl	34182114 <LL_RCC_LSI_IsReady>
3418279a:	4603      	mov	r3, r0
3418279c:	2b00      	cmp	r3, #0
3418279e:	d0f1      	beq.n	34182784 <HAL_RCC_OscConfig+0x3a0>
341827a0:	e013      	b.n	341827ca <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
341827a2:	f7ff fca7 	bl	341820f4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341827a6:	f7fe ff41 	bl	3418162c <HAL_GetTick>
341827aa:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
341827ac:	e008      	b.n	341827c0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341827ae:	f7fe ff3d 	bl	3418162c <HAL_GetTick>
341827b2:	4602      	mov	r2, r0
341827b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341827b6:	1ad3      	subs	r3, r2, r3
341827b8:	2b01      	cmp	r3, #1
341827ba:	d901      	bls.n	341827c0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
341827bc:	2303      	movs	r3, #3
341827be:	e1ec      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
341827c0:	f7ff fca8 	bl	34182114 <LL_RCC_LSI_IsReady>
341827c4:	4603      	mov	r3, r0
341827c6:	2b00      	cmp	r3, #0
341827c8:	d1f1      	bne.n	341827ae <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
341827ca:	687b      	ldr	r3, [r7, #4]
341827cc:	681b      	ldr	r3, [r3, #0]
341827ce:	f003 0304 	and.w	r3, r3, #4
341827d2:	2b00      	cmp	r3, #0
341827d4:	f000 808c 	beq.w	341828f0 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341827d8:	687b      	ldr	r3, [r7, #4]
341827da:	689b      	ldr	r3, [r3, #8]
341827dc:	2b02      	cmp	r3, #2
341827de:	d104      	bne.n	341827ea <HAL_RCC_OscConfig+0x406>
341827e0:	4b96      	ldr	r3, [pc, #600]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
341827e2:	2202      	movs	r2, #2
341827e4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341827e8:	e055      	b.n	34182896 <HAL_RCC_OscConfig+0x4b2>
341827ea:	687b      	ldr	r3, [r7, #4]
341827ec:	689b      	ldr	r3, [r3, #8]
341827ee:	2b00      	cmp	r3, #0
341827f0:	d112      	bne.n	34182818 <HAL_RCC_OscConfig+0x434>
341827f2:	4b92      	ldr	r3, [pc, #584]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
341827f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341827f8:	461a      	mov	r2, r3
341827fa:	2302      	movs	r3, #2
341827fc:	6013      	str	r3, [r2, #0]
341827fe:	4b8f      	ldr	r3, [pc, #572]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182802:	4a8e      	ldr	r2, [pc, #568]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182808:	6413      	str	r3, [r2, #64]	@ 0x40
3418280a:	4b8c      	ldr	r3, [pc, #560]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418280e:	4a8b      	ldr	r2, [pc, #556]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182810:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34182814:	6413      	str	r3, [r2, #64]	@ 0x40
34182816:	e03e      	b.n	34182896 <HAL_RCC_OscConfig+0x4b2>
34182818:	687b      	ldr	r3, [r7, #4]
3418281a:	689b      	ldr	r3, [r3, #8]
3418281c:	f248 0202 	movw	r2, #32770	@ 0x8002
34182820:	4293      	cmp	r3, r2
34182822:	d110      	bne.n	34182846 <HAL_RCC_OscConfig+0x462>
34182824:	4b85      	ldr	r3, [pc, #532]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182828:	4a84      	ldr	r2, [pc, #528]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418282a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418282e:	6413      	str	r3, [r2, #64]	@ 0x40
34182830:	4b82      	ldr	r3, [pc, #520]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182834:	4a81      	ldr	r2, [pc, #516]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418283a:	6413      	str	r3, [r2, #64]	@ 0x40
3418283c:	4b7f      	ldr	r3, [pc, #508]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418283e:	2202      	movs	r2, #2
34182840:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182844:	e027      	b.n	34182896 <HAL_RCC_OscConfig+0x4b2>
34182846:	687b      	ldr	r3, [r7, #4]
34182848:	689b      	ldr	r3, [r3, #8]
3418284a:	4a7d      	ldr	r2, [pc, #500]	@ (34182a40 <HAL_RCC_OscConfig+0x65c>)
3418284c:	4293      	cmp	r3, r2
3418284e:	d110      	bne.n	34182872 <HAL_RCC_OscConfig+0x48e>
34182850:	4b7a      	ldr	r3, [pc, #488]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182854:	4a79      	ldr	r2, [pc, #484]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418285a:	6413      	str	r3, [r2, #64]	@ 0x40
3418285c:	4b77      	ldr	r3, [pc, #476]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182860:	4a76      	ldr	r2, [pc, #472]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34182866:	6413      	str	r3, [r2, #64]	@ 0x40
34182868:	4b74      	ldr	r3, [pc, #464]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418286a:	2202      	movs	r2, #2
3418286c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182870:	e011      	b.n	34182896 <HAL_RCC_OscConfig+0x4b2>
34182872:	4b72      	ldr	r3, [pc, #456]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182878:	461a      	mov	r2, r3
3418287a:	2302      	movs	r3, #2
3418287c:	6013      	str	r3, [r2, #0]
3418287e:	4b6f      	ldr	r3, [pc, #444]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182882:	4a6e      	ldr	r2, [pc, #440]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182884:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34182888:	6413      	str	r3, [r2, #64]	@ 0x40
3418288a:	4b6c      	ldr	r3, [pc, #432]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
3418288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418288e:	4a6b      	ldr	r2, [pc, #428]	@ (34182a3c <HAL_RCC_OscConfig+0x658>)
34182890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182894:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34182896:	687b      	ldr	r3, [r7, #4]
34182898:	689b      	ldr	r3, [r3, #8]
3418289a:	2b00      	cmp	r3, #0
3418289c:	d014      	beq.n	341828c8 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418289e:	f7fe fec5 	bl	3418162c <HAL_GetTick>
341828a2:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
341828a4:	e00a      	b.n	341828bc <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341828a6:	f7fe fec1 	bl	3418162c <HAL_GetTick>
341828aa:	4602      	mov	r2, r0
341828ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341828ae:	1ad3      	subs	r3, r2, r3
341828b0:	f241 3288 	movw	r2, #5000	@ 0x1388
341828b4:	4293      	cmp	r3, r2
341828b6:	d901      	bls.n	341828bc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
341828b8:	2303      	movs	r3, #3
341828ba:	e16e      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
341828bc:	f7ff fbfa 	bl	341820b4 <LL_RCC_LSE_IsReady>
341828c0:	4603      	mov	r3, r0
341828c2:	2b00      	cmp	r3, #0
341828c4:	d0ef      	beq.n	341828a6 <HAL_RCC_OscConfig+0x4c2>
341828c6:	e013      	b.n	341828f0 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341828c8:	f7fe feb0 	bl	3418162c <HAL_GetTick>
341828cc:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
341828ce:	e00a      	b.n	341828e6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341828d0:	f7fe feac 	bl	3418162c <HAL_GetTick>
341828d4:	4602      	mov	r2, r0
341828d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341828d8:	1ad3      	subs	r3, r2, r3
341828da:	f241 3288 	movw	r2, #5000	@ 0x1388
341828de:	4293      	cmp	r3, r2
341828e0:	d901      	bls.n	341828e6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
341828e2:	2303      	movs	r3, #3
341828e4:	e159      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
341828e6:	f7ff fbe5 	bl	341820b4 <LL_RCC_LSE_IsReady>
341828ea:	4603      	mov	r3, r0
341828ec:	2b00      	cmp	r3, #0
341828ee:	d1ef      	bne.n	341828d0 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
341828f0:	687b      	ldr	r3, [r7, #4]
341828f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341828f4:	2b00      	cmp	r3, #0
341828f6:	d04c      	beq.n	34182992 <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
341828f8:	687b      	ldr	r3, [r7, #4]
341828fa:	3328      	adds	r3, #40	@ 0x28
341828fc:	4619      	mov	r1, r3
341828fe:	2000      	movs	r0, #0
34182900:	f000 fe22 	bl	34183548 <RCC_PLL_IsNewConfig>
34182904:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34182906:	f7ff fc3d 	bl	34182184 <LL_RCC_PLL1_IsReady>
3418290a:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
3418290c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418290e:	2b01      	cmp	r3, #1
34182910:	d130      	bne.n	34182974 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182912:	f7ff fd0f 	bl	34182334 <LL_RCC_IC1_GetSource>
34182916:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182918:	f7ff fd2a 	bl	34182370 <LL_RCC_IC2_GetSource>
3418291c:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418291e:	f7ff fd45 	bl	341823ac <LL_RCC_IC6_GetSource>
34182922:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182924:	f7ff fd50 	bl	341823c8 <LL_RCC_IC11_GetSource>
34182928:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3418292a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418292e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182932:	d104      	bne.n	3418293e <HAL_RCC_OscConfig+0x55a>
34182934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34182936:	2b00      	cmp	r3, #0
34182938:	d101      	bne.n	3418293e <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
3418293a:	2301      	movs	r3, #1
3418293c:	e12d      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418293e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182946:	d10a      	bne.n	3418295e <HAL_RCC_OscConfig+0x57a>
34182948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3418294a:	2b00      	cmp	r3, #0
3418294c:	d005      	beq.n	3418295a <HAL_RCC_OscConfig+0x576>
3418294e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34182950:	2b00      	cmp	r3, #0
34182952:	d002      	beq.n	3418295a <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34182954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34182956:	2b00      	cmp	r3, #0
34182958:	d101      	bne.n	3418295e <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3418295a:	2301      	movs	r3, #1
3418295c:	e11d      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
3418295e:	687b      	ldr	r3, [r7, #4]
34182960:	3328      	adds	r3, #40	@ 0x28
34182962:	4619      	mov	r1, r3
34182964:	2000      	movs	r0, #0
34182966:	f000 fc93 	bl	34183290 <RCC_PLL_Config>
3418296a:	4603      	mov	r3, r0
3418296c:	2b00      	cmp	r3, #0
3418296e:	d010      	beq.n	34182992 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34182970:	2301      	movs	r3, #1
34182972:	e112      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34182974:	687b      	ldr	r3, [r7, #4]
34182976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182978:	2b02      	cmp	r3, #2
3418297a:	d10a      	bne.n	34182992 <HAL_RCC_OscConfig+0x5ae>
3418297c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418297e:	2b00      	cmp	r3, #0
34182980:	d107      	bne.n	34182992 <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34182982:	2000      	movs	r0, #0
34182984:	f000 fdb4 	bl	341834f0 <RCC_PLL_Enable>
34182988:	4603      	mov	r3, r0
3418298a:	2b00      	cmp	r3, #0
3418298c:	d001      	beq.n	34182992 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
3418298e:	2301      	movs	r3, #1
34182990:	e103      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34182992:	687b      	ldr	r3, [r7, #4]
34182994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182996:	2b00      	cmp	r3, #0
34182998:	d054      	beq.n	34182a44 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3418299a:	687b      	ldr	r3, [r7, #4]
3418299c:	3344      	adds	r3, #68	@ 0x44
3418299e:	4619      	mov	r1, r3
341829a0:	2001      	movs	r0, #1
341829a2:	f000 fdd1 	bl	34183548 <RCC_PLL_IsNewConfig>
341829a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
341829a8:	f7ff fc22 	bl	341821f0 <LL_RCC_PLL2_IsReady>
341829ac:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
341829ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
341829b0:	2b01      	cmp	r3, #1
341829b2:	d134      	bne.n	34182a1e <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341829b4:	f7ff fcbe 	bl	34182334 <LL_RCC_IC1_GetSource>
341829b8:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341829ba:	f7ff fcd9 	bl	34182370 <LL_RCC_IC2_GetSource>
341829be:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341829c0:	f7ff fcf4 	bl	341823ac <LL_RCC_IC6_GetSource>
341829c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341829c6:	f7ff fcff 	bl	341823c8 <LL_RCC_IC11_GetSource>
341829ca:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
341829cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341829d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341829d4:	d105      	bne.n	341829e2 <HAL_RCC_OscConfig+0x5fe>
341829d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
341829d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341829dc:	d101      	bne.n	341829e2 <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
341829de:	2301      	movs	r3, #1
341829e0:	e0db      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
341829e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341829e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341829ea:	d10d      	bne.n	34182a08 <HAL_RCC_OscConfig+0x624>
341829ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341829ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341829f2:	d007      	beq.n	34182a04 <HAL_RCC_OscConfig+0x620>
341829f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341829f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341829fa:	d003      	beq.n	34182a04 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
341829fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
341829fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182a02:	d101      	bne.n	34182a08 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34182a04:	2301      	movs	r3, #1
34182a06:	e0c8      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34182a08:	687b      	ldr	r3, [r7, #4]
34182a0a:	3344      	adds	r3, #68	@ 0x44
34182a0c:	4619      	mov	r1, r3
34182a0e:	2001      	movs	r0, #1
34182a10:	f000 fc3e 	bl	34183290 <RCC_PLL_Config>
34182a14:	4603      	mov	r3, r0
34182a16:	2b00      	cmp	r3, #0
34182a18:	d014      	beq.n	34182a44 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34182a1a:	2301      	movs	r3, #1
34182a1c:	e0bd      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34182a1e:	687b      	ldr	r3, [r7, #4]
34182a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182a22:	2b02      	cmp	r3, #2
34182a24:	d10e      	bne.n	34182a44 <HAL_RCC_OscConfig+0x660>
34182a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34182a28:	2b00      	cmp	r3, #0
34182a2a:	d10b      	bne.n	34182a44 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34182a2c:	2001      	movs	r0, #1
34182a2e:	f000 fd5f 	bl	341834f0 <RCC_PLL_Enable>
34182a32:	4603      	mov	r3, r0
34182a34:	2b00      	cmp	r3, #0
34182a36:	d005      	beq.n	34182a44 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34182a38:	2301      	movs	r3, #1
34182a3a:	e0ae      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
34182a3c:	56028000 	.word	0x56028000
34182a40:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34182a44:	687b      	ldr	r3, [r7, #4]
34182a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34182a48:	2b00      	cmp	r3, #0
34182a4a:	d050      	beq.n	34182aee <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34182a4c:	687b      	ldr	r3, [r7, #4]
34182a4e:	3360      	adds	r3, #96	@ 0x60
34182a50:	4619      	mov	r1, r3
34182a52:	2002      	movs	r0, #2
34182a54:	f000 fd78 	bl	34183548 <RCC_PLL_IsNewConfig>
34182a58:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34182a5a:	f7ff fb93 	bl	34182184 <LL_RCC_PLL1_IsReady>
34182a5e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34182a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34182a62:	2b01      	cmp	r3, #1
34182a64:	d134      	bne.n	34182ad0 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182a66:	f7ff fc65 	bl	34182334 <LL_RCC_IC1_GetSource>
34182a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182a6c:	f7ff fc80 	bl	34182370 <LL_RCC_IC2_GetSource>
34182a70:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182a72:	f7ff fc9b 	bl	341823ac <LL_RCC_IC6_GetSource>
34182a76:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182a78:	f7ff fca6 	bl	341823c8 <LL_RCC_IC11_GetSource>
34182a7c:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34182a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182a82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182a86:	d105      	bne.n	34182a94 <HAL_RCC_OscConfig+0x6b0>
34182a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182a8e:	d101      	bne.n	34182a94 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34182a90:	2301      	movs	r3, #1
34182a92:	e082      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34182a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182a98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182a9c:	d10d      	bne.n	34182aba <HAL_RCC_OscConfig+0x6d6>
34182a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182aa4:	d007      	beq.n	34182ab6 <HAL_RCC_OscConfig+0x6d2>
34182aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182aac:	d003      	beq.n	34182ab6 <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34182aae:	6a3b      	ldr	r3, [r7, #32]
34182ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ab4:	d101      	bne.n	34182aba <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34182ab6:	2301      	movs	r3, #1
34182ab8:	e06f      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34182aba:	687b      	ldr	r3, [r7, #4]
34182abc:	3360      	adds	r3, #96	@ 0x60
34182abe:	4619      	mov	r1, r3
34182ac0:	2002      	movs	r0, #2
34182ac2:	f000 fbe5 	bl	34183290 <RCC_PLL_Config>
34182ac6:	4603      	mov	r3, r0
34182ac8:	2b00      	cmp	r3, #0
34182aca:	d010      	beq.n	34182aee <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182acc:	2301      	movs	r3, #1
34182ace:	e064      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34182ad0:	687b      	ldr	r3, [r7, #4]
34182ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34182ad4:	2b02      	cmp	r3, #2
34182ad6:	d10a      	bne.n	34182aee <HAL_RCC_OscConfig+0x70a>
34182ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182ada:	2b00      	cmp	r3, #0
34182adc:	d107      	bne.n	34182aee <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34182ade:	2002      	movs	r0, #2
34182ae0:	f000 fd06 	bl	341834f0 <RCC_PLL_Enable>
34182ae4:	4603      	mov	r3, r0
34182ae6:	2b00      	cmp	r3, #0
34182ae8:	d001      	beq.n	34182aee <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182aea:	2301      	movs	r3, #1
34182aec:	e055      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34182aee:	687b      	ldr	r3, [r7, #4]
34182af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34182af2:	2b00      	cmp	r3, #0
34182af4:	d050      	beq.n	34182b98 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34182af6:	687b      	ldr	r3, [r7, #4]
34182af8:	337c      	adds	r3, #124	@ 0x7c
34182afa:	4619      	mov	r1, r3
34182afc:	2003      	movs	r0, #3
34182afe:	f000 fd23 	bl	34183548 <RCC_PLL_IsNewConfig>
34182b02:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34182b04:	f7ff fbe0 	bl	341822c8 <LL_RCC_PLL4_IsReady>
34182b08:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34182b0a:	69fb      	ldr	r3, [r7, #28]
34182b0c:	2b01      	cmp	r3, #1
34182b0e:	d134      	bne.n	34182b7a <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182b10:	f7ff fc10 	bl	34182334 <LL_RCC_IC1_GetSource>
34182b14:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182b16:	f7ff fc2b 	bl	34182370 <LL_RCC_IC2_GetSource>
34182b1a:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182b1c:	f7ff fc46 	bl	341823ac <LL_RCC_IC6_GetSource>
34182b20:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182b22:	f7ff fc51 	bl	341823c8 <LL_RCC_IC11_GetSource>
34182b26:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34182b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182b30:	d105      	bne.n	34182b3e <HAL_RCC_OscConfig+0x75a>
34182b32:	697b      	ldr	r3, [r7, #20]
34182b34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b38:	d101      	bne.n	34182b3e <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
34182b3a:	2301      	movs	r3, #1
34182b3c:	e02d      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b46:	d10d      	bne.n	34182b64 <HAL_RCC_OscConfig+0x780>
34182b48:	693b      	ldr	r3, [r7, #16]
34182b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b4e:	d007      	beq.n	34182b60 <HAL_RCC_OscConfig+0x77c>
34182b50:	68fb      	ldr	r3, [r7, #12]
34182b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b56:	d003      	beq.n	34182b60 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182b58:	68bb      	ldr	r3, [r7, #8]
34182b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b5e:	d101      	bne.n	34182b64 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34182b60:	2301      	movs	r3, #1
34182b62:	e01a      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34182b64:	687b      	ldr	r3, [r7, #4]
34182b66:	337c      	adds	r3, #124	@ 0x7c
34182b68:	4619      	mov	r1, r3
34182b6a:	2003      	movs	r0, #3
34182b6c:	f000 fb90 	bl	34183290 <RCC_PLL_Config>
34182b70:	4603      	mov	r3, r0
34182b72:	2b00      	cmp	r3, #0
34182b74:	d010      	beq.n	34182b98 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182b76:	2301      	movs	r3, #1
34182b78:	e00f      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34182b7a:	687b      	ldr	r3, [r7, #4]
34182b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34182b7e:	2b02      	cmp	r3, #2
34182b80:	d10a      	bne.n	34182b98 <HAL_RCC_OscConfig+0x7b4>
34182b82:	69bb      	ldr	r3, [r7, #24]
34182b84:	2b00      	cmp	r3, #0
34182b86:	d107      	bne.n	34182b98 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34182b88:	2003      	movs	r0, #3
34182b8a:	f000 fcb1 	bl	341834f0 <RCC_PLL_Enable>
34182b8e:	4603      	mov	r3, r0
34182b90:	2b00      	cmp	r3, #0
34182b92:	d001      	beq.n	34182b98 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182b94:	2301      	movs	r3, #1
34182b96:	e000      	b.n	34182b9a <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34182b98:	2300      	movs	r3, #0
}
34182b9a:	4618      	mov	r0, r3
34182b9c:	3788      	adds	r7, #136	@ 0x88
34182b9e:	46bd      	mov	sp, r7
34182ba0:	bd80      	pop	{r7, pc}
34182ba2:	bf00      	nop

34182ba4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34182ba4:	b580      	push	{r7, lr}
34182ba6:	b084      	sub	sp, #16
34182ba8:	af00      	add	r7, sp, #0
34182baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34182bac:	687b      	ldr	r3, [r7, #4]
34182bae:	2b00      	cmp	r3, #0
34182bb0:	d101      	bne.n	34182bb6 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34182bb2:	2301      	movs	r3, #1
34182bb4:	e1f2      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182bb6:	687b      	ldr	r3, [r7, #4]
34182bb8:	681b      	ldr	r3, [r3, #0]
34182bba:	f003 0308 	and.w	r3, r3, #8
34182bbe:	2b00      	cmp	r3, #0
34182bc0:	d010      	beq.n	34182be4 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182bc2:	687b      	ldr	r3, [r7, #4]
34182bc4:	691a      	ldr	r2, [r3, #16]
34182bc6:	4ba3      	ldr	r3, [pc, #652]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182bca:	f003 0307 	and.w	r3, r3, #7
34182bce:	429a      	cmp	r2, r3
34182bd0:	d908      	bls.n	34182be4 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182bd2:	4ba0      	ldr	r3, [pc, #640]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182bd6:	f023 0207 	bic.w	r2, r3, #7
34182bda:	687b      	ldr	r3, [r7, #4]
34182bdc:	691b      	ldr	r3, [r3, #16]
34182bde:	499d      	ldr	r1, [pc, #628]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182be0:	4313      	orrs	r3, r2
34182be2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182be4:	687b      	ldr	r3, [r7, #4]
34182be6:	681b      	ldr	r3, [r3, #0]
34182be8:	f003 0310 	and.w	r3, r3, #16
34182bec:	2b00      	cmp	r3, #0
34182bee:	d010      	beq.n	34182c12 <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182bf0:	687b      	ldr	r3, [r7, #4]
34182bf2:	695a      	ldr	r2, [r3, #20]
34182bf4:	4b97      	ldr	r3, [pc, #604]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182bfc:	429a      	cmp	r2, r3
34182bfe:	d908      	bls.n	34182c12 <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34182c00:	4b94      	ldr	r3, [pc, #592]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34182c08:	687b      	ldr	r3, [r7, #4]
34182c0a:	695b      	ldr	r3, [r3, #20]
34182c0c:	4991      	ldr	r1, [pc, #580]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c0e:	4313      	orrs	r3, r2
34182c10:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182c12:	687b      	ldr	r3, [r7, #4]
34182c14:	681b      	ldr	r3, [r3, #0]
34182c16:	f003 0320 	and.w	r3, r3, #32
34182c1a:	2b00      	cmp	r3, #0
34182c1c:	d010      	beq.n	34182c40 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182c1e:	687b      	ldr	r3, [r7, #4]
34182c20:	699a      	ldr	r2, [r3, #24]
34182c22:	4b8c      	ldr	r3, [pc, #560]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182c2a:	429a      	cmp	r2, r3
34182c2c:	d908      	bls.n	34182c40 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182c2e:	4b89      	ldr	r3, [pc, #548]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c32:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34182c36:	687b      	ldr	r3, [r7, #4]
34182c38:	699b      	ldr	r3, [r3, #24]
34182c3a:	4986      	ldr	r1, [pc, #536]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c3c:	4313      	orrs	r3, r2
34182c3e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34182c40:	687b      	ldr	r3, [r7, #4]
34182c42:	681b      	ldr	r3, [r3, #0]
34182c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34182c48:	2b00      	cmp	r3, #0
34182c4a:	d010      	beq.n	34182c6e <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34182c4c:	687b      	ldr	r3, [r7, #4]
34182c4e:	69da      	ldr	r2, [r3, #28]
34182c50:	4b80      	ldr	r3, [pc, #512]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182c58:	429a      	cmp	r2, r3
34182c5a:	d908      	bls.n	34182c6e <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182c5c:	4b7d      	ldr	r3, [pc, #500]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c60:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34182c64:	687b      	ldr	r3, [r7, #4]
34182c66:	69db      	ldr	r3, [r3, #28]
34182c68:	497a      	ldr	r1, [pc, #488]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c6a:	4313      	orrs	r3, r2
34182c6c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182c6e:	687b      	ldr	r3, [r7, #4]
34182c70:	681b      	ldr	r3, [r3, #0]
34182c72:	f003 0304 	and.w	r3, r3, #4
34182c76:	2b00      	cmp	r3, #0
34182c78:	d010      	beq.n	34182c9c <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182c7a:	687b      	ldr	r3, [r7, #4]
34182c7c:	68da      	ldr	r2, [r3, #12]
34182c7e:	4b75      	ldr	r3, [pc, #468]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c82:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182c86:	429a      	cmp	r2, r3
34182c88:	d908      	bls.n	34182c9c <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182c8a:	4b72      	ldr	r3, [pc, #456]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c8e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34182c92:	687b      	ldr	r3, [r7, #4]
34182c94:	68db      	ldr	r3, [r3, #12]
34182c96:	496f      	ldr	r1, [pc, #444]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182c98:	4313      	orrs	r3, r2
34182c9a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34182c9c:	687b      	ldr	r3, [r7, #4]
34182c9e:	681b      	ldr	r3, [r3, #0]
34182ca0:	f003 0301 	and.w	r3, r3, #1
34182ca4:	2b00      	cmp	r3, #0
34182ca6:	d063      	beq.n	34182d70 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34182ca8:	687b      	ldr	r3, [r7, #4]
34182caa:	685b      	ldr	r3, [r3, #4]
34182cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34182cb0:	d106      	bne.n	34182cc0 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34182cb2:	f7ff f91d 	bl	34181ef0 <LL_RCC_HSE_IsReady>
34182cb6:	4603      	mov	r3, r0
34182cb8:	2b00      	cmp	r3, #0
34182cba:	d134      	bne.n	34182d26 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182cbc:	2301      	movs	r3, #1
34182cbe:	e16d      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34182cc0:	687b      	ldr	r3, [r7, #4]
34182cc2:	685b      	ldr	r3, [r3, #4]
34182cc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34182cc8:	d11a      	bne.n	34182d00 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34182cca:	f7ff fb33 	bl	34182334 <LL_RCC_IC1_GetSource>
34182cce:	4602      	mov	r2, r0
34182cd0:	687b      	ldr	r3, [r7, #4]
34182cd2:	6a1b      	ldr	r3, [r3, #32]
34182cd4:	4619      	mov	r1, r3
34182cd6:	4610      	mov	r0, r2
34182cd8:	f000 fcea 	bl	341836b0 <RCC_IC_CheckPLLSources>
34182cdc:	4603      	mov	r3, r0
34182cde:	2b01      	cmp	r3, #1
34182ce0:	d001      	beq.n	34182ce6 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34182ce2:	2301      	movs	r3, #1
34182ce4:	e15a      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34182ce6:	687b      	ldr	r3, [r7, #4]
34182ce8:	6a1a      	ldr	r2, [r3, #32]
34182cea:	687b      	ldr	r3, [r7, #4]
34182cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182cee:	3b01      	subs	r3, #1
34182cf0:	041b      	lsls	r3, r3, #16
34182cf2:	4958      	ldr	r1, [pc, #352]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182cf4:	4313      	orrs	r3, r2
34182cf6:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34182cfa:	f7ff fb0d 	bl	34182318 <LL_RCC_IC1_Enable>
34182cfe:	e012      	b.n	34182d26 <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34182d00:	687b      	ldr	r3, [r7, #4]
34182d02:	685b      	ldr	r3, [r3, #4]
34182d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34182d08:	d106      	bne.n	34182d18 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34182d0a:	f7ff f989 	bl	34182020 <LL_RCC_MSI_IsReady>
34182d0e:	4603      	mov	r3, r0
34182d10:	2b00      	cmp	r3, #0
34182d12:	d108      	bne.n	34182d26 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182d14:	2301      	movs	r3, #1
34182d16:	e141      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34182d18:	f7ff f91a 	bl	34181f50 <LL_RCC_HSI_IsReady>
34182d1c:	4603      	mov	r3, r0
34182d1e:	2b00      	cmp	r3, #0
34182d20:	d101      	bne.n	34182d26 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182d22:	2301      	movs	r3, #1
34182d24:	e13a      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34182d26:	4b4b      	ldr	r3, [pc, #300]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182d28:	6a1b      	ldr	r3, [r3, #32]
34182d2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34182d2e:	687b      	ldr	r3, [r7, #4]
34182d30:	685b      	ldr	r3, [r3, #4]
34182d32:	4948      	ldr	r1, [pc, #288]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182d34:	4313      	orrs	r3, r2
34182d36:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182d38:	f7fe fc78 	bl	3418162c <HAL_GetTick>
34182d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34182d3e:	e00a      	b.n	34182d56 <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182d40:	f7fe fc74 	bl	3418162c <HAL_GetTick>
34182d44:	4602      	mov	r2, r0
34182d46:	68fb      	ldr	r3, [r7, #12]
34182d48:	1ad3      	subs	r3, r2, r3
34182d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
34182d4e:	4293      	cmp	r3, r2
34182d50:	d901      	bls.n	34182d56 <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34182d52:	2303      	movs	r3, #3
34182d54:	e122      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34182d56:	f7ff f9eb 	bl	34182130 <LL_RCC_GetCpuClkSource>
34182d5a:	4602      	mov	r2, r0
34182d5c:	687b      	ldr	r3, [r7, #4]
34182d5e:	685b      	ldr	r3, [r3, #4]
34182d60:	011b      	lsls	r3, r3, #4
34182d62:	429a      	cmp	r2, r3
34182d64:	d1ec      	bne.n	34182d40 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34182d66:	f000 f921 	bl	34182fac <HAL_RCC_GetCpuClockFreq>
34182d6a:	4603      	mov	r3, r0
34182d6c:	4a3a      	ldr	r2, [pc, #232]	@ (34182e58 <HAL_RCC_ClockConfig+0x2b4>)
34182d6e:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34182d70:	687b      	ldr	r3, [r7, #4]
34182d72:	681b      	ldr	r3, [r3, #0]
34182d74:	f003 0302 	and.w	r3, r3, #2
34182d78:	2b00      	cmp	r3, #0
34182d7a:	f000 8096 	beq.w	34182eaa <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34182d7e:	687b      	ldr	r3, [r7, #4]
34182d80:	689b      	ldr	r3, [r3, #8]
34182d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34182d86:	d106      	bne.n	34182d96 <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34182d88:	f7ff f8b2 	bl	34181ef0 <LL_RCC_HSE_IsReady>
34182d8c:	4603      	mov	r3, r0
34182d8e:	2b00      	cmp	r3, #0
34182d90:	d16b      	bne.n	34182e6a <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182d92:	2301      	movs	r3, #1
34182d94:	e102      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34182d96:	687b      	ldr	r3, [r7, #4]
34182d98:	689b      	ldr	r3, [r3, #8]
34182d9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34182d9e:	d14d      	bne.n	34182e3c <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34182da0:	f7ff fae6 	bl	34182370 <LL_RCC_IC2_GetSource>
34182da4:	4602      	mov	r2, r0
34182da6:	687b      	ldr	r3, [r7, #4]
34182da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182daa:	4619      	mov	r1, r3
34182dac:	4610      	mov	r0, r2
34182dae:	f000 fc7f 	bl	341836b0 <RCC_IC_CheckPLLSources>
34182db2:	4603      	mov	r3, r0
34182db4:	2b01      	cmp	r3, #1
34182db6:	d001      	beq.n	34182dbc <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34182db8:	2301      	movs	r3, #1
34182dba:	e0ef      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34182dbc:	f7ff faf6 	bl	341823ac <LL_RCC_IC6_GetSource>
34182dc0:	4602      	mov	r2, r0
34182dc2:	687b      	ldr	r3, [r7, #4]
34182dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34182dc6:	4619      	mov	r1, r3
34182dc8:	4610      	mov	r0, r2
34182dca:	f000 fc71 	bl	341836b0 <RCC_IC_CheckPLLSources>
34182dce:	4603      	mov	r3, r0
34182dd0:	2b01      	cmp	r3, #1
34182dd2:	d001      	beq.n	34182dd8 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34182dd4:	2301      	movs	r3, #1
34182dd6:	e0e1      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34182dd8:	f7ff faf6 	bl	341823c8 <LL_RCC_IC11_GetSource>
34182ddc:	4602      	mov	r2, r0
34182dde:	687b      	ldr	r3, [r7, #4]
34182de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34182de2:	4619      	mov	r1, r3
34182de4:	4610      	mov	r0, r2
34182de6:	f000 fc63 	bl	341836b0 <RCC_IC_CheckPLLSources>
34182dea:	4603      	mov	r3, r0
34182dec:	2b01      	cmp	r3, #1
34182dee:	d001      	beq.n	34182df4 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34182df0:	2301      	movs	r3, #1
34182df2:	e0d3      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34182df4:	687b      	ldr	r3, [r7, #4]
34182df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34182df8:	687b      	ldr	r3, [r7, #4]
34182dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34182dfc:	3b01      	subs	r3, #1
34182dfe:	041b      	lsls	r3, r3, #16
34182e00:	4914      	ldr	r1, [pc, #80]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182e02:	4313      	orrs	r3, r2
34182e04:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34182e08:	687b      	ldr	r3, [r7, #4]
34182e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34182e0c:	687b      	ldr	r3, [r7, #4]
34182e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34182e10:	3b01      	subs	r3, #1
34182e12:	041b      	lsls	r3, r3, #16
34182e14:	490f      	ldr	r1, [pc, #60]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182e16:	4313      	orrs	r3, r2
34182e18:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34182e1c:	687b      	ldr	r3, [r7, #4]
34182e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34182e20:	687b      	ldr	r3, [r7, #4]
34182e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182e24:	3b01      	subs	r3, #1
34182e26:	041b      	lsls	r3, r3, #16
34182e28:	490a      	ldr	r1, [pc, #40]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182e2a:	4313      	orrs	r3, r2
34182e2c:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34182e30:	4b08      	ldr	r3, [pc, #32]	@ (34182e54 <HAL_RCC_ClockConfig+0x2b0>)
34182e32:	f240 4222 	movw	r2, #1058	@ 0x422
34182e36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34182e3a:	e016      	b.n	34182e6a <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34182e3c:	687b      	ldr	r3, [r7, #4]
34182e3e:	689b      	ldr	r3, [r3, #8]
34182e40:	2b00      	cmp	r3, #0
34182e42:	d10b      	bne.n	34182e5c <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34182e44:	f7ff f884 	bl	34181f50 <LL_RCC_HSI_IsReady>
34182e48:	4603      	mov	r3, r0
34182e4a:	2b00      	cmp	r3, #0
34182e4c:	d10d      	bne.n	34182e6a <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182e4e:	2301      	movs	r3, #1
34182e50:	e0a4      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
34182e52:	bf00      	nop
34182e54:	56028000 	.word	0x56028000
34182e58:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34182e5c:	f7ff f8e0 	bl	34182020 <LL_RCC_MSI_IsReady>
34182e60:	4603      	mov	r3, r0
34182e62:	2b00      	cmp	r3, #0
34182e64:	d101      	bne.n	34182e6a <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182e66:	2301      	movs	r3, #1
34182e68:	e098      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34182e6a:	4b4e      	ldr	r3, [pc, #312]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182e6c:	6a1b      	ldr	r3, [r3, #32]
34182e6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34182e72:	687b      	ldr	r3, [r7, #4]
34182e74:	689b      	ldr	r3, [r3, #8]
34182e76:	494b      	ldr	r1, [pc, #300]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182e78:	4313      	orrs	r3, r2
34182e7a:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182e7c:	f7fe fbd6 	bl	3418162c <HAL_GetTick>
34182e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182e82:	e00a      	b.n	34182e9a <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182e84:	f7fe fbd2 	bl	3418162c <HAL_GetTick>
34182e88:	4602      	mov	r2, r0
34182e8a:	68fb      	ldr	r3, [r7, #12]
34182e8c:	1ad3      	subs	r3, r2, r3
34182e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
34182e92:	4293      	cmp	r3, r2
34182e94:	d901      	bls.n	34182e9a <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34182e96:	2303      	movs	r3, #3
34182e98:	e080      	b.n	34182f9c <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182e9a:	f7ff f957 	bl	3418214c <LL_RCC_GetSysClkSource>
34182e9e:	4602      	mov	r2, r0
34182ea0:	687b      	ldr	r3, [r7, #4]
34182ea2:	689b      	ldr	r3, [r3, #8]
34182ea4:	011b      	lsls	r3, r3, #4
34182ea6:	429a      	cmp	r2, r3
34182ea8:	d1ec      	bne.n	34182e84 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182eaa:	687b      	ldr	r3, [r7, #4]
34182eac:	681b      	ldr	r3, [r3, #0]
34182eae:	f003 0304 	and.w	r3, r3, #4
34182eb2:	2b00      	cmp	r3, #0
34182eb4:	d010      	beq.n	34182ed8 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182eb6:	687b      	ldr	r3, [r7, #4]
34182eb8:	68da      	ldr	r2, [r3, #12]
34182eba:	4b3a      	ldr	r3, [pc, #232]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182ebe:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182ec2:	429a      	cmp	r2, r3
34182ec4:	d208      	bcs.n	34182ed8 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182ec6:	4b37      	ldr	r3, [pc, #220]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182eca:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34182ece:	687b      	ldr	r3, [r7, #4]
34182ed0:	68db      	ldr	r3, [r3, #12]
34182ed2:	4934      	ldr	r1, [pc, #208]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182ed4:	4313      	orrs	r3, r2
34182ed6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182ed8:	687b      	ldr	r3, [r7, #4]
34182eda:	681b      	ldr	r3, [r3, #0]
34182edc:	f003 0308 	and.w	r3, r3, #8
34182ee0:	2b00      	cmp	r3, #0
34182ee2:	d010      	beq.n	34182f06 <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182ee4:	687b      	ldr	r3, [r7, #4]
34182ee6:	691a      	ldr	r2, [r3, #16]
34182ee8:	4b2e      	ldr	r3, [pc, #184]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182eec:	f003 0307 	and.w	r3, r3, #7
34182ef0:	429a      	cmp	r2, r3
34182ef2:	d208      	bcs.n	34182f06 <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182ef4:	4b2b      	ldr	r3, [pc, #172]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182ef8:	f023 0207 	bic.w	r2, r3, #7
34182efc:	687b      	ldr	r3, [r7, #4]
34182efe:	691b      	ldr	r3, [r3, #16]
34182f00:	4928      	ldr	r1, [pc, #160]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f02:	4313      	orrs	r3, r2
34182f04:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182f06:	687b      	ldr	r3, [r7, #4]
34182f08:	681b      	ldr	r3, [r3, #0]
34182f0a:	f003 0310 	and.w	r3, r3, #16
34182f0e:	2b00      	cmp	r3, #0
34182f10:	d010      	beq.n	34182f34 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182f12:	687b      	ldr	r3, [r7, #4]
34182f14:	695a      	ldr	r2, [r3, #20]
34182f16:	4b23      	ldr	r3, [pc, #140]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182f1e:	429a      	cmp	r2, r3
34182f20:	d208      	bcs.n	34182f34 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34182f22:	4b20      	ldr	r3, [pc, #128]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34182f2a:	687b      	ldr	r3, [r7, #4]
34182f2c:	695b      	ldr	r3, [r3, #20]
34182f2e:	491d      	ldr	r1, [pc, #116]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f30:	4313      	orrs	r3, r2
34182f32:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182f34:	687b      	ldr	r3, [r7, #4]
34182f36:	681b      	ldr	r3, [r3, #0]
34182f38:	f003 0320 	and.w	r3, r3, #32
34182f3c:	2b00      	cmp	r3, #0
34182f3e:	d010      	beq.n	34182f62 <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182f40:	687b      	ldr	r3, [r7, #4]
34182f42:	699a      	ldr	r2, [r3, #24]
34182f44:	4b17      	ldr	r3, [pc, #92]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f48:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182f4c:	429a      	cmp	r2, r3
34182f4e:	d208      	bcs.n	34182f62 <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182f50:	4b14      	ldr	r3, [pc, #80]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f54:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34182f58:	687b      	ldr	r3, [r7, #4]
34182f5a:	699b      	ldr	r3, [r3, #24]
34182f5c:	4911      	ldr	r1, [pc, #68]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f5e:	4313      	orrs	r3, r2
34182f60:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34182f62:	687b      	ldr	r3, [r7, #4]
34182f64:	681b      	ldr	r3, [r3, #0]
34182f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34182f6a:	2b00      	cmp	r3, #0
34182f6c:	d010      	beq.n	34182f90 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34182f6e:	687b      	ldr	r3, [r7, #4]
34182f70:	69da      	ldr	r2, [r3, #28]
34182f72:	4b0c      	ldr	r3, [pc, #48]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f76:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182f7a:	429a      	cmp	r2, r3
34182f7c:	d208      	bcs.n	34182f90 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182f7e:	4b09      	ldr	r3, [pc, #36]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f82:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34182f86:	687b      	ldr	r3, [r7, #4]
34182f88:	69db      	ldr	r3, [r3, #28]
34182f8a:	4906      	ldr	r1, [pc, #24]	@ (34182fa4 <HAL_RCC_ClockConfig+0x400>)
34182f8c:	4313      	orrs	r3, r2
34182f8e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34182f90:	4b05      	ldr	r3, [pc, #20]	@ (34182fa8 <HAL_RCC_ClockConfig+0x404>)
34182f92:	681b      	ldr	r3, [r3, #0]
34182f94:	4618      	mov	r0, r3
34182f96:	f7fe faff 	bl	34181598 <HAL_InitTick>
34182f9a:	4603      	mov	r3, r0
}
34182f9c:	4618      	mov	r0, r3
34182f9e:	3710      	adds	r7, #16
34182fa0:	46bd      	mov	sp, r7
34182fa2:	bd80      	pop	{r7, pc}
34182fa4:	56028000 	.word	0x56028000
34182fa8:	341c0004 	.word	0x341c0004

34182fac <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34182fac:	b580      	push	{r7, lr}
34182fae:	b082      	sub	sp, #8
34182fb0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34182fb2:	2300      	movs	r3, #0
34182fb4:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34182fb6:	f7ff f8bb 	bl	34182130 <LL_RCC_GetCpuClkSource>
34182fba:	4603      	mov	r3, r0
34182fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182fc0:	d025      	beq.n	3418300e <HAL_RCC_GetCpuClockFreq+0x62>
34182fc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182fc6:	d860      	bhi.n	3418308a <HAL_RCC_GetCpuClockFreq+0xde>
34182fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182fcc:	d01c      	beq.n	34183008 <HAL_RCC_GetCpuClockFreq+0x5c>
34182fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182fd2:	d85a      	bhi.n	3418308a <HAL_RCC_GetCpuClockFreq+0xde>
34182fd4:	2b00      	cmp	r3, #0
34182fd6:	d003      	beq.n	34182fe0 <HAL_RCC_GetCpuClockFreq+0x34>
34182fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34182fdc:	d009      	beq.n	34182ff2 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34182fde:	e054      	b.n	3418308a <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34182fe0:	f7fe ffdc 	bl	34181f9c <LL_RCC_HSI_GetDivider>
34182fe4:	4603      	mov	r3, r0
34182fe6:	09db      	lsrs	r3, r3, #7
34182fe8:	4a2b      	ldr	r2, [pc, #172]	@ (34183098 <HAL_RCC_GetCpuClockFreq+0xec>)
34182fea:	fa22 f303 	lsr.w	r3, r2, r3
34182fee:	607b      	str	r3, [r7, #4]
      break;
34182ff0:	e04c      	b.n	3418308c <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34182ff2:	f7ff f83b 	bl	3418206c <LL_RCC_MSI_GetFrequency>
34182ff6:	4603      	mov	r3, r0
34182ff8:	2b00      	cmp	r3, #0
34182ffa:	d102      	bne.n	34183002 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34182ffc:	4b27      	ldr	r3, [pc, #156]	@ (3418309c <HAL_RCC_GetCpuClockFreq+0xf0>)
34182ffe:	607b      	str	r3, [r7, #4]
      break;
34183000:	e044      	b.n	3418308c <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34183002:	4b27      	ldr	r3, [pc, #156]	@ (341830a0 <HAL_RCC_GetCpuClockFreq+0xf4>)
34183004:	607b      	str	r3, [r7, #4]
      break;
34183006:	e041      	b.n	3418308c <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34183008:	4b26      	ldr	r3, [pc, #152]	@ (341830a4 <HAL_RCC_GetCpuClockFreq+0xf8>)
3418300a:	607b      	str	r3, [r7, #4]
      break;
3418300c:	e03e      	b.n	3418308c <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
3418300e:	f7ff f99f 	bl	34182350 <LL_RCC_IC1_GetDivider>
34183012:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34183014:	f7ff f98e 	bl	34182334 <LL_RCC_IC1_GetSource>
34183018:	4603      	mov	r3, r0
3418301a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418301e:	d029      	beq.n	34183074 <HAL_RCC_GetCpuClockFreq+0xc8>
34183020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183024:	d82f      	bhi.n	34183086 <HAL_RCC_GetCpuClockFreq+0xda>
34183026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418302a:	d01a      	beq.n	34183062 <HAL_RCC_GetCpuClockFreq+0xb6>
3418302c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183030:	d829      	bhi.n	34183086 <HAL_RCC_GetCpuClockFreq+0xda>
34183032:	2b00      	cmp	r3, #0
34183034:	d003      	beq.n	3418303e <HAL_RCC_GetCpuClockFreq+0x92>
34183036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418303a:	d009      	beq.n	34183050 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
3418303c:	e023      	b.n	34183086 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418303e:	f004 feab 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34183042:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183044:	687a      	ldr	r2, [r7, #4]
34183046:	683b      	ldr	r3, [r7, #0]
34183048:	fbb2 f3f3 	udiv	r3, r2, r3
3418304c:	607b      	str	r3, [r7, #4]
          break;
3418304e:	e01b      	b.n	34183088 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34183050:	f004 fee8 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34183054:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183056:	687a      	ldr	r2, [r7, #4]
34183058:	683b      	ldr	r3, [r7, #0]
3418305a:	fbb2 f3f3 	udiv	r3, r2, r3
3418305e:	607b      	str	r3, [r7, #4]
          break;
34183060:	e012      	b.n	34183088 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34183062:	f004 ff25 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34183066:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183068:	687a      	ldr	r2, [r7, #4]
3418306a:	683b      	ldr	r3, [r7, #0]
3418306c:	fbb2 f3f3 	udiv	r3, r2, r3
34183070:	607b      	str	r3, [r7, #4]
          break;
34183072:	e009      	b.n	34183088 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34183074:	f004 ff62 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34183078:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418307a:	687a      	ldr	r2, [r7, #4]
3418307c:	683b      	ldr	r3, [r7, #0]
3418307e:	fbb2 f3f3 	udiv	r3, r2, r3
34183082:	607b      	str	r3, [r7, #4]
          break;
34183084:	e000      	b.n	34183088 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34183086:	bf00      	nop
      break;
34183088:	e000      	b.n	3418308c <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
3418308a:	bf00      	nop
  }

  return frequency;
3418308c:	687b      	ldr	r3, [r7, #4]
}
3418308e:	4618      	mov	r0, r3
34183090:	3708      	adds	r7, #8
34183092:	46bd      	mov	sp, r7
34183094:	bd80      	pop	{r7, pc}
34183096:	bf00      	nop
34183098:	03d09000 	.word	0x03d09000
3418309c:	003d0900 	.word	0x003d0900
341830a0:	00f42400 	.word	0x00f42400
341830a4:	02dc6c00 	.word	0x02dc6c00

341830a8 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
341830a8:	b580      	push	{r7, lr}
341830aa:	b082      	sub	sp, #8
341830ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
341830ae:	2300      	movs	r3, #0
341830b0:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
341830b2:	f7ff f84b 	bl	3418214c <LL_RCC_GetSysClkSource>
341830b6:	4603      	mov	r3, r0
341830b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341830bc:	d025      	beq.n	3418310a <HAL_RCC_GetSysClockFreq+0x62>
341830be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341830c2:	d860      	bhi.n	34183186 <HAL_RCC_GetSysClockFreq+0xde>
341830c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341830c8:	d01c      	beq.n	34183104 <HAL_RCC_GetSysClockFreq+0x5c>
341830ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341830ce:	d85a      	bhi.n	34183186 <HAL_RCC_GetSysClockFreq+0xde>
341830d0:	2b00      	cmp	r3, #0
341830d2:	d003      	beq.n	341830dc <HAL_RCC_GetSysClockFreq+0x34>
341830d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341830d8:	d009      	beq.n	341830ee <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
341830da:	e054      	b.n	34183186 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341830dc:	f7fe ff5e 	bl	34181f9c <LL_RCC_HSI_GetDivider>
341830e0:	4603      	mov	r3, r0
341830e2:	09db      	lsrs	r3, r3, #7
341830e4:	4a2b      	ldr	r2, [pc, #172]	@ (34183194 <HAL_RCC_GetSysClockFreq+0xec>)
341830e6:	fa22 f303 	lsr.w	r3, r2, r3
341830ea:	607b      	str	r3, [r7, #4]
      break;
341830ec:	e04c      	b.n	34183188 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
341830ee:	f7fe ffbd 	bl	3418206c <LL_RCC_MSI_GetFrequency>
341830f2:	4603      	mov	r3, r0
341830f4:	2b00      	cmp	r3, #0
341830f6:	d102      	bne.n	341830fe <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
341830f8:	4b27      	ldr	r3, [pc, #156]	@ (34183198 <HAL_RCC_GetSysClockFreq+0xf0>)
341830fa:	607b      	str	r3, [r7, #4]
      break;
341830fc:	e044      	b.n	34183188 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
341830fe:	4b27      	ldr	r3, [pc, #156]	@ (3418319c <HAL_RCC_GetSysClockFreq+0xf4>)
34183100:	607b      	str	r3, [r7, #4]
      break;
34183102:	e041      	b.n	34183188 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34183104:	4b26      	ldr	r3, [pc, #152]	@ (341831a0 <HAL_RCC_GetSysClockFreq+0xf8>)
34183106:	607b      	str	r3, [r7, #4]
      break;
34183108:	e03e      	b.n	34183188 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
3418310a:	f7ff f93f 	bl	3418238c <LL_RCC_IC2_GetDivider>
3418310e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34183110:	f7ff f92e 	bl	34182370 <LL_RCC_IC2_GetSource>
34183114:	4603      	mov	r3, r0
34183116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418311a:	d029      	beq.n	34183170 <HAL_RCC_GetSysClockFreq+0xc8>
3418311c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183120:	d82f      	bhi.n	34183182 <HAL_RCC_GetSysClockFreq+0xda>
34183122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183126:	d01a      	beq.n	3418315e <HAL_RCC_GetSysClockFreq+0xb6>
34183128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418312c:	d829      	bhi.n	34183182 <HAL_RCC_GetSysClockFreq+0xda>
3418312e:	2b00      	cmp	r3, #0
34183130:	d003      	beq.n	3418313a <HAL_RCC_GetSysClockFreq+0x92>
34183132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183136:	d009      	beq.n	3418314c <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34183138:	e023      	b.n	34183182 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418313a:	f004 fe2d 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418313e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183140:	687a      	ldr	r2, [r7, #4]
34183142:	683b      	ldr	r3, [r7, #0]
34183144:	fbb2 f3f3 	udiv	r3, r2, r3
34183148:	607b      	str	r3, [r7, #4]
          break;
3418314a:	e01b      	b.n	34183184 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418314c:	f004 fe6a 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34183150:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183152:	687a      	ldr	r2, [r7, #4]
34183154:	683b      	ldr	r3, [r7, #0]
34183156:	fbb2 f3f3 	udiv	r3, r2, r3
3418315a:	607b      	str	r3, [r7, #4]
          break;
3418315c:	e012      	b.n	34183184 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418315e:	f004 fea7 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34183162:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183164:	687a      	ldr	r2, [r7, #4]
34183166:	683b      	ldr	r3, [r7, #0]
34183168:	fbb2 f3f3 	udiv	r3, r2, r3
3418316c:	607b      	str	r3, [r7, #4]
          break;
3418316e:	e009      	b.n	34183184 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34183170:	f004 fee4 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34183174:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183176:	687a      	ldr	r2, [r7, #4]
34183178:	683b      	ldr	r3, [r7, #0]
3418317a:	fbb2 f3f3 	udiv	r3, r2, r3
3418317e:	607b      	str	r3, [r7, #4]
          break;
34183180:	e000      	b.n	34183184 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34183182:	bf00      	nop
      break;
34183184:	e000      	b.n	34183188 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34183186:	bf00      	nop
  }

  return frequency;
34183188:	687b      	ldr	r3, [r7, #4]
}
3418318a:	4618      	mov	r0, r3
3418318c:	3708      	adds	r7, #8
3418318e:	46bd      	mov	sp, r7
34183190:	bd80      	pop	{r7, pc}
34183192:	bf00      	nop
34183194:	03d09000 	.word	0x03d09000
34183198:	003d0900 	.word	0x003d0900
3418319c:	00f42400 	.word	0x00f42400
341831a0:	02dc6c00 	.word	0x02dc6c00

341831a4 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341831a4:	b480      	push	{r7}
341831a6:	b085      	sub	sp, #20
341831a8:	af00      	add	r7, sp, #0
341831aa:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
341831ac:	687b      	ldr	r3, [r7, #4]
341831ae:	227f      	movs	r2, #127	@ 0x7f
341831b0:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
341831b2:	4b36      	ldr	r3, [pc, #216]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
341831b4:	6a1b      	ldr	r3, [r3, #32]
341831b6:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
341831b8:	68fb      	ldr	r3, [r7, #12]
341831ba:	091b      	lsrs	r3, r3, #4
341831bc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
341831c0:	687b      	ldr	r3, [r7, #4]
341831c2:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
341831c4:	68fb      	ldr	r3, [r7, #12]
341831c6:	091b      	lsrs	r3, r3, #4
341831c8:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
341831cc:	687b      	ldr	r3, [r7, #4]
341831ce:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
341831d0:	4b2e      	ldr	r3, [pc, #184]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
341831d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341831d4:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
341831d6:	68fb      	ldr	r3, [r7, #12]
341831d8:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
341831dc:	687b      	ldr	r3, [r7, #4]
341831de:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
341831e0:	68fb      	ldr	r3, [r7, #12]
341831e2:	f003 0207 	and.w	r2, r3, #7
341831e6:	687b      	ldr	r3, [r7, #4]
341831e8:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
341831ea:	68fb      	ldr	r3, [r7, #12]
341831ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
341831f0:	687b      	ldr	r3, [r7, #4]
341831f2:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
341831f4:	68fb      	ldr	r3, [r7, #12]
341831f6:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
341831fa:	687b      	ldr	r3, [r7, #4]
341831fc:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
341831fe:	68fb      	ldr	r3, [r7, #12]
34183200:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
34183204:	687b      	ldr	r3, [r7, #4]
34183206:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34183208:	4b20      	ldr	r3, [pc, #128]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
3418320a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418320e:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34183210:	68fb      	ldr	r3, [r7, #12]
34183212:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183216:	687b      	ldr	r3, [r7, #4]
34183218:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
3418321a:	68fb      	ldr	r3, [r7, #12]
3418321c:	0c1b      	lsrs	r3, r3, #16
3418321e:	b2db      	uxtb	r3, r3
34183220:	1c5a      	adds	r2, r3, #1
34183222:	687b      	ldr	r3, [r7, #4]
34183224:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
34183226:	4b19      	ldr	r3, [pc, #100]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
34183228:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418322c:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
3418322e:	68fb      	ldr	r3, [r7, #12]
34183230:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183234:	687b      	ldr	r3, [r7, #4]
34183236:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34183238:	68fb      	ldr	r3, [r7, #12]
3418323a:	0c1b      	lsrs	r3, r3, #16
3418323c:	b2db      	uxtb	r3, r3
3418323e:	1c5a      	adds	r2, r3, #1
34183240:	687b      	ldr	r3, [r7, #4]
34183242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
34183244:	4b11      	ldr	r3, [pc, #68]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
34183246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418324a:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
3418324c:	68fb      	ldr	r3, [r7, #12]
3418324e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183252:	687b      	ldr	r3, [r7, #4]
34183254:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34183256:	68fb      	ldr	r3, [r7, #12]
34183258:	0c1b      	lsrs	r3, r3, #16
3418325a:	b2db      	uxtb	r3, r3
3418325c:	1c5a      	adds	r2, r3, #1
3418325e:	687b      	ldr	r3, [r7, #4]
34183260:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
34183262:	4b0a      	ldr	r3, [pc, #40]	@ (3418328c <HAL_RCC_GetClockConfig+0xe8>)
34183264:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34183268:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
3418326a:	68fb      	ldr	r3, [r7, #12]
3418326c:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183270:	687b      	ldr	r3, [r7, #4]
34183272:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34183274:	68fb      	ldr	r3, [r7, #12]
34183276:	0c1b      	lsrs	r3, r3, #16
34183278:	b2db      	uxtb	r3, r3
3418327a:	1c5a      	adds	r2, r3, #1
3418327c:	687b      	ldr	r3, [r7, #4]
3418327e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34183280:	bf00      	nop
34183282:	3714      	adds	r7, #20
34183284:	46bd      	mov	sp, r7
34183286:	f85d 7b04 	ldr.w	r7, [sp], #4
3418328a:	4770      	bx	lr
3418328c:	56028000 	.word	0x56028000

34183290 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34183290:	b580      	push	{r7, lr}
34183292:	b088      	sub	sp, #32
34183294:	af00      	add	r7, sp, #0
34183296:	6078      	str	r0, [r7, #4]
34183298:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
3418329a:	2300      	movs	r3, #0
3418329c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418329e:	687b      	ldr	r3, [r7, #4]
341832a0:	011a      	lsls	r2, r3, #4
341832a2:	4b8e      	ldr	r3, [pc, #568]	@ (341834dc <RCC_PLL_Config+0x24c>)
341832a4:	4413      	add	r3, r2
341832a6:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
341832a8:	687b      	ldr	r3, [r7, #4]
341832aa:	011a      	lsls	r2, r3, #4
341832ac:	4b8c      	ldr	r3, [pc, #560]	@ (341834e0 <RCC_PLL_Config+0x250>)
341832ae:	4413      	add	r3, r2
341832b0:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
341832b2:	687b      	ldr	r3, [r7, #4]
341832b4:	011a      	lsls	r2, r3, #4
341832b6:	4b8b      	ldr	r3, [pc, #556]	@ (341834e4 <RCC_PLL_Config+0x254>)
341832b8:	4413      	add	r3, r2
341832ba:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
341832bc:	683b      	ldr	r3, [r7, #0]
341832be:	681b      	ldr	r3, [r3, #0]
341832c0:	2b02      	cmp	r3, #2
341832c2:	f040 8091 	bne.w	341833e8 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341832c6:	4a88      	ldr	r2, [pc, #544]	@ (341834e8 <RCC_PLL_Config+0x258>)
341832c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
341832cc:	687b      	ldr	r3, [r7, #4]
341832ce:	fa01 f303 	lsl.w	r3, r1, r3
341832d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341832d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341832d8:	f7fe f9a8 	bl	3418162c <HAL_GetTick>
341832dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341832de:	e008      	b.n	341832f2 <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341832e0:	f7fe f9a4 	bl	3418162c <HAL_GetTick>
341832e4:	4602      	mov	r2, r0
341832e6:	68fb      	ldr	r3, [r7, #12]
341832e8:	1ad3      	subs	r3, r2, r3
341832ea:	2b01      	cmp	r3, #1
341832ec:	d901      	bls.n	341832f2 <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
341832ee:	2303      	movs	r3, #3
341832f0:	e0f0      	b.n	341834d4 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341832f2:	4b7d      	ldr	r3, [pc, #500]	@ (341834e8 <RCC_PLL_Config+0x258>)
341832f4:	685a      	ldr	r2, [r3, #4]
341832f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
341832fa:	687b      	ldr	r3, [r7, #4]
341832fc:	fa01 f303 	lsl.w	r3, r1, r3
34183300:	401a      	ands	r2, r3
34183302:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183306:	687b      	ldr	r3, [r7, #4]
34183308:	fa01 f303 	lsl.w	r3, r1, r3
3418330c:	429a      	cmp	r2, r3
3418330e:	d0e7      	beq.n	341832e0 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34183310:	693b      	ldr	r3, [r7, #16]
34183312:	681b      	ldr	r3, [r3, #0]
34183314:	f043 0204 	orr.w	r2, r3, #4
34183318:	693b      	ldr	r3, [r7, #16]
3418331a:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418331c:	69bb      	ldr	r3, [r7, #24]
3418331e:	681b      	ldr	r3, [r3, #0]
34183320:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34183324:	69bb      	ldr	r3, [r7, #24]
34183326:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34183328:	69bb      	ldr	r3, [r7, #24]
3418332a:	681a      	ldr	r2, [r3, #0]
3418332c:	4b6f      	ldr	r3, [pc, #444]	@ (341834ec <RCC_PLL_Config+0x25c>)
3418332e:	4013      	ands	r3, r2
34183330:	683a      	ldr	r2, [r7, #0]
34183332:	6851      	ldr	r1, [r2, #4]
34183334:	683a      	ldr	r2, [r7, #0]
34183336:	6892      	ldr	r2, [r2, #8]
34183338:	0512      	lsls	r2, r2, #20
3418333a:	4311      	orrs	r1, r2
3418333c:	683a      	ldr	r2, [r7, #0]
3418333e:	6912      	ldr	r2, [r2, #16]
34183340:	0212      	lsls	r2, r2, #8
34183342:	430a      	orrs	r2, r1
34183344:	431a      	orrs	r2, r3
34183346:	69bb      	ldr	r3, [r7, #24]
34183348:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
3418334a:	693b      	ldr	r3, [r7, #16]
3418334c:	681b      	ldr	r3, [r3, #0]
3418334e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34183352:	683b      	ldr	r3, [r7, #0]
34183354:	695b      	ldr	r3, [r3, #20]
34183356:	06d9      	lsls	r1, r3, #27
34183358:	683b      	ldr	r3, [r7, #0]
3418335a:	699b      	ldr	r3, [r3, #24]
3418335c:	061b      	lsls	r3, r3, #24
3418335e:	430b      	orrs	r3, r1
34183360:	431a      	orrs	r2, r3
34183362:	693b      	ldr	r3, [r7, #16]
34183364:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34183366:	697b      	ldr	r3, [r7, #20]
34183368:	681b      	ldr	r3, [r3, #0]
3418336a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
3418336e:	683b      	ldr	r3, [r7, #0]
34183370:	68db      	ldr	r3, [r3, #12]
34183372:	431a      	orrs	r2, r3
34183374:	697b      	ldr	r3, [r7, #20]
34183376:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34183378:	693b      	ldr	r3, [r7, #16]
3418337a:	681b      	ldr	r3, [r3, #0]
3418337c:	f023 0208 	bic.w	r2, r3, #8
34183380:	693b      	ldr	r3, [r7, #16]
34183382:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34183384:	683b      	ldr	r3, [r7, #0]
34183386:	68db      	ldr	r3, [r3, #12]
34183388:	2b00      	cmp	r3, #0
3418338a:	d005      	beq.n	34183398 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
3418338c:	693b      	ldr	r3, [r7, #16]
3418338e:	681b      	ldr	r3, [r3, #0]
34183390:	f043 020a 	orr.w	r2, r3, #10
34183394:	693b      	ldr	r3, [r7, #16]
34183396:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34183398:	693b      	ldr	r3, [r7, #16]
3418339a:	681b      	ldr	r3, [r3, #0]
3418339c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
341833a0:	f043 0301 	orr.w	r3, r3, #1
341833a4:	693a      	ldr	r2, [r7, #16]
341833a6:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
341833a8:	4a4f      	ldr	r2, [pc, #316]	@ (341834e8 <RCC_PLL_Config+0x258>)
341833aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
341833ae:	687b      	ldr	r3, [r7, #4]
341833b0:	fa01 f303 	lsl.w	r3, r1, r3
341833b4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341833b8:	f7fe f938 	bl	3418162c <HAL_GetTick>
341833bc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341833be:	e008      	b.n	341833d2 <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341833c0:	f7fe f934 	bl	3418162c <HAL_GetTick>
341833c4:	4602      	mov	r2, r0
341833c6:	68fb      	ldr	r3, [r7, #12]
341833c8:	1ad3      	subs	r3, r2, r3
341833ca:	2b01      	cmp	r3, #1
341833cc:	d901      	bls.n	341833d2 <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
341833ce:	2303      	movs	r3, #3
341833d0:	e080      	b.n	341834d4 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341833d2:	4b45      	ldr	r3, [pc, #276]	@ (341834e8 <RCC_PLL_Config+0x258>)
341833d4:	685a      	ldr	r2, [r3, #4]
341833d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
341833da:	687b      	ldr	r3, [r7, #4]
341833dc:	fa01 f303 	lsl.w	r3, r1, r3
341833e0:	4013      	ands	r3, r2
341833e2:	2b00      	cmp	r3, #0
341833e4:	d0ec      	beq.n	341833c0 <RCC_PLL_Config+0x130>
341833e6:	e074      	b.n	341834d2 <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
341833e8:	683b      	ldr	r3, [r7, #0]
341833ea:	681b      	ldr	r3, [r3, #0]
341833ec:	2b03      	cmp	r3, #3
341833ee:	d13b      	bne.n	34183468 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
341833f0:	683b      	ldr	r3, [r7, #0]
341833f2:	685b      	ldr	r3, [r3, #4]
341833f4:	4618      	mov	r0, r3
341833f6:	f000 f921 	bl	3418363c <RCC_PLL_Source_IsReady>
341833fa:	4603      	mov	r3, r0
341833fc:	2b01      	cmp	r3, #1
341833fe:	d130      	bne.n	34183462 <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34183400:	4a39      	ldr	r2, [pc, #228]	@ (341834e8 <RCC_PLL_Config+0x258>)
34183402:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183406:	687b      	ldr	r3, [r7, #4]
34183408:	fa01 f303 	lsl.w	r3, r1, r3
3418340c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34183410:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183412:	f7fe f90b 	bl	3418162c <HAL_GetTick>
34183416:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183418:	e008      	b.n	3418342c <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418341a:	f7fe f907 	bl	3418162c <HAL_GetTick>
3418341e:	4602      	mov	r2, r0
34183420:	68fb      	ldr	r3, [r7, #12]
34183422:	1ad3      	subs	r3, r2, r3
34183424:	2b01      	cmp	r3, #1
34183426:	d901      	bls.n	3418342c <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34183428:	2303      	movs	r3, #3
3418342a:	e053      	b.n	341834d4 <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418342c:	4b2e      	ldr	r3, [pc, #184]	@ (341834e8 <RCC_PLL_Config+0x258>)
3418342e:	685a      	ldr	r2, [r3, #4]
34183430:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183434:	687b      	ldr	r3, [r7, #4]
34183436:	fa01 f303 	lsl.w	r3, r1, r3
3418343a:	401a      	ands	r2, r3
3418343c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183440:	687b      	ldr	r3, [r7, #4]
34183442:	fa01 f303 	lsl.w	r3, r1, r3
34183446:	429a      	cmp	r2, r3
34183448:	d0e7      	beq.n	3418341a <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3418344a:	69bb      	ldr	r3, [r7, #24]
3418344c:	681b      	ldr	r3, [r3, #0]
3418344e:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34183452:	683b      	ldr	r3, [r7, #0]
34183454:	685b      	ldr	r3, [r3, #4]
34183456:	4313      	orrs	r3, r2
34183458:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418345c:	69bb      	ldr	r3, [r7, #24]
3418345e:	601a      	str	r2, [r3, #0]
34183460:	e037      	b.n	341834d2 <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34183462:	2301      	movs	r3, #1
34183464:	77fb      	strb	r3, [r7, #31]
34183466:	e034      	b.n	341834d2 <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34183468:	683b      	ldr	r3, [r7, #0]
3418346a:	681b      	ldr	r3, [r3, #0]
3418346c:	2b01      	cmp	r3, #1
3418346e:	d130      	bne.n	341834d2 <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34183470:	693b      	ldr	r3, [r7, #16]
34183472:	681b      	ldr	r3, [r3, #0]
34183474:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34183478:	693b      	ldr	r3, [r7, #16]
3418347a:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418347c:	4a1a      	ldr	r2, [pc, #104]	@ (341834e8 <RCC_PLL_Config+0x258>)
3418347e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183482:	687b      	ldr	r3, [r7, #4]
34183484:	fa01 f303 	lsl.w	r3, r1, r3
34183488:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418348c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418348e:	f7fe f8cd 	bl	3418162c <HAL_GetTick>
34183492:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183494:	e008      	b.n	341834a8 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183496:	f7fe f8c9 	bl	3418162c <HAL_GetTick>
3418349a:	4602      	mov	r2, r0
3418349c:	68fb      	ldr	r3, [r7, #12]
3418349e:	1ad3      	subs	r3, r2, r3
341834a0:	2b01      	cmp	r3, #1
341834a2:	d901      	bls.n	341834a8 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341834a4:	2303      	movs	r3, #3
341834a6:	e015      	b.n	341834d4 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341834a8:	4b0f      	ldr	r3, [pc, #60]	@ (341834e8 <RCC_PLL_Config+0x258>)
341834aa:	685a      	ldr	r2, [r3, #4]
341834ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
341834b0:	687b      	ldr	r3, [r7, #4]
341834b2:	fa01 f303 	lsl.w	r3, r1, r3
341834b6:	401a      	ands	r2, r3
341834b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
341834bc:	687b      	ldr	r3, [r7, #4]
341834be:	fa01 f303 	lsl.w	r3, r1, r3
341834c2:	429a      	cmp	r2, r3
341834c4:	d0e7      	beq.n	34183496 <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
341834c6:	69bb      	ldr	r3, [r7, #24]
341834c8:	681b      	ldr	r3, [r3, #0]
341834ca:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
341834ce:	69bb      	ldr	r3, [r7, #24]
341834d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
341834d2:	7ffb      	ldrb	r3, [r7, #31]
}
341834d4:	4618      	mov	r0, r3
341834d6:	3720      	adds	r7, #32
341834d8:	46bd      	mov	sp, r7
341834da:	bd80      	pop	{r7, pc}
341834dc:	56028080 	.word	0x56028080
341834e0:	56028084 	.word	0x56028084
341834e4:	56028088 	.word	0x56028088
341834e8:	56028000 	.word	0x56028000
341834ec:	8c0000ff 	.word	0x8c0000ff

341834f0 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
341834f0:	b580      	push	{r7, lr}
341834f2:	b084      	sub	sp, #16
341834f4:	af00      	add	r7, sp, #0
341834f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
341834f8:	2300      	movs	r3, #0
341834fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
341834fc:	4a11      	ldr	r2, [pc, #68]	@ (34183544 <RCC_PLL_Enable+0x54>)
341834fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183502:	687b      	ldr	r3, [r7, #4]
34183504:	fa01 f303 	lsl.w	r3, r1, r3
34183508:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3418350c:	f7fe f88e 	bl	3418162c <HAL_GetTick>
34183510:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183512:	e008      	b.n	34183526 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183514:	f7fe f88a 	bl	3418162c <HAL_GetTick>
34183518:	4602      	mov	r2, r0
3418351a:	68bb      	ldr	r3, [r7, #8]
3418351c:	1ad3      	subs	r3, r2, r3
3418351e:	2b01      	cmp	r3, #1
34183520:	d901      	bls.n	34183526 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34183522:	2303      	movs	r3, #3
34183524:	e00a      	b.n	3418353c <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183526:	4b07      	ldr	r3, [pc, #28]	@ (34183544 <RCC_PLL_Enable+0x54>)
34183528:	685a      	ldr	r2, [r3, #4]
3418352a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418352e:	687b      	ldr	r3, [r7, #4]
34183530:	fa01 f303 	lsl.w	r3, r1, r3
34183534:	4013      	ands	r3, r2
34183536:	2b00      	cmp	r3, #0
34183538:	d0ec      	beq.n	34183514 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3418353a:	7bfb      	ldrb	r3, [r7, #15]
}
3418353c:	4618      	mov	r0, r3
3418353e:	3710      	adds	r7, #16
34183540:	46bd      	mov	sp, r7
34183542:	bd80      	pop	{r7, pc}
34183544:	56028000 	.word	0x56028000

34183548 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34183548:	b480      	push	{r7}
3418354a:	b089      	sub	sp, #36	@ 0x24
3418354c:	af00      	add	r7, sp, #0
3418354e:	6078      	str	r0, [r7, #4]
34183550:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
34183552:	2300      	movs	r3, #0
34183554:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34183556:	687b      	ldr	r3, [r7, #4]
34183558:	011a      	lsls	r2, r3, #4
3418355a:	4b34      	ldr	r3, [pc, #208]	@ (3418362c <RCC_PLL_IsNewConfig+0xe4>)
3418355c:	4413      	add	r3, r2
3418355e:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34183560:	687b      	ldr	r3, [r7, #4]
34183562:	011a      	lsls	r2, r3, #4
34183564:	4b32      	ldr	r3, [pc, #200]	@ (34183630 <RCC_PLL_IsNewConfig+0xe8>)
34183566:	4413      	add	r3, r2
34183568:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418356a:	687b      	ldr	r3, [r7, #4]
3418356c:	011a      	lsls	r2, r3, #4
3418356e:	4b31      	ldr	r3, [pc, #196]	@ (34183634 <RCC_PLL_IsNewConfig+0xec>)
34183570:	4413      	add	r3, r2
34183572:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34183574:	697b      	ldr	r3, [r7, #20]
34183576:	681b      	ldr	r3, [r3, #0]
34183578:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
3418357c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34183580:	683a      	ldr	r2, [r7, #0]
34183582:	6851      	ldr	r1, [r2, #4]
34183584:	683a      	ldr	r2, [r7, #0]
34183586:	6892      	ldr	r2, [r2, #8]
34183588:	0512      	lsls	r2, r2, #20
3418358a:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3418358c:	683a      	ldr	r2, [r7, #0]
3418358e:	6912      	ldr	r2, [r2, #16]
34183590:	0212      	lsls	r2, r2, #8
34183592:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34183594:	4293      	cmp	r3, r2
34183596:	d002      	beq.n	3418359e <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
34183598:	2301      	movs	r3, #1
3418359a:	61fb      	str	r3, [r7, #28]
3418359c:	e03e      	b.n	3418361c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418359e:	693b      	ldr	r3, [r7, #16]
341835a0:	681b      	ldr	r3, [r3, #0]
341835a2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341835a6:	683b      	ldr	r3, [r7, #0]
341835a8:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341835aa:	429a      	cmp	r2, r3
341835ac:	d002      	beq.n	341835b4 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
341835ae:	2301      	movs	r3, #1
341835b0:	61fb      	str	r3, [r7, #28]
341835b2:	e033      	b.n	3418361c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341835b4:	68fb      	ldr	r3, [r7, #12]
341835b6:	681b      	ldr	r3, [r3, #0]
341835b8:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
341835bc:	683b      	ldr	r3, [r7, #0]
341835be:	695b      	ldr	r3, [r3, #20]
341835c0:	06d9      	lsls	r1, r3, #27
341835c2:	683b      	ldr	r3, [r7, #0]
341835c4:	699b      	ldr	r3, [r3, #24]
341835c6:	061b      	lsls	r3, r3, #24
341835c8:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341835ca:	429a      	cmp	r2, r3
341835cc:	d002      	beq.n	341835d4 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
341835ce:	2301      	movs	r3, #1
341835d0:	61fb      	str	r3, [r7, #28]
341835d2:	e023      	b.n	3418361c <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341835d4:	4b18      	ldr	r3, [pc, #96]	@ (34183638 <RCC_PLL_IsNewConfig+0xf0>)
341835d6:	685a      	ldr	r2, [r3, #4]
341835d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
341835dc:	687b      	ldr	r3, [r7, #4]
341835de:	fa01 f303 	lsl.w	r3, r1, r3
341835e2:	401a      	ands	r2, r3
341835e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
341835e8:	687b      	ldr	r3, [r7, #4]
341835ea:	fa01 f303 	lsl.w	r3, r1, r3
341835ee:	429a      	cmp	r2, r3
341835f0:	d102      	bne.n	341835f8 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
341835f2:	2302      	movs	r3, #2
341835f4:	61bb      	str	r3, [r7, #24]
341835f6:	e00a      	b.n	3418360e <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
341835f8:	697b      	ldr	r3, [r7, #20]
341835fa:	681b      	ldr	r3, [r3, #0]
341835fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183600:	2b00      	cmp	r3, #0
34183602:	d002      	beq.n	3418360a <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34183604:	2303      	movs	r3, #3
34183606:	61bb      	str	r3, [r7, #24]
34183608:	e001      	b.n	3418360e <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3418360a:	2301      	movs	r3, #1
3418360c:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3418360e:	683b      	ldr	r3, [r7, #0]
34183610:	681b      	ldr	r3, [r3, #0]
34183612:	69ba      	ldr	r2, [r7, #24]
34183614:	429a      	cmp	r2, r3
34183616:	d001      	beq.n	3418361c <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34183618:	2301      	movs	r3, #1
3418361a:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
3418361c:	69fb      	ldr	r3, [r7, #28]
}
3418361e:	4618      	mov	r0, r3
34183620:	3724      	adds	r7, #36	@ 0x24
34183622:	46bd      	mov	sp, r7
34183624:	f85d 7b04 	ldr.w	r7, [sp], #4
34183628:	4770      	bx	lr
3418362a:	bf00      	nop
3418362c:	56028080 	.word	0x56028080
34183630:	56028084 	.word	0x56028084
34183634:	56028088 	.word	0x56028088
34183638:	56028000 	.word	0x56028000

3418363c <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
3418363c:	b580      	push	{r7, lr}
3418363e:	b084      	sub	sp, #16
34183640:	af00      	add	r7, sp, #0
34183642:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
34183644:	2301      	movs	r3, #1
34183646:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34183648:	687b      	ldr	r3, [r7, #4]
3418364a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418364e:	d01b      	beq.n	34183688 <RCC_PLL_Source_IsReady+0x4c>
34183650:	687b      	ldr	r3, [r7, #4]
34183652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183656:	d81f      	bhi.n	34183698 <RCC_PLL_Source_IsReady+0x5c>
34183658:	687b      	ldr	r3, [r7, #4]
3418365a:	2b00      	cmp	r3, #0
3418365c:	d004      	beq.n	34183668 <RCC_PLL_Source_IsReady+0x2c>
3418365e:	687b      	ldr	r3, [r7, #4]
34183660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183664:	d008      	beq.n	34183678 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
34183666:	e017      	b.n	34183698 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34183668:	f7fe fc72 	bl	34181f50 <LL_RCC_HSI_IsReady>
3418366c:	4603      	mov	r3, r0
3418366e:	2b00      	cmp	r3, #0
34183670:	d114      	bne.n	3418369c <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
34183672:	2300      	movs	r3, #0
34183674:	60fb      	str	r3, [r7, #12]
      break;
34183676:	e011      	b.n	3418369c <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34183678:	f7fe fcd2 	bl	34182020 <LL_RCC_MSI_IsReady>
3418367c:	4603      	mov	r3, r0
3418367e:	2b00      	cmp	r3, #0
34183680:	d10e      	bne.n	341836a0 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
34183682:	2300      	movs	r3, #0
34183684:	60fb      	str	r3, [r7, #12]
      break;
34183686:	e00b      	b.n	341836a0 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34183688:	f7fe fc32 	bl	34181ef0 <LL_RCC_HSE_IsReady>
3418368c:	4603      	mov	r3, r0
3418368e:	2b00      	cmp	r3, #0
34183690:	d108      	bne.n	341836a4 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
34183692:	2300      	movs	r3, #0
34183694:	60fb      	str	r3, [r7, #12]
      break;
34183696:	e005      	b.n	341836a4 <RCC_PLL_Source_IsReady+0x68>
      break;
34183698:	bf00      	nop
3418369a:	e004      	b.n	341836a6 <RCC_PLL_Source_IsReady+0x6a>
      break;
3418369c:	bf00      	nop
3418369e:	e002      	b.n	341836a6 <RCC_PLL_Source_IsReady+0x6a>
      break;
341836a0:	bf00      	nop
341836a2:	e000      	b.n	341836a6 <RCC_PLL_Source_IsReady+0x6a>
      break;
341836a4:	bf00      	nop
  }

  return ret;
341836a6:	68fb      	ldr	r3, [r7, #12]
}
341836a8:	4618      	mov	r0, r3
341836aa:	3710      	adds	r7, #16
341836ac:	46bd      	mov	sp, r7
341836ae:	bd80      	pop	{r7, pc}

341836b0 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
341836b0:	b580      	push	{r7, lr}
341836b2:	b084      	sub	sp, #16
341836b4:	af00      	add	r7, sp, #0
341836b6:	6078      	str	r0, [r7, #4]
341836b8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
341836ba:	2301      	movs	r3, #1
341836bc:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
341836be:	687b      	ldr	r3, [r7, #4]
341836c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341836c4:	d03a      	beq.n	3418373c <RCC_IC_CheckPLLSources+0x8c>
341836c6:	687b      	ldr	r3, [r7, #4]
341836c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341836cc:	d843      	bhi.n	34183756 <RCC_IC_CheckPLLSources+0xa6>
341836ce:	687b      	ldr	r3, [r7, #4]
341836d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341836d4:	d025      	beq.n	34183722 <RCC_IC_CheckPLLSources+0x72>
341836d6:	687b      	ldr	r3, [r7, #4]
341836d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341836dc:	d83b      	bhi.n	34183756 <RCC_IC_CheckPLLSources+0xa6>
341836de:	687b      	ldr	r3, [r7, #4]
341836e0:	2b00      	cmp	r3, #0
341836e2:	d004      	beq.n	341836ee <RCC_IC_CheckPLLSources+0x3e>
341836e4:	687b      	ldr	r3, [r7, #4]
341836e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341836ea:	d00d      	beq.n	34183708 <RCC_IC_CheckPLLSources+0x58>
341836ec:	e033      	b.n	34183756 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341836ee:	f7fe fd49 	bl	34182184 <LL_RCC_PLL1_IsReady>
341836f2:	4603      	mov	r3, r0
341836f4:	2b00      	cmp	r3, #0
341836f6:	d131      	bne.n	3418375c <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341836f8:	f7fe fd58 	bl	341821ac <LL_RCC_PLL1_IsEnabledBypass>
341836fc:	4603      	mov	r3, r0
341836fe:	2b00      	cmp	r3, #0
34183700:	d12c      	bne.n	3418375c <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
34183702:	2300      	movs	r3, #0
34183704:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183706:	e029      	b.n	3418375c <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34183708:	f7fe fd72 	bl	341821f0 <LL_RCC_PLL2_IsReady>
3418370c:	4603      	mov	r3, r0
3418370e:	2b00      	cmp	r3, #0
34183710:	d126      	bne.n	34183760 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34183712:	f7fe fd81 	bl	34182218 <LL_RCC_PLL2_IsEnabledBypass>
34183716:	4603      	mov	r3, r0
34183718:	2b00      	cmp	r3, #0
3418371a:	d121      	bne.n	34183760 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
3418371c:	2300      	movs	r3, #0
3418371e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183720:	e01e      	b.n	34183760 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34183722:	f7fe fd9b 	bl	3418225c <LL_RCC_PLL3_IsReady>
34183726:	4603      	mov	r3, r0
34183728:	2b00      	cmp	r3, #0
3418372a:	d11b      	bne.n	34183764 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418372c:	f7fe fdaa 	bl	34182284 <LL_RCC_PLL3_IsEnabledBypass>
34183730:	4603      	mov	r3, r0
34183732:	2b00      	cmp	r3, #0
34183734:	d116      	bne.n	34183764 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
34183736:	2300      	movs	r3, #0
34183738:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418373a:	e013      	b.n	34183764 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418373c:	f7fe fdc4 	bl	341822c8 <LL_RCC_PLL4_IsReady>
34183740:	4603      	mov	r3, r0
34183742:	2b00      	cmp	r3, #0
34183744:	d110      	bne.n	34183768 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34183746:	f7fe fdd3 	bl	341822f0 <LL_RCC_PLL4_IsEnabledBypass>
3418374a:	4603      	mov	r3, r0
3418374c:	2b00      	cmp	r3, #0
3418374e:	d10b      	bne.n	34183768 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34183750:	2300      	movs	r3, #0
34183752:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183754:	e008      	b.n	34183768 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
34183756:	2300      	movs	r3, #0
34183758:	60fb      	str	r3, [r7, #12]
      break;
3418375a:	e006      	b.n	3418376a <RCC_IC_CheckPLLSources+0xba>
      break;
3418375c:	bf00      	nop
3418375e:	e004      	b.n	3418376a <RCC_IC_CheckPLLSources+0xba>
      break;
34183760:	bf00      	nop
34183762:	e002      	b.n	3418376a <RCC_IC_CheckPLLSources+0xba>
      break;
34183764:	bf00      	nop
34183766:	e000      	b.n	3418376a <RCC_IC_CheckPLLSources+0xba>
      break;
34183768:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418376a:	683b      	ldr	r3, [r7, #0]
3418376c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183770:	d03a      	beq.n	341837e8 <RCC_IC_CheckPLLSources+0x138>
34183772:	683b      	ldr	r3, [r7, #0]
34183774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183778:	d843      	bhi.n	34183802 <RCC_IC_CheckPLLSources+0x152>
3418377a:	683b      	ldr	r3, [r7, #0]
3418377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183780:	d025      	beq.n	341837ce <RCC_IC_CheckPLLSources+0x11e>
34183782:	683b      	ldr	r3, [r7, #0]
34183784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183788:	d83b      	bhi.n	34183802 <RCC_IC_CheckPLLSources+0x152>
3418378a:	683b      	ldr	r3, [r7, #0]
3418378c:	2b00      	cmp	r3, #0
3418378e:	d004      	beq.n	3418379a <RCC_IC_CheckPLLSources+0xea>
34183790:	683b      	ldr	r3, [r7, #0]
34183792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183796:	d00d      	beq.n	341837b4 <RCC_IC_CheckPLLSources+0x104>
34183798:	e033      	b.n	34183802 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418379a:	f7fe fcf3 	bl	34182184 <LL_RCC_PLL1_IsReady>
3418379e:	4603      	mov	r3, r0
341837a0:	2b00      	cmp	r3, #0
341837a2:	d131      	bne.n	34183808 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341837a4:	f7fe fd02 	bl	341821ac <LL_RCC_PLL1_IsEnabledBypass>
341837a8:	4603      	mov	r3, r0
341837aa:	2b00      	cmp	r3, #0
341837ac:	d12c      	bne.n	34183808 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
341837ae:	2300      	movs	r3, #0
341837b0:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341837b2:	e029      	b.n	34183808 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341837b4:	f7fe fd1c 	bl	341821f0 <LL_RCC_PLL2_IsReady>
341837b8:	4603      	mov	r3, r0
341837ba:	2b00      	cmp	r3, #0
341837bc:	d126      	bne.n	3418380c <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341837be:	f7fe fd2b 	bl	34182218 <LL_RCC_PLL2_IsEnabledBypass>
341837c2:	4603      	mov	r3, r0
341837c4:	2b00      	cmp	r3, #0
341837c6:	d121      	bne.n	3418380c <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
341837c8:	2300      	movs	r3, #0
341837ca:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341837cc:	e01e      	b.n	3418380c <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341837ce:	f7fe fd45 	bl	3418225c <LL_RCC_PLL3_IsReady>
341837d2:	4603      	mov	r3, r0
341837d4:	2b00      	cmp	r3, #0
341837d6:	d11b      	bne.n	34183810 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341837d8:	f7fe fd54 	bl	34182284 <LL_RCC_PLL3_IsEnabledBypass>
341837dc:	4603      	mov	r3, r0
341837de:	2b00      	cmp	r3, #0
341837e0:	d116      	bne.n	34183810 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
341837e2:	2300      	movs	r3, #0
341837e4:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341837e6:	e013      	b.n	34183810 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
341837e8:	f7fe fd6e 	bl	341822c8 <LL_RCC_PLL4_IsReady>
341837ec:	4603      	mov	r3, r0
341837ee:	2b00      	cmp	r3, #0
341837f0:	d110      	bne.n	34183814 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
341837f2:	f7fe fd7d 	bl	341822f0 <LL_RCC_PLL4_IsEnabledBypass>
341837f6:	4603      	mov	r3, r0
341837f8:	2b00      	cmp	r3, #0
341837fa:	d10b      	bne.n	34183814 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
341837fc:	2300      	movs	r3, #0
341837fe:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183800:	e008      	b.n	34183814 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
34183802:	2300      	movs	r3, #0
34183804:	60fb      	str	r3, [r7, #12]
      break;
34183806:	e006      	b.n	34183816 <RCC_IC_CheckPLLSources+0x166>
      break;
34183808:	bf00      	nop
3418380a:	e004      	b.n	34183816 <RCC_IC_CheckPLLSources+0x166>
      break;
3418380c:	bf00      	nop
3418380e:	e002      	b.n	34183816 <RCC_IC_CheckPLLSources+0x166>
      break;
34183810:	bf00      	nop
34183812:	e000      	b.n	34183816 <RCC_IC_CheckPLLSources+0x166>
      break;
34183814:	bf00      	nop
  }

  return ret;
34183816:	68fb      	ldr	r3, [r7, #12]
}
34183818:	4618      	mov	r0, r3
3418381a:	3710      	adds	r7, #16
3418381c:	46bd      	mov	sp, r7
3418381e:	bd80      	pop	{r7, pc}

34183820 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34183820:	b480      	push	{r7}
34183822:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34183824:	4b05      	ldr	r3, [pc, #20]	@ (3418383c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34183826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34183828:	4a04      	ldr	r2, [pc, #16]	@ (3418383c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418382a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418382e:	6553      	str	r3, [r2, #84]	@ 0x54
}
34183830:	bf00      	nop
34183832:	46bd      	mov	sp, r7
34183834:	f85d 7b04 	ldr.w	r7, [sp], #4
34183838:	4770      	bx	lr
3418383a:	bf00      	nop
3418383c:	56028000 	.word	0x56028000

34183840 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34183840:	b480      	push	{r7}
34183842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34183844:	4b05      	ldr	r3, [pc, #20]	@ (3418385c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34183846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34183848:	4a04      	ldr	r2, [pc, #16]	@ (3418385c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418384a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418384e:	6553      	str	r3, [r2, #84]	@ 0x54
}
34183850:	bf00      	nop
34183852:	46bd      	mov	sp, r7
34183854:	f85d 7b04 	ldr.w	r7, [sp], #4
34183858:	4770      	bx	lr
3418385a:	bf00      	nop
3418385c:	56028000 	.word	0x56028000

34183860 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34183860:	b480      	push	{r7}
34183862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34183864:	4b06      	ldr	r3, [pc, #24]	@ (34183880 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34183866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34183868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418386c:	2b40      	cmp	r3, #64	@ 0x40
3418386e:	d101      	bne.n	34183874 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34183870:	2301      	movs	r3, #1
34183872:	e000      	b.n	34183876 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34183874:	2300      	movs	r3, #0
}
34183876:	4618      	mov	r0, r3
34183878:	46bd      	mov	sp, r7
3418387a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418387e:	4770      	bx	lr
34183880:	56028000 	.word	0x56028000

34183884 <LL_RCC_HSE_IsReady>:
{
34183884:	b480      	push	{r7}
34183886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34183888:	4b06      	ldr	r3, [pc, #24]	@ (341838a4 <LL_RCC_HSE_IsReady+0x20>)
3418388a:	685b      	ldr	r3, [r3, #4]
3418388c:	f003 0310 	and.w	r3, r3, #16
34183890:	2b00      	cmp	r3, #0
34183892:	d001      	beq.n	34183898 <LL_RCC_HSE_IsReady+0x14>
34183894:	2301      	movs	r3, #1
34183896:	e000      	b.n	3418389a <LL_RCC_HSE_IsReady+0x16>
34183898:	2300      	movs	r3, #0
}
3418389a:	4618      	mov	r0, r3
3418389c:	46bd      	mov	sp, r7
3418389e:	f85d 7b04 	ldr.w	r7, [sp], #4
341838a2:	4770      	bx	lr
341838a4:	56028000 	.word	0x56028000

341838a8 <LL_RCC_HSI_IsReady>:
{
341838a8:	b480      	push	{r7}
341838aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
341838ac:	4b06      	ldr	r3, [pc, #24]	@ (341838c8 <LL_RCC_HSI_IsReady+0x20>)
341838ae:	685b      	ldr	r3, [r3, #4]
341838b0:	f003 0308 	and.w	r3, r3, #8
341838b4:	2b00      	cmp	r3, #0
341838b6:	d001      	beq.n	341838bc <LL_RCC_HSI_IsReady+0x14>
341838b8:	2301      	movs	r3, #1
341838ba:	e000      	b.n	341838be <LL_RCC_HSI_IsReady+0x16>
341838bc:	2300      	movs	r3, #0
}
341838be:	4618      	mov	r0, r3
341838c0:	46bd      	mov	sp, r7
341838c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341838c6:	4770      	bx	lr
341838c8:	56028000 	.word	0x56028000

341838cc <LL_RCC_HSI_GetDivider>:
{
341838cc:	b480      	push	{r7}
341838ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
341838d0:	4b04      	ldr	r3, [pc, #16]	@ (341838e4 <LL_RCC_HSI_GetDivider+0x18>)
341838d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341838d4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
341838d8:	4618      	mov	r0, r3
341838da:	46bd      	mov	sp, r7
341838dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341838e0:	4770      	bx	lr
341838e2:	bf00      	nop
341838e4:	56028000 	.word	0x56028000

341838e8 <LL_RCC_MSI_IsReady>:
{
341838e8:	b480      	push	{r7}
341838ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
341838ec:	4b06      	ldr	r3, [pc, #24]	@ (34183908 <LL_RCC_MSI_IsReady+0x20>)
341838ee:	685b      	ldr	r3, [r3, #4]
341838f0:	f003 0304 	and.w	r3, r3, #4
341838f4:	2b00      	cmp	r3, #0
341838f6:	d001      	beq.n	341838fc <LL_RCC_MSI_IsReady+0x14>
341838f8:	2301      	movs	r3, #1
341838fa:	e000      	b.n	341838fe <LL_RCC_MSI_IsReady+0x16>
341838fc:	2300      	movs	r3, #0
}
341838fe:	4618      	mov	r0, r3
34183900:	46bd      	mov	sp, r7
34183902:	f85d 7b04 	ldr.w	r7, [sp], #4
34183906:	4770      	bx	lr
34183908:	56028000 	.word	0x56028000

3418390c <LL_RCC_MSI_GetFrequency>:
{
3418390c:	b480      	push	{r7}
3418390e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34183910:	4b04      	ldr	r3, [pc, #16]	@ (34183924 <LL_RCC_MSI_GetFrequency+0x18>)
34183912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34183918:	4618      	mov	r0, r3
3418391a:	46bd      	mov	sp, r7
3418391c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183920:	4770      	bx	lr
34183922:	bf00      	nop
34183924:	56028000 	.word	0x56028000

34183928 <LL_RCC_LSE_IsReady>:
{
34183928:	b480      	push	{r7}
3418392a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418392c:	4b06      	ldr	r3, [pc, #24]	@ (34183948 <LL_RCC_LSE_IsReady+0x20>)
3418392e:	685b      	ldr	r3, [r3, #4]
34183930:	f003 0302 	and.w	r3, r3, #2
34183934:	2b00      	cmp	r3, #0
34183936:	d001      	beq.n	3418393c <LL_RCC_LSE_IsReady+0x14>
34183938:	2301      	movs	r3, #1
3418393a:	e000      	b.n	3418393e <LL_RCC_LSE_IsReady+0x16>
3418393c:	2300      	movs	r3, #0
}
3418393e:	4618      	mov	r0, r3
34183940:	46bd      	mov	sp, r7
34183942:	f85d 7b04 	ldr.w	r7, [sp], #4
34183946:	4770      	bx	lr
34183948:	56028000 	.word	0x56028000

3418394c <LL_RCC_LSI_IsReady>:
{
3418394c:	b480      	push	{r7}
3418394e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34183950:	4b04      	ldr	r3, [pc, #16]	@ (34183964 <LL_RCC_LSI_IsReady+0x18>)
34183952:	685b      	ldr	r3, [r3, #4]
34183954:	f003 0301 	and.w	r3, r3, #1
}
34183958:	4618      	mov	r0, r3
3418395a:	46bd      	mov	sp, r7
3418395c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183960:	4770      	bx	lr
34183962:	bf00      	nop
34183964:	56028000 	.word	0x56028000

34183968 <LL_RCC_GetAHBPrescaler>:
{
34183968:	b480      	push	{r7}
3418396a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418396c:	4b04      	ldr	r3, [pc, #16]	@ (34183980 <LL_RCC_GetAHBPrescaler+0x18>)
3418396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183970:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34183974:	4618      	mov	r0, r3
34183976:	46bd      	mov	sp, r7
34183978:	f85d 7b04 	ldr.w	r7, [sp], #4
3418397c:	4770      	bx	lr
3418397e:	bf00      	nop
34183980:	56028000 	.word	0x56028000

34183984 <LL_RCC_GetAPB1Prescaler>:
{
34183984:	b480      	push	{r7}
34183986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34183988:	4b04      	ldr	r3, [pc, #16]	@ (3418399c <LL_RCC_GetAPB1Prescaler+0x18>)
3418398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418398c:	f003 0307 	and.w	r3, r3, #7
}
34183990:	4618      	mov	r0, r3
34183992:	46bd      	mov	sp, r7
34183994:	f85d 7b04 	ldr.w	r7, [sp], #4
34183998:	4770      	bx	lr
3418399a:	bf00      	nop
3418399c:	56028000 	.word	0x56028000

341839a0 <LL_RCC_GetAPB2Prescaler>:
{
341839a0:	b480      	push	{r7}
341839a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341839a4:	4b04      	ldr	r3, [pc, #16]	@ (341839b8 <LL_RCC_GetAPB2Prescaler+0x18>)
341839a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
341839ac:	4618      	mov	r0, r3
341839ae:	46bd      	mov	sp, r7
341839b0:	f85d 7b04 	ldr.w	r7, [sp], #4
341839b4:	4770      	bx	lr
341839b6:	bf00      	nop
341839b8:	56028000 	.word	0x56028000

341839bc <LL_RCC_GetAPB4Prescaler>:
{
341839bc:	b480      	push	{r7}
341839be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
341839c0:	4b04      	ldr	r3, [pc, #16]	@ (341839d4 <LL_RCC_GetAPB4Prescaler+0x18>)
341839c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
341839c8:	4618      	mov	r0, r3
341839ca:	46bd      	mov	sp, r7
341839cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341839d0:	4770      	bx	lr
341839d2:	bf00      	nop
341839d4:	56028000 	.word	0x56028000

341839d8 <LL_RCC_GetAPB5Prescaler>:
{
341839d8:	b480      	push	{r7}
341839da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
341839dc:	4b04      	ldr	r3, [pc, #16]	@ (341839f0 <LL_RCC_GetAPB5Prescaler+0x18>)
341839de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
341839e4:	4618      	mov	r0, r3
341839e6:	46bd      	mov	sp, r7
341839e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341839ec:	4770      	bx	lr
341839ee:	bf00      	nop
341839f0:	56028000 	.word	0x56028000

341839f4 <LL_RCC_SetClockSource>:
{
341839f4:	b480      	push	{r7}
341839f6:	b085      	sub	sp, #20
341839f8:	af00      	add	r7, sp, #0
341839fa:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
341839fc:	687b      	ldr	r3, [r7, #4]
341839fe:	b2da      	uxtb	r2, r3
34183a00:	4b10      	ldr	r3, [pc, #64]	@ (34183a44 <LL_RCC_SetClockSource+0x50>)
34183a02:	4413      	add	r3, r2
34183a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34183a06:	68fb      	ldr	r3, [r7, #12]
34183a08:	681a      	ldr	r2, [r3, #0]
34183a0a:	687b      	ldr	r3, [r7, #4]
34183a0c:	0e19      	lsrs	r1, r3, #24
34183a0e:	687b      	ldr	r3, [r7, #4]
34183a10:	0a1b      	lsrs	r3, r3, #8
34183a12:	f003 031f 	and.w	r3, r3, #31
34183a16:	fa01 f303 	lsl.w	r3, r1, r3
34183a1a:	43db      	mvns	r3, r3
34183a1c:	401a      	ands	r2, r3
34183a1e:	687b      	ldr	r3, [r7, #4]
34183a20:	0c1b      	lsrs	r3, r3, #16
34183a22:	b2d9      	uxtb	r1, r3
34183a24:	687b      	ldr	r3, [r7, #4]
34183a26:	0a1b      	lsrs	r3, r3, #8
34183a28:	f003 031f 	and.w	r3, r3, #31
34183a2c:	fa01 f303 	lsl.w	r3, r1, r3
34183a30:	431a      	orrs	r2, r3
34183a32:	68fb      	ldr	r3, [r7, #12]
34183a34:	601a      	str	r2, [r3, #0]
}
34183a36:	bf00      	nop
34183a38:	3714      	adds	r7, #20
34183a3a:	46bd      	mov	sp, r7
34183a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a40:	4770      	bx	lr
34183a42:	bf00      	nop
34183a44:	56028144 	.word	0x56028144

34183a48 <LL_RCC_GetADCPrescaler>:
{
34183a48:	b480      	push	{r7}
34183a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34183a4c:	4b04      	ldr	r3, [pc, #16]	@ (34183a60 <LL_RCC_GetADCPrescaler+0x18>)
34183a4e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183a52:	0a1b      	lsrs	r3, r3, #8
34183a54:	b2db      	uxtb	r3, r3
}
34183a56:	4618      	mov	r0, r3
34183a58:	46bd      	mov	sp, r7
34183a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a5e:	4770      	bx	lr
34183a60:	56028000 	.word	0x56028000

34183a64 <LL_RCC_SetADFClockSource>:
{
34183a64:	b480      	push	{r7}
34183a66:	b083      	sub	sp, #12
34183a68:	af00      	add	r7, sp, #0
34183a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34183a6c:	4b07      	ldr	r3, [pc, #28]	@ (34183a8c <LL_RCC_SetADFClockSource+0x28>)
34183a6e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183a72:	f023 0207 	bic.w	r2, r3, #7
34183a76:	4905      	ldr	r1, [pc, #20]	@ (34183a8c <LL_RCC_SetADFClockSource+0x28>)
34183a78:	687b      	ldr	r3, [r7, #4]
34183a7a:	4313      	orrs	r3, r2
34183a7c:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34183a80:	bf00      	nop
34183a82:	370c      	adds	r7, #12
34183a84:	46bd      	mov	sp, r7
34183a86:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a8a:	4770      	bx	lr
34183a8c:	56028000 	.word	0x56028000

34183a90 <LL_RCC_SetCLKPClockSource>:
{
34183a90:	b480      	push	{r7}
34183a92:	b083      	sub	sp, #12
34183a94:	af00      	add	r7, sp, #0
34183a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34183a98:	4b07      	ldr	r3, [pc, #28]	@ (34183ab8 <LL_RCC_SetCLKPClockSource+0x28>)
34183a9a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183a9e:	f023 0207 	bic.w	r2, r3, #7
34183aa2:	4905      	ldr	r1, [pc, #20]	@ (34183ab8 <LL_RCC_SetCLKPClockSource+0x28>)
34183aa4:	687b      	ldr	r3, [r7, #4]
34183aa6:	4313      	orrs	r3, r2
34183aa8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183aac:	bf00      	nop
34183aae:	370c      	adds	r7, #12
34183ab0:	46bd      	mov	sp, r7
34183ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ab6:	4770      	bx	lr
34183ab8:	56028000 	.word	0x56028000

34183abc <LL_RCC_SetDCMIPPClockSource>:
{
34183abc:	b480      	push	{r7}
34183abe:	b083      	sub	sp, #12
34183ac0:	af00      	add	r7, sp, #0
34183ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34183ac4:	4b07      	ldr	r3, [pc, #28]	@ (34183ae4 <LL_RCC_SetDCMIPPClockSource+0x28>)
34183ac6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34183ace:	4905      	ldr	r1, [pc, #20]	@ (34183ae4 <LL_RCC_SetDCMIPPClockSource+0x28>)
34183ad0:	687b      	ldr	r3, [r7, #4]
34183ad2:	4313      	orrs	r3, r2
34183ad4:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34183ad8:	bf00      	nop
34183ada:	370c      	adds	r7, #12
34183adc:	46bd      	mov	sp, r7
34183ade:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ae2:	4770      	bx	lr
34183ae4:	56028000 	.word	0x56028000

34183ae8 <LL_RCC_SetETHClockSource>:
{
34183ae8:	b480      	push	{r7}
34183aea:	b083      	sub	sp, #12
34183aec:	af00      	add	r7, sp, #0
34183aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34183af0:	4b07      	ldr	r3, [pc, #28]	@ (34183b10 <LL_RCC_SetETHClockSource+0x28>)
34183af2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183af6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34183afa:	4905      	ldr	r1, [pc, #20]	@ (34183b10 <LL_RCC_SetETHClockSource+0x28>)
34183afc:	687b      	ldr	r3, [r7, #4]
34183afe:	4313      	orrs	r3, r2
34183b00:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183b04:	bf00      	nop
34183b06:	370c      	adds	r7, #12
34183b08:	46bd      	mov	sp, r7
34183b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b0e:	4770      	bx	lr
34183b10:	56028000 	.word	0x56028000

34183b14 <LL_RCC_SetETHPHYInterface>:
{
34183b14:	b480      	push	{r7}
34183b16:	b083      	sub	sp, #12
34183b18:	af00      	add	r7, sp, #0
34183b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34183b1c:	4b07      	ldr	r3, [pc, #28]	@ (34183b3c <LL_RCC_SetETHPHYInterface+0x28>)
34183b1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b22:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183b26:	4905      	ldr	r1, [pc, #20]	@ (34183b3c <LL_RCC_SetETHPHYInterface+0x28>)
34183b28:	687b      	ldr	r3, [r7, #4]
34183b2a:	4313      	orrs	r3, r2
34183b2c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183b30:	bf00      	nop
34183b32:	370c      	adds	r7, #12
34183b34:	46bd      	mov	sp, r7
34183b36:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b3a:	4770      	bx	lr
34183b3c:	56028000 	.word	0x56028000

34183b40 <LL_RCC_GetETH1PTPDivider>:
{
34183b40:	b480      	push	{r7}
34183b42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34183b44:	4b04      	ldr	r3, [pc, #16]	@ (34183b58 <LL_RCC_GetETH1PTPDivider+0x18>)
34183b46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34183b4e:	4618      	mov	r0, r3
34183b50:	46bd      	mov	sp, r7
34183b52:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b56:	4770      	bx	lr
34183b58:	56028000 	.word	0x56028000

34183b5c <LL_RCC_SetETHREFRXClockSource>:
{
34183b5c:	b480      	push	{r7}
34183b5e:	b083      	sub	sp, #12
34183b60:	af00      	add	r7, sp, #0
34183b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34183b64:	4b07      	ldr	r3, [pc, #28]	@ (34183b84 <LL_RCC_SetETHREFRXClockSource+0x28>)
34183b66:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34183b6e:	4905      	ldr	r1, [pc, #20]	@ (34183b84 <LL_RCC_SetETHREFRXClockSource+0x28>)
34183b70:	687b      	ldr	r3, [r7, #4]
34183b72:	4313      	orrs	r3, r2
34183b74:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183b78:	bf00      	nop
34183b7a:	370c      	adds	r7, #12
34183b7c:	46bd      	mov	sp, r7
34183b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b82:	4770      	bx	lr
34183b84:	56028000 	.word	0x56028000

34183b88 <LL_RCC_SetETHREFTXClockSource>:
{
34183b88:	b480      	push	{r7}
34183b8a:	b083      	sub	sp, #12
34183b8c:	af00      	add	r7, sp, #0
34183b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34183b90:	4b07      	ldr	r3, [pc, #28]	@ (34183bb0 <LL_RCC_SetETHREFTXClockSource+0x28>)
34183b92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b96:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183b9a:	4905      	ldr	r1, [pc, #20]	@ (34183bb0 <LL_RCC_SetETHREFTXClockSource+0x28>)
34183b9c:	687b      	ldr	r3, [r7, #4]
34183b9e:	4313      	orrs	r3, r2
34183ba0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183ba4:	bf00      	nop
34183ba6:	370c      	adds	r7, #12
34183ba8:	46bd      	mov	sp, r7
34183baa:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bae:	4770      	bx	lr
34183bb0:	56028000 	.word	0x56028000

34183bb4 <LL_RCC_SetFDCANClockSource>:
{
34183bb4:	b480      	push	{r7}
34183bb6:	b083      	sub	sp, #12
34183bb8:	af00      	add	r7, sp, #0
34183bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34183bbc:	4b07      	ldr	r3, [pc, #28]	@ (34183bdc <LL_RCC_SetFDCANClockSource+0x28>)
34183bbe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183bc2:	f023 0203 	bic.w	r2, r3, #3
34183bc6:	4905      	ldr	r1, [pc, #20]	@ (34183bdc <LL_RCC_SetFDCANClockSource+0x28>)
34183bc8:	687b      	ldr	r3, [r7, #4]
34183bca:	4313      	orrs	r3, r2
34183bcc:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34183bd0:	bf00      	nop
34183bd2:	370c      	adds	r7, #12
34183bd4:	46bd      	mov	sp, r7
34183bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bda:	4770      	bx	lr
34183bdc:	56028000 	.word	0x56028000

34183be0 <LL_RCC_SetFMCClockSource>:
{
34183be0:	b480      	push	{r7}
34183be2:	b083      	sub	sp, #12
34183be4:	af00      	add	r7, sp, #0
34183be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34183be8:	4b07      	ldr	r3, [pc, #28]	@ (34183c08 <LL_RCC_SetFMCClockSource+0x28>)
34183bea:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183bee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34183bf2:	4905      	ldr	r1, [pc, #20]	@ (34183c08 <LL_RCC_SetFMCClockSource+0x28>)
34183bf4:	687b      	ldr	r3, [r7, #4]
34183bf6:	4313      	orrs	r3, r2
34183bf8:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34183bfc:	bf00      	nop
34183bfe:	370c      	adds	r7, #12
34183c00:	46bd      	mov	sp, r7
34183c02:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c06:	4770      	bx	lr
34183c08:	56028000 	.word	0x56028000

34183c0c <LL_RCC_SetI2CClockSource>:
{
34183c0c:	b580      	push	{r7, lr}
34183c0e:	b082      	sub	sp, #8
34183c10:	af00      	add	r7, sp, #0
34183c12:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c14:	6878      	ldr	r0, [r7, #4]
34183c16:	f7ff feed 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183c1a:	bf00      	nop
34183c1c:	3708      	adds	r7, #8
34183c1e:	46bd      	mov	sp, r7
34183c20:	bd80      	pop	{r7, pc}

34183c22 <LL_RCC_SetI3CClockSource>:
{
34183c22:	b580      	push	{r7, lr}
34183c24:	b082      	sub	sp, #8
34183c26:	af00      	add	r7, sp, #0
34183c28:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c2a:	6878      	ldr	r0, [r7, #4]
34183c2c:	f7ff fee2 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183c30:	bf00      	nop
34183c32:	3708      	adds	r7, #8
34183c34:	46bd      	mov	sp, r7
34183c36:	bd80      	pop	{r7, pc}

34183c38 <LL_RCC_SetLPTIMClockSource>:
{
34183c38:	b580      	push	{r7, lr}
34183c3a:	b082      	sub	sp, #8
34183c3c:	af00      	add	r7, sp, #0
34183c3e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c40:	6878      	ldr	r0, [r7, #4]
34183c42:	f7ff fed7 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183c46:	bf00      	nop
34183c48:	3708      	adds	r7, #8
34183c4a:	46bd      	mov	sp, r7
34183c4c:	bd80      	pop	{r7, pc}
	...

34183c50 <LL_RCC_SetLPUARTClockSource>:
{
34183c50:	b480      	push	{r7}
34183c52:	b083      	sub	sp, #12
34183c54:	af00      	add	r7, sp, #0
34183c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34183c58:	4b07      	ldr	r3, [pc, #28]	@ (34183c78 <LL_RCC_SetLPUARTClockSource+0x28>)
34183c5a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34183c5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34183c62:	4905      	ldr	r1, [pc, #20]	@ (34183c78 <LL_RCC_SetLPUARTClockSource+0x28>)
34183c64:	687b      	ldr	r3, [r7, #4]
34183c66:	4313      	orrs	r3, r2
34183c68:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34183c6c:	bf00      	nop
34183c6e:	370c      	adds	r7, #12
34183c70:	46bd      	mov	sp, r7
34183c72:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c76:	4770      	bx	lr
34183c78:	56028000 	.word	0x56028000

34183c7c <LL_RCC_SetLTDCClockSource>:
{
34183c7c:	b480      	push	{r7}
34183c7e:	b083      	sub	sp, #12
34183c80:	af00      	add	r7, sp, #0
34183c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34183c84:	4b07      	ldr	r3, [pc, #28]	@ (34183ca4 <LL_RCC_SetLTDCClockSource+0x28>)
34183c86:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34183c8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34183c8e:	4905      	ldr	r1, [pc, #20]	@ (34183ca4 <LL_RCC_SetLTDCClockSource+0x28>)
34183c90:	687b      	ldr	r3, [r7, #4]
34183c92:	4313      	orrs	r3, r2
34183c94:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34183c98:	bf00      	nop
34183c9a:	370c      	adds	r7, #12
34183c9c:	46bd      	mov	sp, r7
34183c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ca2:	4770      	bx	lr
34183ca4:	56028000 	.word	0x56028000

34183ca8 <LL_RCC_SetMDFClockSource>:
{
34183ca8:	b480      	push	{r7}
34183caa:	b083      	sub	sp, #12
34183cac:	af00      	add	r7, sp, #0
34183cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34183cb0:	4b07      	ldr	r3, [pc, #28]	@ (34183cd0 <LL_RCC_SetMDFClockSource+0x28>)
34183cb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34183cb6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183cba:	4905      	ldr	r1, [pc, #20]	@ (34183cd0 <LL_RCC_SetMDFClockSource+0x28>)
34183cbc:	687b      	ldr	r3, [r7, #4]
34183cbe:	4313      	orrs	r3, r2
34183cc0:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34183cc4:	bf00      	nop
34183cc6:	370c      	adds	r7, #12
34183cc8:	46bd      	mov	sp, r7
34183cca:	f85d 7b04 	ldr.w	r7, [sp], #4
34183cce:	4770      	bx	lr
34183cd0:	56028000 	.word	0x56028000

34183cd4 <LL_RCC_SetOTGPHYClockSource>:
{
34183cd4:	b580      	push	{r7, lr}
34183cd6:	b082      	sub	sp, #8
34183cd8:	af00      	add	r7, sp, #0
34183cda:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183cdc:	6878      	ldr	r0, [r7, #4]
34183cde:	f7ff fe89 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183ce2:	bf00      	nop
34183ce4:	3708      	adds	r7, #8
34183ce6:	46bd      	mov	sp, r7
34183ce8:	bd80      	pop	{r7, pc}

34183cea <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34183cea:	b580      	push	{r7, lr}
34183cec:	b082      	sub	sp, #8
34183cee:	af00      	add	r7, sp, #0
34183cf0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183cf2:	6878      	ldr	r0, [r7, #4]
34183cf4:	f7ff fe7e 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183cf8:	bf00      	nop
34183cfa:	3708      	adds	r7, #8
34183cfc:	46bd      	mov	sp, r7
34183cfe:	bd80      	pop	{r7, pc}

34183d00 <LL_RCC_SetPSSIClockSource>:
{
34183d00:	b480      	push	{r7}
34183d02:	b083      	sub	sp, #12
34183d04:	af00      	add	r7, sp, #0
34183d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34183d08:	4b07      	ldr	r3, [pc, #28]	@ (34183d28 <LL_RCC_SetPSSIClockSource+0x28>)
34183d0a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183d0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34183d12:	4905      	ldr	r1, [pc, #20]	@ (34183d28 <LL_RCC_SetPSSIClockSource+0x28>)
34183d14:	687b      	ldr	r3, [r7, #4]
34183d16:	4313      	orrs	r3, r2
34183d18:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183d1c:	bf00      	nop
34183d1e:	370c      	adds	r7, #12
34183d20:	46bd      	mov	sp, r7
34183d22:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d26:	4770      	bx	lr
34183d28:	56028000 	.word	0x56028000

34183d2c <LL_RCC_SetSAIClockSource>:
{
34183d2c:	b580      	push	{r7, lr}
34183d2e:	b082      	sub	sp, #8
34183d30:	af00      	add	r7, sp, #0
34183d32:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d34:	6878      	ldr	r0, [r7, #4]
34183d36:	f7ff fe5d 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183d3a:	bf00      	nop
34183d3c:	3708      	adds	r7, #8
34183d3e:	46bd      	mov	sp, r7
34183d40:	bd80      	pop	{r7, pc}

34183d42 <LL_RCC_SetSDMMCClockSource>:
{
34183d42:	b580      	push	{r7, lr}
34183d44:	b082      	sub	sp, #8
34183d46:	af00      	add	r7, sp, #0
34183d48:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d4a:	6878      	ldr	r0, [r7, #4]
34183d4c:	f7ff fe52 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183d50:	bf00      	nop
34183d52:	3708      	adds	r7, #8
34183d54:	46bd      	mov	sp, r7
34183d56:	bd80      	pop	{r7, pc}

34183d58 <LL_RCC_SetSPDIFRXClockSource>:
{
34183d58:	b480      	push	{r7}
34183d5a:	b083      	sub	sp, #12
34183d5c:	af00      	add	r7, sp, #0
34183d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34183d60:	4b07      	ldr	r3, [pc, #28]	@ (34183d80 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34183d62:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34183d66:	f023 0207 	bic.w	r2, r3, #7
34183d6a:	4905      	ldr	r1, [pc, #20]	@ (34183d80 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34183d6c:	687b      	ldr	r3, [r7, #4]
34183d6e:	4313      	orrs	r3, r2
34183d70:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34183d74:	bf00      	nop
34183d76:	370c      	adds	r7, #12
34183d78:	46bd      	mov	sp, r7
34183d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d7e:	4770      	bx	lr
34183d80:	56028000 	.word	0x56028000

34183d84 <LL_RCC_SetSPIClockSource>:
{
34183d84:	b580      	push	{r7, lr}
34183d86:	b082      	sub	sp, #8
34183d88:	af00      	add	r7, sp, #0
34183d8a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d8c:	6878      	ldr	r0, [r7, #4]
34183d8e:	f7ff fe31 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183d92:	bf00      	nop
34183d94:	3708      	adds	r7, #8
34183d96:	46bd      	mov	sp, r7
34183d98:	bd80      	pop	{r7, pc}

34183d9a <LL_RCC_SetUSARTClockSource>:
{
34183d9a:	b580      	push	{r7, lr}
34183d9c:	b082      	sub	sp, #8
34183d9e:	af00      	add	r7, sp, #0
34183da0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183da2:	6878      	ldr	r0, [r7, #4]
34183da4:	f7ff fe26 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183da8:	bf00      	nop
34183daa:	3708      	adds	r7, #8
34183dac:	46bd      	mov	sp, r7
34183dae:	bd80      	pop	{r7, pc}

34183db0 <LL_RCC_SetXSPIClockSource>:
{
34183db0:	b580      	push	{r7, lr}
34183db2:	b082      	sub	sp, #8
34183db4:	af00      	add	r7, sp, #0
34183db6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183db8:	6878      	ldr	r0, [r7, #4]
34183dba:	f7ff fe1b 	bl	341839f4 <LL_RCC_SetClockSource>
}
34183dbe:	bf00      	nop
34183dc0:	3708      	adds	r7, #8
34183dc2:	46bd      	mov	sp, r7
34183dc4:	bd80      	pop	{r7, pc}
	...

34183dc8 <LL_RCC_GetClockSource>:
{
34183dc8:	b480      	push	{r7}
34183dca:	b085      	sub	sp, #20
34183dcc:	af00      	add	r7, sp, #0
34183dce:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34183dd0:	687b      	ldr	r3, [r7, #4]
34183dd2:	b2da      	uxtb	r2, r3
34183dd4:	4b0e      	ldr	r3, [pc, #56]	@ (34183e10 <LL_RCC_GetClockSource+0x48>)
34183dd6:	4413      	add	r3, r2
34183dd8:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34183dda:	68fb      	ldr	r3, [r7, #12]
34183ddc:	681a      	ldr	r2, [r3, #0]
34183dde:	687b      	ldr	r3, [r7, #4]
34183de0:	0e19      	lsrs	r1, r3, #24
34183de2:	687b      	ldr	r3, [r7, #4]
34183de4:	0a1b      	lsrs	r3, r3, #8
34183de6:	f003 031f 	and.w	r3, r3, #31
34183dea:	fa01 f303 	lsl.w	r3, r1, r3
34183dee:	401a      	ands	r2, r3
34183df0:	687b      	ldr	r3, [r7, #4]
34183df2:	0a1b      	lsrs	r3, r3, #8
34183df4:	f003 031f 	and.w	r3, r3, #31
34183df8:	fa22 f303 	lsr.w	r3, r2, r3
34183dfc:	041a      	lsls	r2, r3, #16
34183dfe:	687b      	ldr	r3, [r7, #4]
34183e00:	4313      	orrs	r3, r2
}
34183e02:	4618      	mov	r0, r3
34183e04:	3714      	adds	r7, #20
34183e06:	46bd      	mov	sp, r7
34183e08:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e0c:	4770      	bx	lr
34183e0e:	bf00      	nop
34183e10:	56028144 	.word	0x56028144

34183e14 <LL_RCC_GetADCClockSource>:
{
34183e14:	b480      	push	{r7}
34183e16:	b083      	sub	sp, #12
34183e18:	af00      	add	r7, sp, #0
34183e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34183e1c:	4b05      	ldr	r3, [pc, #20]	@ (34183e34 <LL_RCC_GetADCClockSource+0x20>)
34183e1e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183e22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34183e26:	4618      	mov	r0, r3
34183e28:	370c      	adds	r7, #12
34183e2a:	46bd      	mov	sp, r7
34183e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e30:	4770      	bx	lr
34183e32:	bf00      	nop
34183e34:	56028000 	.word	0x56028000

34183e38 <LL_RCC_GetADFClockSource>:
{
34183e38:	b480      	push	{r7}
34183e3a:	b083      	sub	sp, #12
34183e3c:	af00      	add	r7, sp, #0
34183e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34183e40:	4b05      	ldr	r3, [pc, #20]	@ (34183e58 <LL_RCC_GetADFClockSource+0x20>)
34183e42:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183e46:	f003 0307 	and.w	r3, r3, #7
}
34183e4a:	4618      	mov	r0, r3
34183e4c:	370c      	adds	r7, #12
34183e4e:	46bd      	mov	sp, r7
34183e50:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e54:	4770      	bx	lr
34183e56:	bf00      	nop
34183e58:	56028000 	.word	0x56028000

34183e5c <LL_RCC_GetCLKPClockSource>:
{
34183e5c:	b480      	push	{r7}
34183e5e:	b083      	sub	sp, #12
34183e60:	af00      	add	r7, sp, #0
34183e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34183e64:	4b05      	ldr	r3, [pc, #20]	@ (34183e7c <LL_RCC_GetCLKPClockSource+0x20>)
34183e66:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183e6a:	f003 0307 	and.w	r3, r3, #7
}
34183e6e:	4618      	mov	r0, r3
34183e70:	370c      	adds	r7, #12
34183e72:	46bd      	mov	sp, r7
34183e74:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e78:	4770      	bx	lr
34183e7a:	bf00      	nop
34183e7c:	56028000 	.word	0x56028000

34183e80 <LL_RCC_GetDCMIPPClockSource>:
{
34183e80:	b480      	push	{r7}
34183e82:	b083      	sub	sp, #12
34183e84:	af00      	add	r7, sp, #0
34183e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34183e88:	4b05      	ldr	r3, [pc, #20]	@ (34183ea0 <LL_RCC_GetDCMIPPClockSource+0x20>)
34183e8a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183e8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34183e92:	4618      	mov	r0, r3
34183e94:	370c      	adds	r7, #12
34183e96:	46bd      	mov	sp, r7
34183e98:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e9c:	4770      	bx	lr
34183e9e:	bf00      	nop
34183ea0:	56028000 	.word	0x56028000

34183ea4 <LL_RCC_GetETHClockSource>:
{
34183ea4:	b480      	push	{r7}
34183ea6:	b083      	sub	sp, #12
34183ea8:	af00      	add	r7, sp, #0
34183eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34183eac:	4b05      	ldr	r3, [pc, #20]	@ (34183ec4 <LL_RCC_GetETHClockSource+0x20>)
34183eae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183eb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34183eb6:	4618      	mov	r0, r3
34183eb8:	370c      	adds	r7, #12
34183eba:	46bd      	mov	sp, r7
34183ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ec0:	4770      	bx	lr
34183ec2:	bf00      	nop
34183ec4:	56028000 	.word	0x56028000

34183ec8 <LL_RCC_GetETHPTPClockSource>:
{
34183ec8:	b480      	push	{r7}
34183eca:	b083      	sub	sp, #12
34183ecc:	af00      	add	r7, sp, #0
34183ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34183ed0:	4b05      	ldr	r3, [pc, #20]	@ (34183ee8 <LL_RCC_GetETHPTPClockSource+0x20>)
34183ed2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183ed6:	f003 0303 	and.w	r3, r3, #3
}
34183eda:	4618      	mov	r0, r3
34183edc:	370c      	adds	r7, #12
34183ede:	46bd      	mov	sp, r7
34183ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ee4:	4770      	bx	lr
34183ee6:	bf00      	nop
34183ee8:	56028000 	.word	0x56028000

34183eec <LL_RCC_GetFDCANClockSource>:
{
34183eec:	b480      	push	{r7}
34183eee:	b083      	sub	sp, #12
34183ef0:	af00      	add	r7, sp, #0
34183ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34183ef4:	4b05      	ldr	r3, [pc, #20]	@ (34183f0c <LL_RCC_GetFDCANClockSource+0x20>)
34183ef6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183efa:	f003 0303 	and.w	r3, r3, #3
}
34183efe:	4618      	mov	r0, r3
34183f00:	370c      	adds	r7, #12
34183f02:	46bd      	mov	sp, r7
34183f04:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f08:	4770      	bx	lr
34183f0a:	bf00      	nop
34183f0c:	56028000 	.word	0x56028000

34183f10 <LL_RCC_GetFMCClockSource>:
{
34183f10:	b480      	push	{r7}
34183f12:	b083      	sub	sp, #12
34183f14:	af00      	add	r7, sp, #0
34183f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34183f18:	4b05      	ldr	r3, [pc, #20]	@ (34183f30 <LL_RCC_GetFMCClockSource+0x20>)
34183f1a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183f1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34183f22:	4618      	mov	r0, r3
34183f24:	370c      	adds	r7, #12
34183f26:	46bd      	mov	sp, r7
34183f28:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f2c:	4770      	bx	lr
34183f2e:	bf00      	nop
34183f30:	56028000 	.word	0x56028000

34183f34 <LL_RCC_GetI2CClockSource>:
{
34183f34:	b580      	push	{r7, lr}
34183f36:	b082      	sub	sp, #8
34183f38:	af00      	add	r7, sp, #0
34183f3a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183f3c:	6878      	ldr	r0, [r7, #4]
34183f3e:	f7ff ff43 	bl	34183dc8 <LL_RCC_GetClockSource>
34183f42:	4603      	mov	r3, r0
}
34183f44:	4618      	mov	r0, r3
34183f46:	3708      	adds	r7, #8
34183f48:	46bd      	mov	sp, r7
34183f4a:	bd80      	pop	{r7, pc}

34183f4c <LL_RCC_GetI3CClockSource>:
{
34183f4c:	b580      	push	{r7, lr}
34183f4e:	b082      	sub	sp, #8
34183f50:	af00      	add	r7, sp, #0
34183f52:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183f54:	6878      	ldr	r0, [r7, #4]
34183f56:	f7ff ff37 	bl	34183dc8 <LL_RCC_GetClockSource>
34183f5a:	4603      	mov	r3, r0
}
34183f5c:	4618      	mov	r0, r3
34183f5e:	3708      	adds	r7, #8
34183f60:	46bd      	mov	sp, r7
34183f62:	bd80      	pop	{r7, pc}

34183f64 <LL_RCC_GetLPTIMClockSource>:
{
34183f64:	b580      	push	{r7, lr}
34183f66:	b082      	sub	sp, #8
34183f68:	af00      	add	r7, sp, #0
34183f6a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183f6c:	6878      	ldr	r0, [r7, #4]
34183f6e:	f7ff ff2b 	bl	34183dc8 <LL_RCC_GetClockSource>
34183f72:	4603      	mov	r3, r0
}
34183f74:	4618      	mov	r0, r3
34183f76:	3708      	adds	r7, #8
34183f78:	46bd      	mov	sp, r7
34183f7a:	bd80      	pop	{r7, pc}

34183f7c <LL_RCC_GetLPUARTClockSource>:
{
34183f7c:	b480      	push	{r7}
34183f7e:	b083      	sub	sp, #12
34183f80:	af00      	add	r7, sp, #0
34183f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34183f84:	4b05      	ldr	r3, [pc, #20]	@ (34183f9c <LL_RCC_GetLPUARTClockSource+0x20>)
34183f86:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34183f8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34183f8e:	4618      	mov	r0, r3
34183f90:	370c      	adds	r7, #12
34183f92:	46bd      	mov	sp, r7
34183f94:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f98:	4770      	bx	lr
34183f9a:	bf00      	nop
34183f9c:	56028000 	.word	0x56028000

34183fa0 <LL_RCC_GetLTDCClockSource>:
{
34183fa0:	b480      	push	{r7}
34183fa2:	b083      	sub	sp, #12
34183fa4:	af00      	add	r7, sp, #0
34183fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34183fa8:	4b05      	ldr	r3, [pc, #20]	@ (34183fc0 <LL_RCC_GetLTDCClockSource+0x20>)
34183faa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34183fae:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34183fb2:	4618      	mov	r0, r3
34183fb4:	370c      	adds	r7, #12
34183fb6:	46bd      	mov	sp, r7
34183fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fbc:	4770      	bx	lr
34183fbe:	bf00      	nop
34183fc0:	56028000 	.word	0x56028000

34183fc4 <LL_RCC_GetMDFClockSource>:
{
34183fc4:	b480      	push	{r7}
34183fc6:	b083      	sub	sp, #12
34183fc8:	af00      	add	r7, sp, #0
34183fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34183fcc:	4b05      	ldr	r3, [pc, #20]	@ (34183fe4 <LL_RCC_GetMDFClockSource+0x20>)
34183fce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34183fd2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34183fd6:	4618      	mov	r0, r3
34183fd8:	370c      	adds	r7, #12
34183fda:	46bd      	mov	sp, r7
34183fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fe0:	4770      	bx	lr
34183fe2:	bf00      	nop
34183fe4:	56028000 	.word	0x56028000

34183fe8 <LL_RCC_GetPSSIClockSource>:
{
34183fe8:	b480      	push	{r7}
34183fea:	b083      	sub	sp, #12
34183fec:	af00      	add	r7, sp, #0
34183fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34183ff0:	4b05      	ldr	r3, [pc, #20]	@ (34184008 <LL_RCC_GetPSSIClockSource+0x20>)
34183ff2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183ff6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34183ffa:	4618      	mov	r0, r3
34183ffc:	370c      	adds	r7, #12
34183ffe:	46bd      	mov	sp, r7
34184000:	f85d 7b04 	ldr.w	r7, [sp], #4
34184004:	4770      	bx	lr
34184006:	bf00      	nop
34184008:	56028000 	.word	0x56028000

3418400c <LL_RCC_GetSAIClockSource>:
{
3418400c:	b580      	push	{r7, lr}
3418400e:	b082      	sub	sp, #8
34184010:	af00      	add	r7, sp, #0
34184012:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184014:	6878      	ldr	r0, [r7, #4]
34184016:	f7ff fed7 	bl	34183dc8 <LL_RCC_GetClockSource>
3418401a:	4603      	mov	r3, r0
}
3418401c:	4618      	mov	r0, r3
3418401e:	3708      	adds	r7, #8
34184020:	46bd      	mov	sp, r7
34184022:	bd80      	pop	{r7, pc}

34184024 <LL_RCC_GetSDMMCClockSource>:
{
34184024:	b580      	push	{r7, lr}
34184026:	b082      	sub	sp, #8
34184028:	af00      	add	r7, sp, #0
3418402a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418402c:	6878      	ldr	r0, [r7, #4]
3418402e:	f7ff fecb 	bl	34183dc8 <LL_RCC_GetClockSource>
34184032:	4603      	mov	r3, r0
}
34184034:	4618      	mov	r0, r3
34184036:	3708      	adds	r7, #8
34184038:	46bd      	mov	sp, r7
3418403a:	bd80      	pop	{r7, pc}

3418403c <LL_RCC_GetSPDIFRXClockSource>:
{
3418403c:	b480      	push	{r7}
3418403e:	b083      	sub	sp, #12
34184040:	af00      	add	r7, sp, #0
34184042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34184044:	4b05      	ldr	r3, [pc, #20]	@ (3418405c <LL_RCC_GetSPDIFRXClockSource+0x20>)
34184046:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418404a:	f003 0307 	and.w	r3, r3, #7
}
3418404e:	4618      	mov	r0, r3
34184050:	370c      	adds	r7, #12
34184052:	46bd      	mov	sp, r7
34184054:	f85d 7b04 	ldr.w	r7, [sp], #4
34184058:	4770      	bx	lr
3418405a:	bf00      	nop
3418405c:	56028000 	.word	0x56028000

34184060 <LL_RCC_GetSPIClockSource>:
{
34184060:	b580      	push	{r7, lr}
34184062:	b082      	sub	sp, #8
34184064:	af00      	add	r7, sp, #0
34184066:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184068:	6878      	ldr	r0, [r7, #4]
3418406a:	f7ff fead 	bl	34183dc8 <LL_RCC_GetClockSource>
3418406e:	4603      	mov	r3, r0
}
34184070:	4618      	mov	r0, r3
34184072:	3708      	adds	r7, #8
34184074:	46bd      	mov	sp, r7
34184076:	bd80      	pop	{r7, pc}

34184078 <LL_RCC_GetUSARTClockSource>:
{
34184078:	b580      	push	{r7, lr}
3418407a:	b082      	sub	sp, #8
3418407c:	af00      	add	r7, sp, #0
3418407e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184080:	6878      	ldr	r0, [r7, #4]
34184082:	f7ff fea1 	bl	34183dc8 <LL_RCC_GetClockSource>
34184086:	4603      	mov	r3, r0
}
34184088:	4618      	mov	r0, r3
3418408a:	3708      	adds	r7, #8
3418408c:	46bd      	mov	sp, r7
3418408e:	bd80      	pop	{r7, pc}

34184090 <LL_RCC_GetUARTClockSource>:
{
34184090:	b580      	push	{r7, lr}
34184092:	b082      	sub	sp, #8
34184094:	af00      	add	r7, sp, #0
34184096:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184098:	6878      	ldr	r0, [r7, #4]
3418409a:	f7ff fe95 	bl	34183dc8 <LL_RCC_GetClockSource>
3418409e:	4603      	mov	r3, r0
}
341840a0:	4618      	mov	r0, r3
341840a2:	3708      	adds	r7, #8
341840a4:	46bd      	mov	sp, r7
341840a6:	bd80      	pop	{r7, pc}

341840a8 <LL_RCC_GetUSBClockSource>:
{
341840a8:	b580      	push	{r7, lr}
341840aa:	b082      	sub	sp, #8
341840ac:	af00      	add	r7, sp, #0
341840ae:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341840b0:	6878      	ldr	r0, [r7, #4]
341840b2:	f7ff fe89 	bl	34183dc8 <LL_RCC_GetClockSource>
341840b6:	4603      	mov	r3, r0
}
341840b8:	4618      	mov	r0, r3
341840ba:	3708      	adds	r7, #8
341840bc:	46bd      	mov	sp, r7
341840be:	bd80      	pop	{r7, pc}

341840c0 <LL_RCC_GetXSPIClockSource>:
{
341840c0:	b580      	push	{r7, lr}
341840c2:	b082      	sub	sp, #8
341840c4:	af00      	add	r7, sp, #0
341840c6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341840c8:	6878      	ldr	r0, [r7, #4]
341840ca:	f7ff fe7d 	bl	34183dc8 <LL_RCC_GetClockSource>
341840ce:	4603      	mov	r3, r0
}
341840d0:	4618      	mov	r0, r3
341840d2:	3708      	adds	r7, #8
341840d4:	46bd      	mov	sp, r7
341840d6:	bd80      	pop	{r7, pc}

341840d8 <LL_RCC_SetRTCClockSource>:
{
341840d8:	b480      	push	{r7}
341840da:	b083      	sub	sp, #12
341840dc:	af00      	add	r7, sp, #0
341840de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
341840e0:	4b07      	ldr	r3, [pc, #28]	@ (34184100 <LL_RCC_SetRTCClockSource+0x28>)
341840e2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341840e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
341840ea:	4905      	ldr	r1, [pc, #20]	@ (34184100 <LL_RCC_SetRTCClockSource+0x28>)
341840ec:	687b      	ldr	r3, [r7, #4]
341840ee:	4313      	orrs	r3, r2
341840f0:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341840f4:	bf00      	nop
341840f6:	370c      	adds	r7, #12
341840f8:	46bd      	mov	sp, r7
341840fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341840fe:	4770      	bx	lr
34184100:	56028000 	.word	0x56028000

34184104 <LL_RCC_GetRTCClockSource>:
{
34184104:	b480      	push	{r7}
34184106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34184108:	4b04      	ldr	r3, [pc, #16]	@ (3418411c <LL_RCC_GetRTCClockSource+0x18>)
3418410a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418410e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34184112:	4618      	mov	r0, r3
34184114:	46bd      	mov	sp, r7
34184116:	f85d 7b04 	ldr.w	r7, [sp], #4
3418411a:	4770      	bx	lr
3418411c:	56028000 	.word	0x56028000

34184120 <LL_RCC_SetRTC_HSEPrescaler>:
{
34184120:	b480      	push	{r7}
34184122:	b083      	sub	sp, #12
34184124:	af00      	add	r7, sp, #0
34184126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34184128:	4b07      	ldr	r3, [pc, #28]	@ (34184148 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418412a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418412e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34184132:	4905      	ldr	r1, [pc, #20]	@ (34184148 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34184134:	687b      	ldr	r3, [r7, #4]
34184136:	4313      	orrs	r3, r2
34184138:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418413c:	bf00      	nop
3418413e:	370c      	adds	r7, #12
34184140:	46bd      	mov	sp, r7
34184142:	f85d 7b04 	ldr.w	r7, [sp], #4
34184146:	4770      	bx	lr
34184148:	56028000 	.word	0x56028000

3418414c <LL_RCC_SetTIMPrescaler>:
{
3418414c:	b480      	push	{r7}
3418414e:	b083      	sub	sp, #12
34184150:	af00      	add	r7, sp, #0
34184152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34184154:	4b07      	ldr	r3, [pc, #28]	@ (34184174 <LL_RCC_SetTIMPrescaler+0x28>)
34184156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184158:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418415c:	687b      	ldr	r3, [r7, #4]
3418415e:	061b      	lsls	r3, r3, #24
34184160:	4904      	ldr	r1, [pc, #16]	@ (34184174 <LL_RCC_SetTIMPrescaler+0x28>)
34184162:	4313      	orrs	r3, r2
34184164:	624b      	str	r3, [r1, #36]	@ 0x24
}
34184166:	bf00      	nop
34184168:	370c      	adds	r7, #12
3418416a:	46bd      	mov	sp, r7
3418416c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184170:	4770      	bx	lr
34184172:	bf00      	nop
34184174:	56028000 	.word	0x56028000

34184178 <LL_RCC_GetTIMPrescaler>:
{
34184178:	b480      	push	{r7}
3418417a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3418417c:	4b04      	ldr	r3, [pc, #16]	@ (34184190 <LL_RCC_GetTIMPrescaler+0x18>)
3418417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184180:	0e1b      	lsrs	r3, r3, #24
34184182:	f003 0303 	and.w	r3, r3, #3
}
34184186:	4618      	mov	r0, r3
34184188:	46bd      	mov	sp, r7
3418418a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418418e:	4770      	bx	lr
34184190:	56028000 	.word	0x56028000

34184194 <LL_RCC_PLL1_GetSource>:
{
34184194:	b480      	push	{r7}
34184196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34184198:	4b04      	ldr	r3, [pc, #16]	@ (341841ac <LL_RCC_PLL1_GetSource+0x18>)
3418419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418419e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341841a2:	4618      	mov	r0, r3
341841a4:	46bd      	mov	sp, r7
341841a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341841aa:	4770      	bx	lr
341841ac:	56028000 	.word	0x56028000

341841b0 <LL_RCC_PLL1_IsReady>:
{
341841b0:	b480      	push	{r7}
341841b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
341841b4:	4b07      	ldr	r3, [pc, #28]	@ (341841d4 <LL_RCC_PLL1_IsReady+0x24>)
341841b6:	685b      	ldr	r3, [r3, #4]
341841b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341841bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341841c0:	d101      	bne.n	341841c6 <LL_RCC_PLL1_IsReady+0x16>
341841c2:	2301      	movs	r3, #1
341841c4:	e000      	b.n	341841c8 <LL_RCC_PLL1_IsReady+0x18>
341841c6:	2300      	movs	r3, #0
}
341841c8:	4618      	mov	r0, r3
341841ca:	46bd      	mov	sp, r7
341841cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341841d0:	4770      	bx	lr
341841d2:	bf00      	nop
341841d4:	56028000 	.word	0x56028000

341841d8 <LL_RCC_PLL1_IsEnabledBypass>:
{
341841d8:	b480      	push	{r7}
341841da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
341841dc:	4b07      	ldr	r3, [pc, #28]	@ (341841fc <LL_RCC_PLL1_IsEnabledBypass+0x24>)
341841de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341841e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341841e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341841ea:	d101      	bne.n	341841f0 <LL_RCC_PLL1_IsEnabledBypass+0x18>
341841ec:	2301      	movs	r3, #1
341841ee:	e000      	b.n	341841f2 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341841f0:	2300      	movs	r3, #0
}
341841f2:	4618      	mov	r0, r3
341841f4:	46bd      	mov	sp, r7
341841f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341841fa:	4770      	bx	lr
341841fc:	56028000 	.word	0x56028000

34184200 <LL_RCC_PLL1_GetN>:
{
34184200:	b480      	push	{r7}
34184202:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34184204:	4b05      	ldr	r3, [pc, #20]	@ (3418421c <LL_RCC_PLL1_GetN+0x1c>)
34184206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418420a:	0a1b      	lsrs	r3, r3, #8
3418420c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184210:	4618      	mov	r0, r3
34184212:	46bd      	mov	sp, r7
34184214:	f85d 7b04 	ldr.w	r7, [sp], #4
34184218:	4770      	bx	lr
3418421a:	bf00      	nop
3418421c:	56028000 	.word	0x56028000

34184220 <LL_RCC_PLL1_GetM>:
{
34184220:	b480      	push	{r7}
34184222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34184224:	4b05      	ldr	r3, [pc, #20]	@ (3418423c <LL_RCC_PLL1_GetM+0x1c>)
34184226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418422a:	0d1b      	lsrs	r3, r3, #20
3418422c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184230:	4618      	mov	r0, r3
34184232:	46bd      	mov	sp, r7
34184234:	f85d 7b04 	ldr.w	r7, [sp], #4
34184238:	4770      	bx	lr
3418423a:	bf00      	nop
3418423c:	56028000 	.word	0x56028000

34184240 <LL_RCC_PLL1_GetP1>:
{
34184240:	b480      	push	{r7}
34184242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34184244:	4b05      	ldr	r3, [pc, #20]	@ (3418425c <LL_RCC_PLL1_GetP1+0x1c>)
34184246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418424a:	0edb      	lsrs	r3, r3, #27
3418424c:	f003 0307 	and.w	r3, r3, #7
}
34184250:	4618      	mov	r0, r3
34184252:	46bd      	mov	sp, r7
34184254:	f85d 7b04 	ldr.w	r7, [sp], #4
34184258:	4770      	bx	lr
3418425a:	bf00      	nop
3418425c:	56028000 	.word	0x56028000

34184260 <LL_RCC_PLL1_GetP2>:
{
34184260:	b480      	push	{r7}
34184262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34184264:	4b05      	ldr	r3, [pc, #20]	@ (3418427c <LL_RCC_PLL1_GetP2+0x1c>)
34184266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418426a:	0e1b      	lsrs	r3, r3, #24
3418426c:	f003 0307 	and.w	r3, r3, #7
}
34184270:	4618      	mov	r0, r3
34184272:	46bd      	mov	sp, r7
34184274:	f85d 7b04 	ldr.w	r7, [sp], #4
34184278:	4770      	bx	lr
3418427a:	bf00      	nop
3418427c:	56028000 	.word	0x56028000

34184280 <LL_RCC_PLL1P_IsEnabled>:
{
34184280:	b480      	push	{r7}
34184282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34184284:	4b07      	ldr	r3, [pc, #28]	@ (341842a4 <LL_RCC_PLL1P_IsEnabled+0x24>)
34184286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418428a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418428e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34184292:	d101      	bne.n	34184298 <LL_RCC_PLL1P_IsEnabled+0x18>
34184294:	2301      	movs	r3, #1
34184296:	e000      	b.n	3418429a <LL_RCC_PLL1P_IsEnabled+0x1a>
34184298:	2300      	movs	r3, #0
}
3418429a:	4618      	mov	r0, r3
3418429c:	46bd      	mov	sp, r7
3418429e:	f85d 7b04 	ldr.w	r7, [sp], #4
341842a2:	4770      	bx	lr
341842a4:	56028000 	.word	0x56028000

341842a8 <LL_RCC_PLL1_GetFRACN>:
{
341842a8:	b480      	push	{r7}
341842aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
341842ac:	4b04      	ldr	r3, [pc, #16]	@ (341842c0 <LL_RCC_PLL1_GetFRACN+0x18>)
341842ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341842b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341842b6:	4618      	mov	r0, r3
341842b8:	46bd      	mov	sp, r7
341842ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341842be:	4770      	bx	lr
341842c0:	56028000 	.word	0x56028000

341842c4 <LL_RCC_PLL2_GetSource>:
{
341842c4:	b480      	push	{r7}
341842c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341842c8:	4b04      	ldr	r3, [pc, #16]	@ (341842dc <LL_RCC_PLL2_GetSource+0x18>)
341842ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341842ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341842d2:	4618      	mov	r0, r3
341842d4:	46bd      	mov	sp, r7
341842d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341842da:	4770      	bx	lr
341842dc:	56028000 	.word	0x56028000

341842e0 <LL_RCC_PLL2_IsReady>:
{
341842e0:	b480      	push	{r7}
341842e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341842e4:	4b07      	ldr	r3, [pc, #28]	@ (34184304 <LL_RCC_PLL2_IsReady+0x24>)
341842e6:	685b      	ldr	r3, [r3, #4]
341842e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341842ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341842f0:	d101      	bne.n	341842f6 <LL_RCC_PLL2_IsReady+0x16>
341842f2:	2301      	movs	r3, #1
341842f4:	e000      	b.n	341842f8 <LL_RCC_PLL2_IsReady+0x18>
341842f6:	2300      	movs	r3, #0
}
341842f8:	4618      	mov	r0, r3
341842fa:	46bd      	mov	sp, r7
341842fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184300:	4770      	bx	lr
34184302:	bf00      	nop
34184304:	56028000 	.word	0x56028000

34184308 <LL_RCC_PLL2_IsEnabledBypass>:
{
34184308:	b480      	push	{r7}
3418430a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418430c:	4b07      	ldr	r3, [pc, #28]	@ (3418432c <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418431a:	d101      	bne.n	34184320 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418431c:	2301      	movs	r3, #1
3418431e:	e000      	b.n	34184322 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34184320:	2300      	movs	r3, #0
}
34184322:	4618      	mov	r0, r3
34184324:	46bd      	mov	sp, r7
34184326:	f85d 7b04 	ldr.w	r7, [sp], #4
3418432a:	4770      	bx	lr
3418432c:	56028000 	.word	0x56028000

34184330 <LL_RCC_PLL2_GetN>:
{
34184330:	b480      	push	{r7}
34184332:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34184334:	4b05      	ldr	r3, [pc, #20]	@ (3418434c <LL_RCC_PLL2_GetN+0x1c>)
34184336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418433a:	0a1b      	lsrs	r3, r3, #8
3418433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184340:	4618      	mov	r0, r3
34184342:	46bd      	mov	sp, r7
34184344:	f85d 7b04 	ldr.w	r7, [sp], #4
34184348:	4770      	bx	lr
3418434a:	bf00      	nop
3418434c:	56028000 	.word	0x56028000

34184350 <LL_RCC_PLL2_GetM>:
{
34184350:	b480      	push	{r7}
34184352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34184354:	4b05      	ldr	r3, [pc, #20]	@ (3418436c <LL_RCC_PLL2_GetM+0x1c>)
34184356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418435a:	0d1b      	lsrs	r3, r3, #20
3418435c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184360:	4618      	mov	r0, r3
34184362:	46bd      	mov	sp, r7
34184364:	f85d 7b04 	ldr.w	r7, [sp], #4
34184368:	4770      	bx	lr
3418436a:	bf00      	nop
3418436c:	56028000 	.word	0x56028000

34184370 <LL_RCC_PLL2_GetP1>:
{
34184370:	b480      	push	{r7}
34184372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34184374:	4b05      	ldr	r3, [pc, #20]	@ (3418438c <LL_RCC_PLL2_GetP1+0x1c>)
34184376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418437a:	0edb      	lsrs	r3, r3, #27
3418437c:	f003 0307 	and.w	r3, r3, #7
}
34184380:	4618      	mov	r0, r3
34184382:	46bd      	mov	sp, r7
34184384:	f85d 7b04 	ldr.w	r7, [sp], #4
34184388:	4770      	bx	lr
3418438a:	bf00      	nop
3418438c:	56028000 	.word	0x56028000

34184390 <LL_RCC_PLL2_GetP2>:
{
34184390:	b480      	push	{r7}
34184392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34184394:	4b05      	ldr	r3, [pc, #20]	@ (341843ac <LL_RCC_PLL2_GetP2+0x1c>)
34184396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418439a:	0e1b      	lsrs	r3, r3, #24
3418439c:	f003 0307 	and.w	r3, r3, #7
}
341843a0:	4618      	mov	r0, r3
341843a2:	46bd      	mov	sp, r7
341843a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341843a8:	4770      	bx	lr
341843aa:	bf00      	nop
341843ac:	56028000 	.word	0x56028000

341843b0 <LL_RCC_PLL2P_IsEnabled>:
{
341843b0:	b480      	push	{r7}
341843b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
341843b4:	4b07      	ldr	r3, [pc, #28]	@ (341843d4 <LL_RCC_PLL2P_IsEnabled+0x24>)
341843b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341843ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341843be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341843c2:	d101      	bne.n	341843c8 <LL_RCC_PLL2P_IsEnabled+0x18>
341843c4:	2301      	movs	r3, #1
341843c6:	e000      	b.n	341843ca <LL_RCC_PLL2P_IsEnabled+0x1a>
341843c8:	2300      	movs	r3, #0
}
341843ca:	4618      	mov	r0, r3
341843cc:	46bd      	mov	sp, r7
341843ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341843d2:	4770      	bx	lr
341843d4:	56028000 	.word	0x56028000

341843d8 <LL_RCC_PLL2_GetFRACN>:
{
341843d8:	b480      	push	{r7}
341843da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
341843dc:	4b04      	ldr	r3, [pc, #16]	@ (341843f0 <LL_RCC_PLL2_GetFRACN+0x18>)
341843de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341843e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341843e6:	4618      	mov	r0, r3
341843e8:	46bd      	mov	sp, r7
341843ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341843ee:	4770      	bx	lr
341843f0:	56028000 	.word	0x56028000

341843f4 <LL_RCC_PLL3_GetSource>:
{
341843f4:	b480      	push	{r7}
341843f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
341843f8:	4b04      	ldr	r3, [pc, #16]	@ (3418440c <LL_RCC_PLL3_GetSource+0x18>)
341843fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341843fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184402:	4618      	mov	r0, r3
34184404:	46bd      	mov	sp, r7
34184406:	f85d 7b04 	ldr.w	r7, [sp], #4
3418440a:	4770      	bx	lr
3418440c:	56028000 	.word	0x56028000

34184410 <LL_RCC_PLL3_IsReady>:
{
34184410:	b480      	push	{r7}
34184412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34184414:	4b07      	ldr	r3, [pc, #28]	@ (34184434 <LL_RCC_PLL3_IsReady+0x24>)
34184416:	685b      	ldr	r3, [r3, #4]
34184418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418441c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34184420:	d101      	bne.n	34184426 <LL_RCC_PLL3_IsReady+0x16>
34184422:	2301      	movs	r3, #1
34184424:	e000      	b.n	34184428 <LL_RCC_PLL3_IsReady+0x18>
34184426:	2300      	movs	r3, #0
}
34184428:	4618      	mov	r0, r3
3418442a:	46bd      	mov	sp, r7
3418442c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184430:	4770      	bx	lr
34184432:	bf00      	nop
34184434:	56028000 	.word	0x56028000

34184438 <LL_RCC_PLL3_IsEnabledBypass>:
{
34184438:	b480      	push	{r7}
3418443a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418443c:	4b07      	ldr	r3, [pc, #28]	@ (3418445c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418443e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418444a:	d101      	bne.n	34184450 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418444c:	2301      	movs	r3, #1
3418444e:	e000      	b.n	34184452 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34184450:	2300      	movs	r3, #0
}
34184452:	4618      	mov	r0, r3
34184454:	46bd      	mov	sp, r7
34184456:	f85d 7b04 	ldr.w	r7, [sp], #4
3418445a:	4770      	bx	lr
3418445c:	56028000 	.word	0x56028000

34184460 <LL_RCC_PLL3_GetN>:
{
34184460:	b480      	push	{r7}
34184462:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34184464:	4b05      	ldr	r3, [pc, #20]	@ (3418447c <LL_RCC_PLL3_GetN+0x1c>)
34184466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418446a:	0a1b      	lsrs	r3, r3, #8
3418446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184470:	4618      	mov	r0, r3
34184472:	46bd      	mov	sp, r7
34184474:	f85d 7b04 	ldr.w	r7, [sp], #4
34184478:	4770      	bx	lr
3418447a:	bf00      	nop
3418447c:	56028000 	.word	0x56028000

34184480 <LL_RCC_PLL3_GetM>:
{
34184480:	b480      	push	{r7}
34184482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34184484:	4b05      	ldr	r3, [pc, #20]	@ (3418449c <LL_RCC_PLL3_GetM+0x1c>)
34184486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418448a:	0d1b      	lsrs	r3, r3, #20
3418448c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184490:	4618      	mov	r0, r3
34184492:	46bd      	mov	sp, r7
34184494:	f85d 7b04 	ldr.w	r7, [sp], #4
34184498:	4770      	bx	lr
3418449a:	bf00      	nop
3418449c:	56028000 	.word	0x56028000

341844a0 <LL_RCC_PLL3_GetP1>:
{
341844a0:	b480      	push	{r7}
341844a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
341844a4:	4b05      	ldr	r3, [pc, #20]	@ (341844bc <LL_RCC_PLL3_GetP1+0x1c>)
341844a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341844aa:	0edb      	lsrs	r3, r3, #27
341844ac:	f003 0307 	and.w	r3, r3, #7
}
341844b0:	4618      	mov	r0, r3
341844b2:	46bd      	mov	sp, r7
341844b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341844b8:	4770      	bx	lr
341844ba:	bf00      	nop
341844bc:	56028000 	.word	0x56028000

341844c0 <LL_RCC_PLL3_GetP2>:
{
341844c0:	b480      	push	{r7}
341844c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
341844c4:	4b05      	ldr	r3, [pc, #20]	@ (341844dc <LL_RCC_PLL3_GetP2+0x1c>)
341844c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341844ca:	0e1b      	lsrs	r3, r3, #24
341844cc:	f003 0307 	and.w	r3, r3, #7
}
341844d0:	4618      	mov	r0, r3
341844d2:	46bd      	mov	sp, r7
341844d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341844d8:	4770      	bx	lr
341844da:	bf00      	nop
341844dc:	56028000 	.word	0x56028000

341844e0 <LL_RCC_PLL3P_IsEnabled>:
{
341844e0:	b480      	push	{r7}
341844e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
341844e4:	4b07      	ldr	r3, [pc, #28]	@ (34184504 <LL_RCC_PLL3P_IsEnabled+0x24>)
341844e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341844ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341844ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341844f2:	d101      	bne.n	341844f8 <LL_RCC_PLL3P_IsEnabled+0x18>
341844f4:	2301      	movs	r3, #1
341844f6:	e000      	b.n	341844fa <LL_RCC_PLL3P_IsEnabled+0x1a>
341844f8:	2300      	movs	r3, #0
}
341844fa:	4618      	mov	r0, r3
341844fc:	46bd      	mov	sp, r7
341844fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184502:	4770      	bx	lr
34184504:	56028000 	.word	0x56028000

34184508 <LL_RCC_PLL3_GetFRACN>:
{
34184508:	b480      	push	{r7}
3418450a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418450c:	4b04      	ldr	r3, [pc, #16]	@ (34184520 <LL_RCC_PLL3_GetFRACN+0x18>)
3418450e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34184512:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34184516:	4618      	mov	r0, r3
34184518:	46bd      	mov	sp, r7
3418451a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418451e:	4770      	bx	lr
34184520:	56028000 	.word	0x56028000

34184524 <LL_RCC_PLL4_GetSource>:
{
34184524:	b480      	push	{r7}
34184526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34184528:	4b04      	ldr	r3, [pc, #16]	@ (3418453c <LL_RCC_PLL4_GetSource+0x18>)
3418452a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418452e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184532:	4618      	mov	r0, r3
34184534:	46bd      	mov	sp, r7
34184536:	f85d 7b04 	ldr.w	r7, [sp], #4
3418453a:	4770      	bx	lr
3418453c:	56028000 	.word	0x56028000

34184540 <LL_RCC_PLL4_IsReady>:
{
34184540:	b480      	push	{r7}
34184542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34184544:	4b07      	ldr	r3, [pc, #28]	@ (34184564 <LL_RCC_PLL4_IsReady+0x24>)
34184546:	685b      	ldr	r3, [r3, #4]
34184548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418454c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34184550:	d101      	bne.n	34184556 <LL_RCC_PLL4_IsReady+0x16>
34184552:	2301      	movs	r3, #1
34184554:	e000      	b.n	34184558 <LL_RCC_PLL4_IsReady+0x18>
34184556:	2300      	movs	r3, #0
}
34184558:	4618      	mov	r0, r3
3418455a:	46bd      	mov	sp, r7
3418455c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184560:	4770      	bx	lr
34184562:	bf00      	nop
34184564:	56028000 	.word	0x56028000

34184568 <LL_RCC_PLL4_IsEnabledBypass>:
{
34184568:	b480      	push	{r7}
3418456a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418456c:	4b07      	ldr	r3, [pc, #28]	@ (3418458c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418456e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184572:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418457a:	d101      	bne.n	34184580 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418457c:	2301      	movs	r3, #1
3418457e:	e000      	b.n	34184582 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34184580:	2300      	movs	r3, #0
}
34184582:	4618      	mov	r0, r3
34184584:	46bd      	mov	sp, r7
34184586:	f85d 7b04 	ldr.w	r7, [sp], #4
3418458a:	4770      	bx	lr
3418458c:	56028000 	.word	0x56028000

34184590 <LL_RCC_PLL4_GetN>:
{
34184590:	b480      	push	{r7}
34184592:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34184594:	4b05      	ldr	r3, [pc, #20]	@ (341845ac <LL_RCC_PLL4_GetN+0x1c>)
34184596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418459a:	0a1b      	lsrs	r3, r3, #8
3418459c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341845a0:	4618      	mov	r0, r3
341845a2:	46bd      	mov	sp, r7
341845a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341845a8:	4770      	bx	lr
341845aa:	bf00      	nop
341845ac:	56028000 	.word	0x56028000

341845b0 <LL_RCC_PLL4_GetM>:
{
341845b0:	b480      	push	{r7}
341845b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
341845b4:	4b05      	ldr	r3, [pc, #20]	@ (341845cc <LL_RCC_PLL4_GetM+0x1c>)
341845b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341845ba:	0d1b      	lsrs	r3, r3, #20
341845bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341845c0:	4618      	mov	r0, r3
341845c2:	46bd      	mov	sp, r7
341845c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341845c8:	4770      	bx	lr
341845ca:	bf00      	nop
341845cc:	56028000 	.word	0x56028000

341845d0 <LL_RCC_PLL4_GetP1>:
{
341845d0:	b480      	push	{r7}
341845d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
341845d4:	4b05      	ldr	r3, [pc, #20]	@ (341845ec <LL_RCC_PLL4_GetP1+0x1c>)
341845d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341845da:	0edb      	lsrs	r3, r3, #27
341845dc:	f003 0307 	and.w	r3, r3, #7
}
341845e0:	4618      	mov	r0, r3
341845e2:	46bd      	mov	sp, r7
341845e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341845e8:	4770      	bx	lr
341845ea:	bf00      	nop
341845ec:	56028000 	.word	0x56028000

341845f0 <LL_RCC_PLL4_GetP2>:
{
341845f0:	b480      	push	{r7}
341845f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
341845f4:	4b05      	ldr	r3, [pc, #20]	@ (3418460c <LL_RCC_PLL4_GetP2+0x1c>)
341845f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341845fa:	0e1b      	lsrs	r3, r3, #24
341845fc:	f003 0307 	and.w	r3, r3, #7
}
34184600:	4618      	mov	r0, r3
34184602:	46bd      	mov	sp, r7
34184604:	f85d 7b04 	ldr.w	r7, [sp], #4
34184608:	4770      	bx	lr
3418460a:	bf00      	nop
3418460c:	56028000 	.word	0x56028000

34184610 <LL_RCC_PLL4P_IsEnabled>:
{
34184610:	b480      	push	{r7}
34184612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34184614:	4b07      	ldr	r3, [pc, #28]	@ (34184634 <LL_RCC_PLL4P_IsEnabled+0x24>)
34184616:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418461a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34184622:	d101      	bne.n	34184628 <LL_RCC_PLL4P_IsEnabled+0x18>
34184624:	2301      	movs	r3, #1
34184626:	e000      	b.n	3418462a <LL_RCC_PLL4P_IsEnabled+0x1a>
34184628:	2300      	movs	r3, #0
}
3418462a:	4618      	mov	r0, r3
3418462c:	46bd      	mov	sp, r7
3418462e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184632:	4770      	bx	lr
34184634:	56028000 	.word	0x56028000

34184638 <LL_RCC_PLL4_GetFRACN>:
{
34184638:	b480      	push	{r7}
3418463a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418463c:	4b04      	ldr	r3, [pc, #16]	@ (34184650 <LL_RCC_PLL4_GetFRACN+0x18>)
3418463e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34184642:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34184646:	4618      	mov	r0, r3
34184648:	46bd      	mov	sp, r7
3418464a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418464e:	4770      	bx	lr
34184650:	56028000 	.word	0x56028000

34184654 <LL_RCC_IC3_Enable>:
{
34184654:	b480      	push	{r7}
34184656:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34184658:	4b04      	ldr	r3, [pc, #16]	@ (3418466c <LL_RCC_IC3_Enable+0x18>)
3418465a:	2204      	movs	r2, #4
3418465c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184660:	bf00      	nop
34184662:	46bd      	mov	sp, r7
34184664:	f85d 7b04 	ldr.w	r7, [sp], #4
34184668:	4770      	bx	lr
3418466a:	bf00      	nop
3418466c:	56028000 	.word	0x56028000

34184670 <LL_RCC_IC3_IsEnabled>:
{
34184670:	b480      	push	{r7}
34184672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34184674:	4b07      	ldr	r3, [pc, #28]	@ (34184694 <LL_RCC_IC3_IsEnabled+0x24>)
34184676:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418467a:	f003 0304 	and.w	r3, r3, #4
3418467e:	2b04      	cmp	r3, #4
34184680:	d101      	bne.n	34184686 <LL_RCC_IC3_IsEnabled+0x16>
34184682:	2301      	movs	r3, #1
34184684:	e000      	b.n	34184688 <LL_RCC_IC3_IsEnabled+0x18>
34184686:	2300      	movs	r3, #0
}
34184688:	4618      	mov	r0, r3
3418468a:	46bd      	mov	sp, r7
3418468c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184690:	4770      	bx	lr
34184692:	bf00      	nop
34184694:	56028000 	.word	0x56028000

34184698 <LL_RCC_IC3_GetSource>:
{
34184698:	b480      	push	{r7}
3418469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3418469c:	4b04      	ldr	r3, [pc, #16]	@ (341846b0 <LL_RCC_IC3_GetSource+0x18>)
3418469e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341846a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341846a6:	4618      	mov	r0, r3
341846a8:	46bd      	mov	sp, r7
341846aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341846ae:	4770      	bx	lr
341846b0:	56028000 	.word	0x56028000

341846b4 <LL_RCC_IC3_GetDivider>:
{
341846b4:	b480      	push	{r7}
341846b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
341846b8:	4b05      	ldr	r3, [pc, #20]	@ (341846d0 <LL_RCC_IC3_GetDivider+0x1c>)
341846ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341846be:	0c1b      	lsrs	r3, r3, #16
341846c0:	b2db      	uxtb	r3, r3
341846c2:	3301      	adds	r3, #1
}
341846c4:	4618      	mov	r0, r3
341846c6:	46bd      	mov	sp, r7
341846c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341846cc:	4770      	bx	lr
341846ce:	bf00      	nop
341846d0:	56028000 	.word	0x56028000

341846d4 <LL_RCC_IC4_Enable>:
{
341846d4:	b480      	push	{r7}
341846d6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341846d8:	4b04      	ldr	r3, [pc, #16]	@ (341846ec <LL_RCC_IC4_Enable+0x18>)
341846da:	2208      	movs	r2, #8
341846dc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341846e0:	bf00      	nop
341846e2:	46bd      	mov	sp, r7
341846e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341846e8:	4770      	bx	lr
341846ea:	bf00      	nop
341846ec:	56028000 	.word	0x56028000

341846f0 <LL_RCC_IC4_IsEnabled>:
{
341846f0:	b480      	push	{r7}
341846f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
341846f4:	4b07      	ldr	r3, [pc, #28]	@ (34184714 <LL_RCC_IC4_IsEnabled+0x24>)
341846f6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341846fa:	f003 0308 	and.w	r3, r3, #8
341846fe:	2b08      	cmp	r3, #8
34184700:	d101      	bne.n	34184706 <LL_RCC_IC4_IsEnabled+0x16>
34184702:	2301      	movs	r3, #1
34184704:	e000      	b.n	34184708 <LL_RCC_IC4_IsEnabled+0x18>
34184706:	2300      	movs	r3, #0
}
34184708:	4618      	mov	r0, r3
3418470a:	46bd      	mov	sp, r7
3418470c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184710:	4770      	bx	lr
34184712:	bf00      	nop
34184714:	56028000 	.word	0x56028000

34184718 <LL_RCC_IC4_GetSource>:
{
34184718:	b480      	push	{r7}
3418471a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3418471c:	4b04      	ldr	r3, [pc, #16]	@ (34184730 <LL_RCC_IC4_GetSource+0x18>)
3418471e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184722:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184726:	4618      	mov	r0, r3
34184728:	46bd      	mov	sp, r7
3418472a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418472e:	4770      	bx	lr
34184730:	56028000 	.word	0x56028000

34184734 <LL_RCC_IC4_GetDivider>:
{
34184734:	b480      	push	{r7}
34184736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34184738:	4b05      	ldr	r3, [pc, #20]	@ (34184750 <LL_RCC_IC4_GetDivider+0x1c>)
3418473a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418473e:	0c1b      	lsrs	r3, r3, #16
34184740:	b2db      	uxtb	r3, r3
34184742:	3301      	adds	r3, #1
}
34184744:	4618      	mov	r0, r3
34184746:	46bd      	mov	sp, r7
34184748:	f85d 7b04 	ldr.w	r7, [sp], #4
3418474c:	4770      	bx	lr
3418474e:	bf00      	nop
34184750:	56028000 	.word	0x56028000

34184754 <LL_RCC_IC5_Enable>:
{
34184754:	b480      	push	{r7}
34184756:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34184758:	4b04      	ldr	r3, [pc, #16]	@ (3418476c <LL_RCC_IC5_Enable+0x18>)
3418475a:	2210      	movs	r2, #16
3418475c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184760:	bf00      	nop
34184762:	46bd      	mov	sp, r7
34184764:	f85d 7b04 	ldr.w	r7, [sp], #4
34184768:	4770      	bx	lr
3418476a:	bf00      	nop
3418476c:	56028000 	.word	0x56028000

34184770 <LL_RCC_IC5_IsEnabled>:
{
34184770:	b480      	push	{r7}
34184772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34184774:	4b07      	ldr	r3, [pc, #28]	@ (34184794 <LL_RCC_IC5_IsEnabled+0x24>)
34184776:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418477a:	f003 0310 	and.w	r3, r3, #16
3418477e:	2b10      	cmp	r3, #16
34184780:	d101      	bne.n	34184786 <LL_RCC_IC5_IsEnabled+0x16>
34184782:	2301      	movs	r3, #1
34184784:	e000      	b.n	34184788 <LL_RCC_IC5_IsEnabled+0x18>
34184786:	2300      	movs	r3, #0
}
34184788:	4618      	mov	r0, r3
3418478a:	46bd      	mov	sp, r7
3418478c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184790:	4770      	bx	lr
34184792:	bf00      	nop
34184794:	56028000 	.word	0x56028000

34184798 <LL_RCC_IC5_GetSource>:
{
34184798:	b480      	push	{r7}
3418479a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3418479c:	4b04      	ldr	r3, [pc, #16]	@ (341847b0 <LL_RCC_IC5_GetSource+0x18>)
3418479e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341847a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341847a6:	4618      	mov	r0, r3
341847a8:	46bd      	mov	sp, r7
341847aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341847ae:	4770      	bx	lr
341847b0:	56028000 	.word	0x56028000

341847b4 <LL_RCC_IC5_GetDivider>:
{
341847b4:	b480      	push	{r7}
341847b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
341847b8:	4b05      	ldr	r3, [pc, #20]	@ (341847d0 <LL_RCC_IC5_GetDivider+0x1c>)
341847ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341847be:	0c1b      	lsrs	r3, r3, #16
341847c0:	b2db      	uxtb	r3, r3
341847c2:	3301      	adds	r3, #1
}
341847c4:	4618      	mov	r0, r3
341847c6:	46bd      	mov	sp, r7
341847c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341847cc:	4770      	bx	lr
341847ce:	bf00      	nop
341847d0:	56028000 	.word	0x56028000

341847d4 <LL_RCC_IC7_Enable>:
{
341847d4:	b480      	push	{r7}
341847d6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
341847d8:	4b04      	ldr	r3, [pc, #16]	@ (341847ec <LL_RCC_IC7_Enable+0x18>)
341847da:	2240      	movs	r2, #64	@ 0x40
341847dc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341847e0:	bf00      	nop
341847e2:	46bd      	mov	sp, r7
341847e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341847e8:	4770      	bx	lr
341847ea:	bf00      	nop
341847ec:	56028000 	.word	0x56028000

341847f0 <LL_RCC_IC7_IsEnabled>:
{
341847f0:	b480      	push	{r7}
341847f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
341847f4:	4b07      	ldr	r3, [pc, #28]	@ (34184814 <LL_RCC_IC7_IsEnabled+0x24>)
341847f6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341847fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341847fe:	2b40      	cmp	r3, #64	@ 0x40
34184800:	d101      	bne.n	34184806 <LL_RCC_IC7_IsEnabled+0x16>
34184802:	2301      	movs	r3, #1
34184804:	e000      	b.n	34184808 <LL_RCC_IC7_IsEnabled+0x18>
34184806:	2300      	movs	r3, #0
}
34184808:	4618      	mov	r0, r3
3418480a:	46bd      	mov	sp, r7
3418480c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184810:	4770      	bx	lr
34184812:	bf00      	nop
34184814:	56028000 	.word	0x56028000

34184818 <LL_RCC_IC7_GetSource>:
{
34184818:	b480      	push	{r7}
3418481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3418481c:	4b04      	ldr	r3, [pc, #16]	@ (34184830 <LL_RCC_IC7_GetSource+0x18>)
3418481e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34184822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184826:	4618      	mov	r0, r3
34184828:	46bd      	mov	sp, r7
3418482a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418482e:	4770      	bx	lr
34184830:	56028000 	.word	0x56028000

34184834 <LL_RCC_IC7_GetDivider>:
{
34184834:	b480      	push	{r7}
34184836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34184838:	4b05      	ldr	r3, [pc, #20]	@ (34184850 <LL_RCC_IC7_GetDivider+0x1c>)
3418483a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418483e:	0c1b      	lsrs	r3, r3, #16
34184840:	b2db      	uxtb	r3, r3
34184842:	3301      	adds	r3, #1
}
34184844:	4618      	mov	r0, r3
34184846:	46bd      	mov	sp, r7
34184848:	f85d 7b04 	ldr.w	r7, [sp], #4
3418484c:	4770      	bx	lr
3418484e:	bf00      	nop
34184850:	56028000 	.word	0x56028000

34184854 <LL_RCC_IC8_Enable>:
{
34184854:	b480      	push	{r7}
34184856:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34184858:	4b04      	ldr	r3, [pc, #16]	@ (3418486c <LL_RCC_IC8_Enable+0x18>)
3418485a:	2280      	movs	r2, #128	@ 0x80
3418485c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184860:	bf00      	nop
34184862:	46bd      	mov	sp, r7
34184864:	f85d 7b04 	ldr.w	r7, [sp], #4
34184868:	4770      	bx	lr
3418486a:	bf00      	nop
3418486c:	56028000 	.word	0x56028000

34184870 <LL_RCC_IC8_IsEnabled>:
{
34184870:	b480      	push	{r7}
34184872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34184874:	4b07      	ldr	r3, [pc, #28]	@ (34184894 <LL_RCC_IC8_IsEnabled+0x24>)
34184876:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418487e:	2b80      	cmp	r3, #128	@ 0x80
34184880:	d101      	bne.n	34184886 <LL_RCC_IC8_IsEnabled+0x16>
34184882:	2301      	movs	r3, #1
34184884:	e000      	b.n	34184888 <LL_RCC_IC8_IsEnabled+0x18>
34184886:	2300      	movs	r3, #0
}
34184888:	4618      	mov	r0, r3
3418488a:	46bd      	mov	sp, r7
3418488c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184890:	4770      	bx	lr
34184892:	bf00      	nop
34184894:	56028000 	.word	0x56028000

34184898 <LL_RCC_IC8_GetSource>:
{
34184898:	b480      	push	{r7}
3418489a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3418489c:	4b04      	ldr	r3, [pc, #16]	@ (341848b0 <LL_RCC_IC8_GetSource+0x18>)
3418489e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341848a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341848a6:	4618      	mov	r0, r3
341848a8:	46bd      	mov	sp, r7
341848aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341848ae:	4770      	bx	lr
341848b0:	56028000 	.word	0x56028000

341848b4 <LL_RCC_IC8_GetDivider>:
{
341848b4:	b480      	push	{r7}
341848b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
341848b8:	4b05      	ldr	r3, [pc, #20]	@ (341848d0 <LL_RCC_IC8_GetDivider+0x1c>)
341848ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341848be:	0c1b      	lsrs	r3, r3, #16
341848c0:	b2db      	uxtb	r3, r3
341848c2:	3301      	adds	r3, #1
}
341848c4:	4618      	mov	r0, r3
341848c6:	46bd      	mov	sp, r7
341848c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341848cc:	4770      	bx	lr
341848ce:	bf00      	nop
341848d0:	56028000 	.word	0x56028000

341848d4 <LL_RCC_IC9_Enable>:
{
341848d4:	b480      	push	{r7}
341848d6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341848d8:	4b04      	ldr	r3, [pc, #16]	@ (341848ec <LL_RCC_IC9_Enable+0x18>)
341848da:	f44f 7280 	mov.w	r2, #256	@ 0x100
341848de:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341848e2:	bf00      	nop
341848e4:	46bd      	mov	sp, r7
341848e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341848ea:	4770      	bx	lr
341848ec:	56028000 	.word	0x56028000

341848f0 <LL_RCC_IC9_IsEnabled>:
{
341848f0:	b480      	push	{r7}
341848f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
341848f4:	4b07      	ldr	r3, [pc, #28]	@ (34184914 <LL_RCC_IC9_IsEnabled+0x24>)
341848f6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341848fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341848fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184902:	d101      	bne.n	34184908 <LL_RCC_IC9_IsEnabled+0x18>
34184904:	2301      	movs	r3, #1
34184906:	e000      	b.n	3418490a <LL_RCC_IC9_IsEnabled+0x1a>
34184908:	2300      	movs	r3, #0
}
3418490a:	4618      	mov	r0, r3
3418490c:	46bd      	mov	sp, r7
3418490e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184912:	4770      	bx	lr
34184914:	56028000 	.word	0x56028000

34184918 <LL_RCC_IC9_GetSource>:
{
34184918:	b480      	push	{r7}
3418491a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3418491c:	4b04      	ldr	r3, [pc, #16]	@ (34184930 <LL_RCC_IC9_GetSource+0x18>)
3418491e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34184922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184926:	4618      	mov	r0, r3
34184928:	46bd      	mov	sp, r7
3418492a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418492e:	4770      	bx	lr
34184930:	56028000 	.word	0x56028000

34184934 <LL_RCC_IC9_GetDivider>:
{
34184934:	b480      	push	{r7}
34184936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34184938:	4b05      	ldr	r3, [pc, #20]	@ (34184950 <LL_RCC_IC9_GetDivider+0x1c>)
3418493a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418493e:	0c1b      	lsrs	r3, r3, #16
34184940:	b2db      	uxtb	r3, r3
34184942:	3301      	adds	r3, #1
}
34184944:	4618      	mov	r0, r3
34184946:	46bd      	mov	sp, r7
34184948:	f85d 7b04 	ldr.w	r7, [sp], #4
3418494c:	4770      	bx	lr
3418494e:	bf00      	nop
34184950:	56028000 	.word	0x56028000

34184954 <LL_RCC_IC10_Enable>:
{
34184954:	b480      	push	{r7}
34184956:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34184958:	4b04      	ldr	r3, [pc, #16]	@ (3418496c <LL_RCC_IC10_Enable+0x18>)
3418495a:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418495e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184962:	bf00      	nop
34184964:	46bd      	mov	sp, r7
34184966:	f85d 7b04 	ldr.w	r7, [sp], #4
3418496a:	4770      	bx	lr
3418496c:	56028000 	.word	0x56028000

34184970 <LL_RCC_IC10_IsEnabled>:
{
34184970:	b480      	push	{r7}
34184972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34184974:	4b07      	ldr	r3, [pc, #28]	@ (34184994 <LL_RCC_IC10_IsEnabled+0x24>)
34184976:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418497a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418497e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34184982:	d101      	bne.n	34184988 <LL_RCC_IC10_IsEnabled+0x18>
34184984:	2301      	movs	r3, #1
34184986:	e000      	b.n	3418498a <LL_RCC_IC10_IsEnabled+0x1a>
34184988:	2300      	movs	r3, #0
}
3418498a:	4618      	mov	r0, r3
3418498c:	46bd      	mov	sp, r7
3418498e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184992:	4770      	bx	lr
34184994:	56028000 	.word	0x56028000

34184998 <LL_RCC_IC10_GetSource>:
{
34184998:	b480      	push	{r7}
3418499a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3418499c:	4b04      	ldr	r3, [pc, #16]	@ (341849b0 <LL_RCC_IC10_GetSource+0x18>)
3418499e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341849a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341849a6:	4618      	mov	r0, r3
341849a8:	46bd      	mov	sp, r7
341849aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341849ae:	4770      	bx	lr
341849b0:	56028000 	.word	0x56028000

341849b4 <LL_RCC_IC10_GetDivider>:
{
341849b4:	b480      	push	{r7}
341849b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
341849b8:	4b05      	ldr	r3, [pc, #20]	@ (341849d0 <LL_RCC_IC10_GetDivider+0x1c>)
341849ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341849be:	0c1b      	lsrs	r3, r3, #16
341849c0:	b2db      	uxtb	r3, r3
341849c2:	3301      	adds	r3, #1
}
341849c4:	4618      	mov	r0, r3
341849c6:	46bd      	mov	sp, r7
341849c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341849cc:	4770      	bx	lr
341849ce:	bf00      	nop
341849d0:	56028000 	.word	0x56028000

341849d4 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
341849d4:	b480      	push	{r7}
341849d6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
341849d8:	4b04      	ldr	r3, [pc, #16]	@ (341849ec <LL_RCC_IC12_Enable+0x18>)
341849da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341849de:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341849e2:	bf00      	nop
341849e4:	46bd      	mov	sp, r7
341849e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341849ea:	4770      	bx	lr
341849ec:	56028000 	.word	0x56028000

341849f0 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
341849f0:	b480      	push	{r7}
341849f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
341849f4:	4b07      	ldr	r3, [pc, #28]	@ (34184a14 <LL_RCC_IC12_IsEnabled+0x24>)
341849f6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341849fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341849fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34184a02:	d101      	bne.n	34184a08 <LL_RCC_IC12_IsEnabled+0x18>
34184a04:	2301      	movs	r3, #1
34184a06:	e000      	b.n	34184a0a <LL_RCC_IC12_IsEnabled+0x1a>
34184a08:	2300      	movs	r3, #0
}
34184a0a:	4618      	mov	r0, r3
34184a0c:	46bd      	mov	sp, r7
34184a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a12:	4770      	bx	lr
34184a14:	56028000 	.word	0x56028000

34184a18 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34184a18:	b480      	push	{r7}
34184a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34184a1c:	4b04      	ldr	r3, [pc, #16]	@ (34184a30 <LL_RCC_IC12_GetSource+0x18>)
34184a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34184a22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184a26:	4618      	mov	r0, r3
34184a28:	46bd      	mov	sp, r7
34184a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a2e:	4770      	bx	lr
34184a30:	56028000 	.word	0x56028000

34184a34 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34184a34:	b480      	push	{r7}
34184a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34184a38:	4b05      	ldr	r3, [pc, #20]	@ (34184a50 <LL_RCC_IC12_GetDivider+0x1c>)
34184a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34184a3e:	0c1b      	lsrs	r3, r3, #16
34184a40:	b2db      	uxtb	r3, r3
34184a42:	3301      	adds	r3, #1
}
34184a44:	4618      	mov	r0, r3
34184a46:	46bd      	mov	sp, r7
34184a48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a4c:	4770      	bx	lr
34184a4e:	bf00      	nop
34184a50:	56028000 	.word	0x56028000

34184a54 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34184a54:	b480      	push	{r7}
34184a56:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34184a58:	4b04      	ldr	r3, [pc, #16]	@ (34184a6c <LL_RCC_IC13_Enable+0x18>)
34184a5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34184a5e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184a62:	bf00      	nop
34184a64:	46bd      	mov	sp, r7
34184a66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a6a:	4770      	bx	lr
34184a6c:	56028000 	.word	0x56028000

34184a70 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34184a70:	b480      	push	{r7}
34184a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34184a74:	4b07      	ldr	r3, [pc, #28]	@ (34184a94 <LL_RCC_IC13_IsEnabled+0x24>)
34184a76:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34184a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34184a82:	d101      	bne.n	34184a88 <LL_RCC_IC13_IsEnabled+0x18>
34184a84:	2301      	movs	r3, #1
34184a86:	e000      	b.n	34184a8a <LL_RCC_IC13_IsEnabled+0x1a>
34184a88:	2300      	movs	r3, #0
}
34184a8a:	4618      	mov	r0, r3
34184a8c:	46bd      	mov	sp, r7
34184a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a92:	4770      	bx	lr
34184a94:	56028000 	.word	0x56028000

34184a98 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34184a98:	b480      	push	{r7}
34184a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34184a9c:	4b04      	ldr	r3, [pc, #16]	@ (34184ab0 <LL_RCC_IC13_GetSource+0x18>)
34184a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34184aa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184aa6:	4618      	mov	r0, r3
34184aa8:	46bd      	mov	sp, r7
34184aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aae:	4770      	bx	lr
34184ab0:	56028000 	.word	0x56028000

34184ab4 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34184ab4:	b480      	push	{r7}
34184ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34184ab8:	4b05      	ldr	r3, [pc, #20]	@ (34184ad0 <LL_RCC_IC13_GetDivider+0x1c>)
34184aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34184abe:	0c1b      	lsrs	r3, r3, #16
34184ac0:	b2db      	uxtb	r3, r3
34184ac2:	3301      	adds	r3, #1
}
34184ac4:	4618      	mov	r0, r3
34184ac6:	46bd      	mov	sp, r7
34184ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184acc:	4770      	bx	lr
34184ace:	bf00      	nop
34184ad0:	56028000 	.word	0x56028000

34184ad4 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34184ad4:	b480      	push	{r7}
34184ad6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184ad8:	4b04      	ldr	r3, [pc, #16]	@ (34184aec <LL_RCC_IC14_Enable+0x18>)
34184ada:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34184ade:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184ae2:	bf00      	nop
34184ae4:	46bd      	mov	sp, r7
34184ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aea:	4770      	bx	lr
34184aec:	56028000 	.word	0x56028000

34184af0 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34184af0:	b480      	push	{r7}
34184af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34184af4:	4b07      	ldr	r3, [pc, #28]	@ (34184b14 <LL_RCC_IC14_IsEnabled+0x24>)
34184af6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34184afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34184b02:	d101      	bne.n	34184b08 <LL_RCC_IC14_IsEnabled+0x18>
34184b04:	2301      	movs	r3, #1
34184b06:	e000      	b.n	34184b0a <LL_RCC_IC14_IsEnabled+0x1a>
34184b08:	2300      	movs	r3, #0
}
34184b0a:	4618      	mov	r0, r3
34184b0c:	46bd      	mov	sp, r7
34184b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b12:	4770      	bx	lr
34184b14:	56028000 	.word	0x56028000

34184b18 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34184b18:	b480      	push	{r7}
34184b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34184b1c:	4b04      	ldr	r3, [pc, #16]	@ (34184b30 <LL_RCC_IC14_GetSource+0x18>)
34184b1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34184b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184b26:	4618      	mov	r0, r3
34184b28:	46bd      	mov	sp, r7
34184b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b2e:	4770      	bx	lr
34184b30:	56028000 	.word	0x56028000

34184b34 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34184b34:	b480      	push	{r7}
34184b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34184b38:	4b05      	ldr	r3, [pc, #20]	@ (34184b50 <LL_RCC_IC14_GetDivider+0x1c>)
34184b3a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34184b3e:	0c1b      	lsrs	r3, r3, #16
34184b40:	b2db      	uxtb	r3, r3
34184b42:	3301      	adds	r3, #1
}
34184b44:	4618      	mov	r0, r3
34184b46:	46bd      	mov	sp, r7
34184b48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b4c:	4770      	bx	lr
34184b4e:	bf00      	nop
34184b50:	56028000 	.word	0x56028000

34184b54 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34184b54:	b480      	push	{r7}
34184b56:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34184b58:	4b04      	ldr	r3, [pc, #16]	@ (34184b6c <LL_RCC_IC15_Enable+0x18>)
34184b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34184b5e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184b62:	bf00      	nop
34184b64:	46bd      	mov	sp, r7
34184b66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b6a:	4770      	bx	lr
34184b6c:	56028000 	.word	0x56028000

34184b70 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34184b70:	b480      	push	{r7}
34184b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34184b74:	4b07      	ldr	r3, [pc, #28]	@ (34184b94 <LL_RCC_IC15_IsEnabled+0x24>)
34184b76:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34184b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34184b82:	d101      	bne.n	34184b88 <LL_RCC_IC15_IsEnabled+0x18>
34184b84:	2301      	movs	r3, #1
34184b86:	e000      	b.n	34184b8a <LL_RCC_IC15_IsEnabled+0x1a>
34184b88:	2300      	movs	r3, #0
}
34184b8a:	4618      	mov	r0, r3
34184b8c:	46bd      	mov	sp, r7
34184b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b92:	4770      	bx	lr
34184b94:	56028000 	.word	0x56028000

34184b98 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34184b98:	b480      	push	{r7}
34184b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34184b9c:	4b04      	ldr	r3, [pc, #16]	@ (34184bb0 <LL_RCC_IC15_GetSource+0x18>)
34184b9e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34184ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184ba6:	4618      	mov	r0, r3
34184ba8:	46bd      	mov	sp, r7
34184baa:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bae:	4770      	bx	lr
34184bb0:	56028000 	.word	0x56028000

34184bb4 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34184bb4:	b480      	push	{r7}
34184bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34184bb8:	4b05      	ldr	r3, [pc, #20]	@ (34184bd0 <LL_RCC_IC15_GetDivider+0x1c>)
34184bba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34184bbe:	0c1b      	lsrs	r3, r3, #16
34184bc0:	b2db      	uxtb	r3, r3
34184bc2:	3301      	adds	r3, #1
}
34184bc4:	4618      	mov	r0, r3
34184bc6:	46bd      	mov	sp, r7
34184bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bcc:	4770      	bx	lr
34184bce:	bf00      	nop
34184bd0:	56028000 	.word	0x56028000

34184bd4 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34184bd4:	b480      	push	{r7}
34184bd6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34184bd8:	4b04      	ldr	r3, [pc, #16]	@ (34184bec <LL_RCC_IC16_Enable+0x18>)
34184bda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34184bde:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184be2:	bf00      	nop
34184be4:	46bd      	mov	sp, r7
34184be6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bea:	4770      	bx	lr
34184bec:	56028000 	.word	0x56028000

34184bf0 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34184bf0:	b480      	push	{r7}
34184bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34184bf4:	4b07      	ldr	r3, [pc, #28]	@ (34184c14 <LL_RCC_IC16_IsEnabled+0x24>)
34184bf6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34184bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34184c02:	d101      	bne.n	34184c08 <LL_RCC_IC16_IsEnabled+0x18>
34184c04:	2301      	movs	r3, #1
34184c06:	e000      	b.n	34184c0a <LL_RCC_IC16_IsEnabled+0x1a>
34184c08:	2300      	movs	r3, #0
}
34184c0a:	4618      	mov	r0, r3
34184c0c:	46bd      	mov	sp, r7
34184c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c12:	4770      	bx	lr
34184c14:	56028000 	.word	0x56028000

34184c18 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34184c18:	b480      	push	{r7}
34184c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34184c1c:	4b04      	ldr	r3, [pc, #16]	@ (34184c30 <LL_RCC_IC16_GetSource+0x18>)
34184c1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34184c22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184c26:	4618      	mov	r0, r3
34184c28:	46bd      	mov	sp, r7
34184c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c2e:	4770      	bx	lr
34184c30:	56028000 	.word	0x56028000

34184c34 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34184c34:	b480      	push	{r7}
34184c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34184c38:	4b05      	ldr	r3, [pc, #20]	@ (34184c50 <LL_RCC_IC16_GetDivider+0x1c>)
34184c3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34184c3e:	0c1b      	lsrs	r3, r3, #16
34184c40:	b2db      	uxtb	r3, r3
34184c42:	3301      	adds	r3, #1
}
34184c44:	4618      	mov	r0, r3
34184c46:	46bd      	mov	sp, r7
34184c48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c4c:	4770      	bx	lr
34184c4e:	bf00      	nop
34184c50:	56028000 	.word	0x56028000

34184c54 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34184c54:	b480      	push	{r7}
34184c56:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34184c58:	4b04      	ldr	r3, [pc, #16]	@ (34184c6c <LL_RCC_IC17_Enable+0x18>)
34184c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34184c5e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184c62:	bf00      	nop
34184c64:	46bd      	mov	sp, r7
34184c66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c6a:	4770      	bx	lr
34184c6c:	56028000 	.word	0x56028000

34184c70 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34184c70:	b480      	push	{r7}
34184c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34184c74:	4b07      	ldr	r3, [pc, #28]	@ (34184c94 <LL_RCC_IC17_IsEnabled+0x24>)
34184c76:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34184c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184c82:	d101      	bne.n	34184c88 <LL_RCC_IC17_IsEnabled+0x18>
34184c84:	2301      	movs	r3, #1
34184c86:	e000      	b.n	34184c8a <LL_RCC_IC17_IsEnabled+0x1a>
34184c88:	2300      	movs	r3, #0
}
34184c8a:	4618      	mov	r0, r3
34184c8c:	46bd      	mov	sp, r7
34184c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c92:	4770      	bx	lr
34184c94:	56028000 	.word	0x56028000

34184c98 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34184c98:	b480      	push	{r7}
34184c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34184c9c:	4b04      	ldr	r3, [pc, #16]	@ (34184cb0 <LL_RCC_IC17_GetSource+0x18>)
34184c9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34184ca2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184ca6:	4618      	mov	r0, r3
34184ca8:	46bd      	mov	sp, r7
34184caa:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cae:	4770      	bx	lr
34184cb0:	56028000 	.word	0x56028000

34184cb4 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34184cb4:	b480      	push	{r7}
34184cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34184cb8:	4b05      	ldr	r3, [pc, #20]	@ (34184cd0 <LL_RCC_IC17_GetDivider+0x1c>)
34184cba:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34184cbe:	0c1b      	lsrs	r3, r3, #16
34184cc0:	b2db      	uxtb	r3, r3
34184cc2:	3301      	adds	r3, #1
}
34184cc4:	4618      	mov	r0, r3
34184cc6:	46bd      	mov	sp, r7
34184cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ccc:	4770      	bx	lr
34184cce:	bf00      	nop
34184cd0:	56028000 	.word	0x56028000

34184cd4 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34184cd4:	b480      	push	{r7}
34184cd6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34184cd8:	4b04      	ldr	r3, [pc, #16]	@ (34184cec <LL_RCC_IC18_Enable+0x18>)
34184cda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34184cde:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184ce2:	bf00      	nop
34184ce4:	46bd      	mov	sp, r7
34184ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cea:	4770      	bx	lr
34184cec:	56028000 	.word	0x56028000

34184cf0 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34184cf0:	b480      	push	{r7}
34184cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34184cf4:	4b07      	ldr	r3, [pc, #28]	@ (34184d14 <LL_RCC_IC18_IsEnabled+0x24>)
34184cf6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184d02:	d101      	bne.n	34184d08 <LL_RCC_IC18_IsEnabled+0x18>
34184d04:	2301      	movs	r3, #1
34184d06:	e000      	b.n	34184d0a <LL_RCC_IC18_IsEnabled+0x1a>
34184d08:	2300      	movs	r3, #0
}
34184d0a:	4618      	mov	r0, r3
34184d0c:	46bd      	mov	sp, r7
34184d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d12:	4770      	bx	lr
34184d14:	56028000 	.word	0x56028000

34184d18 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34184d18:	b480      	push	{r7}
34184d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34184d1c:	4b04      	ldr	r3, [pc, #16]	@ (34184d30 <LL_RCC_IC18_GetSource+0x18>)
34184d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34184d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184d26:	4618      	mov	r0, r3
34184d28:	46bd      	mov	sp, r7
34184d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d2e:	4770      	bx	lr
34184d30:	56028000 	.word	0x56028000

34184d34 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34184d34:	b480      	push	{r7}
34184d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34184d38:	4b05      	ldr	r3, [pc, #20]	@ (34184d50 <LL_RCC_IC18_GetDivider+0x1c>)
34184d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34184d3e:	0c1b      	lsrs	r3, r3, #16
34184d40:	b2db      	uxtb	r3, r3
34184d42:	3301      	adds	r3, #1
}
34184d44:	4618      	mov	r0, r3
34184d46:	46bd      	mov	sp, r7
34184d48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d4c:	4770      	bx	lr
34184d4e:	bf00      	nop
34184d50:	56028000 	.word	0x56028000

34184d54 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34184d54:	b480      	push	{r7}
34184d56:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34184d58:	4b04      	ldr	r3, [pc, #16]	@ (34184d6c <LL_RCC_IC19_Enable+0x18>)
34184d5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34184d5e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184d62:	bf00      	nop
34184d64:	46bd      	mov	sp, r7
34184d66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d6a:	4770      	bx	lr
34184d6c:	56028000 	.word	0x56028000

34184d70 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34184d70:	b480      	push	{r7}
34184d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34184d74:	4b07      	ldr	r3, [pc, #28]	@ (34184d94 <LL_RCC_IC19_IsEnabled+0x24>)
34184d76:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34184d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34184d82:	d101      	bne.n	34184d88 <LL_RCC_IC19_IsEnabled+0x18>
34184d84:	2301      	movs	r3, #1
34184d86:	e000      	b.n	34184d8a <LL_RCC_IC19_IsEnabled+0x1a>
34184d88:	2300      	movs	r3, #0
}
34184d8a:	4618      	mov	r0, r3
34184d8c:	46bd      	mov	sp, r7
34184d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d92:	4770      	bx	lr
34184d94:	56028000 	.word	0x56028000

34184d98 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34184d98:	b480      	push	{r7}
34184d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34184d9c:	4b04      	ldr	r3, [pc, #16]	@ (34184db0 <LL_RCC_IC19_GetSource+0x18>)
34184d9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34184da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184da6:	4618      	mov	r0, r3
34184da8:	46bd      	mov	sp, r7
34184daa:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dae:	4770      	bx	lr
34184db0:	56028000 	.word	0x56028000

34184db4 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34184db4:	b480      	push	{r7}
34184db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34184db8:	4b05      	ldr	r3, [pc, #20]	@ (34184dd0 <LL_RCC_IC19_GetDivider+0x1c>)
34184dba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34184dbe:	0c1b      	lsrs	r3, r3, #16
34184dc0:	b2db      	uxtb	r3, r3
34184dc2:	3301      	adds	r3, #1
}
34184dc4:	4618      	mov	r0, r3
34184dc6:	46bd      	mov	sp, r7
34184dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dcc:	4770      	bx	lr
34184dce:	bf00      	nop
34184dd0:	56028000 	.word	0x56028000

34184dd4 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34184dd4:	b480      	push	{r7}
34184dd6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34184dd8:	4b04      	ldr	r3, [pc, #16]	@ (34184dec <LL_RCC_IC20_Enable+0x18>)
34184dda:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34184dde:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184de2:	bf00      	nop
34184de4:	46bd      	mov	sp, r7
34184de6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dea:	4770      	bx	lr
34184dec:	56028000 	.word	0x56028000

34184df0 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34184df0:	b480      	push	{r7}
34184df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34184df4:	4b07      	ldr	r3, [pc, #28]	@ (34184e14 <LL_RCC_IC20_IsEnabled+0x24>)
34184df6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34184dfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34184e02:	d101      	bne.n	34184e08 <LL_RCC_IC20_IsEnabled+0x18>
34184e04:	2301      	movs	r3, #1
34184e06:	e000      	b.n	34184e0a <LL_RCC_IC20_IsEnabled+0x1a>
34184e08:	2300      	movs	r3, #0
}
34184e0a:	4618      	mov	r0, r3
34184e0c:	46bd      	mov	sp, r7
34184e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e12:	4770      	bx	lr
34184e14:	56028000 	.word	0x56028000

34184e18 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34184e18:	b480      	push	{r7}
34184e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34184e1c:	4b04      	ldr	r3, [pc, #16]	@ (34184e30 <LL_RCC_IC20_GetSource+0x18>)
34184e1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34184e22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184e26:	4618      	mov	r0, r3
34184e28:	46bd      	mov	sp, r7
34184e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e2e:	4770      	bx	lr
34184e30:	56028000 	.word	0x56028000

34184e34 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34184e34:	b480      	push	{r7}
34184e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34184e38:	4b05      	ldr	r3, [pc, #20]	@ (34184e50 <LL_RCC_IC20_GetDivider+0x1c>)
34184e3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34184e3e:	0c1b      	lsrs	r3, r3, #16
34184e40:	b2db      	uxtb	r3, r3
34184e42:	3301      	adds	r3, #1
}
34184e44:	4618      	mov	r0, r3
34184e46:	46bd      	mov	sp, r7
34184e48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e4c:	4770      	bx	lr
34184e4e:	bf00      	nop
34184e50:	56028000 	.word	0x56028000

34184e54 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34184e54:	b480      	push	{r7}
34184e56:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34184e58:	4b04      	ldr	r3, [pc, #16]	@ (34184e6c <LL_RCC_CLKP_Enable+0x18>)
34184e5a:	2240      	movs	r2, #64	@ 0x40
34184e5c:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34184e60:	bf00      	nop
34184e62:	46bd      	mov	sp, r7
34184e64:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e68:	4770      	bx	lr
34184e6a:	bf00      	nop
34184e6c:	56028000 	.word	0x56028000

34184e70 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34184e70:	b480      	push	{r7}
34184e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34184e74:	4b07      	ldr	r3, [pc, #28]	@ (34184e94 <LL_RCC_CLKP_IsEnabled+0x24>)
34184e76:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34184e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34184e7e:	2b40      	cmp	r3, #64	@ 0x40
34184e80:	d101      	bne.n	34184e86 <LL_RCC_CLKP_IsEnabled+0x16>
34184e82:	2301      	movs	r3, #1
34184e84:	e000      	b.n	34184e88 <LL_RCC_CLKP_IsEnabled+0x18>
34184e86:	2300      	movs	r3, #0
}
34184e88:	4618      	mov	r0, r3
34184e8a:	46bd      	mov	sp, r7
34184e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e90:	4770      	bx	lr
34184e92:	bf00      	nop
34184e94:	56028000 	.word	0x56028000

34184e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34184e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34184e9c:	b0f2      	sub	sp, #456	@ 0x1c8
34184e9e:	af00      	add	r7, sp, #0
34184ea0:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34184ea4:	2300      	movs	r3, #0
34184ea6:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34184eaa:	2300      	movs	r3, #0
34184eac:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34184eb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
34184eb8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
34184ebc:	2500      	movs	r5, #0
34184ebe:	ea54 0305 	orrs.w	r3, r4, r5
34184ec2:	d06c      	beq.n	34184f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34184ec4:	f7ff f91e 	bl	34184104 <LL_RCC_GetRTCClockSource>
34184ec8:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34184ecc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34184ed0:	2b00      	cmp	r3, #0
34184ed2:	d018      	beq.n	34184f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
34184ed4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ed8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184edc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34184ee0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34184ee4:	4293      	cmp	r3, r2
34184ee6:	d00e      	beq.n	34184f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34184ee8:	4bc3      	ldr	r3, [pc, #780]	@ (341851f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184eec:	4ac2      	ldr	r2, [pc, #776]	@ (341851f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184eee:	f043 0301 	orr.w	r3, r3, #1
34184ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34184ef4:	4bc0      	ldr	r3, [pc, #768]	@ (341851f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184ef8:	f003 0301 	and.w	r3, r3, #1
34184efc:	2b00      	cmp	r3, #0
34184efe:	d102      	bne.n	34184f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34184f00:	2301      	movs	r3, #1
34184f02:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34184f06:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184f0a:	2b00      	cmp	r3, #0
34184f0c:	d143      	bne.n	34184f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34184f0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f12:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184f1a:	d117      	bne.n	34184f4c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34184f1c:	f7fc fb86 	bl	3418162c <HAL_GetTick>
34184f20:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34184f24:	e00d      	b.n	34184f42 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34184f26:	f7fc fb81 	bl	3418162c <HAL_GetTick>
34184f2a:	4602      	mov	r2, r0
34184f2c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34184f30:	1ad2      	subs	r2, r2, r3
34184f32:	f241 3388 	movw	r3, #5000	@ 0x1388
34184f36:	429a      	cmp	r2, r3
34184f38:	d903      	bls.n	34184f42 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
34184f3a:	2303      	movs	r3, #3
34184f3c:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34184f40:	e004      	b.n	34184f4c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
34184f42:	f7fe fcf1 	bl	34183928 <LL_RCC_LSE_IsReady>
34184f46:	4603      	mov	r3, r0
34184f48:	2b00      	cmp	r3, #0
34184f4a:	d0ec      	beq.n	34184f26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34184f4c:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184f50:	2b00      	cmp	r3, #0
34184f52:	d11b      	bne.n	34184f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34184f54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f58:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34184f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34184f64:	d108      	bne.n	34184f78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
34184f66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f6a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34184f72:	4618      	mov	r0, r3
34184f74:	f7ff f8d4 	bl	34184120 <LL_RCC_SetRTC_HSEPrescaler>
34184f78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f7c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34184f84:	4618      	mov	r0, r3
34184f86:	f7ff f8a7 	bl	341840d8 <LL_RCC_SetRTCClockSource>
34184f8a:	e008      	b.n	34184f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34184f8c:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184f90:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34184f94:	e003      	b.n	34184f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34184f96:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184f9a:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34184f9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
34184fa6:	f002 0804 	and.w	r8, r2, #4
34184faa:	f04f 0900 	mov.w	r9, #0
34184fae:	ea58 0309 	orrs.w	r3, r8, r9
34184fb2:	f000 809b 	beq.w	341850ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34184fb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184fbe:	2b04      	cmp	r3, #4
34184fc0:	d116      	bne.n	34184ff0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34184fc2:	4b8e      	ldr	r3, [pc, #568]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34184fc8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34184fcc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34184fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34184fd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184fdc:	3b01      	subs	r3, #1
34184fde:	041b      	lsls	r3, r3, #16
34184fe0:	4313      	orrs	r3, r2
34184fe2:	4a86      	ldr	r2, [pc, #536]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184fe4:	430b      	orrs	r3, r1
34184fe6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34184fea:	f7ff fbb3 	bl	34184754 <LL_RCC_IC5_Enable>
34184fee:	e076      	b.n	341850de <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34184ff0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ff4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184ff8:	2b05      	cmp	r3, #5
34184ffa:	d116      	bne.n	3418502a <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34184ffc:	4b7f      	ldr	r3, [pc, #508]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34184ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185002:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185006:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418500a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418500e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185016:	3b01      	subs	r3, #1
34185018:	041b      	lsls	r3, r3, #16
3418501a:	4313      	orrs	r3, r2
3418501c:	4a77      	ldr	r2, [pc, #476]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418501e:	430b      	orrs	r3, r1
34185020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185024:	f7ff fc96 	bl	34184954 <LL_RCC_IC10_Enable>
34185028:	e059      	b.n	341850de <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3418502a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418502e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185032:	2b06      	cmp	r3, #6
34185034:	d116      	bne.n	34185064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185036:	4b71      	ldr	r3, [pc, #452]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185038:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418503c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185040:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185048:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418504a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418504e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185050:	3b01      	subs	r3, #1
34185052:	041b      	lsls	r3, r3, #16
34185054:	4313      	orrs	r3, r2
34185056:	4a69      	ldr	r2, [pc, #420]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185058:	430b      	orrs	r3, r1
3418505a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418505e:	f7ff fd79 	bl	34184b54 <LL_RCC_IC15_Enable>
34185062:	e03c      	b.n	341850de <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34185064:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418506c:	2b03      	cmp	r3, #3
3418506e:	d118      	bne.n	341850a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34185070:	4b62      	ldr	r3, [pc, #392]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185072:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185076:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418507a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418507e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185082:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34185086:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418508e:	3b01      	subs	r3, #1
34185090:	041b      	lsls	r3, r3, #16
34185092:	4313      	orrs	r3, r2
34185094:	4a59      	ldr	r2, [pc, #356]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185096:	430b      	orrs	r3, r1
34185098:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418509c:	f7ff fe5a 	bl	34184d54 <LL_RCC_IC19_Enable>
341850a0:	e01d      	b.n	341850de <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
341850a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341850aa:	2b07      	cmp	r3, #7
341850ac:	d117      	bne.n	341850de <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
341850ae:	4b53      	ldr	r3, [pc, #332]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
341850b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341850b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341850b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341850bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
341850c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341850cc:	3b01      	subs	r3, #1
341850ce:	041b      	lsls	r3, r3, #16
341850d0:	4313      	orrs	r3, r2
341850d2:	4a4a      	ldr	r2, [pc, #296]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
341850d4:	430b      	orrs	r3, r1
341850d6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
341850da:	f7ff fe7b 	bl	34184dd4 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
341850de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341850e6:	4618      	mov	r0, r3
341850e8:	f7fe fcd2 	bl	34183a90 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
341850ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850f0:	e9d3 2300 	ldrd	r2, r3, [r3]
341850f4:	f04f 0a00 	mov.w	sl, #0
341850f8:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
341850fc:	ea5a 030b 	orrs.w	r3, sl, fp
34185100:	d04b      	beq.n	3418519a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34185102:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185106:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418510a:	4b3d      	ldr	r3, [pc, #244]	@ (34185200 <HAL_RCCEx_PeriphCLKConfig+0x368>)
3418510c:	429a      	cmp	r2, r3
3418510e:	d116      	bne.n	3418513e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185110:	4b3a      	ldr	r3, [pc, #232]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185112:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185116:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418511a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418511e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185122:	699a      	ldr	r2, [r3, #24]
34185124:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185128:	69db      	ldr	r3, [r3, #28]
3418512a:	3b01      	subs	r3, #1
3418512c:	041b      	lsls	r3, r3, #16
3418512e:	4313      	orrs	r3, r2
34185130:	4a32      	ldr	r2, [pc, #200]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185132:	430b      	orrs	r3, r1
34185134:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185138:	f7ff fa8c 	bl	34184654 <LL_RCC_IC3_Enable>
3418513c:	e026      	b.n	3418518c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3418513e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185142:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185146:	4b2f      	ldr	r3, [pc, #188]	@ (34185204 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34185148:	429a      	cmp	r2, r3
3418514a:	d116      	bne.n	3418517a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418514c:	4b2b      	ldr	r3, [pc, #172]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418514e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185152:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185156:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418515a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418515e:	6a1a      	ldr	r2, [r3, #32]
34185160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185166:	3b01      	subs	r3, #1
34185168:	041b      	lsls	r3, r3, #16
3418516a:	4313      	orrs	r3, r2
3418516c:	4a23      	ldr	r2, [pc, #140]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418516e:	430b      	orrs	r3, r1
34185170:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185174:	f7ff faae 	bl	341846d4 <LL_RCC_IC4_Enable>
34185178:	e008      	b.n	3418518c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3418517a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418517e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185182:	4b21      	ldr	r3, [pc, #132]	@ (34185208 <HAL_RCCEx_PeriphCLKConfig+0x370>)
34185184:	429a      	cmp	r2, r3
34185186:	d101      	bne.n	3418518c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
34185188:	f7ff fe64 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3418518c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34185194:	4618      	mov	r0, r3
34185196:	f7fe fe0b 	bl	34183db0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3418519a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418519e:	e9d3 2300 	ldrd	r2, r3, [r3]
341851a2:	2100      	movs	r1, #0
341851a4:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
341851a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
341851ac:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
341851b0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
341851b4:	4603      	mov	r3, r0
341851b6:	460a      	mov	r2, r1
341851b8:	4313      	orrs	r3, r2
341851ba:	d057      	beq.n	3418526c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
341851bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
341851c4:	4b11      	ldr	r3, [pc, #68]	@ (3418520c <HAL_RCCEx_PeriphCLKConfig+0x374>)
341851c6:	429a      	cmp	r2, r3
341851c8:	d122      	bne.n	34185210 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341851ca:	4b0c      	ldr	r3, [pc, #48]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
341851cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341851d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341851d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341851d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851dc:	699a      	ldr	r2, [r3, #24]
341851de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851e2:	69db      	ldr	r3, [r3, #28]
341851e4:	3b01      	subs	r3, #1
341851e6:	041b      	lsls	r3, r3, #16
341851e8:	4313      	orrs	r3, r2
341851ea:	4a04      	ldr	r2, [pc, #16]	@ (341851fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
341851ec:	430b      	orrs	r3, r1
341851ee:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341851f2:	f7ff fa2f 	bl	34184654 <LL_RCC_IC3_Enable>
341851f6:	e032      	b.n	3418525e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
341851f8:	56024800 	.word	0x56024800
341851fc:	56028000 	.word	0x56028000
34185200:	03020014 	.word	0x03020014
34185204:	03030014 	.word	0x03030014
34185208:	03010014 	.word	0x03010014
3418520c:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34185210:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185214:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185218:	4bc5      	ldr	r3, [pc, #788]	@ (34185530 <HAL_RCCEx_PeriphCLKConfig+0x698>)
3418521a:	429a      	cmp	r2, r3
3418521c:	d116      	bne.n	3418524c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418521e:	4bc5      	ldr	r3, [pc, #788]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185220:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185224:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185228:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418522c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185230:	6a1a      	ldr	r2, [r3, #32]
34185232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185238:	3b01      	subs	r3, #1
3418523a:	041b      	lsls	r3, r3, #16
3418523c:	4313      	orrs	r3, r2
3418523e:	4abd      	ldr	r2, [pc, #756]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185240:	430b      	orrs	r3, r1
34185242:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185246:	f7ff fa45 	bl	341846d4 <LL_RCC_IC4_Enable>
3418524a:	e008      	b.n	3418525e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3418524c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185250:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185254:	4bb8      	ldr	r3, [pc, #736]	@ (34185538 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
34185256:	429a      	cmp	r2, r3
34185258:	d101      	bne.n	3418525e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
3418525a:	f7ff fdfb 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3418525e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34185266:	4618      	mov	r0, r3
34185268:	f7fe fda2 	bl	34183db0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3418526c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185270:	e9d3 2300 	ldrd	r2, r3, [r3]
34185274:	2100      	movs	r1, #0
34185276:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3418527a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418527e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
34185282:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
34185286:	4603      	mov	r3, r0
34185288:	460a      	mov	r2, r1
3418528a:	4313      	orrs	r3, r2
3418528c:	d04b      	beq.n	34185326 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3418528e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185292:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34185296:	4ba9      	ldr	r3, [pc, #676]	@ (3418553c <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
34185298:	429a      	cmp	r2, r3
3418529a:	d116      	bne.n	341852ca <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418529c:	4ba5      	ldr	r3, [pc, #660]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418529e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341852a2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341852a6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341852aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ae:	699a      	ldr	r2, [r3, #24]
341852b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852b4:	69db      	ldr	r3, [r3, #28]
341852b6:	3b01      	subs	r3, #1
341852b8:	041b      	lsls	r3, r3, #16
341852ba:	4313      	orrs	r3, r2
341852bc:	4a9d      	ldr	r2, [pc, #628]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341852be:	430b      	orrs	r3, r1
341852c0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341852c4:	f7ff f9c6 	bl	34184654 <LL_RCC_IC3_Enable>
341852c8:	e026      	b.n	34185318 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
341852ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341852d2:	4b9b      	ldr	r3, [pc, #620]	@ (34185540 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
341852d4:	429a      	cmp	r2, r3
341852d6:	d116      	bne.n	34185306 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341852d8:	4b96      	ldr	r3, [pc, #600]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341852da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341852de:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341852e2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341852e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ea:	6a1a      	ldr	r2, [r3, #32]
341852ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341852f2:	3b01      	subs	r3, #1
341852f4:	041b      	lsls	r3, r3, #16
341852f6:	4313      	orrs	r3, r2
341852f8:	4a8e      	ldr	r2, [pc, #568]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341852fa:	430b      	orrs	r3, r1
341852fc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185300:	f7ff f9e8 	bl	341846d4 <LL_RCC_IC4_Enable>
34185304:	e008      	b.n	34185318 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34185306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418530a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418530e:	4b8d      	ldr	r3, [pc, #564]	@ (34185544 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34185310:	429a      	cmp	r2, r3
34185312:	d101      	bne.n	34185318 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
34185314:	f7ff fd9e 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34185318:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418531c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34185320:	4618      	mov	r0, r3
34185322:	f7fe fd45 	bl	34183db0 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34185326:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418532a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418532e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
34185332:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
34185336:	2300      	movs	r3, #0
34185338:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3418533c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34185340:	4603      	mov	r3, r0
34185342:	460a      	mov	r2, r1
34185344:	4313      	orrs	r3, r2
34185346:	d048      	beq.n	341853da <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34185348:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418534c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34185350:	2b20      	cmp	r3, #32
34185352:	d116      	bne.n	34185382 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185354:	4b77      	ldr	r3, [pc, #476]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185356:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418535a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418535e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185366:	699a      	ldr	r2, [r3, #24]
34185368:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418536c:	69db      	ldr	r3, [r3, #28]
3418536e:	3b01      	subs	r3, #1
34185370:	041b      	lsls	r3, r3, #16
34185372:	4313      	orrs	r3, r2
34185374:	4a6f      	ldr	r2, [pc, #444]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185376:	430b      	orrs	r3, r1
34185378:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418537c:	f7ff f96a 	bl	34184654 <LL_RCC_IC3_Enable>
34185380:	e024      	b.n	341853cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34185382:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418538a:	2b30      	cmp	r3, #48	@ 0x30
3418538c:	d116      	bne.n	341853bc <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418538e:	4b69      	ldr	r3, [pc, #420]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185390:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185394:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185398:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418539c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853a0:	6a1a      	ldr	r2, [r3, #32]
341853a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341853a8:	3b01      	subs	r3, #1
341853aa:	041b      	lsls	r3, r3, #16
341853ac:	4313      	orrs	r3, r2
341853ae:	4a61      	ldr	r2, [pc, #388]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341853b0:	430b      	orrs	r3, r1
341853b2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341853b6:	f7ff f98d 	bl	341846d4 <LL_RCC_IC4_Enable>
341853ba:	e007      	b.n	341853cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
341853bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341853c4:	2b10      	cmp	r3, #16
341853c6:	d101      	bne.n	341853cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
341853c8:	f7ff fd44 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
341853cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341853d4:	4618      	mov	r0, r3
341853d6:	f7fe fc03 	bl	34183be0 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
341853da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853de:	e9d3 2300 	ldrd	r2, r3, [r3]
341853e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
341853e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
341853ea:	2300      	movs	r3, #0
341853ec:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
341853f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
341853f4:	4603      	mov	r3, r0
341853f6:	460a      	mov	r2, r1
341853f8:	4313      	orrs	r3, r2
341853fa:	d04b      	beq.n	34185494 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
341853fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185400:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185404:	4b50      	ldr	r3, [pc, #320]	@ (34185548 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
34185406:	429a      	cmp	r2, r3
34185408:	d116      	bne.n	34185438 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418540a:	4b4a      	ldr	r3, [pc, #296]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418540c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185410:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185414:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185418:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418541c:	6a1a      	ldr	r2, [r3, #32]
3418541e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185424:	3b01      	subs	r3, #1
34185426:	041b      	lsls	r3, r3, #16
34185428:	4313      	orrs	r3, r2
3418542a:	4a42      	ldr	r2, [pc, #264]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418542c:	430b      	orrs	r3, r1
3418542e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185432:	f7ff f94f 	bl	341846d4 <LL_RCC_IC4_Enable>
34185436:	e026      	b.n	34185486 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34185438:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418543c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185440:	4b42      	ldr	r3, [pc, #264]	@ (3418554c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
34185442:	429a      	cmp	r2, r3
34185444:	d116      	bne.n	34185474 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185446:	4b3b      	ldr	r3, [pc, #236]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185448:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418544c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185450:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185454:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418545a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185460:	3b01      	subs	r3, #1
34185462:	041b      	lsls	r3, r3, #16
34185464:	4313      	orrs	r3, r2
34185466:	4a33      	ldr	r2, [pc, #204]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185468:	430b      	orrs	r3, r1
3418546a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418546e:	f7ff f971 	bl	34184754 <LL_RCC_IC5_Enable>
34185472:	e008      	b.n	34185486 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34185474:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185478:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418547c:	4b34      	ldr	r3, [pc, #208]	@ (34185550 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
3418547e:	429a      	cmp	r2, r3
34185480:	d101      	bne.n	34185486 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
34185482:	f7ff fce7 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
34185486:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418548a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3418548e:	4618      	mov	r0, r3
34185490:	f7fe fc57 	bl	34183d42 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34185494:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185498:	e9d3 2300 	ldrd	r2, r3, [r3]
3418549c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
341854a0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
341854a4:	2300      	movs	r3, #0
341854a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
341854aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
341854ae:	4603      	mov	r3, r0
341854b0:	460a      	mov	r2, r1
341854b2:	4313      	orrs	r3, r2
341854b4:	d062      	beq.n	3418557c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
341854b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341854be:	4b25      	ldr	r3, [pc, #148]	@ (34185554 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
341854c0:	429a      	cmp	r2, r3
341854c2:	d116      	bne.n	341854f2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341854c4:	4b1b      	ldr	r3, [pc, #108]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341854c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341854ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341854ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341854d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854d6:	6a1a      	ldr	r2, [r3, #32]
341854d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341854de:	3b01      	subs	r3, #1
341854e0:	041b      	lsls	r3, r3, #16
341854e2:	4313      	orrs	r3, r2
341854e4:	4a13      	ldr	r2, [pc, #76]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341854e6:	430b      	orrs	r3, r1
341854e8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341854ec:	f7ff f8f2 	bl	341846d4 <LL_RCC_IC4_Enable>
341854f0:	e03d      	b.n	3418556e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
341854f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854f6:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341854fa:	4b17      	ldr	r3, [pc, #92]	@ (34185558 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
341854fc:	429a      	cmp	r2, r3
341854fe:	d12d      	bne.n	3418555c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185500:	4b0c      	ldr	r3, [pc, #48]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185506:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418550a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418550e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34185514:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418551a:	3b01      	subs	r3, #1
3418551c:	041b      	lsls	r3, r3, #16
3418551e:	4313      	orrs	r3, r2
34185520:	4a04      	ldr	r2, [pc, #16]	@ (34185534 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185522:	430b      	orrs	r3, r1
34185524:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185528:	f7ff f914 	bl	34184754 <LL_RCC_IC5_Enable>
3418552c:	e01f      	b.n	3418556e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
3418552e:	bf00      	nop
34185530:	03030414 	.word	0x03030414
34185534:	56028000 	.word	0x56028000
34185538:	03010414 	.word	0x03010414
3418553c:	03020814 	.word	0x03020814
34185540:	03030814 	.word	0x03030814
34185544:	03010814 	.word	0x03010814
34185548:	0302001c 	.word	0x0302001c
3418554c:	0303001c 	.word	0x0303001c
34185550:	0301001c 	.word	0x0301001c
34185554:	0302041c 	.word	0x0302041c
34185558:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3418555c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185560:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34185564:	4bb3      	ldr	r3, [pc, #716]	@ (34185834 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
34185566:	429a      	cmp	r2, r3
34185568:	d101      	bne.n	3418556e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
3418556a:	f7ff fc73 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3418556e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185572:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
34185576:	4618      	mov	r0, r3
34185578:	f7fe fbe3 	bl	34183d42 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3418557c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185580:	e9d3 2300 	ldrd	r2, r3, [r3]
34185584:	f002 0301 	and.w	r3, r2, #1
34185588:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3418558c:	2300      	movs	r3, #0
3418558e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
34185592:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
34185596:	4603      	mov	r3, r0
34185598:	460a      	mov	r2, r1
3418559a:	4313      	orrs	r3, r2
3418559c:	d057      	beq.n	3418564e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3418559e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341855a6:	2b20      	cmp	r3, #32
341855a8:	d116      	bne.n	341855d8 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341855aa:	4ba3      	ldr	r3, [pc, #652]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341855ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341855b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341855b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341855b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341855be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341855c4:	3b01      	subs	r3, #1
341855c6:	041b      	lsls	r3, r3, #16
341855c8:	4313      	orrs	r3, r2
341855ca:	4a9b      	ldr	r2, [pc, #620]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341855cc:	430b      	orrs	r3, r1
341855ce:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341855d2:	f7ff f8ff 	bl	341847d4 <LL_RCC_IC7_Enable>
341855d6:	e024      	b.n	34185622 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
341855d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341855e0:	2b30      	cmp	r3, #48	@ 0x30
341855e2:	d116      	bne.n	34185612 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341855e4:	4b94      	ldr	r3, [pc, #592]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341855e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341855ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341855ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341855f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341855f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341855fe:	3b01      	subs	r3, #1
34185600:	041b      	lsls	r3, r3, #16
34185602:	4313      	orrs	r3, r2
34185604:	4a8c      	ldr	r2, [pc, #560]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185606:	430b      	orrs	r3, r1
34185608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418560c:	f7ff f922 	bl	34184854 <LL_RCC_IC8_Enable>
34185610:	e007      	b.n	34185622 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34185612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185616:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418561a:	2b10      	cmp	r3, #16
3418561c:	d101      	bne.n	34185622 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
3418561e:	f7ff fc19 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34185622:	4b85      	ldr	r3, [pc, #532]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185624:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34185628:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3418562c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34185630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185634:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34185638:	3b01      	subs	r3, #1
3418563a:	021a      	lsls	r2, r3, #8
3418563c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34185644:	4313      	orrs	r3, r2
34185646:	4a7c      	ldr	r2, [pc, #496]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185648:	430b      	orrs	r3, r1
3418564a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3418564e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185652:	e9d3 2300 	ldrd	r2, r3, [r3]
34185656:	f002 0302 	and.w	r3, r2, #2
3418565a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3418565e:	2300      	movs	r3, #0
34185660:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
34185664:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34185668:	4603      	mov	r3, r0
3418566a:	460a      	mov	r2, r1
3418566c:	4313      	orrs	r3, r2
3418566e:	d048      	beq.n	34185702 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34185670:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185674:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185678:	2b02      	cmp	r3, #2
3418567a:	d116      	bne.n	341856aa <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418567c:	4b6e      	ldr	r3, [pc, #440]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418567e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185682:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185686:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418568a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418568e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185690:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185696:	3b01      	subs	r3, #1
34185698:	041b      	lsls	r3, r3, #16
3418569a:	4313      	orrs	r3, r2
3418569c:	4a66      	ldr	r2, [pc, #408]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418569e:	430b      	orrs	r3, r1
341856a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341856a4:	f7ff f896 	bl	341847d4 <LL_RCC_IC7_Enable>
341856a8:	e024      	b.n	341856f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
341856aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341856b2:	2b03      	cmp	r3, #3
341856b4:	d116      	bne.n	341856e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341856b6:	4b60      	ldr	r3, [pc, #384]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341856b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341856bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341856c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341856c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341856ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341856d0:	3b01      	subs	r3, #1
341856d2:	041b      	lsls	r3, r3, #16
341856d4:	4313      	orrs	r3, r2
341856d6:	4a58      	ldr	r2, [pc, #352]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341856d8:	430b      	orrs	r3, r1
341856da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341856de:	f7ff f8b9 	bl	34184854 <LL_RCC_IC8_Enable>
341856e2:	e007      	b.n	341856f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
341856e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341856ec:	2b01      	cmp	r3, #1
341856ee:	d101      	bne.n	341856f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
341856f0:	f7ff fbb0 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
341856f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341856fc:	4618      	mov	r0, r3
341856fe:	f7fe f9b1 	bl	34183a64 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34185702:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185706:	e9d3 2300 	ldrd	r2, r3, [r3]
3418570a:	f002 0308 	and.w	r3, r2, #8
3418570e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
34185712:	2300      	movs	r3, #0
34185714:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34185718:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3418571c:	4603      	mov	r3, r0
3418571e:	460a      	mov	r2, r1
34185720:	4313      	orrs	r3, r2
34185722:	d017      	beq.n	34185754 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34185724:	4b44      	ldr	r3, [pc, #272]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185726:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418572a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418572e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185732:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185736:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418573a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418573e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34185742:	3b01      	subs	r3, #1
34185744:	041b      	lsls	r3, r3, #16
34185746:	4313      	orrs	r3, r2
34185748:	4a3b      	ldr	r2, [pc, #236]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418574a:	430b      	orrs	r3, r1
3418574c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
34185750:	f7ff fac0 	bl	34184cd4 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34185754:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185758:	e9d3 2300 	ldrd	r2, r3, [r3]
3418575c:	f002 0310 	and.w	r3, r2, #16
34185760:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
34185764:	2300      	movs	r3, #0
34185766:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3418576a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3418576e:	4603      	mov	r3, r0
34185770:	460a      	mov	r2, r1
34185772:	4313      	orrs	r3, r2
34185774:	d02f      	beq.n	341857d6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34185776:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418577a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418577e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185782:	d118      	bne.n	341857b6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34185784:	4b2c      	ldr	r3, [pc, #176]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185786:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418578a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418578e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185792:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185796:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3418579a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418579e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
341857a2:	3b01      	subs	r3, #1
341857a4:	041b      	lsls	r3, r3, #16
341857a6:	4313      	orrs	r3, r2
341857a8:	4a23      	ldr	r2, [pc, #140]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341857aa:	430b      	orrs	r3, r1
341857ac:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
341857b0:	f7ff fa50 	bl	34184c54 <LL_RCC_IC17_Enable>
341857b4:	e008      	b.n	341857c8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
341857b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341857be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341857c2:	d101      	bne.n	341857c8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
341857c4:	f7ff fb46 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
341857c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341857d0:	4618      	mov	r0, r3
341857d2:	f7fe f973 	bl	34183abc <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
341857d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857da:	e9d3 2300 	ldrd	r2, r3, [r3]
341857de:	f002 0320 	and.w	r3, r2, #32
341857e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
341857e6:	2300      	movs	r3, #0
341857e8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
341857ec:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
341857f0:	4603      	mov	r3, r0
341857f2:	460a      	mov	r2, r1
341857f4:	4313      	orrs	r3, r2
341857f6:	d031      	beq.n	3418585c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
341857f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34185804:	d11a      	bne.n	3418583c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34185806:	4b0c      	ldr	r3, [pc, #48]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418580c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185810:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185814:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185818:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3418581a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418581e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34185820:	3b01      	subs	r3, #1
34185822:	041b      	lsls	r3, r3, #16
34185824:	4313      	orrs	r3, r2
34185826:	4a04      	ldr	r2, [pc, #16]	@ (34185838 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185828:	430b      	orrs	r3, r1
3418582a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3418582e:	f7ff f8d1 	bl	341849d4 <LL_RCC_IC12_Enable>
34185832:	e00c      	b.n	3418584e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
34185834:	0301041c 	.word	0x0301041c
34185838:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3418583c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185840:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34185848:	d101      	bne.n	3418584e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
3418584a:	f7ff fb03 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3418584e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185852:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185856:	4618      	mov	r0, r3
34185858:	f7fe f946 	bl	34183ae8 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3418585c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185860:	e9d3 2300 	ldrd	r2, r3, [r3]
34185864:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34185868:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3418586c:	2300      	movs	r3, #0
3418586e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
34185872:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
34185876:	4603      	mov	r3, r0
34185878:	460a      	mov	r2, r1
3418587a:	4313      	orrs	r3, r2
3418587c:	d006      	beq.n	3418588c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3418587e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185882:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185886:	4618      	mov	r0, r3
34185888:	f7fe f944 	bl	34183b14 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3418588c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185890:	e9d3 2300 	ldrd	r2, r3, [r3]
34185894:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34185898:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3418589c:	2300      	movs	r3, #0
3418589e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
341858a2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
341858a6:	4603      	mov	r3, r0
341858a8:	460a      	mov	r2, r1
341858aa:	4313      	orrs	r3, r2
341858ac:	d006      	beq.n	341858bc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
341858ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341858b6:	4618      	mov	r0, r3
341858b8:	f7fe f950 	bl	34183b5c <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
341858bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858c0:	e9d3 2300 	ldrd	r2, r3, [r3]
341858c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
341858c8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
341858cc:	2300      	movs	r3, #0
341858ce:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
341858d2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
341858d6:	4603      	mov	r3, r0
341858d8:	460a      	mov	r2, r1
341858da:	4313      	orrs	r3, r2
341858dc:	d006      	beq.n	341858ec <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
341858de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341858e6:	4618      	mov	r0, r3
341858e8:	f7fe f94e 	bl	34183b88 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
341858ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858f0:	e9d3 2300 	ldrd	r2, r3, [r3]
341858f4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
341858f8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
341858fc:	2300      	movs	r3, #0
341858fe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
34185902:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
34185906:	4603      	mov	r3, r0
34185908:	460a      	mov	r2, r1
3418590a:	4313      	orrs	r3, r2
3418590c:	d038      	beq.n	34185980 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3418590e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185912:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185916:	2b02      	cmp	r3, #2
34185918:	d116      	bne.n	34185948 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3418591a:	4bbc      	ldr	r3, [pc, #752]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418591c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185920:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185924:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185928:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418592c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418592e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34185934:	3b01      	subs	r3, #1
34185936:	041b      	lsls	r3, r3, #16
34185938:	4313      	orrs	r3, r2
3418593a:	4ab4      	ldr	r2, [pc, #720]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418593c:	430b      	orrs	r3, r1
3418593e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
34185942:	f7ff f887 	bl	34184a54 <LL_RCC_IC13_Enable>
34185946:	e007      	b.n	34185958 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34185948:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418594c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185950:	2b01      	cmp	r3, #1
34185952:	d101      	bne.n	34185958 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
34185954:	f7ff fa7e 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34185958:	4bac      	ldr	r3, [pc, #688]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418595a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418595e:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
34185962:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418596a:	3b01      	subs	r3, #1
3418596c:	011a      	lsls	r2, r3, #4
3418596e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185972:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185976:	4313      	orrs	r3, r2
34185978:	4aa4      	ldr	r2, [pc, #656]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418597a:	430b      	orrs	r3, r1
3418597c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34185980:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185984:	e9d3 2300 	ldrd	r2, r3, [r3]
34185988:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3418598c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
34185990:	2300      	movs	r3, #0
34185992:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
34185996:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418599a:	4603      	mov	r3, r0
3418599c:	460a      	mov	r2, r1
3418599e:	4313      	orrs	r3, r2
341859a0:	d02d      	beq.n	341859fe <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
341859a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341859aa:	2b02      	cmp	r3, #2
341859ac:	d118      	bne.n	341859e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
341859ae:	4b97      	ldr	r3, [pc, #604]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341859b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341859b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341859b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341859bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
341859c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341859cc:	3b01      	subs	r3, #1
341859ce:	041b      	lsls	r3, r3, #16
341859d0:	4313      	orrs	r3, r2
341859d2:	4a8e      	ldr	r2, [pc, #568]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341859d4:	430b      	orrs	r3, r1
341859d6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
341859da:	f7ff f9bb 	bl	34184d54 <LL_RCC_IC19_Enable>
341859de:	e007      	b.n	341859f0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
341859e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341859e8:	2b01      	cmp	r3, #1
341859ea:	d101      	bne.n	341859f0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
341859ec:	f7ff fa32 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
341859f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341859f8:	4618      	mov	r0, r3
341859fa:	f7fe f8db 	bl	34183bb4 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
341859fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a02:	e9d3 2300 	ldrd	r2, r3, [r3]
34185a06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34185a0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34185a0e:	2300      	movs	r3, #0
34185a10:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34185a14:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
34185a18:	4603      	mov	r3, r0
34185a1a:	460a      	mov	r2, r1
34185a1c:	4313      	orrs	r3, r2
34185a1e:	d04b      	beq.n	34185ab8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34185a20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a24:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185a28:	4b79      	ldr	r3, [pc, #484]	@ (34185c10 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
34185a2a:	429a      	cmp	r2, r3
34185a2c:	d116      	bne.n	34185a5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185a2e:	4b77      	ldr	r3, [pc, #476]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185a34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185a42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185a48:	3b01      	subs	r3, #1
34185a4a:	041b      	lsls	r3, r3, #16
34185a4c:	4313      	orrs	r3, r2
34185a4e:	4a6f      	ldr	r2, [pc, #444]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a50:	430b      	orrs	r3, r1
34185a52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185a56:	f7fe ff7d 	bl	34184954 <LL_RCC_IC10_Enable>
34185a5a:	e026      	b.n	34185aaa <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34185a5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a60:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185a64:	4b6b      	ldr	r3, [pc, #428]	@ (34185c14 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
34185a66:	429a      	cmp	r2, r3
34185a68:	d116      	bne.n	34185a98 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185a6a:	4b68      	ldr	r3, [pc, #416]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a6c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185a70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a7c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185a7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185a84:	3b01      	subs	r3, #1
34185a86:	041b      	lsls	r3, r3, #16
34185a88:	4313      	orrs	r3, r2
34185a8a:	4a60      	ldr	r2, [pc, #384]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a8c:	430b      	orrs	r3, r1
34185a8e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185a92:	f7ff f85f 	bl	34184b54 <LL_RCC_IC15_Enable>
34185a96:	e008      	b.n	34185aaa <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34185a98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a9c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185aa0:	4b5d      	ldr	r3, [pc, #372]	@ (34185c18 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
34185aa2:	429a      	cmp	r2, r3
34185aa4:	d101      	bne.n	34185aaa <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
34185aa6:	f7ff f9d5 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
34185aaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185ab2:	4618      	mov	r0, r3
34185ab4:	f7fe f8aa 	bl	34183c0c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34185ab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185abc:	e9d3 2300 	ldrd	r2, r3, [r3]
34185ac0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34185ac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34185ac8:	2300      	movs	r3, #0
34185aca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
34185ace:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34185ad2:	4603      	mov	r3, r0
34185ad4:	460a      	mov	r2, r1
34185ad6:	4313      	orrs	r3, r2
34185ad8:	d04b      	beq.n	34185b72 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34185ada:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ade:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185ae2:	4b4e      	ldr	r3, [pc, #312]	@ (34185c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34185ae4:	429a      	cmp	r2, r3
34185ae6:	d116      	bne.n	34185b16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185ae8:	4b48      	ldr	r3, [pc, #288]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185aee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185af2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185af6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185afa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185afc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185b02:	3b01      	subs	r3, #1
34185b04:	041b      	lsls	r3, r3, #16
34185b06:	4313      	orrs	r3, r2
34185b08:	4a40      	ldr	r2, [pc, #256]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b0a:	430b      	orrs	r3, r1
34185b0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185b10:	f7fe ff20 	bl	34184954 <LL_RCC_IC10_Enable>
34185b14:	e026      	b.n	34185b64 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34185b16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b1a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185b1e:	4b40      	ldr	r3, [pc, #256]	@ (34185c20 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34185b20:	429a      	cmp	r2, r3
34185b22:	d116      	bne.n	34185b52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185b24:	4b39      	ldr	r3, [pc, #228]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b26:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185b2a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b2e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b36:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185b38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185b3e:	3b01      	subs	r3, #1
34185b40:	041b      	lsls	r3, r3, #16
34185b42:	4313      	orrs	r3, r2
34185b44:	4a31      	ldr	r2, [pc, #196]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b46:	430b      	orrs	r3, r1
34185b48:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185b4c:	f7ff f802 	bl	34184b54 <LL_RCC_IC15_Enable>
34185b50:	e008      	b.n	34185b64 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34185b52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b56:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185b5a:	4b32      	ldr	r3, [pc, #200]	@ (34185c24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
34185b5c:	429a      	cmp	r2, r3
34185b5e:	d101      	bne.n	34185b64 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34185b60:	f7ff f978 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34185b64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34185b6c:	4618      	mov	r0, r3
34185b6e:	f7fe f84d 	bl	34183c0c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34185b72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b76:	e9d3 2300 	ldrd	r2, r3, [r3]
34185b7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34185b7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34185b82:	2300      	movs	r3, #0
34185b84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34185b88:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34185b8c:	4603      	mov	r3, r0
34185b8e:	460a      	mov	r2, r1
34185b90:	4313      	orrs	r3, r2
34185b92:	d05d      	beq.n	34185c50 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34185b94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b98:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185b9c:	4b22      	ldr	r3, [pc, #136]	@ (34185c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
34185b9e:	429a      	cmp	r2, r3
34185ba0:	d116      	bne.n	34185bd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185ba2:	4b1a      	ldr	r3, [pc, #104]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185ba8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185bac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185bb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185bb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185bbc:	3b01      	subs	r3, #1
34185bbe:	041b      	lsls	r3, r3, #16
34185bc0:	4313      	orrs	r3, r2
34185bc2:	4a12      	ldr	r2, [pc, #72]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185bc4:	430b      	orrs	r3, r1
34185bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185bca:	f7fe fec3 	bl	34184954 <LL_RCC_IC10_Enable>
34185bce:	e038      	b.n	34185c42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34185bd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185bd8:	4b14      	ldr	r3, [pc, #80]	@ (34185c2c <HAL_RCCEx_PeriphCLKConfig+0xd94>)
34185bda:	429a      	cmp	r2, r3
34185bdc:	d128      	bne.n	34185c30 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185bde:	4b0b      	ldr	r3, [pc, #44]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185be0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185be4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185be8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bf0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185bf2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185bf8:	3b01      	subs	r3, #1
34185bfa:	041b      	lsls	r3, r3, #16
34185bfc:	4313      	orrs	r3, r2
34185bfe:	4a03      	ldr	r2, [pc, #12]	@ (34185c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185c00:	430b      	orrs	r3, r1
34185c02:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185c06:	f7fe ffa5 	bl	34184b54 <LL_RCC_IC15_Enable>
34185c0a:	e01a      	b.n	34185c42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34185c0c:	56028000 	.word	0x56028000
34185c10:	0702000c 	.word	0x0702000c
34185c14:	0703000c 	.word	0x0703000c
34185c18:	0701000c 	.word	0x0701000c
34185c1c:	0702040c 	.word	0x0702040c
34185c20:	0703040c 	.word	0x0703040c
34185c24:	0701040c 	.word	0x0701040c
34185c28:	0702080c 	.word	0x0702080c
34185c2c:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34185c30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185c38:	4bc8      	ldr	r3, [pc, #800]	@ (34185f5c <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
34185c3a:	429a      	cmp	r2, r3
34185c3c:	d101      	bne.n	34185c42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
34185c3e:	f7ff f909 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34185c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185c4a:	4618      	mov	r0, r3
34185c4c:	f7fd ffde 	bl	34183c0c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34185c50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c54:	e9d3 2300 	ldrd	r2, r3, [r3]
34185c58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34185c5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34185c60:	2300      	movs	r3, #0
34185c62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34185c66:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
34185c6a:	4603      	mov	r3, r0
34185c6c:	460a      	mov	r2, r1
34185c6e:	4313      	orrs	r3, r2
34185c70:	d04b      	beq.n	34185d0a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34185c72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c76:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185c7a:	4bb9      	ldr	r3, [pc, #740]	@ (34185f60 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34185c7c:	429a      	cmp	r2, r3
34185c7e:	d116      	bne.n	34185cae <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185c80:	4bb8      	ldr	r3, [pc, #736]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185c86:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185c8a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185c8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185c94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185c9a:	3b01      	subs	r3, #1
34185c9c:	041b      	lsls	r3, r3, #16
34185c9e:	4313      	orrs	r3, r2
34185ca0:	4ab0      	ldr	r2, [pc, #704]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185ca2:	430b      	orrs	r3, r1
34185ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185ca8:	f7fe fe54 	bl	34184954 <LL_RCC_IC10_Enable>
34185cac:	e026      	b.n	34185cfc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34185cae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cb2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185cb6:	4bac      	ldr	r3, [pc, #688]	@ (34185f68 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34185cb8:	429a      	cmp	r2, r3
34185cba:	d116      	bne.n	34185cea <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185cbc:	4ba9      	ldr	r3, [pc, #676]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185cbe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185cc2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185cc6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185cca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185cd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185cd6:	3b01      	subs	r3, #1
34185cd8:	041b      	lsls	r3, r3, #16
34185cda:	4313      	orrs	r3, r2
34185cdc:	4aa1      	ldr	r2, [pc, #644]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185cde:	430b      	orrs	r3, r1
34185ce0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185ce4:	f7fe ff36 	bl	34184b54 <LL_RCC_IC15_Enable>
34185ce8:	e008      	b.n	34185cfc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34185cea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185cf2:	4b9e      	ldr	r3, [pc, #632]	@ (34185f6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34185cf4:	429a      	cmp	r2, r3
34185cf6:	d101      	bne.n	34185cfc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34185cf8:	f7ff f8ac 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34185cfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185d04:	4618      	mov	r0, r3
34185d06:	f7fd ff81 	bl	34183c0c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34185d0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185d12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34185d16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
34185d1a:	2300      	movs	r3, #0
34185d1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34185d20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34185d24:	4603      	mov	r3, r0
34185d26:	460a      	mov	r2, r1
34185d28:	4313      	orrs	r3, r2
34185d2a:	d04b      	beq.n	34185dc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34185d2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d30:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185d34:	4b8e      	ldr	r3, [pc, #568]	@ (34185f70 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
34185d36:	429a      	cmp	r2, r3
34185d38:	d116      	bne.n	34185d68 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185d3a:	4b8a      	ldr	r3, [pc, #552]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185d40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185d54:	3b01      	subs	r3, #1
34185d56:	041b      	lsls	r3, r3, #16
34185d58:	4313      	orrs	r3, r2
34185d5a:	4a82      	ldr	r2, [pc, #520]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d5c:	430b      	orrs	r3, r1
34185d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185d62:	f7fe fdf7 	bl	34184954 <LL_RCC_IC10_Enable>
34185d66:	e026      	b.n	34185db6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34185d68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d6c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185d70:	4b80      	ldr	r3, [pc, #512]	@ (34185f74 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34185d72:	429a      	cmp	r2, r3
34185d74:	d116      	bne.n	34185da4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185d76:	4b7b      	ldr	r3, [pc, #492]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185d7c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d80:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d88:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185d8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185d90:	3b01      	subs	r3, #1
34185d92:	041b      	lsls	r3, r3, #16
34185d94:	4313      	orrs	r3, r2
34185d96:	4a73      	ldr	r2, [pc, #460]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d98:	430b      	orrs	r3, r1
34185d9a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185d9e:	f7fe fed9 	bl	34184b54 <LL_RCC_IC15_Enable>
34185da2:	e008      	b.n	34185db6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34185da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185da8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185dac:	4b72      	ldr	r3, [pc, #456]	@ (34185f78 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
34185dae:	429a      	cmp	r2, r3
34185db0:	d101      	bne.n	34185db6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
34185db2:	f7ff f84f 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34185db6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34185dbe:	4618      	mov	r0, r3
34185dc0:	f7fd ff2f 	bl	34183c22 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34185dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
34185dcc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34185dd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34185dd4:	2300      	movs	r3, #0
34185dd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34185dda:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
34185dde:	4603      	mov	r3, r0
34185de0:	460a      	mov	r2, r1
34185de2:	4313      	orrs	r3, r2
34185de4:	d04b      	beq.n	34185e7e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34185de6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dea:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185dee:	4b63      	ldr	r3, [pc, #396]	@ (34185f7c <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34185df0:	429a      	cmp	r2, r3
34185df2:	d116      	bne.n	34185e22 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185df4:	4b5b      	ldr	r3, [pc, #364]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185dfa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185dfe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185e0e:	3b01      	subs	r3, #1
34185e10:	041b      	lsls	r3, r3, #16
34185e12:	4313      	orrs	r3, r2
34185e14:	4a53      	ldr	r2, [pc, #332]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e16:	430b      	orrs	r3, r1
34185e18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185e1c:	f7fe fd9a 	bl	34184954 <LL_RCC_IC10_Enable>
34185e20:	e026      	b.n	34185e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34185e22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e26:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185e2a:	4b55      	ldr	r3, [pc, #340]	@ (34185f80 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34185e2c:	429a      	cmp	r2, r3
34185e2e:	d116      	bne.n	34185e5e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185e30:	4b4c      	ldr	r3, [pc, #304]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185e36:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e3a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e42:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185e44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185e4a:	3b01      	subs	r3, #1
34185e4c:	041b      	lsls	r3, r3, #16
34185e4e:	4313      	orrs	r3, r2
34185e50:	4a44      	ldr	r2, [pc, #272]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e52:	430b      	orrs	r3, r1
34185e54:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185e58:	f7fe fe7c 	bl	34184b54 <LL_RCC_IC15_Enable>
34185e5c:	e008      	b.n	34185e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34185e5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e62:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185e66:	4b47      	ldr	r3, [pc, #284]	@ (34185f84 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34185e68:	429a      	cmp	r2, r3
34185e6a:	d101      	bne.n	34185e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34185e6c:	f7fe fff2 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34185e70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185e78:	4618      	mov	r0, r3
34185e7a:	f7fd fed2 	bl	34183c22 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34185e7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e82:	e9d3 2300 	ldrd	r2, r3, [r3]
34185e86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34185e8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
34185e8e:	2300      	movs	r3, #0
34185e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34185e94:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34185e98:	4603      	mov	r3, r0
34185e9a:	460a      	mov	r2, r1
34185e9c:	4313      	orrs	r3, r2
34185e9e:	d02d      	beq.n	34185efc <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34185ea0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ea4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185ea8:	4b37      	ldr	r3, [pc, #220]	@ (34185f88 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
34185eaa:	429a      	cmp	r2, r3
34185eac:	d116      	bne.n	34185edc <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185eae:	4b2d      	ldr	r3, [pc, #180]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185eb0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185eb4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185eb8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ebc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ec0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185ec2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185ec8:	3b01      	subs	r3, #1
34185eca:	041b      	lsls	r3, r3, #16
34185ecc:	4313      	orrs	r3, r2
34185ece:	4a25      	ldr	r2, [pc, #148]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185ed0:	430b      	orrs	r3, r1
34185ed2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185ed6:	f7fe fe3d 	bl	34184b54 <LL_RCC_IC15_Enable>
34185eda:	e008      	b.n	34185eee <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34185edc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ee0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185ee4:	4b29      	ldr	r3, [pc, #164]	@ (34185f8c <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34185ee6:	429a      	cmp	r2, r3
34185ee8:	d101      	bne.n	34185eee <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
34185eea:	f7fe ffb3 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
34185eee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ef2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185ef6:	4618      	mov	r0, r3
34185ef8:	f7fd fe9e 	bl	34183c38 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34185efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f00:	e9d3 2300 	ldrd	r2, r3, [r3]
34185f04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34185f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34185f0c:	2300      	movs	r3, #0
34185f0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34185f12:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
34185f16:	4603      	mov	r3, r0
34185f18:	460a      	mov	r2, r1
34185f1a:	4313      	orrs	r3, r2
34185f1c:	d04a      	beq.n	34185fb4 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34185f1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f22:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34185f26:	4b1a      	ldr	r3, [pc, #104]	@ (34185f90 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
34185f28:	429a      	cmp	r2, r3
34185f2a:	d133      	bne.n	34185f94 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185f2c:	4b0d      	ldr	r3, [pc, #52]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185f2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185f32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f3e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185f40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185f46:	3b01      	subs	r3, #1
34185f48:	041b      	lsls	r3, r3, #16
34185f4a:	4313      	orrs	r3, r2
34185f4c:	4a05      	ldr	r2, [pc, #20]	@ (34185f64 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185f4e:	430b      	orrs	r3, r1
34185f50:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185f54:	f7fe fdfe 	bl	34184b54 <LL_RCC_IC15_Enable>
34185f58:	e025      	b.n	34185fa6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
34185f5a:	bf00      	nop
34185f5c:	0701080c 	.word	0x0701080c
34185f60:	07020c0c 	.word	0x07020c0c
34185f64:	56028000 	.word	0x56028000
34185f68:	07030c0c 	.word	0x07030c0c
34185f6c:	07010c0c 	.word	0x07010c0c
34185f70:	0702100c 	.word	0x0702100c
34185f74:	0703100c 	.word	0x0703100c
34185f78:	0701100c 	.word	0x0701100c
34185f7c:	0702140c 	.word	0x0702140c
34185f80:	0703140c 	.word	0x0703140c
34185f84:	0701140c 	.word	0x0701140c
34185f88:	0702082c 	.word	0x0702082c
34185f8c:	0701082c 	.word	0x0701082c
34185f90:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34185f94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f98:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34185f9c:	4bca      	ldr	r3, [pc, #808]	@ (341862c8 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34185f9e:	429a      	cmp	r2, r3
34185fa0:	d101      	bne.n	34185fa6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34185fa2:	f7fe ff57 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34185fa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185faa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185fae:	4618      	mov	r0, r3
34185fb0:	f7fd fe42 	bl	34183c38 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34185fb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
34185fbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34185fc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
34185fc4:	2300      	movs	r3, #0
34185fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34185fca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34185fce:	4603      	mov	r3, r0
34185fd0:	460a      	mov	r2, r1
34185fd2:	4313      	orrs	r3, r2
34185fd4:	d02d      	beq.n	34186032 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34185fd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fda:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34185fde:	4bbb      	ldr	r3, [pc, #748]	@ (341862cc <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34185fe0:	429a      	cmp	r2, r3
34185fe2:	d116      	bne.n	34186012 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185fe4:	4bba      	ldr	r3, [pc, #744]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34185fe6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185fea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185fee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ff2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ff6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185ff8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185ffe:	3b01      	subs	r3, #1
34186000:	041b      	lsls	r3, r3, #16
34186002:	4313      	orrs	r3, r2
34186004:	4ab2      	ldr	r2, [pc, #712]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186006:	430b      	orrs	r3, r1
34186008:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418600c:	f7fe fda2 	bl	34184b54 <LL_RCC_IC15_Enable>
34186010:	e008      	b.n	34186024 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34186012:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186016:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418601a:	4bae      	ldr	r3, [pc, #696]	@ (341862d4 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
3418601c:	429a      	cmp	r2, r3
3418601e:	d101      	bne.n	34186024 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34186020:	f7fe ff18 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34186024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186028:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418602c:	4618      	mov	r0, r3
3418602e:	f7fd fe03 	bl	34183c38 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34186032:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186036:	e9d3 2300 	ldrd	r2, r3, [r3]
3418603a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3418603e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34186042:	2300      	movs	r3, #0
34186044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34186048:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3418604c:	4603      	mov	r3, r0
3418604e:	460a      	mov	r2, r1
34186050:	4313      	orrs	r3, r2
34186052:	d02d      	beq.n	341860b0 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34186054:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186058:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3418605c:	4b9e      	ldr	r3, [pc, #632]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
3418605e:	429a      	cmp	r2, r3
34186060:	d116      	bne.n	34186090 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186062:	4b9b      	ldr	r3, [pc, #620]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186064:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186068:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418606c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186070:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186074:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186076:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418607a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418607c:	3b01      	subs	r3, #1
3418607e:	041b      	lsls	r3, r3, #16
34186080:	4313      	orrs	r3, r2
34186082:	4a93      	ldr	r2, [pc, #588]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186084:	430b      	orrs	r3, r1
34186086:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418608a:	f7fe fd63 	bl	34184b54 <LL_RCC_IC15_Enable>
3418608e:	e008      	b.n	341860a2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34186090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186094:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34186098:	4b90      	ldr	r3, [pc, #576]	@ (341862dc <HAL_RCCEx_PeriphCLKConfig+0x1444>)
3418609a:	429a      	cmp	r2, r3
3418609c:	d101      	bne.n	341860a2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
3418609e:	f7fe fed9 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
341860a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341860aa:	4618      	mov	r0, r3
341860ac:	f7fd fdc4 	bl	34183c38 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
341860b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860b4:	e9d3 2300 	ldrd	r2, r3, [r3]
341860b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
341860bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
341860c0:	2300      	movs	r3, #0
341860c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
341860c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
341860ca:	4603      	mov	r3, r0
341860cc:	460a      	mov	r2, r1
341860ce:	4313      	orrs	r3, r2
341860d0:	d02d      	beq.n	3418612e <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
341860d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
341860da:	4b81      	ldr	r3, [pc, #516]	@ (341862e0 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
341860dc:	429a      	cmp	r2, r3
341860de:	d116      	bne.n	3418610e <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341860e0:	4b7b      	ldr	r3, [pc, #492]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341860e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341860e6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341860ea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341860ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860f2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341860f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341860fa:	3b01      	subs	r3, #1
341860fc:	041b      	lsls	r3, r3, #16
341860fe:	4313      	orrs	r3, r2
34186100:	4a73      	ldr	r2, [pc, #460]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186102:	430b      	orrs	r3, r1
34186104:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186108:	f7fe fd24 	bl	34184b54 <LL_RCC_IC15_Enable>
3418610c:	e008      	b.n	34186120 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3418610e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186112:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34186116:	4b73      	ldr	r3, [pc, #460]	@ (341862e4 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34186118:	429a      	cmp	r2, r3
3418611a:	d101      	bne.n	34186120 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
3418611c:	f7fe fe9a 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34186120:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186124:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186128:	4618      	mov	r0, r3
3418612a:	f7fd fd85 	bl	34183c38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3418612e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186132:	e9d3 2300 	ldrd	r2, r3, [r3]
34186136:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3418613a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3418613e:	2300      	movs	r3, #0
34186140:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34186144:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34186148:	4603      	mov	r3, r0
3418614a:	460a      	mov	r2, r1
3418614c:	4313      	orrs	r3, r2
3418614e:	d04b      	beq.n	341861e8 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34186150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186154:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418615c:	d116      	bne.n	3418618c <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418615e:	4b5c      	ldr	r3, [pc, #368]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186160:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186164:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186168:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418616c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186170:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186172:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186178:	3b01      	subs	r3, #1
3418617a:	041b      	lsls	r3, r3, #16
3418617c:	4313      	orrs	r3, r2
3418617e:	4a54      	ldr	r2, [pc, #336]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186180:	430b      	orrs	r3, r1
34186182:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186186:	f7fe fba5 	bl	341848d4 <LL_RCC_IC9_Enable>
3418618a:	e026      	b.n	341861da <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3418618c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186190:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34186198:	d116      	bne.n	341861c8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418619a:	4b4d      	ldr	r3, [pc, #308]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418619c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341861a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341861a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341861ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341861b4:	3b01      	subs	r3, #1
341861b6:	041b      	lsls	r3, r3, #16
341861b8:	4313      	orrs	r3, r2
341861ba:	4a45      	ldr	r2, [pc, #276]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341861bc:	430b      	orrs	r3, r1
341861be:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341861c2:	f7fe fc87 	bl	34184ad4 <LL_RCC_IC14_Enable>
341861c6:	e008      	b.n	341861da <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
341861c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341861d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341861d4:	d101      	bne.n	341861da <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
341861d6:	f7fe fe3d 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
341861da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861de:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341861e2:	4618      	mov	r0, r3
341861e4:	f7fd fd34 	bl	34183c50 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
341861e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ec:	e9d3 2300 	ldrd	r2, r3, [r3]
341861f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
341861f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
341861f8:	2300      	movs	r3, #0
341861fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
341861fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34186202:	4603      	mov	r3, r0
34186204:	460a      	mov	r2, r1
34186206:	4313      	orrs	r3, r2
34186208:	d02f      	beq.n	3418626a <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3418620a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418620e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34186216:	d118      	bne.n	3418624a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34186218:	4b2d      	ldr	r3, [pc, #180]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418621a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418621e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186222:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186226:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418622a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418622e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34186236:	3b01      	subs	r3, #1
34186238:	041b      	lsls	r3, r3, #16
3418623a:	4313      	orrs	r3, r2
3418623c:	4a24      	ldr	r2, [pc, #144]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418623e:	430b      	orrs	r3, r1
34186240:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34186244:	f7fe fcc6 	bl	34184bd4 <LL_RCC_IC16_Enable>
34186248:	e008      	b.n	3418625c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3418624a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418624e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34186256:	d101      	bne.n	3418625c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34186258:	f7fe fdfc 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3418625c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186260:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186264:	4618      	mov	r0, r3
34186266:	f7fd fd09 	bl	34183c7c <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3418626a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418626e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186272:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34186276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3418627a:	2300      	movs	r3, #0
3418627c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34186280:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34186284:	4603      	mov	r3, r0
34186286:	460a      	mov	r2, r1
34186288:	4313      	orrs	r3, r2
3418628a:	d05b      	beq.n	34186344 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3418628c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186290:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34186298:	d126      	bne.n	341862e8 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418629a:	4b0d      	ldr	r3, [pc, #52]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418629c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341862a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341862a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341862a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341862ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341862b4:	3b01      	subs	r3, #1
341862b6:	041b      	lsls	r3, r3, #16
341862b8:	4313      	orrs	r3, r2
341862ba:	4a05      	ldr	r2, [pc, #20]	@ (341862d0 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341862bc:	430b      	orrs	r3, r1
341862be:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341862c2:	f7fe fa87 	bl	341847d4 <LL_RCC_IC7_Enable>
341862c6:	e036      	b.n	34186336 <HAL_RCCEx_PeriphCLKConfig+0x149e>
341862c8:	07010c2c 	.word	0x07010c2c
341862cc:	0702102c 	.word	0x0702102c
341862d0:	56028000 	.word	0x56028000
341862d4:	0701102c 	.word	0x0701102c
341862d8:	0702142c 	.word	0x0702142c
341862dc:	0701142c 	.word	0x0701142c
341862e0:	0702182c 	.word	0x0702182c
341862e4:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
341862e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862ec:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
341862f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341862f4:	d116      	bne.n	34186324 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341862f6:	4bb5      	ldr	r3, [pc, #724]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341862f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341862fc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186300:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186304:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418630a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418630e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186310:	3b01      	subs	r3, #1
34186312:	041b      	lsls	r3, r3, #16
34186314:	4313      	orrs	r3, r2
34186316:	4aad      	ldr	r2, [pc, #692]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186318:	430b      	orrs	r3, r1
3418631a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418631e:	f7fe fa99 	bl	34184854 <LL_RCC_IC8_Enable>
34186322:	e008      	b.n	34186336 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34186324:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186328:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418632c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34186330:	d101      	bne.n	34186336 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
34186332:	f7fe fd8f 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
34186336:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418633a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418633e:	4618      	mov	r0, r3
34186340:	f7fd fcb2 	bl	34183ca8 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34186344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186348:	e9d3 2300 	ldrd	r2, r3, [r3]
3418634c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34186350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34186354:	2300      	movs	r3, #0
34186356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3418635a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3418635e:	4603      	mov	r3, r0
34186360:	460a      	mov	r2, r1
34186362:	4313      	orrs	r3, r2
34186364:	d02d      	beq.n	341863c2 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34186366:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418636a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418636e:	2b20      	cmp	r3, #32
34186370:	d118      	bne.n	341863a4 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34186372:	4b96      	ldr	r3, [pc, #600]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186374:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186378:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418637c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186380:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186384:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34186388:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418638c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34186390:	3b01      	subs	r3, #1
34186392:	041b      	lsls	r3, r3, #16
34186394:	4313      	orrs	r3, r2
34186396:	4a8d      	ldr	r2, [pc, #564]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186398:	430b      	orrs	r3, r1
3418639a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3418639e:	f7fe fd19 	bl	34184dd4 <LL_RCC_IC20_Enable>
341863a2:	e007      	b.n	341863b4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
341863a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341863ac:	2b10      	cmp	r3, #16
341863ae:	d101      	bne.n	341863b4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
341863b0:	f7fe fd50 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
341863b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863b8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341863bc:	4618      	mov	r0, r3
341863be:	f7fd fc9f 	bl	34183d00 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
341863c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863c6:	e9d3 2300 	ldrd	r2, r3, [r3]
341863ca:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
341863ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
341863d2:	2300      	movs	r3, #0
341863d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
341863d8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
341863dc:	4603      	mov	r3, r0
341863de:	460a      	mov	r2, r1
341863e0:	4313      	orrs	r3, r2
341863e2:	d04b      	beq.n	3418647c <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
341863e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341863ec:	4b78      	ldr	r3, [pc, #480]	@ (341865d0 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
341863ee:	429a      	cmp	r2, r3
341863f0:	d116      	bne.n	34186420 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341863f2:	4b76      	ldr	r3, [pc, #472]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341863f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341863f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341863fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186400:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186406:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418640a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418640c:	3b01      	subs	r3, #1
3418640e:	041b      	lsls	r3, r3, #16
34186410:	4313      	orrs	r3, r2
34186412:	4a6e      	ldr	r2, [pc, #440]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186414:	430b      	orrs	r3, r1
34186416:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418641a:	f7fe f9db 	bl	341847d4 <LL_RCC_IC7_Enable>
3418641e:	e026      	b.n	3418646e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34186420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186424:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186428:	4b6a      	ldr	r3, [pc, #424]	@ (341865d4 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
3418642a:	429a      	cmp	r2, r3
3418642c:	d116      	bne.n	3418645c <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418642e:	4b67      	ldr	r3, [pc, #412]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186434:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186438:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418643c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186442:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186448:	3b01      	subs	r3, #1
3418644a:	041b      	lsls	r3, r3, #16
3418644c:	4313      	orrs	r3, r2
3418644e:	4a5f      	ldr	r2, [pc, #380]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186450:	430b      	orrs	r3, r1
34186452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186456:	f7fe f9fd 	bl	34184854 <LL_RCC_IC8_Enable>
3418645a:	e008      	b.n	3418646e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3418645c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186460:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186464:	4b5c      	ldr	r3, [pc, #368]	@ (341865d8 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
34186466:	429a      	cmp	r2, r3
34186468:	d101      	bne.n	3418646e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
3418646a:	f7fe fcf3 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3418646e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186472:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
34186476:	4618      	mov	r0, r3
34186478:	f7fd fc58 	bl	34183d2c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3418647c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186480:	e9d3 2300 	ldrd	r2, r3, [r3]
34186484:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34186488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3418648c:	2300      	movs	r3, #0
3418648e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34186492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
34186496:	4603      	mov	r3, r0
34186498:	460a      	mov	r2, r1
3418649a:	4313      	orrs	r3, r2
3418649c:	d04b      	beq.n	34186536 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3418649e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864a2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341864a6:	4b4d      	ldr	r3, [pc, #308]	@ (341865dc <HAL_RCCEx_PeriphCLKConfig+0x1744>)
341864a8:	429a      	cmp	r2, r3
341864aa:	d116      	bne.n	341864da <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341864ac:	4b47      	ldr	r3, [pc, #284]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341864ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341864b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341864c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341864c6:	3b01      	subs	r3, #1
341864c8:	041b      	lsls	r3, r3, #16
341864ca:	4313      	orrs	r3, r2
341864cc:	4a3f      	ldr	r2, [pc, #252]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341864ce:	430b      	orrs	r3, r1
341864d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341864d4:	f7fe f97e 	bl	341847d4 <LL_RCC_IC7_Enable>
341864d8:	e026      	b.n	34186528 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
341864da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864de:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341864e2:	4b3f      	ldr	r3, [pc, #252]	@ (341865e0 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
341864e4:	429a      	cmp	r2, r3
341864e6:	d116      	bne.n	34186516 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341864e8:	4b38      	ldr	r3, [pc, #224]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341864ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341864ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341864fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186502:	3b01      	subs	r3, #1
34186504:	041b      	lsls	r3, r3, #16
34186506:	4313      	orrs	r3, r2
34186508:	4a30      	ldr	r2, [pc, #192]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418650a:	430b      	orrs	r3, r1
3418650c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186510:	f7fe f9a0 	bl	34184854 <LL_RCC_IC8_Enable>
34186514:	e008      	b.n	34186528 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34186516:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418651a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418651e:	4b31      	ldr	r3, [pc, #196]	@ (341865e4 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34186520:	429a      	cmp	r2, r3
34186522:	d101      	bne.n	34186528 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
34186524:	f7fe fc96 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34186528:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418652c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34186530:	4618      	mov	r0, r3
34186532:	f7fd fbfb 	bl	34183d2c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34186536:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418653a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418653e:	2100      	movs	r1, #0
34186540:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34186544:	f003 0301 	and.w	r3, r3, #1
34186548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3418654c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34186550:	4603      	mov	r3, r0
34186552:	460a      	mov	r2, r1
34186554:	4313      	orrs	r3, r2
34186556:	d056      	beq.n	34186606 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34186558:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418655c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186560:	2b02      	cmp	r3, #2
34186562:	d116      	bne.n	34186592 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186564:	4b19      	ldr	r3, [pc, #100]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186566:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418656a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418656e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186572:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186578:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418657c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418657e:	3b01      	subs	r3, #1
34186580:	041b      	lsls	r3, r3, #16
34186582:	4313      	orrs	r3, r2
34186584:	4a11      	ldr	r2, [pc, #68]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186586:	430b      	orrs	r3, r1
34186588:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418658c:	f7fe f922 	bl	341847d4 <LL_RCC_IC7_Enable>
34186590:	e032      	b.n	341865f8 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34186592:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186596:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418659a:	2b03      	cmp	r3, #3
3418659c:	d124      	bne.n	341865e8 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418659e:	4b0b      	ldr	r3, [pc, #44]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341865a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341865a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341865a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341865ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341865b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341865b8:	3b01      	subs	r3, #1
341865ba:	041b      	lsls	r3, r3, #16
341865bc:	4313      	orrs	r3, r2
341865be:	4a03      	ldr	r2, [pc, #12]	@ (341865cc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341865c0:	430b      	orrs	r3, r1
341865c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341865c6:	f7fe f945 	bl	34184854 <LL_RCC_IC8_Enable>
341865ca:	e015      	b.n	341865f8 <HAL_RCCEx_PeriphCLKConfig+0x1760>
341865cc:	56028000 	.word	0x56028000
341865d0:	07021418 	.word	0x07021418
341865d4:	07031418 	.word	0x07031418
341865d8:	07011418 	.word	0x07011418
341865dc:	07021818 	.word	0x07021818
341865e0:	07031818 	.word	0x07031818
341865e4:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
341865e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ec:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341865f0:	2b01      	cmp	r3, #1
341865f2:	d101      	bne.n	341865f8 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
341865f4:	f7fe fc2e 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
341865f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186600:	4618      	mov	r0, r3
34186602:	f7fd fba9 	bl	34183d58 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34186606:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418660a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418660e:	2100      	movs	r1, #0
34186610:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
34186614:	f003 0302 	and.w	r3, r3, #2
34186618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3418661c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34186620:	4603      	mov	r3, r0
34186622:	460a      	mov	r2, r1
34186624:	4313      	orrs	r3, r2
34186626:	d04b      	beq.n	341866c0 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34186628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418662c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34186630:	4bc6      	ldr	r3, [pc, #792]	@ (3418694c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
34186632:	429a      	cmp	r2, r3
34186634:	d116      	bne.n	34186664 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186636:	4bc6      	ldr	r3, [pc, #792]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418663c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186640:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186644:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418664a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186650:	3b01      	subs	r3, #1
34186652:	041b      	lsls	r3, r3, #16
34186654:	4313      	orrs	r3, r2
34186656:	4abe      	ldr	r2, [pc, #760]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186658:	430b      	orrs	r3, r1
3418665a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418665e:	f7fe f8f9 	bl	34184854 <LL_RCC_IC8_Enable>
34186662:	e026      	b.n	341866b2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34186664:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186668:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418666c:	4bb9      	ldr	r3, [pc, #740]	@ (34186954 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
3418666e:	429a      	cmp	r2, r3
34186670:	d116      	bne.n	341866a0 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186672:	4bb7      	ldr	r3, [pc, #732]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186674:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186678:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418667c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186686:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418668a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418668c:	3b01      	subs	r3, #1
3418668e:	041b      	lsls	r3, r3, #16
34186690:	4313      	orrs	r3, r2
34186692:	4aaf      	ldr	r2, [pc, #700]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186694:	430b      	orrs	r3, r1
34186696:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418669a:	f7fe f91b 	bl	341848d4 <LL_RCC_IC9_Enable>
3418669e:	e008      	b.n	341866b2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
341866a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866a4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341866a8:	4bab      	ldr	r3, [pc, #684]	@ (34186958 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
341866aa:	429a      	cmp	r2, r3
341866ac:	d101      	bne.n	341866b2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
341866ae:	f7fe fbd1 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
341866b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
341866ba:	4618      	mov	r0, r3
341866bc:	f7fd fb62 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
341866c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866c4:	e9d3 2300 	ldrd	r2, r3, [r3]
341866c8:	2100      	movs	r1, #0
341866ca:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
341866ce:	f003 0304 	and.w	r3, r3, #4
341866d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
341866d6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
341866da:	4603      	mov	r3, r0
341866dc:	460a      	mov	r2, r1
341866de:	4313      	orrs	r3, r2
341866e0:	d04b      	beq.n	3418677a <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
341866e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866e6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341866ea:	4b9c      	ldr	r3, [pc, #624]	@ (3418695c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
341866ec:	429a      	cmp	r2, r3
341866ee:	d116      	bne.n	3418671e <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341866f0:	4b97      	ldr	r3, [pc, #604]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341866f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341866f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341866fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341866fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186704:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418670a:	3b01      	subs	r3, #1
3418670c:	041b      	lsls	r3, r3, #16
3418670e:	4313      	orrs	r3, r2
34186710:	4a8f      	ldr	r2, [pc, #572]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186712:	430b      	orrs	r3, r1
34186714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186718:	f7fe f89c 	bl	34184854 <LL_RCC_IC8_Enable>
3418671c:	e026      	b.n	3418676c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3418671e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186722:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34186726:	4b8e      	ldr	r3, [pc, #568]	@ (34186960 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34186728:	429a      	cmp	r2, r3
3418672a:	d116      	bne.n	3418675a <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418672c:	4b88      	ldr	r3, [pc, #544]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418672e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186732:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186736:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418673a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418673e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186740:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186746:	3b01      	subs	r3, #1
34186748:	041b      	lsls	r3, r3, #16
3418674a:	4313      	orrs	r3, r2
3418674c:	4a80      	ldr	r2, [pc, #512]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418674e:	430b      	orrs	r3, r1
34186750:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186754:	f7fe f8be 	bl	341848d4 <LL_RCC_IC9_Enable>
34186758:	e008      	b.n	3418676c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3418675a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418675e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34186762:	4b80      	ldr	r3, [pc, #512]	@ (34186964 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
34186764:	429a      	cmp	r2, r3
34186766:	d101      	bne.n	3418676c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34186768:	f7fe fb74 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3418676c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186770:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
34186774:	4618      	mov	r0, r3
34186776:	f7fd fb05 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3418677a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418677e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186782:	2100      	movs	r1, #0
34186784:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34186788:	f003 0308 	and.w	r3, r3, #8
3418678c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
34186790:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
34186794:	4603      	mov	r3, r0
34186796:	460a      	mov	r2, r1
34186798:	4313      	orrs	r3, r2
3418679a:	d04b      	beq.n	34186834 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3418679c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341867a4:	4b70      	ldr	r3, [pc, #448]	@ (34186968 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
341867a6:	429a      	cmp	r2, r3
341867a8:	d116      	bne.n	341867d8 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341867aa:	4b69      	ldr	r3, [pc, #420]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341867ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341867b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341867be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341867c4:	3b01      	subs	r3, #1
341867c6:	041b      	lsls	r3, r3, #16
341867c8:	4313      	orrs	r3, r2
341867ca:	4a61      	ldr	r2, [pc, #388]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341867cc:	430b      	orrs	r3, r1
341867ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341867d2:	f7fe f83f 	bl	34184854 <LL_RCC_IC8_Enable>
341867d6:	e026      	b.n	34186826 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
341867d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867dc:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341867e0:	4b62      	ldr	r3, [pc, #392]	@ (3418696c <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
341867e2:	429a      	cmp	r2, r3
341867e4:	d116      	bne.n	34186814 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341867e6:	4b5a      	ldr	r3, [pc, #360]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341867e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341867ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341867fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186800:	3b01      	subs	r3, #1
34186802:	041b      	lsls	r3, r3, #16
34186804:	4313      	orrs	r3, r2
34186806:	4a52      	ldr	r2, [pc, #328]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186808:	430b      	orrs	r3, r1
3418680a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418680e:	f7fe f861 	bl	341848d4 <LL_RCC_IC9_Enable>
34186812:	e008      	b.n	34186826 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34186814:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186818:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418681c:	4b54      	ldr	r3, [pc, #336]	@ (34186970 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
3418681e:	429a      	cmp	r2, r3
34186820:	d101      	bne.n	34186826 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
34186822:	f7fe fb17 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
34186826:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418682a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3418682e:	4618      	mov	r0, r3
34186830:	f7fd faa8 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34186834:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186838:	e9d3 2300 	ldrd	r2, r3, [r3]
3418683c:	2100      	movs	r1, #0
3418683e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
34186842:	f003 0310 	and.w	r3, r3, #16
34186846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3418684a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3418684e:	4603      	mov	r3, r0
34186850:	460a      	mov	r2, r1
34186852:	4313      	orrs	r3, r2
34186854:	d04b      	beq.n	341868ee <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34186856:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418685a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418685e:	4b45      	ldr	r3, [pc, #276]	@ (34186974 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34186860:	429a      	cmp	r2, r3
34186862:	d116      	bne.n	34186892 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186864:	4b3a      	ldr	r3, [pc, #232]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186866:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418686a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418686e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186876:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186878:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418687c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418687e:	3b01      	subs	r3, #1
34186880:	041b      	lsls	r3, r3, #16
34186882:	4313      	orrs	r3, r2
34186884:	4a32      	ldr	r2, [pc, #200]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186886:	430b      	orrs	r3, r1
34186888:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418688c:	f7fe f822 	bl	341848d4 <LL_RCC_IC9_Enable>
34186890:	e026      	b.n	341868e0 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34186892:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186896:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418689a:	4b37      	ldr	r3, [pc, #220]	@ (34186978 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
3418689c:	429a      	cmp	r2, r3
3418689e:	d116      	bne.n	341868ce <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341868a0:	4b2b      	ldr	r3, [pc, #172]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341868a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341868a6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341868aa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341868b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341868ba:	3b01      	subs	r3, #1
341868bc:	041b      	lsls	r3, r3, #16
341868be:	4313      	orrs	r3, r2
341868c0:	4a23      	ldr	r2, [pc, #140]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341868c2:	430b      	orrs	r3, r1
341868c4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341868c8:	f7fe f904 	bl	34184ad4 <LL_RCC_IC14_Enable>
341868cc:	e008      	b.n	341868e0 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
341868ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341868d6:	4b29      	ldr	r3, [pc, #164]	@ (3418697c <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
341868d8:	429a      	cmp	r2, r3
341868da:	d101      	bne.n	341868e0 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
341868dc:	f7fe faba 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
341868e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
341868e8:	4618      	mov	r0, r3
341868ea:	f7fd fa4b 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
341868ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868f2:	e9d3 2300 	ldrd	r2, r3, [r3]
341868f6:	2100      	movs	r1, #0
341868f8:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
341868fc:	f003 0320 	and.w	r3, r3, #32
34186900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34186904:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34186908:	4603      	mov	r3, r0
3418690a:	460a      	mov	r2, r1
3418690c:	4313      	orrs	r3, r2
3418690e:	d067      	beq.n	341869e0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34186910:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186914:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34186918:	4b19      	ldr	r3, [pc, #100]	@ (34186980 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
3418691a:	429a      	cmp	r2, r3
3418691c:	d132      	bne.n	34186984 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418691e:	4b0c      	ldr	r3, [pc, #48]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186924:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186928:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418692c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186932:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186938:	3b01      	subs	r3, #1
3418693a:	041b      	lsls	r3, r3, #16
3418693c:	4313      	orrs	r3, r2
3418693e:	4a04      	ldr	r2, [pc, #16]	@ (34186950 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186940:	430b      	orrs	r3, r1
34186942:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186946:	f7fd ffc5 	bl	341848d4 <LL_RCC_IC9_Enable>
3418694a:	e042      	b.n	341869d2 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
3418694c:	07020420 	.word	0x07020420
34186950:	56028000 	.word	0x56028000
34186954:	07030420 	.word	0x07030420
34186958:	07010420 	.word	0x07010420
3418695c:	07020820 	.word	0x07020820
34186960:	07030820 	.word	0x07030820
34186964:	07010820 	.word	0x07010820
34186968:	07020c20 	.word	0x07020c20
3418696c:	07030c20 	.word	0x07030c20
34186970:	07010c20 	.word	0x07010c20
34186974:	07021020 	.word	0x07021020
34186978:	07031020 	.word	0x07031020
3418697c:	07011020 	.word	0x07011020
34186980:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34186984:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186988:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418698c:	4bc2      	ldr	r3, [pc, #776]	@ (34186c98 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
3418698e:	429a      	cmp	r2, r3
34186990:	d116      	bne.n	341869c0 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186992:	4bc2      	ldr	r3, [pc, #776]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186994:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186998:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418699c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341869a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341869a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341869ac:	3b01      	subs	r3, #1
341869ae:	041b      	lsls	r3, r3, #16
341869b0:	4313      	orrs	r3, r2
341869b2:	4aba      	ldr	r2, [pc, #744]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341869b4:	430b      	orrs	r3, r1
341869b6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341869ba:	f7fe f88b 	bl	34184ad4 <LL_RCC_IC14_Enable>
341869be:	e008      	b.n	341869d2 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
341869c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869c4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341869c8:	4bb5      	ldr	r3, [pc, #724]	@ (34186ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
341869ca:	429a      	cmp	r2, r3
341869cc:	d101      	bne.n	341869d2 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
341869ce:	f7fe fa41 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
341869d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341869da:	4618      	mov	r0, r3
341869dc:	f7fd f9d2 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
341869e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869e4:	e9d3 2300 	ldrd	r2, r3, [r3]
341869e8:	2100      	movs	r1, #0
341869ea:	67b9      	str	r1, [r7, #120]	@ 0x78
341869ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341869f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
341869f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
341869f6:	4603      	mov	r3, r0
341869f8:	460a      	mov	r2, r1
341869fa:	4313      	orrs	r3, r2
341869fc:	d04b      	beq.n	34186a96 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
341869fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a02:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186a06:	4ba7      	ldr	r3, [pc, #668]	@ (34186ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34186a08:	429a      	cmp	r2, r3
34186a0a:	d116      	bne.n	34186a3a <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186a0c:	4ba3      	ldr	r3, [pc, #652]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186a12:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a16:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186a20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186a26:	3b01      	subs	r3, #1
34186a28:	041b      	lsls	r3, r3, #16
34186a2a:	4313      	orrs	r3, r2
34186a2c:	4a9b      	ldr	r2, [pc, #620]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a2e:	430b      	orrs	r3, r1
34186a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186a34:	f7fd ff0e 	bl	34184854 <LL_RCC_IC8_Enable>
34186a38:	e026      	b.n	34186a88 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34186a3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a3e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186a42:	4b99      	ldr	r3, [pc, #612]	@ (34186ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
34186a44:	429a      	cmp	r2, r3
34186a46:	d116      	bne.n	34186a76 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186a48:	4b94      	ldr	r3, [pc, #592]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186a4e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a52:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186a5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186a62:	3b01      	subs	r3, #1
34186a64:	041b      	lsls	r3, r3, #16
34186a66:	4313      	orrs	r3, r2
34186a68:	4a8c      	ldr	r2, [pc, #560]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a6a:	430b      	orrs	r3, r1
34186a6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186a70:	f7fd ff30 	bl	341848d4 <LL_RCC_IC9_Enable>
34186a74:	e008      	b.n	34186a88 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34186a76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a7a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186a7e:	4b8b      	ldr	r3, [pc, #556]	@ (34186cac <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34186a80:	429a      	cmp	r2, r3
34186a82:	d101      	bne.n	34186a88 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34186a84:	f7fe f9e6 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34186a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186a90:	4618      	mov	r0, r3
34186a92:	f7fd f977 	bl	34183d84 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34186a96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a9e:	2100      	movs	r1, #0
34186aa0:	6739      	str	r1, [r7, #112]	@ 0x70
34186aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34186aa6:	677b      	str	r3, [r7, #116]	@ 0x74
34186aa8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34186aac:	4603      	mov	r3, r0
34186aae:	460a      	mov	r2, r1
34186ab0:	4313      	orrs	r3, r2
34186ab2:	d04b      	beq.n	34186b4c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34186ab4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ab8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186abc:	4b7c      	ldr	r3, [pc, #496]	@ (34186cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
34186abe:	429a      	cmp	r2, r3
34186ac0:	d116      	bne.n	34186af0 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186ac2:	4b76      	ldr	r3, [pc, #472]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186ac8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186acc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186adc:	3b01      	subs	r3, #1
34186ade:	041b      	lsls	r3, r3, #16
34186ae0:	4313      	orrs	r3, r2
34186ae2:	4a6e      	ldr	r2, [pc, #440]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186ae4:	430b      	orrs	r3, r1
34186ae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186aea:	f7fd fef3 	bl	341848d4 <LL_RCC_IC9_Enable>
34186aee:	e026      	b.n	34186b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34186af0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186af4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186af8:	4b6e      	ldr	r3, [pc, #440]	@ (34186cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
34186afa:	429a      	cmp	r2, r3
34186afc:	d116      	bne.n	34186b2c <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186afe:	4b67      	ldr	r3, [pc, #412]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186b04:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b08:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186b12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186b18:	3b01      	subs	r3, #1
34186b1a:	041b      	lsls	r3, r3, #16
34186b1c:	4313      	orrs	r3, r2
34186b1e:	4a5f      	ldr	r2, [pc, #380]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b20:	430b      	orrs	r3, r1
34186b22:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186b26:	f7fd ffd5 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186b2a:	e008      	b.n	34186b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34186b2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b30:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186b34:	4b60      	ldr	r3, [pc, #384]	@ (34186cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
34186b36:	429a      	cmp	r2, r3
34186b38:	d101      	bne.n	34186b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
34186b3a:	f7fe f98b 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34186b3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b42:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34186b46:	4618      	mov	r0, r3
34186b48:	f7fd f927 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34186b4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b50:	e9d3 2300 	ldrd	r2, r3, [r3]
34186b54:	2100      	movs	r1, #0
34186b56:	66b9      	str	r1, [r7, #104]	@ 0x68
34186b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
34186b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34186b62:	4603      	mov	r3, r0
34186b64:	460a      	mov	r2, r1
34186b66:	4313      	orrs	r3, r2
34186b68:	d04b      	beq.n	34186c02 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34186b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b6e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186b72:	4b52      	ldr	r3, [pc, #328]	@ (34186cbc <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34186b74:	429a      	cmp	r2, r3
34186b76:	d116      	bne.n	34186ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186b78:	4b48      	ldr	r3, [pc, #288]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186b7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186b8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186b92:	3b01      	subs	r3, #1
34186b94:	041b      	lsls	r3, r3, #16
34186b96:	4313      	orrs	r3, r2
34186b98:	4a40      	ldr	r2, [pc, #256]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b9a:	430b      	orrs	r3, r1
34186b9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186ba0:	f7fd fe98 	bl	341848d4 <LL_RCC_IC9_Enable>
34186ba4:	e026      	b.n	34186bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34186ba6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186baa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186bae:	4b44      	ldr	r3, [pc, #272]	@ (34186cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
34186bb0:	429a      	cmp	r2, r3
34186bb2:	d116      	bne.n	34186be2 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186bb4:	4b39      	ldr	r3, [pc, #228]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186bb6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186bba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186bbe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186bc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186bc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186bce:	3b01      	subs	r3, #1
34186bd0:	041b      	lsls	r3, r3, #16
34186bd2:	4313      	orrs	r3, r2
34186bd4:	4a31      	ldr	r2, [pc, #196]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186bd6:	430b      	orrs	r3, r1
34186bd8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186bdc:	f7fd ff7a 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186be0:	e008      	b.n	34186bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34186be2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186be6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186bea:	4b36      	ldr	r3, [pc, #216]	@ (34186cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34186bec:	429a      	cmp	r2, r3
34186bee:	d101      	bne.n	34186bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34186bf0:	f7fe f930 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34186bf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186bfc:	4618      	mov	r0, r3
34186bfe:	f7fd f8cc 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34186c02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c06:	e9d3 2300 	ldrd	r2, r3, [r3]
34186c0a:	2100      	movs	r1, #0
34186c0c:	6639      	str	r1, [r7, #96]	@ 0x60
34186c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186c12:	667b      	str	r3, [r7, #100]	@ 0x64
34186c14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
34186c18:	4603      	mov	r3, r0
34186c1a:	460a      	mov	r2, r1
34186c1c:	4313      	orrs	r3, r2
34186c1e:	d067      	beq.n	34186cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34186c20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c24:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186c28:	4b27      	ldr	r3, [pc, #156]	@ (34186cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
34186c2a:	429a      	cmp	r2, r3
34186c2c:	d116      	bne.n	34186c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186c2e:	4b1b      	ldr	r3, [pc, #108]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186c34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186c48:	3b01      	subs	r3, #1
34186c4a:	041b      	lsls	r3, r3, #16
34186c4c:	4313      	orrs	r3, r2
34186c4e:	4a13      	ldr	r2, [pc, #76]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c50:	430b      	orrs	r3, r1
34186c52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186c56:	f7fd fe3d 	bl	341848d4 <LL_RCC_IC9_Enable>
34186c5a:	e042      	b.n	34186ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34186c5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c60:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186c64:	4b19      	ldr	r3, [pc, #100]	@ (34186ccc <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34186c66:	429a      	cmp	r2, r3
34186c68:	d132      	bne.n	34186cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186c6a:	4b0c      	ldr	r3, [pc, #48]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c6c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186c70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186c7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186c84:	3b01      	subs	r3, #1
34186c86:	041b      	lsls	r3, r3, #16
34186c88:	4313      	orrs	r3, r2
34186c8a:	4a04      	ldr	r2, [pc, #16]	@ (34186c9c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c8c:	430b      	orrs	r3, r1
34186c8e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186c92:	f7fd ff1f 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186c96:	e024      	b.n	34186ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34186c98:	07031420 	.word	0x07031420
34186c9c:	56028000 	.word	0x56028000
34186ca0:	07011420 	.word	0x07011420
34186ca4:	07021820 	.word	0x07021820
34186ca8:	07031820 	.word	0x07031820
34186cac:	07011820 	.word	0x07011820
34186cb0:	07020030 	.word	0x07020030
34186cb4:	07030030 	.word	0x07030030
34186cb8:	07010030 	.word	0x07010030
34186cbc:	07020430 	.word	0x07020430
34186cc0:	07030430 	.word	0x07030430
34186cc4:	07010430 	.word	0x07010430
34186cc8:	07020830 	.word	0x07020830
34186ccc:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34186cd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cd4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186cd8:	4bb3      	ldr	r3, [pc, #716]	@ (34186fa8 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
34186cda:	429a      	cmp	r2, r3
34186cdc:	d101      	bne.n	34186ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
34186cde:	f7fe f8b9 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34186ce2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ce6:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
34186cea:	4618      	mov	r0, r3
34186cec:	f7fd f855 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34186cf0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
34186cf8:	2100      	movs	r1, #0
34186cfa:	65b9      	str	r1, [r7, #88]	@ 0x58
34186cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34186d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
34186d02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34186d06:	4603      	mov	r3, r0
34186d08:	460a      	mov	r2, r1
34186d0a:	4313      	orrs	r3, r2
34186d0c:	d04b      	beq.n	34186da6 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34186d0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d12:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186d16:	4ba5      	ldr	r3, [pc, #660]	@ (34186fac <HAL_RCCEx_PeriphCLKConfig+0x2114>)
34186d18:	429a      	cmp	r2, r3
34186d1a:	d116      	bne.n	34186d4a <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186d1c:	4ba4      	ldr	r3, [pc, #656]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186d22:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186d26:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186d2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186d30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186d36:	3b01      	subs	r3, #1
34186d38:	041b      	lsls	r3, r3, #16
34186d3a:	4313      	orrs	r3, r2
34186d3c:	4a9c      	ldr	r2, [pc, #624]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d3e:	430b      	orrs	r3, r1
34186d40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186d44:	f7fd fdc6 	bl	341848d4 <LL_RCC_IC9_Enable>
34186d48:	e026      	b.n	34186d98 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34186d4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d4e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186d52:	4b98      	ldr	r3, [pc, #608]	@ (34186fb4 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34186d54:	429a      	cmp	r2, r3
34186d56:	d116      	bne.n	34186d86 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186d58:	4b95      	ldr	r3, [pc, #596]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186d5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186d62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186d66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186d6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186d72:	3b01      	subs	r3, #1
34186d74:	041b      	lsls	r3, r3, #16
34186d76:	4313      	orrs	r3, r2
34186d78:	4a8d      	ldr	r2, [pc, #564]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d7a:	430b      	orrs	r3, r1
34186d7c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186d80:	f7fd fea8 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186d84:	e008      	b.n	34186d98 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34186d86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d8a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186d8e:	4b8a      	ldr	r3, [pc, #552]	@ (34186fb8 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
34186d90:	429a      	cmp	r2, r3
34186d92:	d101      	bne.n	34186d98 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34186d94:	f7fe f85e 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34186d98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d9c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186da0:	4618      	mov	r0, r3
34186da2:	f7fc fffa 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34186da6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186daa:	e9d3 2300 	ldrd	r2, r3, [r3]
34186dae:	2100      	movs	r1, #0
34186db0:	6539      	str	r1, [r7, #80]	@ 0x50
34186db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34186db6:	657b      	str	r3, [r7, #84]	@ 0x54
34186db8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34186dbc:	4603      	mov	r3, r0
34186dbe:	460a      	mov	r2, r1
34186dc0:	4313      	orrs	r3, r2
34186dc2:	d04b      	beq.n	34186e5c <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34186dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186dcc:	4b7b      	ldr	r3, [pc, #492]	@ (34186fbc <HAL_RCCEx_PeriphCLKConfig+0x2124>)
34186dce:	429a      	cmp	r2, r3
34186dd0:	d116      	bne.n	34186e00 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186dd2:	4b77      	ldr	r3, [pc, #476]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186dd8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186ddc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186de6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186dec:	3b01      	subs	r3, #1
34186dee:	041b      	lsls	r3, r3, #16
34186df0:	4313      	orrs	r3, r2
34186df2:	4a6f      	ldr	r2, [pc, #444]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186df4:	430b      	orrs	r3, r1
34186df6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186dfa:	f7fd fd6b 	bl	341848d4 <LL_RCC_IC9_Enable>
34186dfe:	e026      	b.n	34186e4e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34186e00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e04:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186e08:	4b6d      	ldr	r3, [pc, #436]	@ (34186fc0 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34186e0a:	429a      	cmp	r2, r3
34186e0c:	d116      	bne.n	34186e3c <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186e0e:	4b68      	ldr	r3, [pc, #416]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e10:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186e14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186e22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186e28:	3b01      	subs	r3, #1
34186e2a:	041b      	lsls	r3, r3, #16
34186e2c:	4313      	orrs	r3, r2
34186e2e:	4a60      	ldr	r2, [pc, #384]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e30:	430b      	orrs	r3, r1
34186e32:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186e36:	f7fd fe4d 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186e3a:	e008      	b.n	34186e4e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34186e3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e40:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186e44:	4b5f      	ldr	r3, [pc, #380]	@ (34186fc4 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
34186e46:	429a      	cmp	r2, r3
34186e48:	d101      	bne.n	34186e4e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
34186e4a:	f7fe f803 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34186e4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e52:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
34186e56:	4618      	mov	r0, r3
34186e58:	f7fc ff9f 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34186e5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e60:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e64:	2100      	movs	r1, #0
34186e66:	64b9      	str	r1, [r7, #72]	@ 0x48
34186e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34186e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
34186e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34186e72:	4603      	mov	r3, r0
34186e74:	460a      	mov	r2, r1
34186e76:	4313      	orrs	r3, r2
34186e78:	d04b      	beq.n	34186f12 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34186e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e7e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186e82:	4b51      	ldr	r3, [pc, #324]	@ (34186fc8 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34186e84:	429a      	cmp	r2, r3
34186e86:	d116      	bne.n	34186eb6 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186e88:	4b49      	ldr	r3, [pc, #292]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186e8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186ea2:	3b01      	subs	r3, #1
34186ea4:	041b      	lsls	r3, r3, #16
34186ea6:	4313      	orrs	r3, r2
34186ea8:	4a41      	ldr	r2, [pc, #260]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186eaa:	430b      	orrs	r3, r1
34186eac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186eb0:	f7fd fd10 	bl	341848d4 <LL_RCC_IC9_Enable>
34186eb4:	e026      	b.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34186eb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eba:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186ebe:	4b43      	ldr	r3, [pc, #268]	@ (34186fcc <HAL_RCCEx_PeriphCLKConfig+0x2134>)
34186ec0:	429a      	cmp	r2, r3
34186ec2:	d116      	bne.n	34186ef2 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186ec4:	4b3a      	ldr	r3, [pc, #232]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186ec6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186eca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186ece:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186ed2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186ede:	3b01      	subs	r3, #1
34186ee0:	041b      	lsls	r3, r3, #16
34186ee2:	4313      	orrs	r3, r2
34186ee4:	4a32      	ldr	r2, [pc, #200]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186ee6:	430b      	orrs	r3, r1
34186ee8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186eec:	f7fd fdf2 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186ef0:	e008      	b.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34186ef2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ef6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186efa:	4b35      	ldr	r3, [pc, #212]	@ (34186fd0 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34186efc:	429a      	cmp	r2, r3
34186efe:	d101      	bne.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34186f00:	f7fd ffa8 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34186f04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f08:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186f0c:	4618      	mov	r0, r3
34186f0e:	f7fc ff44 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34186f12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f16:	e9d3 2300 	ldrd	r2, r3, [r3]
34186f1a:	2100      	movs	r1, #0
34186f1c:	6439      	str	r1, [r7, #64]	@ 0x40
34186f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34186f22:	647b      	str	r3, [r7, #68]	@ 0x44
34186f24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34186f28:	4603      	mov	r3, r0
34186f2a:	460a      	mov	r2, r1
34186f2c:	4313      	orrs	r3, r2
34186f2e:	d065      	beq.n	34186ffc <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34186f30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f34:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186f38:	4b26      	ldr	r3, [pc, #152]	@ (34186fd4 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
34186f3a:	429a      	cmp	r2, r3
34186f3c:	d116      	bne.n	34186f6c <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186f3e:	4b1c      	ldr	r3, [pc, #112]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186f44:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f48:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186f52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186f58:	3b01      	subs	r3, #1
34186f5a:	041b      	lsls	r3, r3, #16
34186f5c:	4313      	orrs	r3, r2
34186f5e:	4a14      	ldr	r2, [pc, #80]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f60:	430b      	orrs	r3, r1
34186f62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186f66:	f7fd fcb5 	bl	341848d4 <LL_RCC_IC9_Enable>
34186f6a:	e040      	b.n	34186fee <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34186f6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f70:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186f74:	4b18      	ldr	r3, [pc, #96]	@ (34186fd8 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34186f76:	429a      	cmp	r2, r3
34186f78:	d130      	bne.n	34186fdc <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186f7a:	4b0d      	ldr	r3, [pc, #52]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f7c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186f80:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f84:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186f8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186f94:	3b01      	subs	r3, #1
34186f96:	041b      	lsls	r3, r3, #16
34186f98:	4313      	orrs	r3, r2
34186f9a:	4a05      	ldr	r2, [pc, #20]	@ (34186fb0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f9c:	430b      	orrs	r3, r1
34186f9e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186fa2:	f7fd fd97 	bl	34184ad4 <LL_RCC_IC14_Enable>
34186fa6:	e022      	b.n	34186fee <HAL_RCCEx_PeriphCLKConfig+0x2156>
34186fa8:	07010830 	.word	0x07010830
34186fac:	07020c30 	.word	0x07020c30
34186fb0:	56028000 	.word	0x56028000
34186fb4:	07030c30 	.word	0x07030c30
34186fb8:	07010c30 	.word	0x07010c30
34186fbc:	07021030 	.word	0x07021030
34186fc0:	07031030 	.word	0x07031030
34186fc4:	07011030 	.word	0x07011030
34186fc8:	07021430 	.word	0x07021430
34186fcc:	07031430 	.word	0x07031430
34186fd0:	07011430 	.word	0x07011430
34186fd4:	07021830 	.word	0x07021830
34186fd8:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34186fdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fe0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186fe4:	4bc8      	ldr	r3, [pc, #800]	@ (34187308 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34186fe6:	429a      	cmp	r2, r3
34186fe8:	d101      	bne.n	34186fee <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34186fea:	f7fd ff33 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34186fee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ff2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34186ff6:	4618      	mov	r0, r3
34186ff8:	f7fc fecf 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34186ffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187000:	e9d3 2300 	ldrd	r2, r3, [r3]
34187004:	2100      	movs	r1, #0
34187006:	63b9      	str	r1, [r7, #56]	@ 0x38
34187008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
3418700e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34187012:	4603      	mov	r3, r0
34187014:	460a      	mov	r2, r1
34187016:	4313      	orrs	r3, r2
34187018:	d04b      	beq.n	341870b2 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3418701a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418701e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34187022:	4bba      	ldr	r3, [pc, #744]	@ (3418730c <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34187024:	429a      	cmp	r2, r3
34187026:	d116      	bne.n	34187056 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187028:	4bb9      	ldr	r3, [pc, #740]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418702a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418702e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187032:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187036:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418703a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418703c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187042:	3b01      	subs	r3, #1
34187044:	041b      	lsls	r3, r3, #16
34187046:	4313      	orrs	r3, r2
34187048:	4ab1      	ldr	r2, [pc, #708]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418704a:	430b      	orrs	r3, r1
3418704c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187050:	f7fd fc40 	bl	341848d4 <LL_RCC_IC9_Enable>
34187054:	e026      	b.n	341870a4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34187056:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418705a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418705e:	4bad      	ldr	r3, [pc, #692]	@ (34187314 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34187060:	429a      	cmp	r2, r3
34187062:	d116      	bne.n	34187092 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187064:	4baa      	ldr	r3, [pc, #680]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187066:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418706a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418706e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187072:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187076:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418707c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418707e:	3b01      	subs	r3, #1
34187080:	041b      	lsls	r3, r3, #16
34187082:	4313      	orrs	r3, r2
34187084:	4aa2      	ldr	r2, [pc, #648]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187086:	430b      	orrs	r3, r1
34187088:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418708c:	f7fd fd22 	bl	34184ad4 <LL_RCC_IC14_Enable>
34187090:	e008      	b.n	341870a4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34187092:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187096:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418709a:	4b9f      	ldr	r3, [pc, #636]	@ (34187318 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
3418709c:	429a      	cmp	r2, r3
3418709e:	d101      	bne.n	341870a4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
341870a0:	f7fd fed8 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
341870a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870a8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
341870ac:	4618      	mov	r0, r3
341870ae:	f7fc fe74 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
341870b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870b6:	e9d3 2300 	ldrd	r2, r3, [r3]
341870ba:	2100      	movs	r1, #0
341870bc:	6339      	str	r1, [r7, #48]	@ 0x30
341870be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341870c2:	637b      	str	r3, [r7, #52]	@ 0x34
341870c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
341870c8:	4603      	mov	r3, r0
341870ca:	460a      	mov	r2, r1
341870cc:	4313      	orrs	r3, r2
341870ce:	d04b      	beq.n	34187168 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
341870d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870d4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341870d8:	4a90      	ldr	r2, [pc, #576]	@ (3418731c <HAL_RCCEx_PeriphCLKConfig+0x2484>)
341870da:	4293      	cmp	r3, r2
341870dc:	d116      	bne.n	3418710c <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341870de:	4b8c      	ldr	r3, [pc, #560]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341870e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341870e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341870e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341870ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341870f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341870f8:	3b01      	subs	r3, #1
341870fa:	041b      	lsls	r3, r3, #16
341870fc:	4313      	orrs	r3, r2
341870fe:	4a84      	ldr	r2, [pc, #528]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187100:	430b      	orrs	r3, r1
34187102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187106:	f7fd fbe5 	bl	341848d4 <LL_RCC_IC9_Enable>
3418710a:	e026      	b.n	3418715a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3418710c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187110:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187114:	4a82      	ldr	r2, [pc, #520]	@ (34187320 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34187116:	4293      	cmp	r3, r2
34187118:	d116      	bne.n	34187148 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418711a:	4b7d      	ldr	r3, [pc, #500]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418711c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187120:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187124:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418712c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418712e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187134:	3b01      	subs	r3, #1
34187136:	041b      	lsls	r3, r3, #16
34187138:	4313      	orrs	r3, r2
3418713a:	4a75      	ldr	r2, [pc, #468]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418713c:	430b      	orrs	r3, r1
3418713e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187142:	f7fd fcc7 	bl	34184ad4 <LL_RCC_IC14_Enable>
34187146:	e008      	b.n	3418715a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34187148:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418714c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187150:	4a74      	ldr	r2, [pc, #464]	@ (34187324 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34187152:	4293      	cmp	r3, r2
34187154:	d101      	bne.n	3418715a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
34187156:	f7fd fe7d 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3418715a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418715e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187162:	4618      	mov	r0, r3
34187164:	f7fc fe19 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34187168:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418716c:	e9d3 2300 	ldrd	r2, r3, [r3]
34187170:	2100      	movs	r1, #0
34187172:	62b9      	str	r1, [r7, #40]	@ 0x28
34187174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34187178:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418717a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418717e:	4603      	mov	r3, r0
34187180:	460a      	mov	r2, r1
34187182:	4313      	orrs	r3, r2
34187184:	d04b      	beq.n	3418721e <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34187186:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418718a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418718e:	4a66      	ldr	r2, [pc, #408]	@ (34187328 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34187190:	4293      	cmp	r3, r2
34187192:	d116      	bne.n	341871c2 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187194:	4b5e      	ldr	r3, [pc, #376]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418719a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418719e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341871a2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341871a6:	6c91      	ldr	r1, [r2, #72]	@ 0x48
341871a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341871ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
341871ae:	3a01      	subs	r2, #1
341871b0:	0412      	lsls	r2, r2, #16
341871b2:	430a      	orrs	r2, r1
341871b4:	4956      	ldr	r1, [pc, #344]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341871b6:	4313      	orrs	r3, r2
341871b8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341871bc:	f7fd fb8a 	bl	341848d4 <LL_RCC_IC9_Enable>
341871c0:	e026      	b.n	34187210 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
341871c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341871ca:	4a58      	ldr	r2, [pc, #352]	@ (3418732c <HAL_RCCEx_PeriphCLKConfig+0x2494>)
341871cc:	4293      	cmp	r3, r2
341871ce:	d116      	bne.n	341871fe <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341871d0:	4b4f      	ldr	r3, [pc, #316]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341871d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341871d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341871da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341871de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341871e2:	6f11      	ldr	r1, [r2, #112]	@ 0x70
341871e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341871e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
341871ea:	3a01      	subs	r2, #1
341871ec:	0412      	lsls	r2, r2, #16
341871ee:	430a      	orrs	r2, r1
341871f0:	4947      	ldr	r1, [pc, #284]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341871f2:	4313      	orrs	r3, r2
341871f4:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341871f8:	f7fd fc6c 	bl	34184ad4 <LL_RCC_IC14_Enable>
341871fc:	e008      	b.n	34187210 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
341871fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187202:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187206:	4a4a      	ldr	r2, [pc, #296]	@ (34187330 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34187208:	4293      	cmp	r3, r2
3418720a:	d101      	bne.n	34187210 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
3418720c:	f7fd fe22 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34187210:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187214:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187218:	4618      	mov	r0, r3
3418721a:	f7fc fdbe 	bl	34183d9a <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3418721e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187222:	e9d3 2300 	ldrd	r2, r3, [r3]
34187226:	2100      	movs	r1, #0
34187228:	6239      	str	r1, [r7, #32]
3418722a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418722e:	627b      	str	r3, [r7, #36]	@ 0x24
34187230:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34187234:	4603      	mov	r3, r0
34187236:	460a      	mov	r2, r1
34187238:	4313      	orrs	r3, r2
3418723a:	d014      	beq.n	34187266 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3418723c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187240:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34187244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187248:	4618      	mov	r0, r3
3418724a:	f7fc fd4e 	bl	34183cea <LL_RCC_SetOTGPHYCKREFClockSource>
3418724e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187252:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34187256:	0fdb      	lsrs	r3, r3, #31
34187258:	2b01      	cmp	r3, #1
3418725a:	d102      	bne.n	34187262 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
3418725c:	f7fc faf0 	bl	34183840 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187260:	e001      	b.n	34187266 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
34187262:	f7fc fadd 	bl	34183820 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34187266:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418726a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418726e:	2100      	movs	r1, #0
34187270:	61b9      	str	r1, [r7, #24]
34187272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34187276:	61fb      	str	r3, [r7, #28]
34187278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3418727c:	4603      	mov	r3, r0
3418727e:	460a      	mov	r2, r1
34187280:	4313      	orrs	r3, r2
34187282:	d014      	beq.n	341872ae <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34187284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187288:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418728c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187290:	4618      	mov	r0, r3
34187292:	f7fc fd2a 	bl	34183cea <LL_RCC_SetOTGPHYCKREFClockSource>
34187296:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418729a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418729e:	0fdb      	lsrs	r3, r3, #31
341872a0:	2b01      	cmp	r3, #1
341872a2:	d102      	bne.n	341872aa <HAL_RCCEx_PeriphCLKConfig+0x2412>
341872a4:	f7fc facc 	bl	34183840 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341872a8:	e001      	b.n	341872ae <HAL_RCCEx_PeriphCLKConfig+0x2416>
341872aa:	f7fc fab9 	bl	34183820 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
341872ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872b2:	e9d3 2300 	ldrd	r2, r3, [r3]
341872b6:	2100      	movs	r1, #0
341872b8:	6139      	str	r1, [r7, #16]
341872ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
341872be:	617b      	str	r3, [r7, #20]
341872c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
341872c4:	4603      	mov	r3, r0
341872c6:	460a      	mov	r2, r1
341872c8:	4313      	orrs	r3, r2
341872ca:	d053      	beq.n	34187374 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
341872cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341872d4:	4a17      	ldr	r2, [pc, #92]	@ (34187334 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
341872d6:	4293      	cmp	r3, r2
341872d8:	d12e      	bne.n	34187338 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341872da:	4b0d      	ldr	r3, [pc, #52]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341872dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341872e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341872e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341872e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341872ec:	6f91      	ldr	r1, [r2, #120]	@ 0x78
341872ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341872f2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
341872f4:	3a01      	subs	r2, #1
341872f6:	0412      	lsls	r2, r2, #16
341872f8:	430a      	orrs	r2, r1
341872fa:	4905      	ldr	r1, [pc, #20]	@ (34187310 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341872fc:	4313      	orrs	r3, r2
341872fe:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187302:	f7fd fc27 	bl	34184b54 <LL_RCC_IC15_Enable>
34187306:	e020      	b.n	3418734a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34187308:	07011830 	.word	0x07011830
3418730c:	07021c30 	.word	0x07021c30
34187310:	56028000 	.word	0x56028000
34187314:	07031c30 	.word	0x07031c30
34187318:	07011c30 	.word	0x07011c30
3418731c:	07020034 	.word	0x07020034
34187320:	07030034 	.word	0x07030034
34187324:	07010034 	.word	0x07010034
34187328:	07020434 	.word	0x07020434
3418732c:	07030434 	.word	0x07030434
34187330:	07010434 	.word	0x07010434
34187334:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34187338:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418733c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187340:	4a43      	ldr	r2, [pc, #268]	@ (34187450 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
34187342:	4293      	cmp	r3, r2
34187344:	d101      	bne.n	3418734a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
34187346:	f7fd fd85 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3418734a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418734e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187356:	4618      	mov	r0, r3
34187358:	f7fc fcbc 	bl	34183cd4 <LL_RCC_SetOTGPHYClockSource>
3418735c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187360:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187364:	0fdb      	lsrs	r3, r3, #31
34187366:	2b01      	cmp	r3, #1
34187368:	d102      	bne.n	34187370 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
3418736a:	f7fc fa69 	bl	34183840 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418736e:	e001      	b.n	34187374 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34187370:	f7fc fa56 	bl	34183820 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34187374:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187378:	e9d3 2300 	ldrd	r2, r3, [r3]
3418737c:	2100      	movs	r1, #0
3418737e:	60b9      	str	r1, [r7, #8]
34187380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34187384:	60fb      	str	r3, [r7, #12]
34187386:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418738a:	4603      	mov	r3, r0
3418738c:	460a      	mov	r2, r1
3418738e:	4313      	orrs	r3, r2
34187390:	d03b      	beq.n	3418740a <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34187392:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187396:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418739a:	4a2e      	ldr	r2, [pc, #184]	@ (34187454 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
3418739c:	4293      	cmp	r3, r2
3418739e:	d116      	bne.n	341873ce <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341873a0:	4b2d      	ldr	r3, [pc, #180]	@ (34187458 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
341873a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341873a6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341873aa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341873ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341873b2:	6f91      	ldr	r1, [r2, #120]	@ 0x78
341873b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341873b8:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
341873ba:	3a01      	subs	r2, #1
341873bc:	0412      	lsls	r2, r2, #16
341873be:	430a      	orrs	r2, r1
341873c0:	4925      	ldr	r1, [pc, #148]	@ (34187458 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
341873c2:	4313      	orrs	r3, r2
341873c4:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341873c8:	f7fd fbc4 	bl	34184b54 <LL_RCC_IC15_Enable>
341873cc:	e008      	b.n	341873e0 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
341873ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873d2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341873d6:	4a21      	ldr	r2, [pc, #132]	@ (3418745c <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
341873d8:	4293      	cmp	r3, r2
341873da:	d101      	bne.n	341873e0 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
341873dc:	f7fd fd3a 	bl	34184e54 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
341873e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873e4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341873e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341873ec:	4618      	mov	r0, r3
341873ee:	f7fc fc71 	bl	34183cd4 <LL_RCC_SetOTGPHYClockSource>
341873f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873f6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341873fa:	0fdb      	lsrs	r3, r3, #31
341873fc:	2b01      	cmp	r3, #1
341873fe:	d102      	bne.n	34187406 <HAL_RCCEx_PeriphCLKConfig+0x256e>
34187400:	f7fc fa1e 	bl	34183840 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187404:	e001      	b.n	3418740a <HAL_RCCEx_PeriphCLKConfig+0x2572>
34187406:	f7fc fa0b 	bl	34183820 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3418740a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418740e:	e9d3 2300 	ldrd	r2, r3, [r3]
34187412:	2100      	movs	r1, #0
34187414:	6039      	str	r1, [r7, #0]
34187416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418741a:	607b      	str	r3, [r7, #4]
3418741c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187420:	4603      	mov	r3, r0
34187422:	460a      	mov	r2, r1
34187424:	4313      	orrs	r3, r2
34187426:	d006      	beq.n	34187436 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34187428:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418742c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34187430:	4618      	mov	r0, r3
34187432:	f7fc fe8b 	bl	3418414c <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34187436:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
3418743a:	2b00      	cmp	r3, #0
3418743c:	d101      	bne.n	34187442 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
3418743e:	2300      	movs	r3, #0
34187440:	e000      	b.n	34187444 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
34187442:	2301      	movs	r3, #1
}
34187444:	4618      	mov	r0, r3
34187446:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
3418744a:	46bd      	mov	sp, r7
3418744c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34187450:	03010c14 	.word	0x03010c14
34187454:	03021414 	.word	0x03021414
34187458:	56028000 	.word	0x56028000
3418745c:	03011414 	.word	0x03011414

34187460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34187460:	b590      	push	{r4, r7, lr}
34187462:	b085      	sub	sp, #20
34187464:	af00      	add	r7, sp, #0
34187466:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3418746a:	2100      	movs	r1, #0
3418746c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3418746e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187472:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34187476:	ea50 0104 	orrs.w	r1, r0, r4
3418747a:	f000 8436 	beq.w	34187cea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
3418747e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187482:	2801      	cmp	r0, #1
34187484:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34187488:	f080 8434 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418748c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187490:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34187494:	ea50 0104 	orrs.w	r1, r0, r4
34187498:	f000 8422 	beq.w	34187ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
3418749c:	e9d7 0100 	ldrd	r0, r1, [r7]
341874a0:	2801      	cmp	r0, #1
341874a2:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
341874a6:	f080 8425 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341874aa:	e9d7 0100 	ldrd	r0, r1, [r7]
341874ae:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
341874b2:	ea50 0104 	orrs.w	r1, r0, r4
341874b6:	f000 840e 	beq.w	34187cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
341874ba:	e9d7 0100 	ldrd	r0, r1, [r7]
341874be:	2801      	cmp	r0, #1
341874c0:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
341874c4:	f080 8416 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341874c8:	e9d7 0100 	ldrd	r0, r1, [r7]
341874cc:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
341874d0:	ea50 0104 	orrs.w	r1, r0, r4
341874d4:	f000 83fa 	beq.w	34187ccc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
341874d8:	e9d7 0100 	ldrd	r0, r1, [r7]
341874dc:	2801      	cmp	r0, #1
341874de:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
341874e2:	f080 8407 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341874e6:	e9d7 0100 	ldrd	r0, r1, [r7]
341874ea:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
341874ee:	ea50 0104 	orrs.w	r1, r0, r4
341874f2:	f000 83e6 	beq.w	34187cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
341874f6:	e9d7 0100 	ldrd	r0, r1, [r7]
341874fa:	2801      	cmp	r0, #1
341874fc:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34187500:	f080 83f8 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187504:	e9d7 0100 	ldrd	r0, r1, [r7]
34187508:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3418750c:	ea50 0104 	orrs.w	r1, r0, r4
34187510:	f000 83d2 	beq.w	34187cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34187514:	e9d7 0100 	ldrd	r0, r1, [r7]
34187518:	2801      	cmp	r0, #1
3418751a:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3418751e:	f080 83e9 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187522:	e9d7 0100 	ldrd	r0, r1, [r7]
34187526:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3418752a:	ea50 0104 	orrs.w	r1, r0, r4
3418752e:	f000 83be 	beq.w	34187cae <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34187532:	e9d7 0100 	ldrd	r0, r1, [r7]
34187536:	2801      	cmp	r0, #1
34187538:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3418753c:	f080 83da 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187540:	e9d7 0100 	ldrd	r0, r1, [r7]
34187544:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34187548:	ea50 0104 	orrs.w	r1, r0, r4
3418754c:	f000 83aa 	beq.w	34187ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34187550:	e9d7 0100 	ldrd	r0, r1, [r7]
34187554:	2801      	cmp	r0, #1
34187556:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3418755a:	f080 83cb 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418755e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187562:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34187566:	ea50 0104 	orrs.w	r1, r0, r4
3418756a:	f000 8396 	beq.w	34187c9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3418756e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187572:	2801      	cmp	r0, #1
34187574:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34187578:	f080 83bc 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418757c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187580:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34187584:	ea50 0104 	orrs.w	r1, r0, r4
34187588:	f000 8382 	beq.w	34187c90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3418758c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187590:	2801      	cmp	r0, #1
34187592:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
34187596:	f080 83ad 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418759a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418759e:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
341875a2:	ea50 0104 	orrs.w	r1, r0, r4
341875a6:	f000 836e 	beq.w	34187c86 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
341875aa:	e9d7 0100 	ldrd	r0, r1, [r7]
341875ae:	2801      	cmp	r0, #1
341875b0:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
341875b4:	f080 839e 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341875bc:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
341875c0:	ea50 0104 	orrs.w	r1, r0, r4
341875c4:	f000 835a 	beq.w	34187c7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
341875c8:	e9d7 0100 	ldrd	r0, r1, [r7]
341875cc:	2801      	cmp	r0, #1
341875ce:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
341875d2:	f080 838f 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875d6:	e9d7 0100 	ldrd	r0, r1, [r7]
341875da:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
341875de:	ea50 0104 	orrs.w	r1, r0, r4
341875e2:	f000 8346 	beq.w	34187c72 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
341875e6:	e9d7 0100 	ldrd	r0, r1, [r7]
341875ea:	2801      	cmp	r0, #1
341875ec:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
341875f0:	f080 8380 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875f4:	e9d7 0100 	ldrd	r0, r1, [r7]
341875f8:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
341875fc:	ea50 0104 	orrs.w	r1, r0, r4
34187600:	f000 8332 	beq.w	34187c68 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34187604:	e9d7 0100 	ldrd	r0, r1, [r7]
34187608:	2801      	cmp	r0, #1
3418760a:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3418760e:	f080 8371 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187612:	e9d7 0100 	ldrd	r0, r1, [r7]
34187616:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3418761a:	ea50 0104 	orrs.w	r1, r0, r4
3418761e:	f000 831e 	beq.w	34187c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34187622:	e9d7 0100 	ldrd	r0, r1, [r7]
34187626:	2801      	cmp	r0, #1
34187628:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3418762c:	f080 8362 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187630:	e9d7 0100 	ldrd	r0, r1, [r7]
34187634:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34187638:	ea50 0104 	orrs.w	r1, r0, r4
3418763c:	f000 830a 	beq.w	34187c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34187640:	e9d7 0100 	ldrd	r0, r1, [r7]
34187644:	2801      	cmp	r0, #1
34187646:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3418764a:	f080 8353 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418764e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187652:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
34187656:	ea50 0104 	orrs.w	r1, r0, r4
3418765a:	f000 82f6 	beq.w	34187c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3418765e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187662:	2801      	cmp	r0, #1
34187664:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34187668:	f080 8344 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418766c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187670:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34187674:	ea50 0104 	orrs.w	r1, r0, r4
34187678:	f000 82e2 	beq.w	34187c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3418767c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187680:	2801      	cmp	r0, #1
34187682:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34187686:	f080 8335 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418768a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418768e:	f1a1 0420 	sub.w	r4, r1, #32
34187692:	ea50 0104 	orrs.w	r1, r0, r4
34187696:	f000 82ce 	beq.w	34187c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3418769a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418769e:	2801      	cmp	r0, #1
341876a0:	f171 0120 	sbcs.w	r1, r1, #32
341876a4:	f080 8326 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876a8:	e9d7 0100 	ldrd	r0, r1, [r7]
341876ac:	f1a1 0410 	sub.w	r4, r1, #16
341876b0:	ea50 0104 	orrs.w	r1, r0, r4
341876b4:	f000 82ba 	beq.w	34187c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
341876b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341876bc:	2801      	cmp	r0, #1
341876be:	f171 0110 	sbcs.w	r1, r1, #16
341876c2:	f080 8317 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341876ca:	f1a1 0408 	sub.w	r4, r1, #8
341876ce:	ea50 0104 	orrs.w	r1, r0, r4
341876d2:	f000 82a6 	beq.w	34187c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
341876d6:	e9d7 0100 	ldrd	r0, r1, [r7]
341876da:	2801      	cmp	r0, #1
341876dc:	f171 0108 	sbcs.w	r1, r1, #8
341876e0:	f080 8308 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341876e8:	1f0c      	subs	r4, r1, #4
341876ea:	ea50 0104 	orrs.w	r1, r0, r4
341876ee:	f000 8293 	beq.w	34187c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
341876f2:	e9d7 0100 	ldrd	r0, r1, [r7]
341876f6:	2801      	cmp	r0, #1
341876f8:	f171 0104 	sbcs.w	r1, r1, #4
341876fc:	f080 82fa 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187700:	e9d7 0100 	ldrd	r0, r1, [r7]
34187704:	1e8c      	subs	r4, r1, #2
34187706:	ea50 0104 	orrs.w	r1, r0, r4
3418770a:	f000 8280 	beq.w	34187c0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3418770e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187712:	2801      	cmp	r0, #1
34187714:	f171 0102 	sbcs.w	r1, r1, #2
34187718:	f080 82ec 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418771c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187720:	1e4c      	subs	r4, r1, #1
34187722:	ea50 0104 	orrs.w	r1, r0, r4
34187726:	f000 826d 	beq.w	34187c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3418772a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418772e:	2801      	cmp	r0, #1
34187730:	f171 0101 	sbcs.w	r1, r1, #1
34187734:	f080 82de 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187738:	e9d7 0100 	ldrd	r0, r1, [r7]
3418773c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34187740:	4321      	orrs	r1, r4
34187742:	f000 825a 	beq.w	34187bfa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
34187746:	e9d7 0100 	ldrd	r0, r1, [r7]
3418774a:	4cda      	ldr	r4, [pc, #872]	@ (34187ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3418774c:	42a0      	cmp	r0, r4
3418774e:	f171 0100 	sbcs.w	r1, r1, #0
34187752:	f080 82cf 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187756:	e9d7 0100 	ldrd	r0, r1, [r7]
3418775a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3418775e:	4321      	orrs	r1, r4
34187760:	f000 8246 	beq.w	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34187764:	e9d7 0100 	ldrd	r0, r1, [r7]
34187768:	4cd3      	ldr	r4, [pc, #844]	@ (34187ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3418776a:	42a0      	cmp	r0, r4
3418776c:	f171 0100 	sbcs.w	r1, r1, #0
34187770:	f080 82c0 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187774:	e9d7 0100 	ldrd	r0, r1, [r7]
34187778:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3418777c:	4321      	orrs	r1, r4
3418777e:	f000 8232 	beq.w	34187be6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
34187782:	e9d7 0100 	ldrd	r0, r1, [r7]
34187786:	4ccd      	ldr	r4, [pc, #820]	@ (34187abc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34187788:	42a0      	cmp	r0, r4
3418778a:	f171 0100 	sbcs.w	r1, r1, #0
3418778e:	f080 82b1 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187792:	e9d7 0100 	ldrd	r0, r1, [r7]
34187796:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3418779a:	4321      	orrs	r1, r4
3418779c:	f000 821e 	beq.w	34187bdc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
341877a0:	e9d7 0100 	ldrd	r0, r1, [r7]
341877a4:	4cc6      	ldr	r4, [pc, #792]	@ (34187ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
341877a6:	42a0      	cmp	r0, r4
341877a8:	f171 0100 	sbcs.w	r1, r1, #0
341877ac:	f080 82a2 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877b0:	e9d7 0100 	ldrd	r0, r1, [r7]
341877b4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
341877b8:	4321      	orrs	r1, r4
341877ba:	f000 820b 	beq.w	34187bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
341877be:	e9d7 0100 	ldrd	r0, r1, [r7]
341877c2:	4cc0      	ldr	r4, [pc, #768]	@ (34187ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
341877c4:	42a0      	cmp	r0, r4
341877c6:	f171 0100 	sbcs.w	r1, r1, #0
341877ca:	f080 8293 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877ce:	e9d7 0100 	ldrd	r0, r1, [r7]
341877d2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
341877d6:	4321      	orrs	r1, r4
341877d8:	f000 81f7 	beq.w	34187bca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
341877dc:	e9d7 0100 	ldrd	r0, r1, [r7]
341877e0:	4cb9      	ldr	r4, [pc, #740]	@ (34187ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
341877e2:	42a0      	cmp	r0, r4
341877e4:	f171 0100 	sbcs.w	r1, r1, #0
341877e8:	f080 8284 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877ec:	e9d7 0100 	ldrd	r0, r1, [r7]
341877f0:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
341877f4:	4321      	orrs	r1, r4
341877f6:	f000 81e2 	beq.w	34187bbe <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
341877fa:	e9d7 0100 	ldrd	r0, r1, [r7]
341877fe:	4cb3      	ldr	r4, [pc, #716]	@ (34187acc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34187800:	42a0      	cmp	r0, r4
34187802:	f171 0100 	sbcs.w	r1, r1, #0
34187806:	f080 8275 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418780a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418780e:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34187812:	4321      	orrs	r1, r4
34187814:	f000 81cd 	beq.w	34187bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34187818:	e9d7 0100 	ldrd	r0, r1, [r7]
3418781c:	4cac      	ldr	r4, [pc, #688]	@ (34187ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3418781e:	42a0      	cmp	r0, r4
34187820:	f171 0100 	sbcs.w	r1, r1, #0
34187824:	f080 8266 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187828:	e9d7 0100 	ldrd	r0, r1, [r7]
3418782c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34187830:	4321      	orrs	r1, r4
34187832:	f000 81b8 	beq.w	34187ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34187836:	e9d7 0100 	ldrd	r0, r1, [r7]
3418783a:	4ca6      	ldr	r4, [pc, #664]	@ (34187ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3418783c:	42a0      	cmp	r0, r4
3418783e:	f171 0100 	sbcs.w	r1, r1, #0
34187842:	f080 8257 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187846:	e9d7 0100 	ldrd	r0, r1, [r7]
3418784a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3418784e:	4321      	orrs	r1, r4
34187850:	f000 81a4 	beq.w	34187b9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34187854:	e9d7 0100 	ldrd	r0, r1, [r7]
34187858:	4c9f      	ldr	r4, [pc, #636]	@ (34187ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3418785a:	42a0      	cmp	r0, r4
3418785c:	f171 0100 	sbcs.w	r1, r1, #0
34187860:	f080 8248 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187864:	e9d7 0100 	ldrd	r0, r1, [r7]
34187868:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3418786c:	4321      	orrs	r1, r4
3418786e:	f000 8190 	beq.w	34187b92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34187872:	e9d7 0100 	ldrd	r0, r1, [r7]
34187876:	4c99      	ldr	r4, [pc, #612]	@ (34187adc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34187878:	42a0      	cmp	r0, r4
3418787a:	f171 0100 	sbcs.w	r1, r1, #0
3418787e:	f080 8239 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187882:	e9d7 0100 	ldrd	r0, r1, [r7]
34187886:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3418788a:	4321      	orrs	r1, r4
3418788c:	f000 817c 	beq.w	34187b88 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34187890:	e9d7 0100 	ldrd	r0, r1, [r7]
34187894:	4c92      	ldr	r4, [pc, #584]	@ (34187ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34187896:	42a0      	cmp	r0, r4
34187898:	f171 0100 	sbcs.w	r1, r1, #0
3418789c:	f080 822a 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878a0:	e9d7 0100 	ldrd	r0, r1, [r7]
341878a4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
341878a8:	4321      	orrs	r1, r4
341878aa:	f000 8168 	beq.w	34187b7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
341878ae:	e9d7 0100 	ldrd	r0, r1, [r7]
341878b2:	4c8c      	ldr	r4, [pc, #560]	@ (34187ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
341878b4:	42a0      	cmp	r0, r4
341878b6:	f171 0100 	sbcs.w	r1, r1, #0
341878ba:	f080 821b 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878be:	e9d7 0100 	ldrd	r0, r1, [r7]
341878c2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
341878c6:	4321      	orrs	r1, r4
341878c8:	f000 8154 	beq.w	34187b74 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
341878cc:	e9d7 0100 	ldrd	r0, r1, [r7]
341878d0:	4c85      	ldr	r4, [pc, #532]	@ (34187ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
341878d2:	42a0      	cmp	r0, r4
341878d4:	f171 0100 	sbcs.w	r1, r1, #0
341878d8:	f080 820c 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878dc:	e9d7 0100 	ldrd	r0, r1, [r7]
341878e0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
341878e4:	4321      	orrs	r1, r4
341878e6:	f000 8140 	beq.w	34187b6a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
341878ea:	e9d7 0100 	ldrd	r0, r1, [r7]
341878ee:	4c7f      	ldr	r4, [pc, #508]	@ (34187aec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
341878f0:	42a0      	cmp	r0, r4
341878f2:	f171 0100 	sbcs.w	r1, r1, #0
341878f6:	f080 81fd 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878fa:	e9d7 0100 	ldrd	r0, r1, [r7]
341878fe:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34187902:	4321      	orrs	r1, r4
34187904:	f000 812c 	beq.w	34187b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34187908:	e9d7 0100 	ldrd	r0, r1, [r7]
3418790c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34187910:	f171 0100 	sbcs.w	r1, r1, #0
34187914:	f080 81ee 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187918:	e9d7 0100 	ldrd	r0, r1, [r7]
3418791c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34187920:	4321      	orrs	r1, r4
34187922:	f000 8118 	beq.w	34187b56 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
34187926:	e9d7 0100 	ldrd	r0, r1, [r7]
3418792a:	f248 0401 	movw	r4, #32769	@ 0x8001
3418792e:	42a0      	cmp	r0, r4
34187930:	f171 0100 	sbcs.w	r1, r1, #0
34187934:	f080 81de 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187938:	e9d7 0100 	ldrd	r0, r1, [r7]
3418793c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34187940:	4321      	orrs	r1, r4
34187942:	f000 8103 	beq.w	34187b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34187946:	e9d7 0100 	ldrd	r0, r1, [r7]
3418794a:	f244 0401 	movw	r4, #16385	@ 0x4001
3418794e:	42a0      	cmp	r0, r4
34187950:	f171 0100 	sbcs.w	r1, r1, #0
34187954:	f080 81ce 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187958:	e9d7 0100 	ldrd	r0, r1, [r7]
3418795c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34187960:	4321      	orrs	r1, r4
34187962:	f000 80ee 	beq.w	34187b42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34187966:	e9d7 0100 	ldrd	r0, r1, [r7]
3418796a:	f242 0401 	movw	r4, #8193	@ 0x2001
3418796e:	42a0      	cmp	r0, r4
34187970:	f171 0100 	sbcs.w	r1, r1, #0
34187974:	f080 81be 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187978:	e9d7 0100 	ldrd	r0, r1, [r7]
3418797c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34187980:	4321      	orrs	r1, r4
34187982:	f000 80d9 	beq.w	34187b38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34187986:	e9d7 0100 	ldrd	r0, r1, [r7]
3418798a:	f241 0401 	movw	r4, #4097	@ 0x1001
3418798e:	42a0      	cmp	r0, r4
34187990:	f171 0100 	sbcs.w	r1, r1, #0
34187994:	f080 81ae 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187998:	e9d7 0100 	ldrd	r0, r1, [r7]
3418799c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
341879a0:	4321      	orrs	r1, r4
341879a2:	f000 80c4 	beq.w	34187b2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
341879a6:	e9d7 0100 	ldrd	r0, r1, [r7]
341879aa:	f640 0401 	movw	r4, #2049	@ 0x801
341879ae:	42a0      	cmp	r0, r4
341879b0:	f171 0100 	sbcs.w	r1, r1, #0
341879b4:	f080 819e 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341879bc:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
341879c0:	4321      	orrs	r1, r4
341879c2:	f000 80af 	beq.w	34187b24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
341879c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341879ca:	f240 4401 	movw	r4, #1025	@ 0x401
341879ce:	42a0      	cmp	r0, r4
341879d0:	f171 0100 	sbcs.w	r1, r1, #0
341879d4:	f080 818e 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879d8:	e9d7 0100 	ldrd	r0, r1, [r7]
341879dc:	2821      	cmp	r0, #33	@ 0x21
341879de:	f171 0100 	sbcs.w	r1, r1, #0
341879e2:	d255      	bcs.n	34187a90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
341879e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341879e8:	4301      	orrs	r1, r0
341879ea:	f000 8183 	beq.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879ee:	e9d7 0100 	ldrd	r0, r1, [r7]
341879f2:	1e42      	subs	r2, r0, #1
341879f4:	f141 33ff 	adc.w	r3, r1, #4294967295
341879f8:	2a20      	cmp	r2, #32
341879fa:	f173 0100 	sbcs.w	r1, r3, #0
341879fe:	f080 8179 	bcs.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a02:	2a1f      	cmp	r2, #31
34187a04:	f200 8176 	bhi.w	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a08:	a101      	add	r1, pc, #4	@ (adr r1, 34187a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34187a0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34187a0e:	bf00      	nop
34187a10:	34187a9f 	.word	0x34187a9f
34187a14:	34187aa9 	.word	0x34187aa9
34187a18:	34187cf5 	.word	0x34187cf5
34187a1c:	34187af9 	.word	0x34187af9
34187a20:	34187cf5 	.word	0x34187cf5
34187a24:	34187cf5 	.word	0x34187cf5
34187a28:	34187cf5 	.word	0x34187cf5
34187a2c:	34187af1 	.word	0x34187af1
34187a30:	34187cf5 	.word	0x34187cf5
34187a34:	34187cf5 	.word	0x34187cf5
34187a38:	34187cf5 	.word	0x34187cf5
34187a3c:	34187cf5 	.word	0x34187cf5
34187a40:	34187cf5 	.word	0x34187cf5
34187a44:	34187cf5 	.word	0x34187cf5
34187a48:	34187cf5 	.word	0x34187cf5
34187a4c:	34187b03 	.word	0x34187b03
34187a50:	34187cf5 	.word	0x34187cf5
34187a54:	34187cf5 	.word	0x34187cf5
34187a58:	34187cf5 	.word	0x34187cf5
34187a5c:	34187cf5 	.word	0x34187cf5
34187a60:	34187cf5 	.word	0x34187cf5
34187a64:	34187cf5 	.word	0x34187cf5
34187a68:	34187cf5 	.word	0x34187cf5
34187a6c:	34187cf5 	.word	0x34187cf5
34187a70:	34187cf5 	.word	0x34187cf5
34187a74:	34187cf5 	.word	0x34187cf5
34187a78:	34187cf5 	.word	0x34187cf5
34187a7c:	34187cf5 	.word	0x34187cf5
34187a80:	34187cf5 	.word	0x34187cf5
34187a84:	34187cf5 	.word	0x34187cf5
34187a88:	34187cf5 	.word	0x34187cf5
34187a8c:	34187b0f 	.word	0x34187b0f
34187a90:	e9d7 2300 	ldrd	r2, r3, [r7]
34187a94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34187a98:	430b      	orrs	r3, r1
34187a9a:	d03e      	beq.n	34187b1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
34187a9c:	e12a      	b.n	34187cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
34187a9e:	2070      	movs	r0, #112	@ 0x70
34187aa0:	f000 fb90 	bl	341881c4 <RCCEx_GetADCCLKFreq>
34187aa4:	60f8      	str	r0, [r7, #12]
      break;
34187aa6:	e126      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34187aa8:	2007      	movs	r0, #7
34187aaa:	f000 fc8d 	bl	341883c8 <RCCEx_GetADFCLKFreq>
34187aae:	60f8      	str	r0, [r7, #12]
      break;
34187ab0:	e121      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
34187ab2:	bf00      	nop
34187ab4:	80000001 	.word	0x80000001
34187ab8:	40000001 	.word	0x40000001
34187abc:	20000001 	.word	0x20000001
34187ac0:	10000001 	.word	0x10000001
34187ac4:	08000001 	.word	0x08000001
34187ac8:	04000001 	.word	0x04000001
34187acc:	02000001 	.word	0x02000001
34187ad0:	01000001 	.word	0x01000001
34187ad4:	00800001 	.word	0x00800001
34187ad8:	00400001 	.word	0x00400001
34187adc:	00200001 	.word	0x00200001
34187ae0:	00100001 	.word	0x00100001
34187ae4:	00080001 	.word	0x00080001
34187ae8:	00040001 	.word	0x00040001
34187aec:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34187af0:	f000 ff0c 	bl	3418890c <RCCEx_GetCSICLKFreq>
34187af4:	60f8      	str	r0, [r7, #12]
      break;
34187af6:	e0fe      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187af8:	2007      	movs	r0, #7
34187afa:	f000 fd51 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34187afe:	60f8      	str	r0, [r7, #12]
      break;
34187b00:	e0f9      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34187b02:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34187b06:	f000 ff4d 	bl	341889a4 <RCCEx_GetDCMIPPCLKFreq>
34187b0a:	60f8      	str	r0, [r7, #12]
      break;
34187b0c:	e0f3      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34187b0e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34187b12:	f000 ffd1 	bl	34188ab8 <RCCEx_GetETH1CLKFreq>
34187b16:	60f8      	str	r0, [r7, #12]
      break;
34187b18:	e0ed      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34187b1a:	2003      	movs	r0, #3
34187b1c:	f001 f84c 	bl	34188bb8 <RCCEx_GetETH1PTPCLKFreq>
34187b20:	60f8      	str	r0, [r7, #12]
      break;
34187b22:	e0e8      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34187b24:	2003      	movs	r0, #3
34187b26:	f001 f8cb 	bl	34188cc0 <RCCEx_GetFDCANCLKFreq>
34187b2a:	60f8      	str	r0, [r7, #12]
      break;
34187b2c:	e0e3      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34187b2e:	2030      	movs	r0, #48	@ 0x30
34187b30:	f001 f946 	bl	34188dc0 <RCCEx_GetFMCCLKFreq>
34187b34:	60f8      	str	r0, [r7, #12]
      break;
34187b36:	e0de      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34187b38:	4871      	ldr	r0, [pc, #452]	@ (34187d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34187b3a:	f001 f9f9 	bl	34188f30 <RCCEx_GetI2CCLKFreq>
34187b3e:	60f8      	str	r0, [r7, #12]
      break;
34187b40:	e0d9      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34187b42:	4870      	ldr	r0, [pc, #448]	@ (34187d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34187b44:	f001 f9f4 	bl	34188f30 <RCCEx_GetI2CCLKFreq>
34187b48:	60f8      	str	r0, [r7, #12]
      break;
34187b4a:	e0d4      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34187b4c:	486e      	ldr	r0, [pc, #440]	@ (34187d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34187b4e:	f001 f9ef 	bl	34188f30 <RCCEx_GetI2CCLKFreq>
34187b52:	60f8      	str	r0, [r7, #12]
      break;
34187b54:	e0cf      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34187b56:	486d      	ldr	r0, [pc, #436]	@ (34187d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34187b58:	f001 f9ea 	bl	34188f30 <RCCEx_GetI2CCLKFreq>
34187b5c:	60f8      	str	r0, [r7, #12]
      break;
34187b5e:	e0ca      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34187b60:	486b      	ldr	r0, [pc, #428]	@ (34187d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34187b62:	f001 fb8d 	bl	34189280 <RCCEx_GetI3CCLKFreq>
34187b66:	60f8      	str	r0, [r7, #12]
      break;
34187b68:	e0c5      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34187b6a:	486a      	ldr	r0, [pc, #424]	@ (34187d14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34187b6c:	f001 fb88 	bl	34189280 <RCCEx_GetI3CCLKFreq>
34187b70:	60f8      	str	r0, [r7, #12]
      break;
34187b72:	e0c0      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34187b74:	4868      	ldr	r0, [pc, #416]	@ (34187d18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34187b76:	f001 fcb7 	bl	341894e8 <RCCEx_GetLPTIMCLKFreq>
34187b7a:	60f8      	str	r0, [r7, #12]
      break;
34187b7c:	e0bb      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34187b7e:	4867      	ldr	r0, [pc, #412]	@ (34187d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34187b80:	f001 fcb2 	bl	341894e8 <RCCEx_GetLPTIMCLKFreq>
34187b84:	60f8      	str	r0, [r7, #12]
      break;
34187b86:	e0b6      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34187b88:	4865      	ldr	r0, [pc, #404]	@ (34187d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
34187b8a:	f001 fcad 	bl	341894e8 <RCCEx_GetLPTIMCLKFreq>
34187b8e:	60f8      	str	r0, [r7, #12]
      break;
34187b90:	e0b1      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34187b92:	4864      	ldr	r0, [pc, #400]	@ (34187d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34187b94:	f001 fca8 	bl	341894e8 <RCCEx_GetLPTIMCLKFreq>
34187b98:	60f8      	str	r0, [r7, #12]
      break;
34187b9a:	e0ac      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34187b9c:	4862      	ldr	r0, [pc, #392]	@ (34187d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
34187b9e:	f001 fca3 	bl	341894e8 <RCCEx_GetLPTIMCLKFreq>
34187ba2:	60f8      	str	r0, [r7, #12]
      break;
34187ba4:	e0a7      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34187ba6:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
34187baa:	f001 fe47 	bl	3418983c <RCCEx_GetLPUARTCLKFreq>
34187bae:	60f8      	str	r0, [r7, #12]
      break;
34187bb0:	e0a1      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
34187bb2:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34187bb6:	f001 ff43 	bl	34189a40 <RCCEx_GetLTDCCLKFreq>
34187bba:	60f8      	str	r0, [r7, #12]
      break;
34187bbc:	e09b      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
34187bbe:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
34187bc2:	f001 ffc7 	bl	34189b54 <RCCEx_GetMDFCLKFreq>
34187bc6:	60f8      	str	r0, [r7, #12]
      break;
34187bc8:	e095      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34187bca:	2030      	movs	r0, #48	@ 0x30
34187bcc:	f002 f8cc 	bl	34189d68 <RCCEx_GetPSSICLKFreq>
34187bd0:	60f8      	str	r0, [r7, #12]
      break;
34187bd2:	e090      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34187bd4:	f002 f94a 	bl	34189e6c <RCCEx_GetRTCCLKFreq>
34187bd8:	60f8      	str	r0, [r7, #12]
      break;
34187bda:	e08c      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34187bdc:	4853      	ldr	r0, [pc, #332]	@ (34187d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34187bde:	f002 f997 	bl	34189f10 <RCCEx_GetSAICLKFreq>
34187be2:	60f8      	str	r0, [r7, #12]
      break;
34187be4:	e087      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34187be6:	4852      	ldr	r0, [pc, #328]	@ (34187d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34187be8:	f002 f992 	bl	34189f10 <RCCEx_GetSAICLKFreq>
34187bec:	60f8      	str	r0, [r7, #12]
      break;
34187bee:	e082      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34187bf0:	4850      	ldr	r0, [pc, #320]	@ (34187d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34187bf2:	f002 faf3 	bl	3418a1dc <RCCEx_GetSDMMCCLKFreq>
34187bf6:	60f8      	str	r0, [r7, #12]
      break;
34187bf8:	e07d      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34187bfa:	484f      	ldr	r0, [pc, #316]	@ (34187d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34187bfc:	f002 faee 	bl	3418a1dc <RCCEx_GetSDMMCCLKFreq>
34187c00:	60f8      	str	r0, [r7, #12]
      break;
34187c02:	e078      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34187c04:	2007      	movs	r0, #7
34187c06:	f002 fbd3 	bl	3418a3b0 <RCCEx_GetSPDIFRXCLKFreq>
34187c0a:	60f8      	str	r0, [r7, #12]
      break;
34187c0c:	e073      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34187c0e:	484b      	ldr	r0, [pc, #300]	@ (34187d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34187c10:	f002 fcb2 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c14:	60f8      	str	r0, [r7, #12]
      break;
34187c16:	e06e      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34187c18:	4849      	ldr	r0, [pc, #292]	@ (34187d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34187c1a:	f002 fcad 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c1e:	60f8      	str	r0, [r7, #12]
      break;
34187c20:	e069      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34187c22:	4848      	ldr	r0, [pc, #288]	@ (34187d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34187c24:	f002 fca8 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c28:	60f8      	str	r0, [r7, #12]
      break;
34187c2a:	e064      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34187c2c:	4846      	ldr	r0, [pc, #280]	@ (34187d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34187c2e:	f002 fca3 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c32:	60f8      	str	r0, [r7, #12]
      break;
34187c34:	e05f      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34187c36:	4845      	ldr	r0, [pc, #276]	@ (34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34187c38:	f002 fc9e 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c3c:	60f8      	str	r0, [r7, #12]
      break;
34187c3e:	e05a      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34187c40:	4843      	ldr	r0, [pc, #268]	@ (34187d50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34187c42:	f002 fc99 	bl	3418a578 <RCCEx_GetSPICLKFreq>
34187c46:	60f8      	str	r0, [r7, #12]
      break;
34187c48:	e055      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34187c4a:	4842      	ldr	r0, [pc, #264]	@ (34187d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34187c4c:	f003 f990 	bl	3418af70 <RCCEx_GetUSARTCLKFreq>
34187c50:	60f8      	str	r0, [r7, #12]
      break;
34187c52:	e050      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34187c54:	4840      	ldr	r0, [pc, #256]	@ (34187d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34187c56:	f003 f98b 	bl	3418af70 <RCCEx_GetUSARTCLKFreq>
34187c5a:	60f8      	str	r0, [r7, #12]
      break;
34187c5c:	e04b      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34187c5e:	483f      	ldr	r0, [pc, #252]	@ (34187d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34187c60:	f003 f986 	bl	3418af70 <RCCEx_GetUSARTCLKFreq>
34187c64:	60f8      	str	r0, [r7, #12]
      break;
34187c66:	e046      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34187c68:	483d      	ldr	r0, [pc, #244]	@ (34187d60 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34187c6a:	f002 ff57 	bl	3418ab1c <RCCEx_GetUARTCLKFreq>
34187c6e:	60f8      	str	r0, [r7, #12]
      break;
34187c70:	e041      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34187c72:	483c      	ldr	r0, [pc, #240]	@ (34187d64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34187c74:	f002 ff52 	bl	3418ab1c <RCCEx_GetUARTCLKFreq>
34187c78:	60f8      	str	r0, [r7, #12]
      break;
34187c7a:	e03c      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34187c7c:	483a      	ldr	r0, [pc, #232]	@ (34187d68 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187c7e:	f003 f977 	bl	3418af70 <RCCEx_GetUSARTCLKFreq>
34187c82:	60f8      	str	r0, [r7, #12]
      break;
34187c84:	e037      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34187c86:	4839      	ldr	r0, [pc, #228]	@ (34187d6c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34187c88:	f002 ff48 	bl	3418ab1c <RCCEx_GetUARTCLKFreq>
34187c8c:	60f8      	str	r0, [r7, #12]
      break;
34187c8e:	e032      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34187c90:	4837      	ldr	r0, [pc, #220]	@ (34187d70 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34187c92:	f002 ff43 	bl	3418ab1c <RCCEx_GetUARTCLKFreq>
34187c96:	60f8      	str	r0, [r7, #12]
      break;
34187c98:	e02d      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34187c9a:	4836      	ldr	r0, [pc, #216]	@ (34187d74 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34187c9c:	f002 ff3e 	bl	3418ab1c <RCCEx_GetUARTCLKFreq>
34187ca0:	60f8      	str	r0, [r7, #12]
      break;
34187ca2:	e028      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34187ca4:	4834      	ldr	r0, [pc, #208]	@ (34187d78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34187ca6:	f003 f963 	bl	3418af70 <RCCEx_GetUSARTCLKFreq>
34187caa:	60f8      	str	r0, [r7, #12]
      break;
34187cac:	e023      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34187cae:	4833      	ldr	r0, [pc, #204]	@ (34187d7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34187cb0:	f003 fc3e 	bl	3418b530 <RCCEx_GetOTGPHYCKREFCLKFreq>
34187cb4:	60f8      	str	r0, [r7, #12]
      break;
34187cb6:	e01e      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34187cb8:	4831      	ldr	r0, [pc, #196]	@ (34187d80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34187cba:	f003 fb83 	bl	3418b3c4 <RCCEx_GetOTGPHYCLKFreq>
34187cbe:	60f8      	str	r0, [r7, #12]
      break;
34187cc0:	e019      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34187cc2:	4830      	ldr	r0, [pc, #192]	@ (34187d84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34187cc4:	f003 fc34 	bl	3418b530 <RCCEx_GetOTGPHYCKREFCLKFreq>
34187cc8:	60f8      	str	r0, [r7, #12]
      break;
34187cca:	e014      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34187ccc:	482e      	ldr	r0, [pc, #184]	@ (34187d88 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34187cce:	f003 fb79 	bl	3418b3c4 <RCCEx_GetOTGPHYCLKFreq>
34187cd2:	60f8      	str	r0, [r7, #12]
      break;
34187cd4:	e00f      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34187cd6:	482d      	ldr	r0, [pc, #180]	@ (34187d8c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34187cd8:	f003 fc7a 	bl	3418b5d0 <RCCEx_GetXSPICLKFreq>
34187cdc:	60f8      	str	r0, [r7, #12]
      break;
34187cde:	e00a      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34187ce0:	482b      	ldr	r0, [pc, #172]	@ (34187d90 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34187ce2:	f003 fc75 	bl	3418b5d0 <RCCEx_GetXSPICLKFreq>
34187ce6:	60f8      	str	r0, [r7, #12]
      break;
34187ce8:	e005      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34187cea:	482a      	ldr	r0, [pc, #168]	@ (34187d94 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34187cec:	f003 fc70 	bl	3418b5d0 <RCCEx_GetXSPICLKFreq>
34187cf0:	60f8      	str	r0, [r7, #12]
      break;
34187cf2:	e000      	b.n	34187cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34187cf4:	bf00      	nop
  }

  return frequency;
34187cf6:	68fb      	ldr	r3, [r7, #12]
}
34187cf8:	4618      	mov	r0, r3
34187cfa:	3714      	adds	r7, #20
34187cfc:	46bd      	mov	sp, r7
34187cfe:	bd90      	pop	{r4, r7, pc}
34187d00:	0700000c 	.word	0x0700000c
34187d04:	0700040c 	.word	0x0700040c
34187d08:	0700080c 	.word	0x0700080c
34187d0c:	07000c0c 	.word	0x07000c0c
34187d10:	0700100c 	.word	0x0700100c
34187d14:	0700140c 	.word	0x0700140c
34187d18:	0700082c 	.word	0x0700082c
34187d1c:	07000c2c 	.word	0x07000c2c
34187d20:	0700102c 	.word	0x0700102c
34187d24:	0700142c 	.word	0x0700142c
34187d28:	0700182c 	.word	0x0700182c
34187d2c:	07001418 	.word	0x07001418
34187d30:	07001818 	.word	0x07001818
34187d34:	0300001c 	.word	0x0300001c
34187d38:	0300041c 	.word	0x0300041c
34187d3c:	07000420 	.word	0x07000420
34187d40:	07000820 	.word	0x07000820
34187d44:	07000c20 	.word	0x07000c20
34187d48:	07001020 	.word	0x07001020
34187d4c:	07001420 	.word	0x07001420
34187d50:	07001820 	.word	0x07001820
34187d54:	07000030 	.word	0x07000030
34187d58:	07000430 	.word	0x07000430
34187d5c:	07000830 	.word	0x07000830
34187d60:	07000c30 	.word	0x07000c30
34187d64:	07001030 	.word	0x07001030
34187d68:	07001430 	.word	0x07001430
34187d6c:	07001830 	.word	0x07001830
34187d70:	07001c30 	.word	0x07001c30
34187d74:	07000034 	.word	0x07000034
34187d78:	07000434 	.word	0x07000434
34187d7c:	01001014 	.word	0x01001014
34187d80:	03000c14 	.word	0x03000c14
34187d84:	01001814 	.word	0x01001814
34187d88:	03001414 	.word	0x03001414
34187d8c:	03000014 	.word	0x03000014
34187d90:	03000414 	.word	0x03000414
34187d94:	03000814 	.word	0x03000814

34187d98 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34187d98:	b5f0      	push	{r4, r5, r6, r7, lr}
34187d9a:	b087      	sub	sp, #28
34187d9c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187d9e:	2300      	movs	r3, #0
34187da0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34187da2:	f7fc fa05 	bl	341841b0 <LL_RCC_PLL1_IsReady>
34187da6:	4603      	mov	r3, r0
34187da8:	2b00      	cmp	r3, #0
34187daa:	d02a      	beq.n	34187e02 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34187dac:	f7fc fa68 	bl	34184280 <LL_RCC_PLL1P_IsEnabled>
34187db0:	4603      	mov	r3, r0
34187db2:	2b00      	cmp	r3, #0
34187db4:	d031      	beq.n	34187e1a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187db6:	f7fc f9ed 	bl	34184194 <LL_RCC_PLL1_GetSource>
34187dba:	4603      	mov	r3, r0
34187dbc:	4618      	mov	r0, r3
34187dbe:	f000 f957 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187dc2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187dc4:	68bb      	ldr	r3, [r7, #8]
34187dc6:	2b00      	cmp	r3, #0
34187dc8:	d027      	beq.n	34187e1a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL1_GetM();
34187dca:	f7fc fa29 	bl	34184220 <LL_RCC_PLL1_GetM>
34187dce:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187dd0:	687b      	ldr	r3, [r7, #4]
34187dd2:	2b00      	cmp	r3, #0
34187dd4:	d021      	beq.n	34187e1a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34187dd6:	f7fc fa13 	bl	34184200 <LL_RCC_PLL1_GetN>
34187dda:	4605      	mov	r5, r0
34187ddc:	f7fc fa64 	bl	341842a8 <LL_RCC_PLL1_GetFRACN>
34187de0:	4606      	mov	r6, r0
34187de2:	f7fc fa2d 	bl	34184240 <LL_RCC_PLL1_GetP1>
34187de6:	4604      	mov	r4, r0
34187de8:	f7fc fa3a 	bl	34184260 <LL_RCC_PLL1_GetP2>
34187dec:	4603      	mov	r3, r0
34187dee:	9301      	str	r3, [sp, #4]
34187df0:	9400      	str	r4, [sp, #0]
34187df2:	4633      	mov	r3, r6
34187df4:	462a      	mov	r2, r5
34187df6:	6879      	ldr	r1, [r7, #4]
34187df8:	68b8      	ldr	r0, [r7, #8]
34187dfa:	f000 f997 	bl	3418812c <RCCEx_CalcPLLFreq>
34187dfe:	60f8      	str	r0, [r7, #12]
34187e00:	e00b      	b.n	34187e1a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34187e02:	f7fc f9e9 	bl	341841d8 <LL_RCC_PLL1_IsEnabledBypass>
34187e06:	4603      	mov	r3, r0
34187e08:	2b00      	cmp	r3, #0
34187e0a:	d006      	beq.n	34187e1a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187e0c:	f7fc f9c2 	bl	34184194 <LL_RCC_PLL1_GetSource>
34187e10:	4603      	mov	r3, r0
34187e12:	4618      	mov	r0, r3
34187e14:	f000 f92c 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187e18:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187e1a:	68fb      	ldr	r3, [r7, #12]
}
34187e1c:	4618      	mov	r0, r3
34187e1e:	3714      	adds	r7, #20
34187e20:	46bd      	mov	sp, r7
34187e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187e24 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34187e24:	b5f0      	push	{r4, r5, r6, r7, lr}
34187e26:	b087      	sub	sp, #28
34187e28:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187e2a:	2300      	movs	r3, #0
34187e2c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34187e2e:	f7fc fa57 	bl	341842e0 <LL_RCC_PLL2_IsReady>
34187e32:	4603      	mov	r3, r0
34187e34:	2b00      	cmp	r3, #0
34187e36:	d02a      	beq.n	34187e8e <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34187e38:	f7fc faba 	bl	341843b0 <LL_RCC_PLL2P_IsEnabled>
34187e3c:	4603      	mov	r3, r0
34187e3e:	2b00      	cmp	r3, #0
34187e40:	d031      	beq.n	34187ea6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34187e42:	f7fc fa3f 	bl	341842c4 <LL_RCC_PLL2_GetSource>
34187e46:	4603      	mov	r3, r0
34187e48:	4618      	mov	r0, r3
34187e4a:	f000 f911 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187e4e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187e50:	68bb      	ldr	r3, [r7, #8]
34187e52:	2b00      	cmp	r3, #0
34187e54:	d027      	beq.n	34187ea6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL2_GetM();
34187e56:	f7fc fa7b 	bl	34184350 <LL_RCC_PLL2_GetM>
34187e5a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187e5c:	687b      	ldr	r3, [r7, #4]
34187e5e:	2b00      	cmp	r3, #0
34187e60:	d021      	beq.n	34187ea6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34187e62:	f7fc fa65 	bl	34184330 <LL_RCC_PLL2_GetN>
34187e66:	4605      	mov	r5, r0
34187e68:	f7fc fab6 	bl	341843d8 <LL_RCC_PLL2_GetFRACN>
34187e6c:	4606      	mov	r6, r0
34187e6e:	f7fc fa7f 	bl	34184370 <LL_RCC_PLL2_GetP1>
34187e72:	4604      	mov	r4, r0
34187e74:	f7fc fa8c 	bl	34184390 <LL_RCC_PLL2_GetP2>
34187e78:	4603      	mov	r3, r0
34187e7a:	9301      	str	r3, [sp, #4]
34187e7c:	9400      	str	r4, [sp, #0]
34187e7e:	4633      	mov	r3, r6
34187e80:	462a      	mov	r2, r5
34187e82:	6879      	ldr	r1, [r7, #4]
34187e84:	68b8      	ldr	r0, [r7, #8]
34187e86:	f000 f951 	bl	3418812c <RCCEx_CalcPLLFreq>
34187e8a:	60f8      	str	r0, [r7, #12]
34187e8c:	e00b      	b.n	34187ea6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34187e8e:	f7fc fa3b 	bl	34184308 <LL_RCC_PLL2_IsEnabledBypass>
34187e92:	4603      	mov	r3, r0
34187e94:	2b00      	cmp	r3, #0
34187e96:	d006      	beq.n	34187ea6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34187e98:	f7fc fa14 	bl	341842c4 <LL_RCC_PLL2_GetSource>
34187e9c:	4603      	mov	r3, r0
34187e9e:	4618      	mov	r0, r3
34187ea0:	f000 f8e6 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187ea6:	68fb      	ldr	r3, [r7, #12]
}
34187ea8:	4618      	mov	r0, r3
34187eaa:	3714      	adds	r7, #20
34187eac:	46bd      	mov	sp, r7
34187eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34187eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
34187eb2:	b087      	sub	sp, #28
34187eb4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187eb6:	2300      	movs	r3, #0
34187eb8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34187eba:	f7fc faa9 	bl	34184410 <LL_RCC_PLL3_IsReady>
34187ebe:	4603      	mov	r3, r0
34187ec0:	2b00      	cmp	r3, #0
34187ec2:	d02a      	beq.n	34187f1a <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34187ec4:	f7fc fb0c 	bl	341844e0 <LL_RCC_PLL3P_IsEnabled>
34187ec8:	4603      	mov	r3, r0
34187eca:	2b00      	cmp	r3, #0
34187ecc:	d031      	beq.n	34187f32 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34187ece:	f7fc fa91 	bl	341843f4 <LL_RCC_PLL3_GetSource>
34187ed2:	4603      	mov	r3, r0
34187ed4:	4618      	mov	r0, r3
34187ed6:	f000 f8cb 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187eda:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187edc:	68bb      	ldr	r3, [r7, #8]
34187ede:	2b00      	cmp	r3, #0
34187ee0:	d027      	beq.n	34187f32 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL3_GetM();
34187ee2:	f7fc facd 	bl	34184480 <LL_RCC_PLL3_GetM>
34187ee6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187ee8:	687b      	ldr	r3, [r7, #4]
34187eea:	2b00      	cmp	r3, #0
34187eec:	d021      	beq.n	34187f32 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34187eee:	f7fc fab7 	bl	34184460 <LL_RCC_PLL3_GetN>
34187ef2:	4605      	mov	r5, r0
34187ef4:	f7fc fb08 	bl	34184508 <LL_RCC_PLL3_GetFRACN>
34187ef8:	4606      	mov	r6, r0
34187efa:	f7fc fad1 	bl	341844a0 <LL_RCC_PLL3_GetP1>
34187efe:	4604      	mov	r4, r0
34187f00:	f7fc fade 	bl	341844c0 <LL_RCC_PLL3_GetP2>
34187f04:	4603      	mov	r3, r0
34187f06:	9301      	str	r3, [sp, #4]
34187f08:	9400      	str	r4, [sp, #0]
34187f0a:	4633      	mov	r3, r6
34187f0c:	462a      	mov	r2, r5
34187f0e:	6879      	ldr	r1, [r7, #4]
34187f10:	68b8      	ldr	r0, [r7, #8]
34187f12:	f000 f90b 	bl	3418812c <RCCEx_CalcPLLFreq>
34187f16:	60f8      	str	r0, [r7, #12]
34187f18:	e00b      	b.n	34187f32 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34187f1a:	f7fc fa8d 	bl	34184438 <LL_RCC_PLL3_IsEnabledBypass>
34187f1e:	4603      	mov	r3, r0
34187f20:	2b00      	cmp	r3, #0
34187f22:	d006      	beq.n	34187f32 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34187f24:	f7fc fa66 	bl	341843f4 <LL_RCC_PLL3_GetSource>
34187f28:	4603      	mov	r3, r0
34187f2a:	4618      	mov	r0, r3
34187f2c:	f000 f8a0 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187f30:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187f32:	68fb      	ldr	r3, [r7, #12]
}
34187f34:	4618      	mov	r0, r3
34187f36:	3714      	adds	r7, #20
34187f38:	46bd      	mov	sp, r7
34187f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187f3c <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34187f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
34187f3e:	b087      	sub	sp, #28
34187f40:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187f42:	2300      	movs	r3, #0
34187f44:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
34187f46:	f7fc fafb 	bl	34184540 <LL_RCC_PLL4_IsReady>
34187f4a:	4603      	mov	r3, r0
34187f4c:	2b00      	cmp	r3, #0
34187f4e:	d02a      	beq.n	34187fa6 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34187f50:	f7fc fb5e 	bl	34184610 <LL_RCC_PLL4P_IsEnabled>
34187f54:	4603      	mov	r3, r0
34187f56:	2b00      	cmp	r3, #0
34187f58:	d031      	beq.n	34187fbe <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34187f5a:	f7fc fae3 	bl	34184524 <LL_RCC_PLL4_GetSource>
34187f5e:	4603      	mov	r3, r0
34187f60:	4618      	mov	r0, r3
34187f62:	f000 f885 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187f66:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187f68:	68bb      	ldr	r3, [r7, #8]
34187f6a:	2b00      	cmp	r3, #0
34187f6c:	d027      	beq.n	34187fbe <HAL_RCCEx_GetPLL4CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL4_GetM();
34187f6e:	f7fc fb1f 	bl	341845b0 <LL_RCC_PLL4_GetM>
34187f72:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187f74:	687b      	ldr	r3, [r7, #4]
34187f76:	2b00      	cmp	r3, #0
34187f78:	d021      	beq.n	34187fbe <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34187f7a:	f7fc fb09 	bl	34184590 <LL_RCC_PLL4_GetN>
34187f7e:	4605      	mov	r5, r0
34187f80:	f7fc fb5a 	bl	34184638 <LL_RCC_PLL4_GetFRACN>
34187f84:	4606      	mov	r6, r0
34187f86:	f7fc fb23 	bl	341845d0 <LL_RCC_PLL4_GetP1>
34187f8a:	4604      	mov	r4, r0
34187f8c:	f7fc fb30 	bl	341845f0 <LL_RCC_PLL4_GetP2>
34187f90:	4603      	mov	r3, r0
34187f92:	9301      	str	r3, [sp, #4]
34187f94:	9400      	str	r4, [sp, #0]
34187f96:	4633      	mov	r3, r6
34187f98:	462a      	mov	r2, r5
34187f9a:	6879      	ldr	r1, [r7, #4]
34187f9c:	68b8      	ldr	r0, [r7, #8]
34187f9e:	f000 f8c5 	bl	3418812c <RCCEx_CalcPLLFreq>
34187fa2:	60f8      	str	r0, [r7, #12]
34187fa4:	e00b      	b.n	34187fbe <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34187fa6:	f7fc fadf 	bl	34184568 <LL_RCC_PLL4_IsEnabledBypass>
34187faa:	4603      	mov	r3, r0
34187fac:	2b00      	cmp	r3, #0
34187fae:	d006      	beq.n	34187fbe <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34187fb0:	f7fc fab8 	bl	34184524 <LL_RCC_PLL4_GetSource>
34187fb4:	4603      	mov	r3, r0
34187fb6:	4618      	mov	r0, r3
34187fb8:	f000 f85a 	bl	34188070 <RCCEx_GetPLLSourceFreq>
34187fbc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187fbe:	68fb      	ldr	r3, [r7, #12]
}
34187fc0:	4618      	mov	r0, r3
34187fc2:	3714      	adds	r7, #20
34187fc4:	46bd      	mov	sp, r7
34187fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187fc8 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34187fc8:	b580      	push	{r7, lr}
34187fca:	b082      	sub	sp, #8
34187fcc:	af00      	add	r7, sp, #0
34187fce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34187fd0:	f7fb fcca 	bl	34183968 <LL_RCC_GetAHBPrescaler>
34187fd4:	4603      	mov	r3, r0
34187fd6:	0d1b      	lsrs	r3, r3, #20
34187fd8:	f003 0307 	and.w	r3, r3, #7
34187fdc:	687a      	ldr	r2, [r7, #4]
34187fde:	fa22 f303 	lsr.w	r3, r2, r3
}
34187fe2:	4618      	mov	r0, r3
34187fe4:	3708      	adds	r7, #8
34187fe6:	46bd      	mov	sp, r7
34187fe8:	bd80      	pop	{r7, pc}

34187fea <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34187fea:	b580      	push	{r7, lr}
34187fec:	b082      	sub	sp, #8
34187fee:	af00      	add	r7, sp, #0
34187ff0:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34187ff2:	f7fb fcc7 	bl	34183984 <LL_RCC_GetAPB1Prescaler>
34187ff6:	4603      	mov	r3, r0
34187ff8:	f003 0307 	and.w	r3, r3, #7
34187ffc:	687a      	ldr	r2, [r7, #4]
34187ffe:	fa22 f303 	lsr.w	r3, r2, r3
}
34188002:	4618      	mov	r0, r3
34188004:	3708      	adds	r7, #8
34188006:	46bd      	mov	sp, r7
34188008:	bd80      	pop	{r7, pc}

3418800a <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3418800a:	b580      	push	{r7, lr}
3418800c:	b082      	sub	sp, #8
3418800e:	af00      	add	r7, sp, #0
34188010:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34188012:	f7fb fcc5 	bl	341839a0 <LL_RCC_GetAPB2Prescaler>
34188016:	4603      	mov	r3, r0
34188018:	091b      	lsrs	r3, r3, #4
3418801a:	f003 0307 	and.w	r3, r3, #7
3418801e:	687a      	ldr	r2, [r7, #4]
34188020:	fa22 f303 	lsr.w	r3, r2, r3
}
34188024:	4618      	mov	r0, r3
34188026:	3708      	adds	r7, #8
34188028:	46bd      	mov	sp, r7
3418802a:	bd80      	pop	{r7, pc}

3418802c <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
3418802c:	b580      	push	{r7, lr}
3418802e:	b082      	sub	sp, #8
34188030:	af00      	add	r7, sp, #0
34188032:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34188034:	f7fb fcc2 	bl	341839bc <LL_RCC_GetAPB4Prescaler>
34188038:	4603      	mov	r3, r0
3418803a:	0b1b      	lsrs	r3, r3, #12
3418803c:	f003 0307 	and.w	r3, r3, #7
34188040:	687a      	ldr	r2, [r7, #4]
34188042:	fa22 f303 	lsr.w	r3, r2, r3
}
34188046:	4618      	mov	r0, r3
34188048:	3708      	adds	r7, #8
3418804a:	46bd      	mov	sp, r7
3418804c:	bd80      	pop	{r7, pc}

3418804e <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
3418804e:	b580      	push	{r7, lr}
34188050:	b082      	sub	sp, #8
34188052:	af00      	add	r7, sp, #0
34188054:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34188056:	f7fb fcbf 	bl	341839d8 <LL_RCC_GetAPB5Prescaler>
3418805a:	4603      	mov	r3, r0
3418805c:	0c1b      	lsrs	r3, r3, #16
3418805e:	f003 0307 	and.w	r3, r3, #7
34188062:	687a      	ldr	r2, [r7, #4]
34188064:	fa22 f303 	lsr.w	r3, r2, r3
}
34188068:	4618      	mov	r0, r3
3418806a:	3708      	adds	r7, #8
3418806c:	46bd      	mov	sp, r7
3418806e:	bd80      	pop	{r7, pc}

34188070 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34188070:	b580      	push	{r7, lr}
34188072:	b084      	sub	sp, #16
34188074:	af00      	add	r7, sp, #0
34188076:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34188078:	2300      	movs	r3, #0
3418807a:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
3418807c:	687b      	ldr	r3, [r7, #4]
3418807e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188082:	d039      	beq.n	341880f8 <RCCEx_GetPLLSourceFreq+0x88>
34188084:	687b      	ldr	r3, [r7, #4]
34188086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418808a:	d838      	bhi.n	341880fe <RCCEx_GetPLLSourceFreq+0x8e>
3418808c:	687b      	ldr	r3, [r7, #4]
3418808e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188092:	d029      	beq.n	341880e8 <RCCEx_GetPLLSourceFreq+0x78>
34188094:	687b      	ldr	r3, [r7, #4]
34188096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418809a:	d830      	bhi.n	341880fe <RCCEx_GetPLLSourceFreq+0x8e>
3418809c:	687b      	ldr	r3, [r7, #4]
3418809e:	2b00      	cmp	r3, #0
341880a0:	d004      	beq.n	341880ac <RCCEx_GetPLLSourceFreq+0x3c>
341880a2:	687b      	ldr	r3, [r7, #4]
341880a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341880a8:	d00e      	beq.n	341880c8 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
341880aa:	e028      	b.n	341880fe <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
341880ac:	f7fb fbfc 	bl	341838a8 <LL_RCC_HSI_IsReady>
341880b0:	4603      	mov	r3, r0
341880b2:	2b00      	cmp	r3, #0
341880b4:	d025      	beq.n	34188102 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341880b6:	f7fb fc09 	bl	341838cc <LL_RCC_HSI_GetDivider>
341880ba:	4603      	mov	r3, r0
341880bc:	09db      	lsrs	r3, r3, #7
341880be:	4a16      	ldr	r2, [pc, #88]	@ (34188118 <RCCEx_GetPLLSourceFreq+0xa8>)
341880c0:	fa22 f303 	lsr.w	r3, r2, r3
341880c4:	60fb      	str	r3, [r7, #12]
      break;
341880c6:	e01c      	b.n	34188102 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
341880c8:	f7fb fc0e 	bl	341838e8 <LL_RCC_MSI_IsReady>
341880cc:	4603      	mov	r3, r0
341880ce:	2b00      	cmp	r3, #0
341880d0:	d019      	beq.n	34188106 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
341880d2:	f7fb fc1b 	bl	3418390c <LL_RCC_MSI_GetFrequency>
341880d6:	4603      	mov	r3, r0
341880d8:	2b00      	cmp	r3, #0
341880da:	d102      	bne.n	341880e2 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
341880dc:	4b0f      	ldr	r3, [pc, #60]	@ (3418811c <RCCEx_GetPLLSourceFreq+0xac>)
341880de:	60fb      	str	r3, [r7, #12]
      break;
341880e0:	e011      	b.n	34188106 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
341880e2:	4b0f      	ldr	r3, [pc, #60]	@ (34188120 <RCCEx_GetPLLSourceFreq+0xb0>)
341880e4:	60fb      	str	r3, [r7, #12]
      break;
341880e6:	e00e      	b.n	34188106 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
341880e8:	f7fb fbcc 	bl	34183884 <LL_RCC_HSE_IsReady>
341880ec:	4603      	mov	r3, r0
341880ee:	2b00      	cmp	r3, #0
341880f0:	d00b      	beq.n	3418810a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
341880f2:	4b0c      	ldr	r3, [pc, #48]	@ (34188124 <RCCEx_GetPLLSourceFreq+0xb4>)
341880f4:	60fb      	str	r3, [r7, #12]
      break;
341880f6:	e008      	b.n	3418810a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
341880f8:	4b0b      	ldr	r3, [pc, #44]	@ (34188128 <RCCEx_GetPLLSourceFreq+0xb8>)
341880fa:	60fb      	str	r3, [r7, #12]
      break;
341880fc:	e006      	b.n	3418810c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
341880fe:	bf00      	nop
34188100:	e004      	b.n	3418810c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188102:	bf00      	nop
34188104:	e002      	b.n	3418810c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188106:	bf00      	nop
34188108:	e000      	b.n	3418810c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418810a:	bf00      	nop
  }

  return pllinputfreq;
3418810c:	68fb      	ldr	r3, [r7, #12]
}
3418810e:	4618      	mov	r0, r3
34188110:	3710      	adds	r7, #16
34188112:	46bd      	mov	sp, r7
34188114:	bd80      	pop	{r7, pc}
34188116:	bf00      	nop
34188118:	03d09000 	.word	0x03d09000
3418811c:	003d0900 	.word	0x003d0900
34188120:	00f42400 	.word	0x00f42400
34188124:	02dc6c00 	.word	0x02dc6c00
34188128:	00bb8000 	.word	0x00bb8000

3418812c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3418812c:	b480      	push	{r7}
3418812e:	b087      	sub	sp, #28
34188130:	af00      	add	r7, sp, #0
34188132:	60f8      	str	r0, [r7, #12]
34188134:	60b9      	str	r1, [r7, #8]
34188136:	607a      	str	r2, [r7, #4]
34188138:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418813a:	68fb      	ldr	r3, [r7, #12]
3418813c:	ee07 3a90 	vmov	s15, r3
34188140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188144:	687b      	ldr	r3, [r7, #4]
34188146:	ee07 3a90 	vmov	s15, r3
3418814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418814e:	683b      	ldr	r3, [r7, #0]
34188150:	ee07 3a90 	vmov	s15, r3
34188154:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34188158:	eddf 5a19 	vldr	s11, [pc, #100]	@ 341881c0 <RCCEx_CalcPLLFreq+0x94>
3418815c:	eec6 7a25 	vdiv.f32	s15, s12, s11
34188160:	ee76 7aa7 	vadd.f32	s15, s13, s15
34188164:	ee67 6a27 	vmul.f32	s13, s14, s15
34188168:	68bb      	ldr	r3, [r7, #8]
3418816a:	ee07 3a90 	vmov	s15, r3
3418816e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188172:	eec6 7a87 	vdiv.f32	s15, s13, s14
34188176:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3418817a:	6a3b      	ldr	r3, [r7, #32]
3418817c:	ee07 3a90 	vmov	s15, r3
34188180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188184:	edd7 6a05 	vldr	s13, [r7, #20]
34188188:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418818c:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34188190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34188192:	ee07 3a90 	vmov	s15, r3
34188196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418819a:	edd7 6a05 	vldr	s13, [r7, #20]
3418819e:	eec6 7a87 	vdiv.f32	s15, s13, s14
341881a2:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
341881a6:	edd7 7a05 	vldr	s15, [r7, #20]
341881aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341881ae:	ee17 3a90 	vmov	r3, s15
}
341881b2:	4618      	mov	r0, r3
341881b4:	371c      	adds	r7, #28
341881b6:	46bd      	mov	sp, r7
341881b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341881bc:	4770      	bx	lr
341881be:	bf00      	nop
341881c0:	4b800000 	.word	0x4b800000

341881c4 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
341881c4:	b590      	push	{r4, r7, lr}
341881c6:	b085      	sub	sp, #20
341881c8:	af00      	add	r7, sp, #0
341881ca:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
341881cc:	2300      	movs	r3, #0
341881ce:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
341881d0:	6878      	ldr	r0, [r7, #4]
341881d2:	f7fb fe1f 	bl	34183e14 <LL_RCC_GetADCClockSource>
341881d6:	4603      	mov	r3, r0
341881d8:	2b70      	cmp	r3, #112	@ 0x70
341881da:	f000 80d1 	beq.w	34188380 <RCCEx_GetADCCLKFreq+0x1bc>
341881de:	2b70      	cmp	r3, #112	@ 0x70
341881e0:	f200 80d8 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
341881e4:	2b60      	cmp	r3, #96	@ 0x60
341881e6:	f000 80c8 	beq.w	3418837a <RCCEx_GetADCCLKFreq+0x1b6>
341881ea:	2b60      	cmp	r3, #96	@ 0x60
341881ec:	f200 80d2 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
341881f0:	2b50      	cmp	r3, #80	@ 0x50
341881f2:	f000 80ac 	beq.w	3418834e <RCCEx_GetADCCLKFreq+0x18a>
341881f6:	2b50      	cmp	r3, #80	@ 0x50
341881f8:	f200 80cc 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
341881fc:	2b40      	cmp	r3, #64	@ 0x40
341881fe:	f000 80b4 	beq.w	3418836a <RCCEx_GetADCCLKFreq+0x1a6>
34188202:	2b40      	cmp	r3, #64	@ 0x40
34188204:	f200 80c6 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
34188208:	2b30      	cmp	r3, #48	@ 0x30
3418820a:	d05d      	beq.n	341882c8 <RCCEx_GetADCCLKFreq+0x104>
3418820c:	2b30      	cmp	r3, #48	@ 0x30
3418820e:	f200 80c1 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
34188212:	2b20      	cmp	r3, #32
34188214:	d014      	beq.n	34188240 <RCCEx_GetADCCLKFreq+0x7c>
34188216:	2b20      	cmp	r3, #32
34188218:	f200 80bc 	bhi.w	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
3418821c:	2b00      	cmp	r3, #0
3418821e:	d002      	beq.n	34188226 <RCCEx_GetADCCLKFreq+0x62>
34188220:	2b10      	cmp	r3, #16
34188222:	d008      	beq.n	34188236 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34188224:	e0b6      	b.n	34188394 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188226:	f7fa ff3f 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418822a:	4603      	mov	r3, r0
3418822c:	4618      	mov	r0, r3
3418822e:	f7ff fecb 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188232:	60f8      	str	r0, [r7, #12]
      break;
34188234:	e0b7      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188236:	2007      	movs	r0, #7
34188238:	f000 f9b2 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418823c:	60f8      	str	r0, [r7, #12]
      break;
3418823e:	e0b2      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34188240:	f7fc fad6 	bl	341847f0 <LL_RCC_IC7_IsEnabled>
34188244:	4603      	mov	r3, r0
34188246:	2b00      	cmp	r3, #0
34188248:	f000 80a6 	beq.w	34188398 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
3418824c:	f7fc faf2 	bl	34184834 <LL_RCC_IC7_GetDivider>
34188250:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34188252:	f7fc fae1 	bl	34184818 <LL_RCC_IC7_GetSource>
34188256:	4603      	mov	r3, r0
34188258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418825c:	d029      	beq.n	341882b2 <RCCEx_GetADCCLKFreq+0xee>
3418825e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188262:	d82f      	bhi.n	341882c4 <RCCEx_GetADCCLKFreq+0x100>
34188264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188268:	d01a      	beq.n	341882a0 <RCCEx_GetADCCLKFreq+0xdc>
3418826a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418826e:	d829      	bhi.n	341882c4 <RCCEx_GetADCCLKFreq+0x100>
34188270:	2b00      	cmp	r3, #0
34188272:	d003      	beq.n	3418827c <RCCEx_GetADCCLKFreq+0xb8>
34188274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188278:	d009      	beq.n	3418828e <RCCEx_GetADCCLKFreq+0xca>
            break;
3418827a:	e023      	b.n	341882c4 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418827c:	f7ff fd8c 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188280:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188282:	68fa      	ldr	r2, [r7, #12]
34188284:	68bb      	ldr	r3, [r7, #8]
34188286:	fbb2 f3f3 	udiv	r3, r2, r3
3418828a:	60fb      	str	r3, [r7, #12]
            break;
3418828c:	e01b      	b.n	341882c6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418828e:	f7ff fdc9 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188292:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188294:	68fa      	ldr	r2, [r7, #12]
34188296:	68bb      	ldr	r3, [r7, #8]
34188298:	fbb2 f3f3 	udiv	r3, r2, r3
3418829c:	60fb      	str	r3, [r7, #12]
            break;
3418829e:	e012      	b.n	341882c6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341882a0:	f7ff fe06 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341882a4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341882a6:	68fa      	ldr	r2, [r7, #12]
341882a8:	68bb      	ldr	r3, [r7, #8]
341882aa:	fbb2 f3f3 	udiv	r3, r2, r3
341882ae:	60fb      	str	r3, [r7, #12]
            break;
341882b0:	e009      	b.n	341882c6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341882b2:	f7ff fe43 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341882b6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341882b8:	68fa      	ldr	r2, [r7, #12]
341882ba:	68bb      	ldr	r3, [r7, #8]
341882bc:	fbb2 f3f3 	udiv	r3, r2, r3
341882c0:	60fb      	str	r3, [r7, #12]
            break;
341882c2:	e000      	b.n	341882c6 <RCCEx_GetADCCLKFreq+0x102>
            break;
341882c4:	bf00      	nop
      break;
341882c6:	e067      	b.n	34188398 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341882c8:	f7fc fad2 	bl	34184870 <LL_RCC_IC8_IsEnabled>
341882cc:	4603      	mov	r3, r0
341882ce:	2b00      	cmp	r3, #0
341882d0:	d064      	beq.n	3418839c <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
341882d2:	f7fc faef 	bl	341848b4 <LL_RCC_IC8_GetDivider>
341882d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341882d8:	f7fc fade 	bl	34184898 <LL_RCC_IC8_GetSource>
341882dc:	4603      	mov	r3, r0
341882de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882e2:	d029      	beq.n	34188338 <RCCEx_GetADCCLKFreq+0x174>
341882e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882e8:	d82f      	bhi.n	3418834a <RCCEx_GetADCCLKFreq+0x186>
341882ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341882ee:	d01a      	beq.n	34188326 <RCCEx_GetADCCLKFreq+0x162>
341882f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341882f4:	d829      	bhi.n	3418834a <RCCEx_GetADCCLKFreq+0x186>
341882f6:	2b00      	cmp	r3, #0
341882f8:	d003      	beq.n	34188302 <RCCEx_GetADCCLKFreq+0x13e>
341882fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341882fe:	d009      	beq.n	34188314 <RCCEx_GetADCCLKFreq+0x150>
            break;
34188300:	e023      	b.n	3418834a <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188302:	f7ff fd49 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188306:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188308:	68fa      	ldr	r2, [r7, #12]
3418830a:	68bb      	ldr	r3, [r7, #8]
3418830c:	fbb2 f3f3 	udiv	r3, r2, r3
34188310:	60fb      	str	r3, [r7, #12]
            break;
34188312:	e01b      	b.n	3418834c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188314:	f7ff fd86 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188318:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418831a:	68fa      	ldr	r2, [r7, #12]
3418831c:	68bb      	ldr	r3, [r7, #8]
3418831e:	fbb2 f3f3 	udiv	r3, r2, r3
34188322:	60fb      	str	r3, [r7, #12]
            break;
34188324:	e012      	b.n	3418834c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188326:	f7ff fdc3 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418832a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418832c:	68fa      	ldr	r2, [r7, #12]
3418832e:	68bb      	ldr	r3, [r7, #8]
34188330:	fbb2 f3f3 	udiv	r3, r2, r3
34188334:	60fb      	str	r3, [r7, #12]
            break;
34188336:	e009      	b.n	3418834c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188338:	f7ff fe00 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418833c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418833e:	68fa      	ldr	r2, [r7, #12]
34188340:	68bb      	ldr	r3, [r7, #8]
34188342:	fbb2 f3f3 	udiv	r3, r2, r3
34188346:	60fb      	str	r3, [r7, #12]
            break;
34188348:	e000      	b.n	3418834c <RCCEx_GetADCCLKFreq+0x188>
            break;
3418834a:	bf00      	nop
      break;
3418834c:	e026      	b.n	3418839c <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3418834e:	f7fb faab 	bl	341838a8 <LL_RCC_HSI_IsReady>
34188352:	4603      	mov	r3, r0
34188354:	2b00      	cmp	r3, #0
34188356:	d023      	beq.n	341883a0 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188358:	f7fb fab8 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418835c:	4603      	mov	r3, r0
3418835e:	09db      	lsrs	r3, r3, #7
34188360:	4a16      	ldr	r2, [pc, #88]	@ (341883bc <RCCEx_GetADCCLKFreq+0x1f8>)
34188362:	fa22 f303 	lsr.w	r3, r2, r3
34188366:	60fb      	str	r3, [r7, #12]
      break;
34188368:	e01a      	b.n	341883a0 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
3418836a:	f7fb fabd 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418836e:	4603      	mov	r3, r0
34188370:	2b00      	cmp	r3, #0
34188372:	d017      	beq.n	341883a4 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34188374:	4b12      	ldr	r3, [pc, #72]	@ (341883c0 <RCCEx_GetADCCLKFreq+0x1fc>)
34188376:	60fb      	str	r3, [r7, #12]
      break;
34188378:	e014      	b.n	341883a4 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
3418837a:	4b12      	ldr	r3, [pc, #72]	@ (341883c4 <RCCEx_GetADCCLKFreq+0x200>)
3418837c:	60fb      	str	r3, [r7, #12]
      break;
3418837e:	e012      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34188380:	f7fa fe92 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188384:	4604      	mov	r4, r0
34188386:	f7fb fef7 	bl	34184178 <LL_RCC_GetTIMPrescaler>
3418838a:	4603      	mov	r3, r0
3418838c:	fa24 f303 	lsr.w	r3, r4, r3
34188390:	60fb      	str	r3, [r7, #12]
      break;
34188392:	e008      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188394:	bf00      	nop
34188396:	e006      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188398:	bf00      	nop
3418839a:	e004      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418839c:	bf00      	nop
3418839e:	e002      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883a0:	bf00      	nop
341883a2:	e000      	b.n	341883a6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883a4:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
341883a6:	f7fb fb4f 	bl	34183a48 <LL_RCC_GetADCPrescaler>
341883aa:	4603      	mov	r3, r0
341883ac:	3301      	adds	r3, #1
341883ae:	68fa      	ldr	r2, [r7, #12]
341883b0:	fbb2 f3f3 	udiv	r3, r2, r3
}
341883b4:	4618      	mov	r0, r3
341883b6:	3714      	adds	r7, #20
341883b8:	46bd      	mov	sp, r7
341883ba:	bd90      	pop	{r4, r7, pc}
341883bc:	03d09000 	.word	0x03d09000
341883c0:	003d0900 	.word	0x003d0900
341883c4:	00bb8000 	.word	0x00bb8000

341883c8 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
341883c8:	b590      	push	{r4, r7, lr}
341883ca:	b085      	sub	sp, #20
341883cc:	af00      	add	r7, sp, #0
341883ce:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
341883d0:	2300      	movs	r3, #0
341883d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
341883d4:	6878      	ldr	r0, [r7, #4]
341883d6:	f7fb fd2f 	bl	34183e38 <LL_RCC_GetADFClockSource>
341883da:	4603      	mov	r3, r0
341883dc:	2b07      	cmp	r3, #7
341883de:	f200 80ca 	bhi.w	34188576 <RCCEx_GetADFCLKFreq+0x1ae>
341883e2:	a201      	add	r2, pc, #4	@ (adr r2, 341883e8 <RCCEx_GetADFCLKFreq+0x20>)
341883e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341883e8:	34188409 	.word	0x34188409
341883ec:	34188419 	.word	0x34188419
341883f0:	34188423 	.word	0x34188423
341883f4:	341884ab 	.word	0x341884ab
341883f8:	3418854d 	.word	0x3418854d
341883fc:	34188531 	.word	0x34188531
34188400:	3418855d 	.word	0x3418855d
34188404:	34188563 	.word	0x34188563
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188408:	f7fa fe4e 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418840c:	4603      	mov	r3, r0
3418840e:	4618      	mov	r0, r3
34188410:	f7ff fdda 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188414:	60f8      	str	r0, [r7, #12]
      break;
34188416:	e0b7      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188418:	2007      	movs	r0, #7
3418841a:	f000 f8c1 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418841e:	60f8      	str	r0, [r7, #12]
      break;
34188420:	e0b2      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34188422:	f7fc f9e5 	bl	341847f0 <LL_RCC_IC7_IsEnabled>
34188426:	4603      	mov	r3, r0
34188428:	2b00      	cmp	r3, #0
3418842a:	f000 80a6 	beq.w	3418857a <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418842e:	f7fc fa01 	bl	34184834 <LL_RCC_IC7_GetDivider>
34188432:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34188434:	f7fc f9f0 	bl	34184818 <LL_RCC_IC7_GetSource>
34188438:	4603      	mov	r3, r0
3418843a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418843e:	d029      	beq.n	34188494 <RCCEx_GetADFCLKFreq+0xcc>
34188440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188444:	d82f      	bhi.n	341884a6 <RCCEx_GetADFCLKFreq+0xde>
34188446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418844a:	d01a      	beq.n	34188482 <RCCEx_GetADFCLKFreq+0xba>
3418844c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188450:	d829      	bhi.n	341884a6 <RCCEx_GetADFCLKFreq+0xde>
34188452:	2b00      	cmp	r3, #0
34188454:	d003      	beq.n	3418845e <RCCEx_GetADFCLKFreq+0x96>
34188456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418845a:	d009      	beq.n	34188470 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418845c:	e023      	b.n	341884a6 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418845e:	f7ff fc9b 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188462:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188464:	68fa      	ldr	r2, [r7, #12]
34188466:	68bb      	ldr	r3, [r7, #8]
34188468:	fbb2 f3f3 	udiv	r3, r2, r3
3418846c:	60fb      	str	r3, [r7, #12]
            break;
3418846e:	e01b      	b.n	341884a8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188470:	f7ff fcd8 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188474:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188476:	68fa      	ldr	r2, [r7, #12]
34188478:	68bb      	ldr	r3, [r7, #8]
3418847a:	fbb2 f3f3 	udiv	r3, r2, r3
3418847e:	60fb      	str	r3, [r7, #12]
            break;
34188480:	e012      	b.n	341884a8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188482:	f7ff fd15 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188486:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188488:	68fa      	ldr	r2, [r7, #12]
3418848a:	68bb      	ldr	r3, [r7, #8]
3418848c:	fbb2 f3f3 	udiv	r3, r2, r3
34188490:	60fb      	str	r3, [r7, #12]
            break;
34188492:	e009      	b.n	341884a8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188494:	f7ff fd52 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188498:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418849a:	68fa      	ldr	r2, [r7, #12]
3418849c:	68bb      	ldr	r3, [r7, #8]
3418849e:	fbb2 f3f3 	udiv	r3, r2, r3
341884a2:	60fb      	str	r3, [r7, #12]
            break;
341884a4:	e000      	b.n	341884a8 <RCCEx_GetADFCLKFreq+0xe0>
            break;
341884a6:	bf00      	nop
        }
      }
      break;
341884a8:	e067      	b.n	3418857a <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
341884aa:	f7fc f9e1 	bl	34184870 <LL_RCC_IC8_IsEnabled>
341884ae:	4603      	mov	r3, r0
341884b0:	2b00      	cmp	r3, #0
341884b2:	d064      	beq.n	3418857e <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
341884b4:	f7fc f9fe 	bl	341848b4 <LL_RCC_IC8_GetDivider>
341884b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341884ba:	f7fc f9ed 	bl	34184898 <LL_RCC_IC8_GetSource>
341884be:	4603      	mov	r3, r0
341884c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341884c4:	d029      	beq.n	3418851a <RCCEx_GetADFCLKFreq+0x152>
341884c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341884ca:	d82f      	bhi.n	3418852c <RCCEx_GetADFCLKFreq+0x164>
341884cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884d0:	d01a      	beq.n	34188508 <RCCEx_GetADFCLKFreq+0x140>
341884d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884d6:	d829      	bhi.n	3418852c <RCCEx_GetADFCLKFreq+0x164>
341884d8:	2b00      	cmp	r3, #0
341884da:	d003      	beq.n	341884e4 <RCCEx_GetADFCLKFreq+0x11c>
341884dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341884e0:	d009      	beq.n	341884f6 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341884e2:	e023      	b.n	3418852c <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341884e4:	f7ff fc58 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
341884e8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884ea:	68fa      	ldr	r2, [r7, #12]
341884ec:	68bb      	ldr	r3, [r7, #8]
341884ee:	fbb2 f3f3 	udiv	r3, r2, r3
341884f2:	60fb      	str	r3, [r7, #12]
            break;
341884f4:	e01b      	b.n	3418852e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341884f6:	f7ff fc95 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
341884fa:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884fc:	68fa      	ldr	r2, [r7, #12]
341884fe:	68bb      	ldr	r3, [r7, #8]
34188500:	fbb2 f3f3 	udiv	r3, r2, r3
34188504:	60fb      	str	r3, [r7, #12]
            break;
34188506:	e012      	b.n	3418852e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188508:	f7ff fcd2 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418850c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418850e:	68fa      	ldr	r2, [r7, #12]
34188510:	68bb      	ldr	r3, [r7, #8]
34188512:	fbb2 f3f3 	udiv	r3, r2, r3
34188516:	60fb      	str	r3, [r7, #12]
            break;
34188518:	e009      	b.n	3418852e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418851a:	f7ff fd0f 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418851e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188520:	68fa      	ldr	r2, [r7, #12]
34188522:	68bb      	ldr	r3, [r7, #8]
34188524:	fbb2 f3f3 	udiv	r3, r2, r3
34188528:	60fb      	str	r3, [r7, #12]
            break;
3418852a:	e000      	b.n	3418852e <RCCEx_GetADFCLKFreq+0x166>
            break;
3418852c:	bf00      	nop
        }
      }
      break;
3418852e:	e026      	b.n	3418857e <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34188530:	f7fb f9ba 	bl	341838a8 <LL_RCC_HSI_IsReady>
34188534:	4603      	mov	r3, r0
34188536:	2b00      	cmp	r3, #0
34188538:	d023      	beq.n	34188582 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418853a:	f7fb f9c7 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418853e:	4603      	mov	r3, r0
34188540:	09db      	lsrs	r3, r3, #7
34188542:	4a14      	ldr	r2, [pc, #80]	@ (34188594 <RCCEx_GetADFCLKFreq+0x1cc>)
34188544:	fa22 f303 	lsr.w	r3, r2, r3
34188548:	60fb      	str	r3, [r7, #12]
      }
      break;
3418854a:	e01a      	b.n	34188582 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418854c:	f7fb f9cc 	bl	341838e8 <LL_RCC_MSI_IsReady>
34188550:	4603      	mov	r3, r0
34188552:	2b00      	cmp	r3, #0
34188554:	d017      	beq.n	34188586 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34188556:	4b10      	ldr	r3, [pc, #64]	@ (34188598 <RCCEx_GetADFCLKFreq+0x1d0>)
34188558:	60fb      	str	r3, [r7, #12]
      }
      break;
3418855a:	e014      	b.n	34188586 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418855c:	4b0f      	ldr	r3, [pc, #60]	@ (3418859c <RCCEx_GetADFCLKFreq+0x1d4>)
3418855e:	60fb      	str	r3, [r7, #12]
      break;
34188560:	e012      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34188562:	f7fa fda1 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188566:	4604      	mov	r4, r0
34188568:	f7fb fe06 	bl	34184178 <LL_RCC_GetTIMPrescaler>
3418856c:	4603      	mov	r3, r0
3418856e:	fa24 f303 	lsr.w	r3, r4, r3
34188572:	60fb      	str	r3, [r7, #12]
      break;
34188574:	e008      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34188576:	bf00      	nop
34188578:	e006      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418857a:	bf00      	nop
3418857c:	e004      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418857e:	bf00      	nop
34188580:	e002      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34188582:	bf00      	nop
34188584:	e000      	b.n	34188588 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34188586:	bf00      	nop
  }

  return adf_frequency;
34188588:	68fb      	ldr	r3, [r7, #12]
}
3418858a:	4618      	mov	r0, r3
3418858c:	3714      	adds	r7, #20
3418858e:	46bd      	mov	sp, r7
34188590:	bd90      	pop	{r4, r7, pc}
34188592:	bf00      	nop
34188594:	03d09000 	.word	0x03d09000
34188598:	003d0900 	.word	0x003d0900
3418859c:	00bb8000 	.word	0x00bb8000

341885a0 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
341885a0:	b580      	push	{r7, lr}
341885a2:	b084      	sub	sp, #16
341885a4:	af00      	add	r7, sp, #0
341885a6:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
341885a8:	2300      	movs	r3, #0
341885aa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
341885ac:	f7fc fc60 	bl	34184e70 <LL_RCC_CLKP_IsEnabled>
341885b0:	4603      	mov	r3, r0
341885b2:	2b01      	cmp	r3, #1
341885b4:	f040 81a5 	bne.w	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
341885b8:	6878      	ldr	r0, [r7, #4]
341885ba:	f7fb fc4f 	bl	34183e5c <LL_RCC_GetCLKPClockSource>
341885be:	4603      	mov	r3, r0
341885c0:	2b07      	cmp	r3, #7
341885c2:	f200 818d 	bhi.w	341888e0 <RCCEx_GetCLKPCLKFreq+0x340>
341885c6:	a201      	add	r2, pc, #4	@ (adr r2, 341885cc <RCCEx_GetCLKPCLKFreq+0x2c>)
341885c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341885cc:	341885ed 	.word	0x341885ed
341885d0:	3418860b 	.word	0x3418860b
341885d4:	3418861d 	.word	0x3418861d
341885d8:	341887c7 	.word	0x341887c7
341885dc:	3418862f 	.word	0x3418862f
341885e0:	341886b7 	.word	0x341886b7
341885e4:	3418873f 	.word	0x3418873f
341885e8:	3418884f 	.word	0x3418884f
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
341885ec:	f7fb f95c 	bl	341838a8 <LL_RCC_HSI_IsReady>
341885f0:	4603      	mov	r3, r0
341885f2:	2b00      	cmp	r3, #0
341885f4:	f000 8176 	beq.w	341888e4 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341885f8:	f7fb f968 	bl	341838cc <LL_RCC_HSI_GetDivider>
341885fc:	4603      	mov	r3, r0
341885fe:	09db      	lsrs	r3, r3, #7
34188600:	4aa1      	ldr	r2, [pc, #644]	@ (34188888 <RCCEx_GetCLKPCLKFreq+0x2e8>)
34188602:	fa22 f303 	lsr.w	r3, r2, r3
34188606:	60fb      	str	r3, [r7, #12]
        }
        break;
34188608:	e16c      	b.n	341888e4 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3418860a:	f7fb f96d 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418860e:	4603      	mov	r3, r0
34188610:	2b00      	cmp	r3, #0
34188612:	f000 8169 	beq.w	341888e8 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34188616:	4b9d      	ldr	r3, [pc, #628]	@ (3418888c <RCCEx_GetCLKPCLKFreq+0x2ec>)
34188618:	60fb      	str	r3, [r7, #12]
        }
        break;
3418861a:	e165      	b.n	341888e8 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3418861c:	f7fb f932 	bl	34183884 <LL_RCC_HSE_IsReady>
34188620:	4603      	mov	r3, r0
34188622:	2b00      	cmp	r3, #0
34188624:	f000 8162 	beq.w	341888ec <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34188628:	4b99      	ldr	r3, [pc, #612]	@ (34188890 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3418862a:	60fb      	str	r3, [r7, #12]
        }
        break;
3418862c:	e15e      	b.n	341888ec <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
3418862e:	f7fc f89f 	bl	34184770 <LL_RCC_IC5_IsEnabled>
34188632:	4603      	mov	r3, r0
34188634:	2b00      	cmp	r3, #0
34188636:	f000 815b 	beq.w	341888f0 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
3418863a:	f7fc f8bb 	bl	341847b4 <LL_RCC_IC5_GetDivider>
3418863e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34188640:	f7fc f8aa 	bl	34184798 <LL_RCC_IC5_GetSource>
34188644:	4603      	mov	r3, r0
34188646:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418864a:	d029      	beq.n	341886a0 <RCCEx_GetCLKPCLKFreq+0x100>
3418864c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188650:	d82f      	bhi.n	341886b2 <RCCEx_GetCLKPCLKFreq+0x112>
34188652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188656:	d01a      	beq.n	3418868e <RCCEx_GetCLKPCLKFreq+0xee>
34188658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418865c:	d829      	bhi.n	341886b2 <RCCEx_GetCLKPCLKFreq+0x112>
3418865e:	2b00      	cmp	r3, #0
34188660:	d003      	beq.n	3418866a <RCCEx_GetCLKPCLKFreq+0xca>
34188662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188666:	d009      	beq.n	3418867c <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188668:	e023      	b.n	341886b2 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418866a:	f7ff fb95 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418866e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188670:	68fa      	ldr	r2, [r7, #12]
34188672:	68bb      	ldr	r3, [r7, #8]
34188674:	fbb2 f3f3 	udiv	r3, r2, r3
34188678:	60fb      	str	r3, [r7, #12]
              break;
3418867a:	e01b      	b.n	341886b4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418867c:	f7ff fbd2 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188680:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188682:	68fa      	ldr	r2, [r7, #12]
34188684:	68bb      	ldr	r3, [r7, #8]
34188686:	fbb2 f3f3 	udiv	r3, r2, r3
3418868a:	60fb      	str	r3, [r7, #12]
              break;
3418868c:	e012      	b.n	341886b4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418868e:	f7ff fc0f 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188692:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188694:	68fa      	ldr	r2, [r7, #12]
34188696:	68bb      	ldr	r3, [r7, #8]
34188698:	fbb2 f3f3 	udiv	r3, r2, r3
3418869c:	60fb      	str	r3, [r7, #12]
              break;
3418869e:	e009      	b.n	341886b4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341886a0:	f7ff fc4c 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341886a4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886a6:	68fa      	ldr	r2, [r7, #12]
341886a8:	68bb      	ldr	r3, [r7, #8]
341886aa:	fbb2 f3f3 	udiv	r3, r2, r3
341886ae:	60fb      	str	r3, [r7, #12]
              break;
341886b0:	e000      	b.n	341886b4 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
341886b2:	bf00      	nop
          }
        }
        break;
341886b4:	e11c      	b.n	341888f0 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
341886b6:	f7fc f95b 	bl	34184970 <LL_RCC_IC10_IsEnabled>
341886ba:	4603      	mov	r3, r0
341886bc:	2b00      	cmp	r3, #0
341886be:	f000 8119 	beq.w	341888f4 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
341886c2:	f7fc f977 	bl	341849b4 <LL_RCC_IC10_GetDivider>
341886c6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
341886c8:	f7fc f966 	bl	34184998 <LL_RCC_IC10_GetSource>
341886cc:	4603      	mov	r3, r0
341886ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886d2:	d029      	beq.n	34188728 <RCCEx_GetCLKPCLKFreq+0x188>
341886d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886d8:	d82f      	bhi.n	3418873a <RCCEx_GetCLKPCLKFreq+0x19a>
341886da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886de:	d01a      	beq.n	34188716 <RCCEx_GetCLKPCLKFreq+0x176>
341886e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886e4:	d829      	bhi.n	3418873a <RCCEx_GetCLKPCLKFreq+0x19a>
341886e6:	2b00      	cmp	r3, #0
341886e8:	d003      	beq.n	341886f2 <RCCEx_GetCLKPCLKFreq+0x152>
341886ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341886ee:	d009      	beq.n	34188704 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341886f0:	e023      	b.n	3418873a <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341886f2:	f7ff fb51 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
341886f6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886f8:	68fa      	ldr	r2, [r7, #12]
341886fa:	68bb      	ldr	r3, [r7, #8]
341886fc:	fbb2 f3f3 	udiv	r3, r2, r3
34188700:	60fb      	str	r3, [r7, #12]
              break;
34188702:	e01b      	b.n	3418873c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188704:	f7ff fb8e 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188708:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418870a:	68fa      	ldr	r2, [r7, #12]
3418870c:	68bb      	ldr	r3, [r7, #8]
3418870e:	fbb2 f3f3 	udiv	r3, r2, r3
34188712:	60fb      	str	r3, [r7, #12]
              break;
34188714:	e012      	b.n	3418873c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188716:	f7ff fbcb 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418871a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418871c:	68fa      	ldr	r2, [r7, #12]
3418871e:	68bb      	ldr	r3, [r7, #8]
34188720:	fbb2 f3f3 	udiv	r3, r2, r3
34188724:	60fb      	str	r3, [r7, #12]
              break;
34188726:	e009      	b.n	3418873c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188728:	f7ff fc08 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418872c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418872e:	68fa      	ldr	r2, [r7, #12]
34188730:	68bb      	ldr	r3, [r7, #8]
34188732:	fbb2 f3f3 	udiv	r3, r2, r3
34188736:	60fb      	str	r3, [r7, #12]
              break;
34188738:	e000      	b.n	3418873c <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
3418873a:	bf00      	nop
          }
        }
        break;
3418873c:	e0da      	b.n	341888f4 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
3418873e:	f7fc fa17 	bl	34184b70 <LL_RCC_IC15_IsEnabled>
34188742:	4603      	mov	r3, r0
34188744:	2b00      	cmp	r3, #0
34188746:	f000 80d7 	beq.w	341888f8 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
3418874a:	f7fc fa33 	bl	34184bb4 <LL_RCC_IC15_GetDivider>
3418874e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34188750:	f7fc fa22 	bl	34184b98 <LL_RCC_IC15_GetSource>
34188754:	4603      	mov	r3, r0
34188756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418875a:	d029      	beq.n	341887b0 <RCCEx_GetCLKPCLKFreq+0x210>
3418875c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188760:	d82f      	bhi.n	341887c2 <RCCEx_GetCLKPCLKFreq+0x222>
34188762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188766:	d01a      	beq.n	3418879e <RCCEx_GetCLKPCLKFreq+0x1fe>
34188768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418876c:	d829      	bhi.n	341887c2 <RCCEx_GetCLKPCLKFreq+0x222>
3418876e:	2b00      	cmp	r3, #0
34188770:	d003      	beq.n	3418877a <RCCEx_GetCLKPCLKFreq+0x1da>
34188772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188776:	d009      	beq.n	3418878c <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188778:	e023      	b.n	341887c2 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418877a:	f7ff fb0d 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418877e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188780:	68fa      	ldr	r2, [r7, #12]
34188782:	68bb      	ldr	r3, [r7, #8]
34188784:	fbb2 f3f3 	udiv	r3, r2, r3
34188788:	60fb      	str	r3, [r7, #12]
              break;
3418878a:	e01b      	b.n	341887c4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418878c:	f7ff fb4a 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188790:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188792:	68fa      	ldr	r2, [r7, #12]
34188794:	68bb      	ldr	r3, [r7, #8]
34188796:	fbb2 f3f3 	udiv	r3, r2, r3
3418879a:	60fb      	str	r3, [r7, #12]
              break;
3418879c:	e012      	b.n	341887c4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418879e:	f7ff fb87 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341887a2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341887a4:	68fa      	ldr	r2, [r7, #12]
341887a6:	68bb      	ldr	r3, [r7, #8]
341887a8:	fbb2 f3f3 	udiv	r3, r2, r3
341887ac:	60fb      	str	r3, [r7, #12]
              break;
341887ae:	e009      	b.n	341887c4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341887b0:	f7ff fbc4 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341887b4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341887b6:	68fa      	ldr	r2, [r7, #12]
341887b8:	68bb      	ldr	r3, [r7, #8]
341887ba:	fbb2 f3f3 	udiv	r3, r2, r3
341887be:	60fb      	str	r3, [r7, #12]
              break;
341887c0:	e000      	b.n	341887c4 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
341887c2:	bf00      	nop
          }
        }
        break;
341887c4:	e098      	b.n	341888f8 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
341887c6:	f7fc fad3 	bl	34184d70 <LL_RCC_IC19_IsEnabled>
341887ca:	4603      	mov	r3, r0
341887cc:	2b00      	cmp	r3, #0
341887ce:	f000 8095 	beq.w	341888fc <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
341887d2:	f7fc faef 	bl	34184db4 <LL_RCC_IC19_GetDivider>
341887d6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
341887d8:	f7fc fade 	bl	34184d98 <LL_RCC_IC19_GetSource>
341887dc:	4603      	mov	r3, r0
341887de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887e2:	d029      	beq.n	34188838 <RCCEx_GetCLKPCLKFreq+0x298>
341887e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887e8:	d82f      	bhi.n	3418884a <RCCEx_GetCLKPCLKFreq+0x2aa>
341887ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887ee:	d01a      	beq.n	34188826 <RCCEx_GetCLKPCLKFreq+0x286>
341887f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887f4:	d829      	bhi.n	3418884a <RCCEx_GetCLKPCLKFreq+0x2aa>
341887f6:	2b00      	cmp	r3, #0
341887f8:	d003      	beq.n	34188802 <RCCEx_GetCLKPCLKFreq+0x262>
341887fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341887fe:	d009      	beq.n	34188814 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188800:	e023      	b.n	3418884a <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188802:	f7ff fac9 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188806:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188808:	68fa      	ldr	r2, [r7, #12]
3418880a:	68bb      	ldr	r3, [r7, #8]
3418880c:	fbb2 f3f3 	udiv	r3, r2, r3
34188810:	60fb      	str	r3, [r7, #12]
              break;
34188812:	e01b      	b.n	3418884c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188814:	f7ff fb06 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188818:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418881a:	68fa      	ldr	r2, [r7, #12]
3418881c:	68bb      	ldr	r3, [r7, #8]
3418881e:	fbb2 f3f3 	udiv	r3, r2, r3
34188822:	60fb      	str	r3, [r7, #12]
              break;
34188824:	e012      	b.n	3418884c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188826:	f7ff fb43 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418882a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418882c:	68fa      	ldr	r2, [r7, #12]
3418882e:	68bb      	ldr	r3, [r7, #8]
34188830:	fbb2 f3f3 	udiv	r3, r2, r3
34188834:	60fb      	str	r3, [r7, #12]
              break;
34188836:	e009      	b.n	3418884c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188838:	f7ff fb80 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418883c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418883e:	68fa      	ldr	r2, [r7, #12]
34188840:	68bb      	ldr	r3, [r7, #8]
34188842:	fbb2 f3f3 	udiv	r3, r2, r3
34188846:	60fb      	str	r3, [r7, #12]
              break;
34188848:	e000      	b.n	3418884c <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
3418884a:	bf00      	nop
          }
        }
        break;
3418884c:	e056      	b.n	341888fc <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
3418884e:	f7fc facf 	bl	34184df0 <LL_RCC_IC20_IsEnabled>
34188852:	4603      	mov	r3, r0
34188854:	2b00      	cmp	r3, #0
34188856:	d053      	beq.n	34188900 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34188858:	f7fc faec 	bl	34184e34 <LL_RCC_IC20_GetDivider>
3418885c:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
3418885e:	f7fc fadb 	bl	34184e18 <LL_RCC_IC20_GetSource>
34188862:	4603      	mov	r3, r0
34188864:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188868:	d02f      	beq.n	341888ca <RCCEx_GetCLKPCLKFreq+0x32a>
3418886a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418886e:	d835      	bhi.n	341888dc <RCCEx_GetCLKPCLKFreq+0x33c>
34188870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188874:	d020      	beq.n	341888b8 <RCCEx_GetCLKPCLKFreq+0x318>
34188876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418887a:	d82f      	bhi.n	341888dc <RCCEx_GetCLKPCLKFreq+0x33c>
3418887c:	2b00      	cmp	r3, #0
3418887e:	d009      	beq.n	34188894 <RCCEx_GetCLKPCLKFreq+0x2f4>
34188880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188884:	d00f      	beq.n	341888a6 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188886:	e029      	b.n	341888dc <RCCEx_GetCLKPCLKFreq+0x33c>
34188888:	03d09000 	.word	0x03d09000
3418888c:	003d0900 	.word	0x003d0900
34188890:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188894:	f7ff fa80 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188898:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418889a:	68fa      	ldr	r2, [r7, #12]
3418889c:	68bb      	ldr	r3, [r7, #8]
3418889e:	fbb2 f3f3 	udiv	r3, r2, r3
341888a2:	60fb      	str	r3, [r7, #12]
              break;
341888a4:	e01b      	b.n	341888de <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341888a6:	f7ff fabd 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
341888aa:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341888ac:	68fa      	ldr	r2, [r7, #12]
341888ae:	68bb      	ldr	r3, [r7, #8]
341888b0:	fbb2 f3f3 	udiv	r3, r2, r3
341888b4:	60fb      	str	r3, [r7, #12]
              break;
341888b6:	e012      	b.n	341888de <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341888b8:	f7ff fafa 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341888bc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341888be:	68fa      	ldr	r2, [r7, #12]
341888c0:	68bb      	ldr	r3, [r7, #8]
341888c2:	fbb2 f3f3 	udiv	r3, r2, r3
341888c6:	60fb      	str	r3, [r7, #12]
              break;
341888c8:	e009      	b.n	341888de <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341888ca:	f7ff fb37 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341888ce:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341888d0:	68fa      	ldr	r2, [r7, #12]
341888d2:	68bb      	ldr	r3, [r7, #8]
341888d4:	fbb2 f3f3 	udiv	r3, r2, r3
341888d8:	60fb      	str	r3, [r7, #12]
              break;
341888da:	e000      	b.n	341888de <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
341888dc:	bf00      	nop
          }
        }
        break;
341888de:	e00f      	b.n	34188900 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
341888e0:	bf00      	nop
341888e2:	e00e      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888e4:	bf00      	nop
341888e6:	e00c      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888e8:	bf00      	nop
341888ea:	e00a      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888ec:	bf00      	nop
341888ee:	e008      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888f0:	bf00      	nop
341888f2:	e006      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888f4:	bf00      	nop
341888f6:	e004      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888f8:	bf00      	nop
341888fa:	e002      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341888fc:	bf00      	nop
341888fe:	e000      	b.n	34188902 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188900:	bf00      	nop
    }
  }

  return clkp_frequency;
34188902:	68fb      	ldr	r3, [r7, #12]
}
34188904:	4618      	mov	r0, r3
34188906:	3710      	adds	r7, #16
34188908:	46bd      	mov	sp, r7
3418890a:	bd80      	pop	{r7, pc}

3418890c <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
3418890c:	b580      	push	{r7, lr}
3418890e:	b082      	sub	sp, #8
34188910:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188912:	2300      	movs	r3, #0
34188914:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
34188916:	f7fc f9eb 	bl	34184cf0 <LL_RCC_IC18_IsEnabled>
3418891a:	4603      	mov	r3, r0
3418891c:	2b00      	cmp	r3, #0
3418891e:	d03c      	beq.n	3418899a <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34188920:	f7fc fa08 	bl	34184d34 <LL_RCC_IC18_GetDivider>
34188924:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
34188926:	f7fc f9f7 	bl	34184d18 <LL_RCC_IC18_GetSource>
3418892a:	4603      	mov	r3, r0
3418892c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188930:	d029      	beq.n	34188986 <RCCEx_GetCSICLKFreq+0x7a>
34188932:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188936:	d82f      	bhi.n	34188998 <RCCEx_GetCSICLKFreq+0x8c>
34188938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418893c:	d01a      	beq.n	34188974 <RCCEx_GetCSICLKFreq+0x68>
3418893e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188942:	d829      	bhi.n	34188998 <RCCEx_GetCSICLKFreq+0x8c>
34188944:	2b00      	cmp	r3, #0
34188946:	d003      	beq.n	34188950 <RCCEx_GetCSICLKFreq+0x44>
34188948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418894c:	d009      	beq.n	34188962 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
3418894e:	e023      	b.n	34188998 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188950:	f7ff fa22 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188954:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34188956:	687a      	ldr	r2, [r7, #4]
34188958:	683b      	ldr	r3, [r7, #0]
3418895a:	fbb2 f3f3 	udiv	r3, r2, r3
3418895e:	607b      	str	r3, [r7, #4]
        break;
34188960:	e01b      	b.n	3418899a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188962:	f7ff fa5f 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188966:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34188968:	687a      	ldr	r2, [r7, #4]
3418896a:	683b      	ldr	r3, [r7, #0]
3418896c:	fbb2 f3f3 	udiv	r3, r2, r3
34188970:	607b      	str	r3, [r7, #4]
        break;
34188972:	e012      	b.n	3418899a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188974:	f7ff fa9c 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188978:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418897a:	687a      	ldr	r2, [r7, #4]
3418897c:	683b      	ldr	r3, [r7, #0]
3418897e:	fbb2 f3f3 	udiv	r3, r2, r3
34188982:	607b      	str	r3, [r7, #4]
        break;
34188984:	e009      	b.n	3418899a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188986:	f7ff fad9 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418898a:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418898c:	687a      	ldr	r2, [r7, #4]
3418898e:	683b      	ldr	r3, [r7, #0]
34188990:	fbb2 f3f3 	udiv	r3, r2, r3
34188994:	607b      	str	r3, [r7, #4]
        break;
34188996:	e000      	b.n	3418899a <RCCEx_GetCSICLKFreq+0x8e>
        break;
34188998:	bf00      	nop
    }
  }

  return clkp_frequency;
3418899a:	687b      	ldr	r3, [r7, #4]
}
3418899c:	4618      	mov	r0, r3
3418899e:	3708      	adds	r7, #8
341889a0:	46bd      	mov	sp, r7
341889a2:	bd80      	pop	{r7, pc}

341889a4 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
341889a4:	b580      	push	{r7, lr}
341889a6:	b084      	sub	sp, #16
341889a8:	af00      	add	r7, sp, #0
341889aa:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
341889ac:	2300      	movs	r3, #0
341889ae:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
341889b0:	6878      	ldr	r0, [r7, #4]
341889b2:	f7fb fa65 	bl	34183e80 <LL_RCC_GetDCMIPPClockSource>
341889b6:	4603      	mov	r3, r0
341889b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341889bc:	d062      	beq.n	34188a84 <RCCEx_GetDCMIPPCLKFreq+0xe0>
341889be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341889c2:	d86d      	bhi.n	34188aa0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
341889c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341889c8:	d019      	beq.n	341889fe <RCCEx_GetDCMIPPCLKFreq+0x5a>
341889ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341889ce:	d867      	bhi.n	34188aa0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
341889d0:	2b00      	cmp	r3, #0
341889d2:	d003      	beq.n	341889dc <RCCEx_GetDCMIPPCLKFreq+0x38>
341889d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341889d8:	d00c      	beq.n	341889f4 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
341889da:	e061      	b.n	34188aa0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341889dc:	f7fa fb64 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
341889e0:	4603      	mov	r3, r0
341889e2:	4618      	mov	r0, r3
341889e4:	f7ff faf0 	bl	34187fc8 <RCCEx_GetHCLKFreq>
341889e8:	4603      	mov	r3, r0
341889ea:	4618      	mov	r0, r3
341889ec:	f7ff fb2f 	bl	3418804e <RCCEx_GetPCLK5Freq>
341889f0:	60f8      	str	r0, [r7, #12]
      break;
341889f2:	e05a      	b.n	34188aaa <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341889f4:	2007      	movs	r0, #7
341889f6:	f7ff fdd3 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
341889fa:	60f8      	str	r0, [r7, #12]
      break;
341889fc:	e055      	b.n	34188aaa <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
341889fe:	f7fc f937 	bl	34184c70 <LL_RCC_IC17_IsEnabled>
34188a02:	4603      	mov	r3, r0
34188a04:	2b00      	cmp	r3, #0
34188a06:	d04d      	beq.n	34188aa4 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34188a08:	f7fc f954 	bl	34184cb4 <LL_RCC_IC17_GetDivider>
34188a0c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34188a0e:	f7fc f943 	bl	34184c98 <LL_RCC_IC17_GetSource>
34188a12:	4603      	mov	r3, r0
34188a14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188a18:	d029      	beq.n	34188a6e <RCCEx_GetDCMIPPCLKFreq+0xca>
34188a1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188a1e:	d82f      	bhi.n	34188a80 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34188a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188a24:	d01a      	beq.n	34188a5c <RCCEx_GetDCMIPPCLKFreq+0xb8>
34188a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188a2a:	d829      	bhi.n	34188a80 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34188a2c:	2b00      	cmp	r3, #0
34188a2e:	d003      	beq.n	34188a38 <RCCEx_GetDCMIPPCLKFreq+0x94>
34188a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188a34:	d009      	beq.n	34188a4a <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34188a36:	e023      	b.n	34188a80 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188a38:	f7ff f9ae 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188a3c:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188a3e:	68fa      	ldr	r2, [r7, #12]
34188a40:	68bb      	ldr	r3, [r7, #8]
34188a42:	fbb2 f3f3 	udiv	r3, r2, r3
34188a46:	60fb      	str	r3, [r7, #12]
            break;
34188a48:	e01b      	b.n	34188a82 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188a4a:	f7ff f9eb 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188a4e:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188a50:	68fa      	ldr	r2, [r7, #12]
34188a52:	68bb      	ldr	r3, [r7, #8]
34188a54:	fbb2 f3f3 	udiv	r3, r2, r3
34188a58:	60fb      	str	r3, [r7, #12]
            break;
34188a5a:	e012      	b.n	34188a82 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188a5c:	f7ff fa28 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188a60:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188a62:	68fa      	ldr	r2, [r7, #12]
34188a64:	68bb      	ldr	r3, [r7, #8]
34188a66:	fbb2 f3f3 	udiv	r3, r2, r3
34188a6a:	60fb      	str	r3, [r7, #12]
            break;
34188a6c:	e009      	b.n	34188a82 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188a6e:	f7ff fa65 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188a72:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188a74:	68fa      	ldr	r2, [r7, #12]
34188a76:	68bb      	ldr	r3, [r7, #8]
34188a78:	fbb2 f3f3 	udiv	r3, r2, r3
34188a7c:	60fb      	str	r3, [r7, #12]
            break;
34188a7e:	e000      	b.n	34188a82 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34188a80:	bf00      	nop
      break;
34188a82:	e00f      	b.n	34188aa4 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34188a84:	f7fa ff10 	bl	341838a8 <LL_RCC_HSI_IsReady>
34188a88:	4603      	mov	r3, r0
34188a8a:	2b00      	cmp	r3, #0
34188a8c:	d00c      	beq.n	34188aa8 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188a8e:	f7fa ff1d 	bl	341838cc <LL_RCC_HSI_GetDivider>
34188a92:	4603      	mov	r3, r0
34188a94:	09db      	lsrs	r3, r3, #7
34188a96:	4a07      	ldr	r2, [pc, #28]	@ (34188ab4 <RCCEx_GetDCMIPPCLKFreq+0x110>)
34188a98:	fa22 f303 	lsr.w	r3, r2, r3
34188a9c:	60fb      	str	r3, [r7, #12]
      break;
34188a9e:	e003      	b.n	34188aa8 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
34188aa0:	bf00      	nop
34188aa2:	e002      	b.n	34188aaa <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188aa4:	bf00      	nop
34188aa6:	e000      	b.n	34188aaa <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188aa8:	bf00      	nop
  }

  return dcmipp_frequency;
34188aaa:	68fb      	ldr	r3, [r7, #12]
}
34188aac:	4618      	mov	r0, r3
34188aae:	3710      	adds	r7, #16
34188ab0:	46bd      	mov	sp, r7
34188ab2:	bd80      	pop	{r7, pc}
34188ab4:	03d09000 	.word	0x03d09000

34188ab8 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34188ab8:	b580      	push	{r7, lr}
34188aba:	b084      	sub	sp, #16
34188abc:	af00      	add	r7, sp, #0
34188abe:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
34188ac0:	2300      	movs	r3, #0
34188ac2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34188ac4:	6878      	ldr	r0, [r7, #4]
34188ac6:	f7fb f9ed 	bl	34183ea4 <LL_RCC_GetETHClockSource>
34188aca:	4603      	mov	r3, r0
34188acc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34188ad0:	d05e      	beq.n	34188b90 <RCCEx_GetETH1CLKFreq+0xd8>
34188ad2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34188ad6:	d863      	bhi.n	34188ba0 <RCCEx_GetETH1CLKFreq+0xe8>
34188ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188adc:	d015      	beq.n	34188b0a <RCCEx_GetETH1CLKFreq+0x52>
34188ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188ae2:	d85d      	bhi.n	34188ba0 <RCCEx_GetETH1CLKFreq+0xe8>
34188ae4:	2b00      	cmp	r3, #0
34188ae6:	d003      	beq.n	34188af0 <RCCEx_GetETH1CLKFreq+0x38>
34188ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34188aec:	d008      	beq.n	34188b00 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188aee:	e057      	b.n	34188ba0 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188af0:	f7fa fada 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188af4:	4603      	mov	r3, r0
34188af6:	4618      	mov	r0, r3
34188af8:	f7ff fa66 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188afc:	60f8      	str	r0, [r7, #12]
      break;
34188afe:	e054      	b.n	34188baa <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188b00:	2007      	movs	r0, #7
34188b02:	f7ff fd4d 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34188b06:	60f8      	str	r0, [r7, #12]
      break;
34188b08:	e04f      	b.n	34188baa <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34188b0a:	f7fb ff71 	bl	341849f0 <LL_RCC_IC12_IsEnabled>
34188b0e:	4603      	mov	r3, r0
34188b10:	2b00      	cmp	r3, #0
34188b12:	d047      	beq.n	34188ba4 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34188b14:	f7fb ff8e 	bl	34184a34 <LL_RCC_IC12_GetDivider>
34188b18:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34188b1a:	f7fb ff7d 	bl	34184a18 <LL_RCC_IC12_GetSource>
34188b1e:	4603      	mov	r3, r0
34188b20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b24:	d029      	beq.n	34188b7a <RCCEx_GetETH1CLKFreq+0xc2>
34188b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b2a:	d82f      	bhi.n	34188b8c <RCCEx_GetETH1CLKFreq+0xd4>
34188b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b30:	d01a      	beq.n	34188b68 <RCCEx_GetETH1CLKFreq+0xb0>
34188b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b36:	d829      	bhi.n	34188b8c <RCCEx_GetETH1CLKFreq+0xd4>
34188b38:	2b00      	cmp	r3, #0
34188b3a:	d003      	beq.n	34188b44 <RCCEx_GetETH1CLKFreq+0x8c>
34188b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188b40:	d009      	beq.n	34188b56 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34188b42:	e023      	b.n	34188b8c <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188b44:	f7ff f928 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188b48:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188b4a:	68fa      	ldr	r2, [r7, #12]
34188b4c:	68bb      	ldr	r3, [r7, #8]
34188b4e:	fbb2 f3f3 	udiv	r3, r2, r3
34188b52:	60fb      	str	r3, [r7, #12]
            break;
34188b54:	e01b      	b.n	34188b8e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188b56:	f7ff f965 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188b5a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188b5c:	68fa      	ldr	r2, [r7, #12]
34188b5e:	68bb      	ldr	r3, [r7, #8]
34188b60:	fbb2 f3f3 	udiv	r3, r2, r3
34188b64:	60fb      	str	r3, [r7, #12]
            break;
34188b66:	e012      	b.n	34188b8e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188b68:	f7ff f9a2 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188b6c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188b6e:	68fa      	ldr	r2, [r7, #12]
34188b70:	68bb      	ldr	r3, [r7, #8]
34188b72:	fbb2 f3f3 	udiv	r3, r2, r3
34188b76:	60fb      	str	r3, [r7, #12]
            break;
34188b78:	e009      	b.n	34188b8e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188b7a:	f7ff f9df 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188b7e:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188b80:	68fa      	ldr	r2, [r7, #12]
34188b82:	68bb      	ldr	r3, [r7, #8]
34188b84:	fbb2 f3f3 	udiv	r3, r2, r3
34188b88:	60fb      	str	r3, [r7, #12]
            break;
34188b8a:	e000      	b.n	34188b8e <RCCEx_GetETH1CLKFreq+0xd6>
            break;
34188b8c:	bf00      	nop
      break;
34188b8e:	e009      	b.n	34188ba4 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
34188b90:	f7fa fe78 	bl	34183884 <LL_RCC_HSE_IsReady>
34188b94:	4603      	mov	r3, r0
34188b96:	2b00      	cmp	r3, #0
34188b98:	d006      	beq.n	34188ba8 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
34188b9a:	4b06      	ldr	r3, [pc, #24]	@ (34188bb4 <RCCEx_GetETH1CLKFreq+0xfc>)
34188b9c:	60fb      	str	r3, [r7, #12]
      break;
34188b9e:	e003      	b.n	34188ba8 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
34188ba0:	bf00      	nop
34188ba2:	e002      	b.n	34188baa <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188ba4:	bf00      	nop
34188ba6:	e000      	b.n	34188baa <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188ba8:	bf00      	nop
  }

  return eth1_frequency;
34188baa:	68fb      	ldr	r3, [r7, #12]
}
34188bac:	4618      	mov	r0, r3
34188bae:	3710      	adds	r7, #16
34188bb0:	46bd      	mov	sp, r7
34188bb2:	bd80      	pop	{r7, pc}
34188bb4:	02dc6c00 	.word	0x02dc6c00

34188bb8 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34188bb8:	b580      	push	{r7, lr}
34188bba:	b084      	sub	sp, #16
34188bbc:	af00      	add	r7, sp, #0
34188bbe:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188bc0:	2300      	movs	r3, #0
34188bc2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34188bc4:	6878      	ldr	r0, [r7, #4]
34188bc6:	f7fb f97f 	bl	34183ec8 <LL_RCC_GetETHPTPClockSource>
34188bca:	4603      	mov	r3, r0
34188bcc:	2b03      	cmp	r3, #3
34188bce:	d863      	bhi.n	34188c98 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34188bd0:	a201      	add	r2, pc, #4	@ (adr r2, 34188bd8 <RCCEx_GetETH1PTPCLKFreq+0x20>)
34188bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188bd6:	bf00      	nop
34188bd8:	34188be9 	.word	0x34188be9
34188bdc:	34188bf9 	.word	0x34188bf9
34188be0:	34188c03 	.word	0x34188c03
34188be4:	34188c89 	.word	0x34188c89
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188be8:	f7fa fa5e 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188bec:	4603      	mov	r3, r0
34188bee:	4618      	mov	r0, r3
34188bf0:	f7ff f9ea 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188bf4:	60f8      	str	r0, [r7, #12]
      break;
34188bf6:	e054      	b.n	34188ca2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188bf8:	2007      	movs	r0, #7
34188bfa:	f7ff fcd1 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34188bfe:	60f8      	str	r0, [r7, #12]
      break;
34188c00:	e04f      	b.n	34188ca2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34188c02:	f7fb ff35 	bl	34184a70 <LL_RCC_IC13_IsEnabled>
34188c06:	4603      	mov	r3, r0
34188c08:	2b00      	cmp	r3, #0
34188c0a:	d047      	beq.n	34188c9c <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34188c0c:	f7fb ff52 	bl	34184ab4 <LL_RCC_IC13_GetDivider>
34188c10:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34188c12:	f7fb ff41 	bl	34184a98 <LL_RCC_IC13_GetSource>
34188c16:	4603      	mov	r3, r0
34188c18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c1c:	d029      	beq.n	34188c72 <RCCEx_GetETH1PTPCLKFreq+0xba>
34188c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c22:	d82f      	bhi.n	34188c84 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34188c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188c28:	d01a      	beq.n	34188c60 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34188c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188c2e:	d829      	bhi.n	34188c84 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34188c30:	2b00      	cmp	r3, #0
34188c32:	d003      	beq.n	34188c3c <RCCEx_GetETH1PTPCLKFreq+0x84>
34188c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188c38:	d009      	beq.n	34188c4e <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188c3a:	e023      	b.n	34188c84 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188c3c:	f7ff f8ac 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188c40:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188c42:	68fa      	ldr	r2, [r7, #12]
34188c44:	68bb      	ldr	r3, [r7, #8]
34188c46:	fbb2 f3f3 	udiv	r3, r2, r3
34188c4a:	60fb      	str	r3, [r7, #12]
            break;
34188c4c:	e01b      	b.n	34188c86 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188c4e:	f7ff f8e9 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188c52:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188c54:	68fa      	ldr	r2, [r7, #12]
34188c56:	68bb      	ldr	r3, [r7, #8]
34188c58:	fbb2 f3f3 	udiv	r3, r2, r3
34188c5c:	60fb      	str	r3, [r7, #12]
            break;
34188c5e:	e012      	b.n	34188c86 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188c60:	f7ff f926 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188c64:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188c66:	68fa      	ldr	r2, [r7, #12]
34188c68:	68bb      	ldr	r3, [r7, #8]
34188c6a:	fbb2 f3f3 	udiv	r3, r2, r3
34188c6e:	60fb      	str	r3, [r7, #12]
            break;
34188c70:	e009      	b.n	34188c86 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188c72:	f7ff f963 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188c76:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188c78:	68fa      	ldr	r2, [r7, #12]
34188c7a:	68bb      	ldr	r3, [r7, #8]
34188c7c:	fbb2 f3f3 	udiv	r3, r2, r3
34188c80:	60fb      	str	r3, [r7, #12]
            break;
34188c82:	e000      	b.n	34188c86 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34188c84:	bf00      	nop
        }
      }
      break;
34188c86:	e009      	b.n	34188c9c <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188c88:	f7fa fdfc 	bl	34183884 <LL_RCC_HSE_IsReady>
34188c8c:	4603      	mov	r3, r0
34188c8e:	2b00      	cmp	r3, #0
34188c90:	d006      	beq.n	34188ca0 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34188c92:	4b0a      	ldr	r3, [pc, #40]	@ (34188cbc <RCCEx_GetETH1PTPCLKFreq+0x104>)
34188c94:	60fb      	str	r3, [r7, #12]
      }
      break;
34188c96:	e003      	b.n	34188ca0 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34188c98:	bf00      	nop
34188c9a:	e002      	b.n	34188ca2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34188c9c:	bf00      	nop
34188c9e:	e000      	b.n	34188ca2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34188ca0:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34188ca2:	f7fa ff4d 	bl	34183b40 <LL_RCC_GetETH1PTPDivider>
34188ca6:	4603      	mov	r3, r0
34188ca8:	091b      	lsrs	r3, r3, #4
34188caa:	3301      	adds	r3, #1
34188cac:	68fa      	ldr	r2, [r7, #12]
34188cae:	fbb2 f3f3 	udiv	r3, r2, r3
}
34188cb2:	4618      	mov	r0, r3
34188cb4:	3710      	adds	r7, #16
34188cb6:	46bd      	mov	sp, r7
34188cb8:	bd80      	pop	{r7, pc}
34188cba:	bf00      	nop
34188cbc:	02dc6c00 	.word	0x02dc6c00

34188cc0 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34188cc0:	b580      	push	{r7, lr}
34188cc2:	b084      	sub	sp, #16
34188cc4:	af00      	add	r7, sp, #0
34188cc6:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34188cc8:	2300      	movs	r3, #0
34188cca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34188ccc:	6878      	ldr	r0, [r7, #4]
34188cce:	f7fb f90d 	bl	34183eec <LL_RCC_GetFDCANClockSource>
34188cd2:	4603      	mov	r3, r0
34188cd4:	2b03      	cmp	r3, #3
34188cd6:	d867      	bhi.n	34188da8 <RCCEx_GetFDCANCLKFreq+0xe8>
34188cd8:	a201      	add	r2, pc, #4	@ (adr r2, 34188ce0 <RCCEx_GetFDCANCLKFreq+0x20>)
34188cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188cde:	bf00      	nop
34188ce0:	34188cf1 	.word	0x34188cf1
34188ce4:	34188d09 	.word	0x34188d09
34188ce8:	34188d13 	.word	0x34188d13
34188cec:	34188d99 	.word	0x34188d99
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188cf0:	f7fa f9da 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188cf4:	4603      	mov	r3, r0
34188cf6:	4618      	mov	r0, r3
34188cf8:	f7ff f966 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188cfc:	4603      	mov	r3, r0
34188cfe:	4618      	mov	r0, r3
34188d00:	f7ff f973 	bl	34187fea <RCCEx_GetPCLK1Freq>
34188d04:	60f8      	str	r0, [r7, #12]
      break;
34188d06:	e054      	b.n	34188db2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188d08:	2007      	movs	r0, #7
34188d0a:	f7ff fc49 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34188d0e:	60f8      	str	r0, [r7, #12]
      break;
34188d10:	e04f      	b.n	34188db2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34188d12:	f7fc f82d 	bl	34184d70 <LL_RCC_IC19_IsEnabled>
34188d16:	4603      	mov	r3, r0
34188d18:	2b00      	cmp	r3, #0
34188d1a:	d047      	beq.n	34188dac <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34188d1c:	f7fc f84a 	bl	34184db4 <LL_RCC_IC19_GetDivider>
34188d20:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34188d22:	f7fc f839 	bl	34184d98 <LL_RCC_IC19_GetSource>
34188d26:	4603      	mov	r3, r0
34188d28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d2c:	d029      	beq.n	34188d82 <RCCEx_GetFDCANCLKFreq+0xc2>
34188d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d32:	d82f      	bhi.n	34188d94 <RCCEx_GetFDCANCLKFreq+0xd4>
34188d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d38:	d01a      	beq.n	34188d70 <RCCEx_GetFDCANCLKFreq+0xb0>
34188d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d3e:	d829      	bhi.n	34188d94 <RCCEx_GetFDCANCLKFreq+0xd4>
34188d40:	2b00      	cmp	r3, #0
34188d42:	d003      	beq.n	34188d4c <RCCEx_GetFDCANCLKFreq+0x8c>
34188d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188d48:	d009      	beq.n	34188d5e <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188d4a:	e023      	b.n	34188d94 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188d4c:	f7ff f824 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188d50:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188d52:	68fa      	ldr	r2, [r7, #12]
34188d54:	68bb      	ldr	r3, [r7, #8]
34188d56:	fbb2 f3f3 	udiv	r3, r2, r3
34188d5a:	60fb      	str	r3, [r7, #12]
            break;
34188d5c:	e01b      	b.n	34188d96 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188d5e:	f7ff f861 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188d62:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188d64:	68fa      	ldr	r2, [r7, #12]
34188d66:	68bb      	ldr	r3, [r7, #8]
34188d68:	fbb2 f3f3 	udiv	r3, r2, r3
34188d6c:	60fb      	str	r3, [r7, #12]
            break;
34188d6e:	e012      	b.n	34188d96 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188d70:	f7ff f89e 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188d74:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188d76:	68fa      	ldr	r2, [r7, #12]
34188d78:	68bb      	ldr	r3, [r7, #8]
34188d7a:	fbb2 f3f3 	udiv	r3, r2, r3
34188d7e:	60fb      	str	r3, [r7, #12]
            break;
34188d80:	e009      	b.n	34188d96 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188d82:	f7ff f8db 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188d86:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188d88:	68fa      	ldr	r2, [r7, #12]
34188d8a:	68bb      	ldr	r3, [r7, #8]
34188d8c:	fbb2 f3f3 	udiv	r3, r2, r3
34188d90:	60fb      	str	r3, [r7, #12]
            break;
34188d92:	e000      	b.n	34188d96 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34188d94:	bf00      	nop
        }
      }
      break;
34188d96:	e009      	b.n	34188dac <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188d98:	f7fa fd74 	bl	34183884 <LL_RCC_HSE_IsReady>
34188d9c:	4603      	mov	r3, r0
34188d9e:	2b00      	cmp	r3, #0
34188da0:	d006      	beq.n	34188db0 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34188da2:	4b06      	ldr	r3, [pc, #24]	@ (34188dbc <RCCEx_GetFDCANCLKFreq+0xfc>)
34188da4:	60fb      	str	r3, [r7, #12]
      }
      break;
34188da6:	e003      	b.n	34188db0 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34188da8:	bf00      	nop
34188daa:	e002      	b.n	34188db2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34188dac:	bf00      	nop
34188dae:	e000      	b.n	34188db2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34188db0:	bf00      	nop
  }

  return fdcan_frequency;
34188db2:	68fb      	ldr	r3, [r7, #12]
}
34188db4:	4618      	mov	r0, r3
34188db6:	3710      	adds	r7, #16
34188db8:	46bd      	mov	sp, r7
34188dba:	bd80      	pop	{r7, pc}
34188dbc:	02dc6c00 	.word	0x02dc6c00

34188dc0 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34188dc0:	b580      	push	{r7, lr}
34188dc2:	b084      	sub	sp, #16
34188dc4:	af00      	add	r7, sp, #0
34188dc6:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34188dc8:	2300      	movs	r3, #0
34188dca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34188dcc:	6878      	ldr	r0, [r7, #4]
34188dce:	f7fb f89f 	bl	34183f10 <LL_RCC_GetFMCClockSource>
34188dd2:	4603      	mov	r3, r0
34188dd4:	2b30      	cmp	r3, #48	@ 0x30
34188dd6:	d05d      	beq.n	34188e94 <RCCEx_GetFMCCLKFreq+0xd4>
34188dd8:	2b30      	cmp	r3, #48	@ 0x30
34188dda:	f200 809e 	bhi.w	34188f1a <RCCEx_GetFMCCLKFreq+0x15a>
34188dde:	2b20      	cmp	r3, #32
34188de0:	d014      	beq.n	34188e0c <RCCEx_GetFMCCLKFreq+0x4c>
34188de2:	2b20      	cmp	r3, #32
34188de4:	f200 8099 	bhi.w	34188f1a <RCCEx_GetFMCCLKFreq+0x15a>
34188de8:	2b00      	cmp	r3, #0
34188dea:	d002      	beq.n	34188df2 <RCCEx_GetFMCCLKFreq+0x32>
34188dec:	2b10      	cmp	r3, #16
34188dee:	d008      	beq.n	34188e02 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188df0:	e093      	b.n	34188f1a <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188df2:	f7fa f959 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34188df6:	4603      	mov	r3, r0
34188df8:	4618      	mov	r0, r3
34188dfa:	f7ff f8e5 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34188dfe:	60f8      	str	r0, [r7, #12]
      break;
34188e00:	e090      	b.n	34188f24 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188e02:	2007      	movs	r0, #7
34188e04:	f7ff fbcc 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34188e08:	60f8      	str	r0, [r7, #12]
      break;
34188e0a:	e08b      	b.n	34188f24 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34188e0c:	f7fb fc30 	bl	34184670 <LL_RCC_IC3_IsEnabled>
34188e10:	4603      	mov	r3, r0
34188e12:	2b00      	cmp	r3, #0
34188e14:	f000 8083 	beq.w	34188f1e <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34188e18:	f7fb fc4c 	bl	341846b4 <LL_RCC_IC3_GetDivider>
34188e1c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34188e1e:	f7fb fc3b 	bl	34184698 <LL_RCC_IC3_GetSource>
34188e22:	4603      	mov	r3, r0
34188e24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e28:	d029      	beq.n	34188e7e <RCCEx_GetFMCCLKFreq+0xbe>
34188e2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e2e:	d82f      	bhi.n	34188e90 <RCCEx_GetFMCCLKFreq+0xd0>
34188e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e34:	d01a      	beq.n	34188e6c <RCCEx_GetFMCCLKFreq+0xac>
34188e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e3a:	d829      	bhi.n	34188e90 <RCCEx_GetFMCCLKFreq+0xd0>
34188e3c:	2b00      	cmp	r3, #0
34188e3e:	d003      	beq.n	34188e48 <RCCEx_GetFMCCLKFreq+0x88>
34188e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188e44:	d009      	beq.n	34188e5a <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34188e46:	e023      	b.n	34188e90 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188e48:	f7fe ffa6 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188e4c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188e4e:	68fa      	ldr	r2, [r7, #12]
34188e50:	68bb      	ldr	r3, [r7, #8]
34188e52:	fbb2 f3f3 	udiv	r3, r2, r3
34188e56:	60fb      	str	r3, [r7, #12]
            break;
34188e58:	e01b      	b.n	34188e92 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188e5a:	f7fe ffe3 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188e5e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188e60:	68fa      	ldr	r2, [r7, #12]
34188e62:	68bb      	ldr	r3, [r7, #8]
34188e64:	fbb2 f3f3 	udiv	r3, r2, r3
34188e68:	60fb      	str	r3, [r7, #12]
            break;
34188e6a:	e012      	b.n	34188e92 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188e6c:	f7ff f820 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188e70:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188e72:	68fa      	ldr	r2, [r7, #12]
34188e74:	68bb      	ldr	r3, [r7, #8]
34188e76:	fbb2 f3f3 	udiv	r3, r2, r3
34188e7a:	60fb      	str	r3, [r7, #12]
            break;
34188e7c:	e009      	b.n	34188e92 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188e7e:	f7ff f85d 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188e82:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188e84:	68fa      	ldr	r2, [r7, #12]
34188e86:	68bb      	ldr	r3, [r7, #8]
34188e88:	fbb2 f3f3 	udiv	r3, r2, r3
34188e8c:	60fb      	str	r3, [r7, #12]
            break;
34188e8e:	e000      	b.n	34188e92 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34188e90:	bf00      	nop
      break;
34188e92:	e044      	b.n	34188f1e <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34188e94:	f7fb fc2c 	bl	341846f0 <LL_RCC_IC4_IsEnabled>
34188e98:	4603      	mov	r3, r0
34188e9a:	2b00      	cmp	r3, #0
34188e9c:	d041      	beq.n	34188f22 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34188e9e:	f7fb fc49 	bl	34184734 <LL_RCC_IC4_GetDivider>
34188ea2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34188ea4:	f7fb fc38 	bl	34184718 <LL_RCC_IC4_GetSource>
34188ea8:	4603      	mov	r3, r0
34188eaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188eae:	d029      	beq.n	34188f04 <RCCEx_GetFMCCLKFreq+0x144>
34188eb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188eb4:	d82f      	bhi.n	34188f16 <RCCEx_GetFMCCLKFreq+0x156>
34188eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188eba:	d01a      	beq.n	34188ef2 <RCCEx_GetFMCCLKFreq+0x132>
34188ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188ec0:	d829      	bhi.n	34188f16 <RCCEx_GetFMCCLKFreq+0x156>
34188ec2:	2b00      	cmp	r3, #0
34188ec4:	d003      	beq.n	34188ece <RCCEx_GetFMCCLKFreq+0x10e>
34188ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188eca:	d009      	beq.n	34188ee0 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34188ecc:	e023      	b.n	34188f16 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188ece:	f7fe ff63 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34188ed2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188ed4:	68fa      	ldr	r2, [r7, #12]
34188ed6:	68bb      	ldr	r3, [r7, #8]
34188ed8:	fbb2 f3f3 	udiv	r3, r2, r3
34188edc:	60fb      	str	r3, [r7, #12]
            break;
34188ede:	e01b      	b.n	34188f18 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188ee0:	f7fe ffa0 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34188ee4:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188ee6:	68fa      	ldr	r2, [r7, #12]
34188ee8:	68bb      	ldr	r3, [r7, #8]
34188eea:	fbb2 f3f3 	udiv	r3, r2, r3
34188eee:	60fb      	str	r3, [r7, #12]
            break;
34188ef0:	e012      	b.n	34188f18 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188ef2:	f7fe ffdd 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34188ef6:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188ef8:	68fa      	ldr	r2, [r7, #12]
34188efa:	68bb      	ldr	r3, [r7, #8]
34188efc:	fbb2 f3f3 	udiv	r3, r2, r3
34188f00:	60fb      	str	r3, [r7, #12]
            break;
34188f02:	e009      	b.n	34188f18 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188f04:	f7ff f81a 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34188f08:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188f0a:	68fa      	ldr	r2, [r7, #12]
34188f0c:	68bb      	ldr	r3, [r7, #8]
34188f0e:	fbb2 f3f3 	udiv	r3, r2, r3
34188f12:	60fb      	str	r3, [r7, #12]
            break;
34188f14:	e000      	b.n	34188f18 <RCCEx_GetFMCCLKFreq+0x158>
            break;
34188f16:	bf00      	nop
      break;
34188f18:	e003      	b.n	34188f22 <RCCEx_GetFMCCLKFreq+0x162>
      break;
34188f1a:	bf00      	nop
34188f1c:	e002      	b.n	34188f24 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34188f1e:	bf00      	nop
34188f20:	e000      	b.n	34188f24 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34188f22:	bf00      	nop
  }

  return fmc_frequency;
34188f24:	68fb      	ldr	r3, [r7, #12]
}
34188f26:	4618      	mov	r0, r3
34188f28:	3710      	adds	r7, #16
34188f2a:	46bd      	mov	sp, r7
34188f2c:	bd80      	pop	{r7, pc}
	...

34188f30 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34188f30:	b580      	push	{r7, lr}
34188f32:	b084      	sub	sp, #16
34188f34:	af00      	add	r7, sp, #0
34188f36:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34188f38:	2300      	movs	r3, #0
34188f3a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34188f3c:	6878      	ldr	r0, [r7, #4]
34188f3e:	f7fa fff9 	bl	34183f34 <LL_RCC_GetI2CClockSource>
34188f42:	4603      	mov	r3, r0
34188f44:	4aa2      	ldr	r2, [pc, #648]	@ (341891d0 <RCCEx_GetI2CCLKFreq+0x2a0>)
34188f46:	4293      	cmp	r3, r2
34188f48:	f000 8172 	beq.w	34189230 <RCCEx_GetI2CCLKFreq+0x300>
34188f4c:	4aa0      	ldr	r2, [pc, #640]	@ (341891d0 <RCCEx_GetI2CCLKFreq+0x2a0>)
34188f4e:	4293      	cmp	r3, r2
34188f50:	f200 8184 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188f54:	4a9f      	ldr	r2, [pc, #636]	@ (341891d4 <RCCEx_GetI2CCLKFreq+0x2a4>)
34188f56:	4293      	cmp	r3, r2
34188f58:	f000 816a 	beq.w	34189230 <RCCEx_GetI2CCLKFreq+0x300>
34188f5c:	4a9d      	ldr	r2, [pc, #628]	@ (341891d4 <RCCEx_GetI2CCLKFreq+0x2a4>)
34188f5e:	4293      	cmp	r3, r2
34188f60:	f200 817c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188f64:	4a9c      	ldr	r2, [pc, #624]	@ (341891d8 <RCCEx_GetI2CCLKFreq+0x2a8>)
34188f66:	4293      	cmp	r3, r2
34188f68:	f000 8162 	beq.w	34189230 <RCCEx_GetI2CCLKFreq+0x300>
34188f6c:	4a9a      	ldr	r2, [pc, #616]	@ (341891d8 <RCCEx_GetI2CCLKFreq+0x2a8>)
34188f6e:	4293      	cmp	r3, r2
34188f70:	f200 8174 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188f74:	4a99      	ldr	r2, [pc, #612]	@ (341891dc <RCCEx_GetI2CCLKFreq+0x2ac>)
34188f76:	4293      	cmp	r3, r2
34188f78:	f000 815a 	beq.w	34189230 <RCCEx_GetI2CCLKFreq+0x300>
34188f7c:	4a97      	ldr	r2, [pc, #604]	@ (341891dc <RCCEx_GetI2CCLKFreq+0x2ac>)
34188f7e:	4293      	cmp	r3, r2
34188f80:	f200 816c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188f84:	4a96      	ldr	r2, [pc, #600]	@ (341891e0 <RCCEx_GetI2CCLKFreq+0x2b0>)
34188f86:	4293      	cmp	r3, r2
34188f88:	f000 8160 	beq.w	3418924c <RCCEx_GetI2CCLKFreq+0x31c>
34188f8c:	4a94      	ldr	r2, [pc, #592]	@ (341891e0 <RCCEx_GetI2CCLKFreq+0x2b0>)
34188f8e:	4293      	cmp	r3, r2
34188f90:	f200 8164 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188f94:	4a93      	ldr	r2, [pc, #588]	@ (341891e4 <RCCEx_GetI2CCLKFreq+0x2b4>)
34188f96:	4293      	cmp	r3, r2
34188f98:	f000 8158 	beq.w	3418924c <RCCEx_GetI2CCLKFreq+0x31c>
34188f9c:	4a91      	ldr	r2, [pc, #580]	@ (341891e4 <RCCEx_GetI2CCLKFreq+0x2b4>)
34188f9e:	4293      	cmp	r3, r2
34188fa0:	f200 815c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188fa4:	4a90      	ldr	r2, [pc, #576]	@ (341891e8 <RCCEx_GetI2CCLKFreq+0x2b8>)
34188fa6:	4293      	cmp	r3, r2
34188fa8:	f000 8150 	beq.w	3418924c <RCCEx_GetI2CCLKFreq+0x31c>
34188fac:	4a8e      	ldr	r2, [pc, #568]	@ (341891e8 <RCCEx_GetI2CCLKFreq+0x2b8>)
34188fae:	4293      	cmp	r3, r2
34188fb0:	f200 8154 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188fb4:	4a8d      	ldr	r2, [pc, #564]	@ (341891ec <RCCEx_GetI2CCLKFreq+0x2bc>)
34188fb6:	4293      	cmp	r3, r2
34188fb8:	f000 8148 	beq.w	3418924c <RCCEx_GetI2CCLKFreq+0x31c>
34188fbc:	4a8b      	ldr	r2, [pc, #556]	@ (341891ec <RCCEx_GetI2CCLKFreq+0x2bc>)
34188fbe:	4293      	cmp	r3, r2
34188fc0:	f200 814c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188fc4:	4a8a      	ldr	r2, [pc, #552]	@ (341891f0 <RCCEx_GetI2CCLKFreq+0x2c0>)
34188fc6:	4293      	cmp	r3, r2
34188fc8:	f000 80be 	beq.w	34189148 <RCCEx_GetI2CCLKFreq+0x218>
34188fcc:	4a88      	ldr	r2, [pc, #544]	@ (341891f0 <RCCEx_GetI2CCLKFreq+0x2c0>)
34188fce:	4293      	cmp	r3, r2
34188fd0:	f200 8144 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188fd4:	4a87      	ldr	r2, [pc, #540]	@ (341891f4 <RCCEx_GetI2CCLKFreq+0x2c4>)
34188fd6:	4293      	cmp	r3, r2
34188fd8:	f000 80b6 	beq.w	34189148 <RCCEx_GetI2CCLKFreq+0x218>
34188fdc:	4a85      	ldr	r2, [pc, #532]	@ (341891f4 <RCCEx_GetI2CCLKFreq+0x2c4>)
34188fde:	4293      	cmp	r3, r2
34188fe0:	f200 813c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188fe4:	4a84      	ldr	r2, [pc, #528]	@ (341891f8 <RCCEx_GetI2CCLKFreq+0x2c8>)
34188fe6:	4293      	cmp	r3, r2
34188fe8:	f000 80ae 	beq.w	34189148 <RCCEx_GetI2CCLKFreq+0x218>
34188fec:	4a82      	ldr	r2, [pc, #520]	@ (341891f8 <RCCEx_GetI2CCLKFreq+0x2c8>)
34188fee:	4293      	cmp	r3, r2
34188ff0:	f200 8134 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34188ff4:	4a81      	ldr	r2, [pc, #516]	@ (341891fc <RCCEx_GetI2CCLKFreq+0x2cc>)
34188ff6:	4293      	cmp	r3, r2
34188ff8:	f000 80a6 	beq.w	34189148 <RCCEx_GetI2CCLKFreq+0x218>
34188ffc:	4a7f      	ldr	r2, [pc, #508]	@ (341891fc <RCCEx_GetI2CCLKFreq+0x2cc>)
34188ffe:	4293      	cmp	r3, r2
34189000:	f200 812c 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189004:	4a7e      	ldr	r2, [pc, #504]	@ (34189200 <RCCEx_GetI2CCLKFreq+0x2d0>)
34189006:	4293      	cmp	r3, r2
34189008:	d05a      	beq.n	341890c0 <RCCEx_GetI2CCLKFreq+0x190>
3418900a:	4a7d      	ldr	r2, [pc, #500]	@ (34189200 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418900c:	4293      	cmp	r3, r2
3418900e:	f200 8125 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189012:	4a7c      	ldr	r2, [pc, #496]	@ (34189204 <RCCEx_GetI2CCLKFreq+0x2d4>)
34189014:	4293      	cmp	r3, r2
34189016:	d053      	beq.n	341890c0 <RCCEx_GetI2CCLKFreq+0x190>
34189018:	4a7a      	ldr	r2, [pc, #488]	@ (34189204 <RCCEx_GetI2CCLKFreq+0x2d4>)
3418901a:	4293      	cmp	r3, r2
3418901c:	f200 811e 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189020:	4a79      	ldr	r2, [pc, #484]	@ (34189208 <RCCEx_GetI2CCLKFreq+0x2d8>)
34189022:	4293      	cmp	r3, r2
34189024:	d04c      	beq.n	341890c0 <RCCEx_GetI2CCLKFreq+0x190>
34189026:	4a78      	ldr	r2, [pc, #480]	@ (34189208 <RCCEx_GetI2CCLKFreq+0x2d8>)
34189028:	4293      	cmp	r3, r2
3418902a:	f200 8117 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
3418902e:	4a77      	ldr	r2, [pc, #476]	@ (3418920c <RCCEx_GetI2CCLKFreq+0x2dc>)
34189030:	4293      	cmp	r3, r2
34189032:	d045      	beq.n	341890c0 <RCCEx_GetI2CCLKFreq+0x190>
34189034:	4a75      	ldr	r2, [pc, #468]	@ (3418920c <RCCEx_GetI2CCLKFreq+0x2dc>)
34189036:	4293      	cmp	r3, r2
34189038:	f200 8110 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
3418903c:	4a74      	ldr	r2, [pc, #464]	@ (34189210 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418903e:	4293      	cmp	r3, r2
34189040:	d039      	beq.n	341890b6 <RCCEx_GetI2CCLKFreq+0x186>
34189042:	4a73      	ldr	r2, [pc, #460]	@ (34189210 <RCCEx_GetI2CCLKFreq+0x2e0>)
34189044:	4293      	cmp	r3, r2
34189046:	f200 8109 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
3418904a:	4a72      	ldr	r2, [pc, #456]	@ (34189214 <RCCEx_GetI2CCLKFreq+0x2e4>)
3418904c:	4293      	cmp	r3, r2
3418904e:	d032      	beq.n	341890b6 <RCCEx_GetI2CCLKFreq+0x186>
34189050:	4a70      	ldr	r2, [pc, #448]	@ (34189214 <RCCEx_GetI2CCLKFreq+0x2e4>)
34189052:	4293      	cmp	r3, r2
34189054:	f200 8102 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189058:	4a6f      	ldr	r2, [pc, #444]	@ (34189218 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418905a:	4293      	cmp	r3, r2
3418905c:	d02b      	beq.n	341890b6 <RCCEx_GetI2CCLKFreq+0x186>
3418905e:	4a6e      	ldr	r2, [pc, #440]	@ (34189218 <RCCEx_GetI2CCLKFreq+0x2e8>)
34189060:	4293      	cmp	r3, r2
34189062:	f200 80fb 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189066:	4a6d      	ldr	r2, [pc, #436]	@ (3418921c <RCCEx_GetI2CCLKFreq+0x2ec>)
34189068:	4293      	cmp	r3, r2
3418906a:	d024      	beq.n	341890b6 <RCCEx_GetI2CCLKFreq+0x186>
3418906c:	4a6b      	ldr	r2, [pc, #428]	@ (3418921c <RCCEx_GetI2CCLKFreq+0x2ec>)
3418906e:	4293      	cmp	r3, r2
34189070:	f200 80f4 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189074:	4a6a      	ldr	r2, [pc, #424]	@ (34189220 <RCCEx_GetI2CCLKFreq+0x2f0>)
34189076:	4293      	cmp	r3, r2
34189078:	d011      	beq.n	3418909e <RCCEx_GetI2CCLKFreq+0x16e>
3418907a:	4a69      	ldr	r2, [pc, #420]	@ (34189220 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418907c:	4293      	cmp	r3, r2
3418907e:	f200 80ed 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189082:	4a68      	ldr	r2, [pc, #416]	@ (34189224 <RCCEx_GetI2CCLKFreq+0x2f4>)
34189084:	4293      	cmp	r3, r2
34189086:	d00a      	beq.n	3418909e <RCCEx_GetI2CCLKFreq+0x16e>
34189088:	4a66      	ldr	r2, [pc, #408]	@ (34189224 <RCCEx_GetI2CCLKFreq+0x2f4>)
3418908a:	4293      	cmp	r3, r2
3418908c:	f200 80e6 	bhi.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
34189090:	4a65      	ldr	r2, [pc, #404]	@ (34189228 <RCCEx_GetI2CCLKFreq+0x2f8>)
34189092:	4293      	cmp	r3, r2
34189094:	d003      	beq.n	3418909e <RCCEx_GetI2CCLKFreq+0x16e>
34189096:	4a65      	ldr	r2, [pc, #404]	@ (3418922c <RCCEx_GetI2CCLKFreq+0x2fc>)
34189098:	4293      	cmp	r3, r2
3418909a:	f040 80df 	bne.w	3418925c <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418909e:	f7fa f803 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
341890a2:	4603      	mov	r3, r0
341890a4:	4618      	mov	r0, r3
341890a6:	f7fe ff8f 	bl	34187fc8 <RCCEx_GetHCLKFreq>
341890aa:	4603      	mov	r3, r0
341890ac:	4618      	mov	r0, r3
341890ae:	f7fe ff9c 	bl	34187fea <RCCEx_GetPCLK1Freq>
341890b2:	60f8      	str	r0, [r7, #12]
      break;
341890b4:	e0db      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341890b6:	2007      	movs	r0, #7
341890b8:	f7ff fa72 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
341890bc:	60f8      	str	r0, [r7, #12]
      break;
341890be:	e0d6      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
341890c0:	f7fb fc56 	bl	34184970 <LL_RCC_IC10_IsEnabled>
341890c4:	4603      	mov	r3, r0
341890c6:	2b00      	cmp	r3, #0
341890c8:	f000 80ca 	beq.w	34189260 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
341890cc:	f7fb fc72 	bl	341849b4 <LL_RCC_IC10_GetDivider>
341890d0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
341890d2:	f7fb fc61 	bl	34184998 <LL_RCC_IC10_GetSource>
341890d6:	4603      	mov	r3, r0
341890d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341890dc:	d029      	beq.n	34189132 <RCCEx_GetI2CCLKFreq+0x202>
341890de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341890e2:	d82f      	bhi.n	34189144 <RCCEx_GetI2CCLKFreq+0x214>
341890e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341890e8:	d01a      	beq.n	34189120 <RCCEx_GetI2CCLKFreq+0x1f0>
341890ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341890ee:	d829      	bhi.n	34189144 <RCCEx_GetI2CCLKFreq+0x214>
341890f0:	2b00      	cmp	r3, #0
341890f2:	d003      	beq.n	341890fc <RCCEx_GetI2CCLKFreq+0x1cc>
341890f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341890f8:	d009      	beq.n	3418910e <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341890fa:	e023      	b.n	34189144 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341890fc:	f7fe fe4c 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189100:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189102:	68fa      	ldr	r2, [r7, #12]
34189104:	68bb      	ldr	r3, [r7, #8]
34189106:	fbb2 f3f3 	udiv	r3, r2, r3
3418910a:	60fb      	str	r3, [r7, #12]
            break;
3418910c:	e01b      	b.n	34189146 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418910e:	f7fe fe89 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189112:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189114:	68fa      	ldr	r2, [r7, #12]
34189116:	68bb      	ldr	r3, [r7, #8]
34189118:	fbb2 f3f3 	udiv	r3, r2, r3
3418911c:	60fb      	str	r3, [r7, #12]
            break;
3418911e:	e012      	b.n	34189146 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189120:	f7fe fec6 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189124:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189126:	68fa      	ldr	r2, [r7, #12]
34189128:	68bb      	ldr	r3, [r7, #8]
3418912a:	fbb2 f3f3 	udiv	r3, r2, r3
3418912e:	60fb      	str	r3, [r7, #12]
            break;
34189130:	e009      	b.n	34189146 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189132:	f7fe ff03 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189136:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189138:	68fa      	ldr	r2, [r7, #12]
3418913a:	68bb      	ldr	r3, [r7, #8]
3418913c:	fbb2 f3f3 	udiv	r3, r2, r3
34189140:	60fb      	str	r3, [r7, #12]
            break;
34189142:	e000      	b.n	34189146 <RCCEx_GetI2CCLKFreq+0x216>
            break;
34189144:	bf00      	nop
        }
      }
      break;
34189146:	e08b      	b.n	34189260 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34189148:	f7fb fd12 	bl	34184b70 <LL_RCC_IC15_IsEnabled>
3418914c:	4603      	mov	r3, r0
3418914e:	2b00      	cmp	r3, #0
34189150:	f000 8088 	beq.w	34189264 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34189154:	f7fb fd2e 	bl	34184bb4 <LL_RCC_IC15_GetDivider>
34189158:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418915a:	f7fb fd1d 	bl	34184b98 <LL_RCC_IC15_GetSource>
3418915e:	4603      	mov	r3, r0
34189160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189164:	d029      	beq.n	341891ba <RCCEx_GetI2CCLKFreq+0x28a>
34189166:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418916a:	d82f      	bhi.n	341891cc <RCCEx_GetI2CCLKFreq+0x29c>
3418916c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189170:	d01a      	beq.n	341891a8 <RCCEx_GetI2CCLKFreq+0x278>
34189172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189176:	d829      	bhi.n	341891cc <RCCEx_GetI2CCLKFreq+0x29c>
34189178:	2b00      	cmp	r3, #0
3418917a:	d003      	beq.n	34189184 <RCCEx_GetI2CCLKFreq+0x254>
3418917c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189180:	d009      	beq.n	34189196 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189182:	e023      	b.n	341891cc <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189184:	f7fe fe08 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189188:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418918a:	68fa      	ldr	r2, [r7, #12]
3418918c:	68bb      	ldr	r3, [r7, #8]
3418918e:	fbb2 f3f3 	udiv	r3, r2, r3
34189192:	60fb      	str	r3, [r7, #12]
            break;
34189194:	e01b      	b.n	341891ce <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189196:	f7fe fe45 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418919a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418919c:	68fa      	ldr	r2, [r7, #12]
3418919e:	68bb      	ldr	r3, [r7, #8]
341891a0:	fbb2 f3f3 	udiv	r3, r2, r3
341891a4:	60fb      	str	r3, [r7, #12]
            break;
341891a6:	e012      	b.n	341891ce <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341891a8:	f7fe fe82 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341891ac:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341891ae:	68fa      	ldr	r2, [r7, #12]
341891b0:	68bb      	ldr	r3, [r7, #8]
341891b2:	fbb2 f3f3 	udiv	r3, r2, r3
341891b6:	60fb      	str	r3, [r7, #12]
            break;
341891b8:	e009      	b.n	341891ce <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341891ba:	f7fe febf 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341891be:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341891c0:	68fa      	ldr	r2, [r7, #12]
341891c2:	68bb      	ldr	r3, [r7, #8]
341891c4:	fbb2 f3f3 	udiv	r3, r2, r3
341891c8:	60fb      	str	r3, [r7, #12]
            break;
341891ca:	e000      	b.n	341891ce <RCCEx_GetI2CCLKFreq+0x29e>
            break;
341891cc:	bf00      	nop
        }
      }
      break;
341891ce:	e049      	b.n	34189264 <RCCEx_GetI2CCLKFreq+0x334>
341891d0:	07050c0c 	.word	0x07050c0c
341891d4:	0705080c 	.word	0x0705080c
341891d8:	0705040c 	.word	0x0705040c
341891dc:	0705000c 	.word	0x0705000c
341891e0:	07040c0c 	.word	0x07040c0c
341891e4:	0704080c 	.word	0x0704080c
341891e8:	0704040c 	.word	0x0704040c
341891ec:	0704000c 	.word	0x0704000c
341891f0:	07030c0c 	.word	0x07030c0c
341891f4:	0703080c 	.word	0x0703080c
341891f8:	0703040c 	.word	0x0703040c
341891fc:	0703000c 	.word	0x0703000c
34189200:	07020c0c 	.word	0x07020c0c
34189204:	0702080c 	.word	0x0702080c
34189208:	0702040c 	.word	0x0702040c
3418920c:	0702000c 	.word	0x0702000c
34189210:	07010c0c 	.word	0x07010c0c
34189214:	0701080c 	.word	0x0701080c
34189218:	0701040c 	.word	0x0701040c
3418921c:	0701000c 	.word	0x0701000c
34189220:	07000c0c 	.word	0x07000c0c
34189224:	0700080c 	.word	0x0700080c
34189228:	0700000c 	.word	0x0700000c
3418922c:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189230:	f7fa fb3a 	bl	341838a8 <LL_RCC_HSI_IsReady>
34189234:	4603      	mov	r3, r0
34189236:	2b00      	cmp	r3, #0
34189238:	d016      	beq.n	34189268 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418923a:	f7fa fb47 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418923e:	4603      	mov	r3, r0
34189240:	09db      	lsrs	r3, r3, #7
34189242:	4a0d      	ldr	r2, [pc, #52]	@ (34189278 <RCCEx_GetI2CCLKFreq+0x348>)
34189244:	fa22 f303 	lsr.w	r3, r2, r3
34189248:	60fb      	str	r3, [r7, #12]
      }
      break;
3418924a:	e00d      	b.n	34189268 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418924c:	f7fa fb4c 	bl	341838e8 <LL_RCC_MSI_IsReady>
34189250:	4603      	mov	r3, r0
34189252:	2b00      	cmp	r3, #0
34189254:	d00a      	beq.n	3418926c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
34189256:	4b09      	ldr	r3, [pc, #36]	@ (3418927c <RCCEx_GetI2CCLKFreq+0x34c>)
34189258:	60fb      	str	r3, [r7, #12]
      }
      break;
3418925a:	e007      	b.n	3418926c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
3418925c:	bf00      	nop
3418925e:	e006      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189260:	bf00      	nop
34189262:	e004      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189264:	bf00      	nop
34189266:	e002      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189268:	bf00      	nop
3418926a:	e000      	b.n	3418926e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418926c:	bf00      	nop
  }

  return i2c_frequency;
3418926e:	68fb      	ldr	r3, [r7, #12]
}
34189270:	4618      	mov	r0, r3
34189272:	3710      	adds	r7, #16
34189274:	46bd      	mov	sp, r7
34189276:	bd80      	pop	{r7, pc}
34189278:	03d09000 	.word	0x03d09000
3418927c:	003d0900 	.word	0x003d0900

34189280 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
34189280:	b580      	push	{r7, lr}
34189282:	b084      	sub	sp, #16
34189284:	af00      	add	r7, sp, #0
34189286:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34189288:	2300      	movs	r3, #0
3418928a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3418928c:	6878      	ldr	r0, [r7, #4]
3418928e:	f7fa fe5d 	bl	34183f4c <LL_RCC_GetI3CClockSource>
34189292:	4603      	mov	r3, r0
34189294:	4a86      	ldr	r2, [pc, #536]	@ (341894b0 <RCCEx_GetI3CCLKFreq+0x230>)
34189296:	4293      	cmp	r3, r2
34189298:	f000 80e6 	beq.w	34189468 <RCCEx_GetI3CCLKFreq+0x1e8>
3418929c:	4a84      	ldr	r2, [pc, #528]	@ (341894b0 <RCCEx_GetI3CCLKFreq+0x230>)
3418929e:	4293      	cmp	r3, r2
341892a0:	f200 80f8 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892a4:	4a83      	ldr	r2, [pc, #524]	@ (341894b4 <RCCEx_GetI3CCLKFreq+0x234>)
341892a6:	4293      	cmp	r3, r2
341892a8:	f000 80de 	beq.w	34189468 <RCCEx_GetI3CCLKFreq+0x1e8>
341892ac:	4a81      	ldr	r2, [pc, #516]	@ (341894b4 <RCCEx_GetI3CCLKFreq+0x234>)
341892ae:	4293      	cmp	r3, r2
341892b0:	f200 80f0 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892b4:	4a80      	ldr	r2, [pc, #512]	@ (341894b8 <RCCEx_GetI3CCLKFreq+0x238>)
341892b6:	4293      	cmp	r3, r2
341892b8:	f000 80e4 	beq.w	34189484 <RCCEx_GetI3CCLKFreq+0x204>
341892bc:	4a7e      	ldr	r2, [pc, #504]	@ (341894b8 <RCCEx_GetI3CCLKFreq+0x238>)
341892be:	4293      	cmp	r3, r2
341892c0:	f200 80e8 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892c4:	4a7d      	ldr	r2, [pc, #500]	@ (341894bc <RCCEx_GetI3CCLKFreq+0x23c>)
341892c6:	4293      	cmp	r3, r2
341892c8:	f000 80dc 	beq.w	34189484 <RCCEx_GetI3CCLKFreq+0x204>
341892cc:	4a7b      	ldr	r2, [pc, #492]	@ (341894bc <RCCEx_GetI3CCLKFreq+0x23c>)
341892ce:	4293      	cmp	r3, r2
341892d0:	f200 80e0 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892d4:	4a7a      	ldr	r2, [pc, #488]	@ (341894c0 <RCCEx_GetI3CCLKFreq+0x240>)
341892d6:	4293      	cmp	r3, r2
341892d8:	f000 8083 	beq.w	341893e2 <RCCEx_GetI3CCLKFreq+0x162>
341892dc:	4a78      	ldr	r2, [pc, #480]	@ (341894c0 <RCCEx_GetI3CCLKFreq+0x240>)
341892de:	4293      	cmp	r3, r2
341892e0:	f200 80d8 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892e4:	4a77      	ldr	r2, [pc, #476]	@ (341894c4 <RCCEx_GetI3CCLKFreq+0x244>)
341892e6:	4293      	cmp	r3, r2
341892e8:	d07b      	beq.n	341893e2 <RCCEx_GetI3CCLKFreq+0x162>
341892ea:	4a76      	ldr	r2, [pc, #472]	@ (341894c4 <RCCEx_GetI3CCLKFreq+0x244>)
341892ec:	4293      	cmp	r3, r2
341892ee:	f200 80d1 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
341892f2:	4a75      	ldr	r2, [pc, #468]	@ (341894c8 <RCCEx_GetI3CCLKFreq+0x248>)
341892f4:	4293      	cmp	r3, r2
341892f6:	d030      	beq.n	3418935a <RCCEx_GetI3CCLKFreq+0xda>
341892f8:	4a73      	ldr	r2, [pc, #460]	@ (341894c8 <RCCEx_GetI3CCLKFreq+0x248>)
341892fa:	4293      	cmp	r3, r2
341892fc:	f200 80ca 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
34189300:	4a72      	ldr	r2, [pc, #456]	@ (341894cc <RCCEx_GetI3CCLKFreq+0x24c>)
34189302:	4293      	cmp	r3, r2
34189304:	d029      	beq.n	3418935a <RCCEx_GetI3CCLKFreq+0xda>
34189306:	4a71      	ldr	r2, [pc, #452]	@ (341894cc <RCCEx_GetI3CCLKFreq+0x24c>)
34189308:	4293      	cmp	r3, r2
3418930a:	f200 80c3 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
3418930e:	4a70      	ldr	r2, [pc, #448]	@ (341894d0 <RCCEx_GetI3CCLKFreq+0x250>)
34189310:	4293      	cmp	r3, r2
34189312:	d01d      	beq.n	34189350 <RCCEx_GetI3CCLKFreq+0xd0>
34189314:	4a6e      	ldr	r2, [pc, #440]	@ (341894d0 <RCCEx_GetI3CCLKFreq+0x250>)
34189316:	4293      	cmp	r3, r2
34189318:	f200 80bc 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
3418931c:	4a6d      	ldr	r2, [pc, #436]	@ (341894d4 <RCCEx_GetI3CCLKFreq+0x254>)
3418931e:	4293      	cmp	r3, r2
34189320:	d016      	beq.n	34189350 <RCCEx_GetI3CCLKFreq+0xd0>
34189322:	4a6c      	ldr	r2, [pc, #432]	@ (341894d4 <RCCEx_GetI3CCLKFreq+0x254>)
34189324:	4293      	cmp	r3, r2
34189326:	f200 80b5 	bhi.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
3418932a:	4a6b      	ldr	r2, [pc, #428]	@ (341894d8 <RCCEx_GetI3CCLKFreq+0x258>)
3418932c:	4293      	cmp	r3, r2
3418932e:	d003      	beq.n	34189338 <RCCEx_GetI3CCLKFreq+0xb8>
34189330:	4a6a      	ldr	r2, [pc, #424]	@ (341894dc <RCCEx_GetI3CCLKFreq+0x25c>)
34189332:	4293      	cmp	r3, r2
34189334:	f040 80ae 	bne.w	34189494 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189338:	f7f9 feb6 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418933c:	4603      	mov	r3, r0
3418933e:	4618      	mov	r0, r3
34189340:	f7fe fe42 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34189344:	4603      	mov	r3, r0
34189346:	4618      	mov	r0, r3
34189348:	f7fe fe4f 	bl	34187fea <RCCEx_GetPCLK1Freq>
3418934c:	60f8      	str	r0, [r7, #12]
      break;
3418934e:	e0aa      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189350:	2007      	movs	r0, #7
34189352:	f7ff f925 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34189356:	60f8      	str	r0, [r7, #12]
      break;
34189358:	e0a5      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418935a:	f7fb fb09 	bl	34184970 <LL_RCC_IC10_IsEnabled>
3418935e:	4603      	mov	r3, r0
34189360:	2b00      	cmp	r3, #0
34189362:	f000 8099 	beq.w	34189498 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34189366:	f7fb fb25 	bl	341849b4 <LL_RCC_IC10_GetDivider>
3418936a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418936c:	f7fb fb14 	bl	34184998 <LL_RCC_IC10_GetSource>
34189370:	4603      	mov	r3, r0
34189372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189376:	d029      	beq.n	341893cc <RCCEx_GetI3CCLKFreq+0x14c>
34189378:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418937c:	d82f      	bhi.n	341893de <RCCEx_GetI3CCLKFreq+0x15e>
3418937e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189382:	d01a      	beq.n	341893ba <RCCEx_GetI3CCLKFreq+0x13a>
34189384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189388:	d829      	bhi.n	341893de <RCCEx_GetI3CCLKFreq+0x15e>
3418938a:	2b00      	cmp	r3, #0
3418938c:	d003      	beq.n	34189396 <RCCEx_GetI3CCLKFreq+0x116>
3418938e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189392:	d009      	beq.n	341893a8 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189394:	e023      	b.n	341893de <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189396:	f7fe fcff 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418939a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418939c:	68fa      	ldr	r2, [r7, #12]
3418939e:	68bb      	ldr	r3, [r7, #8]
341893a0:	fbb2 f3f3 	udiv	r3, r2, r3
341893a4:	60fb      	str	r3, [r7, #12]
            break;
341893a6:	e01b      	b.n	341893e0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341893a8:	f7fe fd3c 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
341893ac:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
341893ae:	68fa      	ldr	r2, [r7, #12]
341893b0:	68bb      	ldr	r3, [r7, #8]
341893b2:	fbb2 f3f3 	udiv	r3, r2, r3
341893b6:	60fb      	str	r3, [r7, #12]
            break;
341893b8:	e012      	b.n	341893e0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341893ba:	f7fe fd79 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341893be:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
341893c0:	68fa      	ldr	r2, [r7, #12]
341893c2:	68bb      	ldr	r3, [r7, #8]
341893c4:	fbb2 f3f3 	udiv	r3, r2, r3
341893c8:	60fb      	str	r3, [r7, #12]
            break;
341893ca:	e009      	b.n	341893e0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341893cc:	f7fe fdb6 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341893d0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
341893d2:	68fa      	ldr	r2, [r7, #12]
341893d4:	68bb      	ldr	r3, [r7, #8]
341893d6:	fbb2 f3f3 	udiv	r3, r2, r3
341893da:	60fb      	str	r3, [r7, #12]
            break;
341893dc:	e000      	b.n	341893e0 <RCCEx_GetI3CCLKFreq+0x160>
            break;
341893de:	bf00      	nop
        }
      }
      break;
341893e0:	e05a      	b.n	34189498 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
341893e2:	f7fb fbc5 	bl	34184b70 <LL_RCC_IC15_IsEnabled>
341893e6:	4603      	mov	r3, r0
341893e8:	2b00      	cmp	r3, #0
341893ea:	d057      	beq.n	3418949c <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
341893ec:	f7fb fbe2 	bl	34184bb4 <LL_RCC_IC15_GetDivider>
341893f0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
341893f2:	f7fb fbd1 	bl	34184b98 <LL_RCC_IC15_GetSource>
341893f6:	4603      	mov	r3, r0
341893f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893fc:	d029      	beq.n	34189452 <RCCEx_GetI3CCLKFreq+0x1d2>
341893fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189402:	d82f      	bhi.n	34189464 <RCCEx_GetI3CCLKFreq+0x1e4>
34189404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189408:	d01a      	beq.n	34189440 <RCCEx_GetI3CCLKFreq+0x1c0>
3418940a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418940e:	d829      	bhi.n	34189464 <RCCEx_GetI3CCLKFreq+0x1e4>
34189410:	2b00      	cmp	r3, #0
34189412:	d003      	beq.n	3418941c <RCCEx_GetI3CCLKFreq+0x19c>
34189414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189418:	d009      	beq.n	3418942e <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418941a:	e023      	b.n	34189464 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418941c:	f7fe fcbc 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189420:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189422:	68fa      	ldr	r2, [r7, #12]
34189424:	68bb      	ldr	r3, [r7, #8]
34189426:	fbb2 f3f3 	udiv	r3, r2, r3
3418942a:	60fb      	str	r3, [r7, #12]
            break;
3418942c:	e01b      	b.n	34189466 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418942e:	f7fe fcf9 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189432:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189434:	68fa      	ldr	r2, [r7, #12]
34189436:	68bb      	ldr	r3, [r7, #8]
34189438:	fbb2 f3f3 	udiv	r3, r2, r3
3418943c:	60fb      	str	r3, [r7, #12]
            break;
3418943e:	e012      	b.n	34189466 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189440:	f7fe fd36 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189444:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189446:	68fa      	ldr	r2, [r7, #12]
34189448:	68bb      	ldr	r3, [r7, #8]
3418944a:	fbb2 f3f3 	udiv	r3, r2, r3
3418944e:	60fb      	str	r3, [r7, #12]
            break;
34189450:	e009      	b.n	34189466 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189452:	f7fe fd73 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189456:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189458:	68fa      	ldr	r2, [r7, #12]
3418945a:	68bb      	ldr	r3, [r7, #8]
3418945c:	fbb2 f3f3 	udiv	r3, r2, r3
34189460:	60fb      	str	r3, [r7, #12]
            break;
34189462:	e000      	b.n	34189466 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34189464:	bf00      	nop
        }
      }
      break;
34189466:	e019      	b.n	3418949c <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189468:	f7fa fa1e 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418946c:	4603      	mov	r3, r0
3418946e:	2b00      	cmp	r3, #0
34189470:	d016      	beq.n	341894a0 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189472:	f7fa fa2b 	bl	341838cc <LL_RCC_HSI_GetDivider>
34189476:	4603      	mov	r3, r0
34189478:	09db      	lsrs	r3, r3, #7
3418947a:	4a19      	ldr	r2, [pc, #100]	@ (341894e0 <RCCEx_GetI3CCLKFreq+0x260>)
3418947c:	fa22 f303 	lsr.w	r3, r2, r3
34189480:	60fb      	str	r3, [r7, #12]
      }
      break;
34189482:	e00d      	b.n	341894a0 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189484:	f7fa fa30 	bl	341838e8 <LL_RCC_MSI_IsReady>
34189488:	4603      	mov	r3, r0
3418948a:	2b00      	cmp	r3, #0
3418948c:	d00a      	beq.n	341894a4 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
3418948e:	4b15      	ldr	r3, [pc, #84]	@ (341894e4 <RCCEx_GetI3CCLKFreq+0x264>)
34189490:	60fb      	str	r3, [r7, #12]
      }
      break;
34189492:	e007      	b.n	341894a4 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34189494:	bf00      	nop
34189496:	e006      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34189498:	bf00      	nop
3418949a:	e004      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418949c:	bf00      	nop
3418949e:	e002      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894a0:	bf00      	nop
341894a2:	e000      	b.n	341894a6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894a4:	bf00      	nop
  }

  return i3c_frequency;
341894a6:	68fb      	ldr	r3, [r7, #12]
}
341894a8:	4618      	mov	r0, r3
341894aa:	3710      	adds	r7, #16
341894ac:	46bd      	mov	sp, r7
341894ae:	bd80      	pop	{r7, pc}
341894b0:	0705140c 	.word	0x0705140c
341894b4:	0705100c 	.word	0x0705100c
341894b8:	0704140c 	.word	0x0704140c
341894bc:	0704100c 	.word	0x0704100c
341894c0:	0703140c 	.word	0x0703140c
341894c4:	0703100c 	.word	0x0703100c
341894c8:	0702140c 	.word	0x0702140c
341894cc:	0702100c 	.word	0x0702100c
341894d0:	0701140c 	.word	0x0701140c
341894d4:	0701100c 	.word	0x0701100c
341894d8:	0700100c 	.word	0x0700100c
341894dc:	0700140c 	.word	0x0700140c
341894e0:	03d09000 	.word	0x03d09000
341894e4:	003d0900 	.word	0x003d0900

341894e8 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
341894e8:	b590      	push	{r4, r7, lr}
341894ea:	b085      	sub	sp, #20
341894ec:	af00      	add	r7, sp, #0
341894ee:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
341894f0:	2300      	movs	r3, #0
341894f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
341894f4:	6878      	ldr	r0, [r7, #4]
341894f6:	f7fa fd35 	bl	34183f64 <LL_RCC_GetLPTIMClockSource>
341894fa:	4603      	mov	r3, r0
341894fc:	4aa1      	ldr	r2, [pc, #644]	@ (34189784 <RCCEx_GetLPTIMCLKFreq+0x29c>)
341894fe:	4293      	cmp	r3, r2
34189500:	f000 8185 	beq.w	3418980e <RCCEx_GetLPTIMCLKFreq+0x326>
34189504:	4a9f      	ldr	r2, [pc, #636]	@ (34189784 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34189506:	4293      	cmp	r3, r2
34189508:	f200 818b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418950c:	4a9e      	ldr	r2, [pc, #632]	@ (34189788 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418950e:	4293      	cmp	r3, r2
34189510:	f000 817d 	beq.w	3418980e <RCCEx_GetLPTIMCLKFreq+0x326>
34189514:	4a9c      	ldr	r2, [pc, #624]	@ (34189788 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34189516:	4293      	cmp	r3, r2
34189518:	f200 8183 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418951c:	4a9b      	ldr	r2, [pc, #620]	@ (3418978c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418951e:	4293      	cmp	r3, r2
34189520:	f000 8175 	beq.w	3418980e <RCCEx_GetLPTIMCLKFreq+0x326>
34189524:	4a99      	ldr	r2, [pc, #612]	@ (3418978c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34189526:	4293      	cmp	r3, r2
34189528:	f200 817b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418952c:	4a98      	ldr	r2, [pc, #608]	@ (34189790 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418952e:	4293      	cmp	r3, r2
34189530:	f000 816d 	beq.w	3418980e <RCCEx_GetLPTIMCLKFreq+0x326>
34189534:	4a96      	ldr	r2, [pc, #600]	@ (34189790 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34189536:	4293      	cmp	r3, r2
34189538:	f200 8173 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418953c:	4a95      	ldr	r2, [pc, #596]	@ (34189794 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418953e:	4293      	cmp	r3, r2
34189540:	f000 8165 	beq.w	3418980e <RCCEx_GetLPTIMCLKFreq+0x326>
34189544:	4a93      	ldr	r2, [pc, #588]	@ (34189794 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34189546:	4293      	cmp	r3, r2
34189548:	f200 816b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418954c:	4a92      	ldr	r2, [pc, #584]	@ (34189798 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418954e:	4293      	cmp	r3, r2
34189550:	f000 8154 	beq.w	341897fc <RCCEx_GetLPTIMCLKFreq+0x314>
34189554:	4a90      	ldr	r2, [pc, #576]	@ (34189798 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34189556:	4293      	cmp	r3, r2
34189558:	f200 8163 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418955c:	4a8f      	ldr	r2, [pc, #572]	@ (3418979c <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418955e:	4293      	cmp	r3, r2
34189560:	f000 814c 	beq.w	341897fc <RCCEx_GetLPTIMCLKFreq+0x314>
34189564:	4a8d      	ldr	r2, [pc, #564]	@ (3418979c <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34189566:	4293      	cmp	r3, r2
34189568:	f200 815b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418956c:	4a8c      	ldr	r2, [pc, #560]	@ (341897a0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418956e:	4293      	cmp	r3, r2
34189570:	f000 8144 	beq.w	341897fc <RCCEx_GetLPTIMCLKFreq+0x314>
34189574:	4a8a      	ldr	r2, [pc, #552]	@ (341897a0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34189576:	4293      	cmp	r3, r2
34189578:	f200 8153 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418957c:	4a89      	ldr	r2, [pc, #548]	@ (341897a4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418957e:	4293      	cmp	r3, r2
34189580:	f000 813c 	beq.w	341897fc <RCCEx_GetLPTIMCLKFreq+0x314>
34189584:	4a87      	ldr	r2, [pc, #540]	@ (341897a4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34189586:	4293      	cmp	r3, r2
34189588:	f200 814b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418958c:	4a86      	ldr	r2, [pc, #536]	@ (341897a8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418958e:	4293      	cmp	r3, r2
34189590:	f000 8134 	beq.w	341897fc <RCCEx_GetLPTIMCLKFreq+0x314>
34189594:	4a84      	ldr	r2, [pc, #528]	@ (341897a8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34189596:	4293      	cmp	r3, r2
34189598:	f200 8143 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418959c:	4a83      	ldr	r2, [pc, #524]	@ (341897ac <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418959e:	4293      	cmp	r3, r2
341895a0:	f000 80e7 	beq.w	34189772 <RCCEx_GetLPTIMCLKFreq+0x28a>
341895a4:	4a81      	ldr	r2, [pc, #516]	@ (341897ac <RCCEx_GetLPTIMCLKFreq+0x2c4>)
341895a6:	4293      	cmp	r3, r2
341895a8:	f200 813b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895ac:	4a80      	ldr	r2, [pc, #512]	@ (341897b0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
341895ae:	4293      	cmp	r3, r2
341895b0:	f000 80df 	beq.w	34189772 <RCCEx_GetLPTIMCLKFreq+0x28a>
341895b4:	4a7e      	ldr	r2, [pc, #504]	@ (341897b0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
341895b6:	4293      	cmp	r3, r2
341895b8:	f200 8133 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895bc:	4a7d      	ldr	r2, [pc, #500]	@ (341897b4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
341895be:	4293      	cmp	r3, r2
341895c0:	f000 80d7 	beq.w	34189772 <RCCEx_GetLPTIMCLKFreq+0x28a>
341895c4:	4a7b      	ldr	r2, [pc, #492]	@ (341897b4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
341895c6:	4293      	cmp	r3, r2
341895c8:	f200 812b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895cc:	4a7a      	ldr	r2, [pc, #488]	@ (341897b8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
341895ce:	4293      	cmp	r3, r2
341895d0:	f000 80cf 	beq.w	34189772 <RCCEx_GetLPTIMCLKFreq+0x28a>
341895d4:	4a78      	ldr	r2, [pc, #480]	@ (341897b8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
341895d6:	4293      	cmp	r3, r2
341895d8:	f200 8123 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895dc:	4a77      	ldr	r2, [pc, #476]	@ (341897bc <RCCEx_GetLPTIMCLKFreq+0x2d4>)
341895de:	4293      	cmp	r3, r2
341895e0:	f000 80c7 	beq.w	34189772 <RCCEx_GetLPTIMCLKFreq+0x28a>
341895e4:	4a75      	ldr	r2, [pc, #468]	@ (341897bc <RCCEx_GetLPTIMCLKFreq+0x2d4>)
341895e6:	4293      	cmp	r3, r2
341895e8:	f200 811b 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895ec:	4a74      	ldr	r2, [pc, #464]	@ (341897c0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
341895ee:	4293      	cmp	r3, r2
341895f0:	d07b      	beq.n	341896ea <RCCEx_GetLPTIMCLKFreq+0x202>
341895f2:	4a73      	ldr	r2, [pc, #460]	@ (341897c0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
341895f4:	4293      	cmp	r3, r2
341895f6:	f200 8114 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341895fa:	4a72      	ldr	r2, [pc, #456]	@ (341897c4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
341895fc:	4293      	cmp	r3, r2
341895fe:	d074      	beq.n	341896ea <RCCEx_GetLPTIMCLKFreq+0x202>
34189600:	4a70      	ldr	r2, [pc, #448]	@ (341897c4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34189602:	4293      	cmp	r3, r2
34189604:	f200 810d 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189608:	4a6f      	ldr	r2, [pc, #444]	@ (341897c8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418960a:	4293      	cmp	r3, r2
3418960c:	d06d      	beq.n	341896ea <RCCEx_GetLPTIMCLKFreq+0x202>
3418960e:	4a6e      	ldr	r2, [pc, #440]	@ (341897c8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34189610:	4293      	cmp	r3, r2
34189612:	f200 8106 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189616:	4a6d      	ldr	r2, [pc, #436]	@ (341897cc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34189618:	4293      	cmp	r3, r2
3418961a:	d066      	beq.n	341896ea <RCCEx_GetLPTIMCLKFreq+0x202>
3418961c:	4a6b      	ldr	r2, [pc, #428]	@ (341897cc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418961e:	4293      	cmp	r3, r2
34189620:	f200 80ff 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189624:	4a6a      	ldr	r2, [pc, #424]	@ (341897d0 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34189626:	4293      	cmp	r3, r2
34189628:	d05f      	beq.n	341896ea <RCCEx_GetLPTIMCLKFreq+0x202>
3418962a:	4a69      	ldr	r2, [pc, #420]	@ (341897d0 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418962c:	4293      	cmp	r3, r2
3418962e:	f200 80f8 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189632:	4a68      	ldr	r2, [pc, #416]	@ (341897d4 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34189634:	4293      	cmp	r3, r2
34189636:	d053      	beq.n	341896e0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189638:	4a66      	ldr	r2, [pc, #408]	@ (341897d4 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418963a:	4293      	cmp	r3, r2
3418963c:	f200 80f1 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189640:	4a65      	ldr	r2, [pc, #404]	@ (341897d8 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34189642:	4293      	cmp	r3, r2
34189644:	d04c      	beq.n	341896e0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189646:	4a64      	ldr	r2, [pc, #400]	@ (341897d8 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34189648:	4293      	cmp	r3, r2
3418964a:	f200 80ea 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418964e:	4a63      	ldr	r2, [pc, #396]	@ (341897dc <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34189650:	4293      	cmp	r3, r2
34189652:	d045      	beq.n	341896e0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189654:	4a61      	ldr	r2, [pc, #388]	@ (341897dc <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34189656:	4293      	cmp	r3, r2
34189658:	f200 80e3 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418965c:	4a60      	ldr	r2, [pc, #384]	@ (341897e0 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418965e:	4293      	cmp	r3, r2
34189660:	d03e      	beq.n	341896e0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189662:	4a5f      	ldr	r2, [pc, #380]	@ (341897e0 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34189664:	4293      	cmp	r3, r2
34189666:	f200 80dc 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418966a:	4a5e      	ldr	r2, [pc, #376]	@ (341897e4 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418966c:	4293      	cmp	r3, r2
3418966e:	d037      	beq.n	341896e0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189670:	4a5c      	ldr	r2, [pc, #368]	@ (341897e4 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34189672:	4293      	cmp	r3, r2
34189674:	f200 80d5 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189678:	4a5b      	ldr	r2, [pc, #364]	@ (341897e8 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418967a:	4293      	cmp	r3, r2
3418967c:	d024      	beq.n	341896c8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418967e:	4a5a      	ldr	r2, [pc, #360]	@ (341897e8 <RCCEx_GetLPTIMCLKFreq+0x300>)
34189680:	4293      	cmp	r3, r2
34189682:	f200 80ce 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189686:	4a59      	ldr	r2, [pc, #356]	@ (341897ec <RCCEx_GetLPTIMCLKFreq+0x304>)
34189688:	4293      	cmp	r3, r2
3418968a:	d01d      	beq.n	341896c8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418968c:	4a57      	ldr	r2, [pc, #348]	@ (341897ec <RCCEx_GetLPTIMCLKFreq+0x304>)
3418968e:	4293      	cmp	r3, r2
34189690:	f200 80c7 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189694:	4a56      	ldr	r2, [pc, #344]	@ (341897f0 <RCCEx_GetLPTIMCLKFreq+0x308>)
34189696:	4293      	cmp	r3, r2
34189698:	d016      	beq.n	341896c8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418969a:	4a55      	ldr	r2, [pc, #340]	@ (341897f0 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418969c:	4293      	cmp	r3, r2
3418969e:	f200 80c0 	bhi.w	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
341896a2:	4a54      	ldr	r2, [pc, #336]	@ (341897f4 <RCCEx_GetLPTIMCLKFreq+0x30c>)
341896a4:	4293      	cmp	r3, r2
341896a6:	d003      	beq.n	341896b0 <RCCEx_GetLPTIMCLKFreq+0x1c8>
341896a8:	4a53      	ldr	r2, [pc, #332]	@ (341897f8 <RCCEx_GetLPTIMCLKFreq+0x310>)
341896aa:	4293      	cmp	r3, r2
341896ac:	d00c      	beq.n	341896c8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
341896ae:	e0b8      	b.n	34189822 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341896b0:	f7f9 fcfa 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
341896b4:	4603      	mov	r3, r0
341896b6:	4618      	mov	r0, r3
341896b8:	f7fe fc86 	bl	34187fc8 <RCCEx_GetHCLKFreq>
341896bc:	4603      	mov	r3, r0
341896be:	4618      	mov	r0, r3
341896c0:	f7fe fc93 	bl	34187fea <RCCEx_GetPCLK1Freq>
341896c4:	60f8      	str	r0, [r7, #12]
      break;
341896c6:	e0b3      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341896c8:	f7f9 fcee 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
341896cc:	4603      	mov	r3, r0
341896ce:	4618      	mov	r0, r3
341896d0:	f7fe fc7a 	bl	34187fc8 <RCCEx_GetHCLKFreq>
341896d4:	4603      	mov	r3, r0
341896d6:	4618      	mov	r0, r3
341896d8:	f7fe fca8 	bl	3418802c <RCCEx_GetPCLK4Freq>
341896dc:	60f8      	str	r0, [r7, #12]
      break;
341896de:	e0a7      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341896e0:	2007      	movs	r0, #7
341896e2:	f7fe ff5d 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
341896e6:	60f8      	str	r0, [r7, #12]
      break;
341896e8:	e0a2      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
341896ea:	f7fb fa41 	bl	34184b70 <LL_RCC_IC15_IsEnabled>
341896ee:	4603      	mov	r3, r0
341896f0:	2b00      	cmp	r3, #0
341896f2:	f000 8098 	beq.w	34189826 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
341896f6:	f7fb fa5d 	bl	34184bb4 <LL_RCC_IC15_GetDivider>
341896fa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
341896fc:	f7fb fa4c 	bl	34184b98 <LL_RCC_IC15_GetSource>
34189700:	4603      	mov	r3, r0
34189702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189706:	d029      	beq.n	3418975c <RCCEx_GetLPTIMCLKFreq+0x274>
34189708:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418970c:	d82f      	bhi.n	3418976e <RCCEx_GetLPTIMCLKFreq+0x286>
3418970e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189712:	d01a      	beq.n	3418974a <RCCEx_GetLPTIMCLKFreq+0x262>
34189714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189718:	d829      	bhi.n	3418976e <RCCEx_GetLPTIMCLKFreq+0x286>
3418971a:	2b00      	cmp	r3, #0
3418971c:	d003      	beq.n	34189726 <RCCEx_GetLPTIMCLKFreq+0x23e>
3418971e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189722:	d009      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34189724:	e023      	b.n	3418976e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189726:	f7fe fb37 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418972a:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418972c:	68fa      	ldr	r2, [r7, #12]
3418972e:	68bb      	ldr	r3, [r7, #8]
34189730:	fbb2 f3f3 	udiv	r3, r2, r3
34189734:	60fb      	str	r3, [r7, #12]
            break;
34189736:	e01b      	b.n	34189770 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189738:	f7fe fb74 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418973c:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418973e:	68fa      	ldr	r2, [r7, #12]
34189740:	68bb      	ldr	r3, [r7, #8]
34189742:	fbb2 f3f3 	udiv	r3, r2, r3
34189746:	60fb      	str	r3, [r7, #12]
            break;
34189748:	e012      	b.n	34189770 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418974a:	f7fe fbb1 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418974e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34189750:	68fa      	ldr	r2, [r7, #12]
34189752:	68bb      	ldr	r3, [r7, #8]
34189754:	fbb2 f3f3 	udiv	r3, r2, r3
34189758:	60fb      	str	r3, [r7, #12]
            break;
3418975a:	e009      	b.n	34189770 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418975c:	f7fe fbee 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189760:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34189762:	68fa      	ldr	r2, [r7, #12]
34189764:	68bb      	ldr	r3, [r7, #8]
34189766:	fbb2 f3f3 	udiv	r3, r2, r3
3418976a:	60fb      	str	r3, [r7, #12]
            break;
3418976c:	e000      	b.n	34189770 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3418976e:	bf00      	nop
      break;
34189770:	e059      	b.n	34189826 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
34189772:	f7fa f8d9 	bl	34183928 <LL_RCC_LSE_IsReady>
34189776:	4603      	mov	r3, r0
34189778:	2b00      	cmp	r3, #0
3418977a:	d056      	beq.n	3418982a <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3418977c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34189780:	60fb      	str	r3, [r7, #12]
      break;
34189782:	e052      	b.n	3418982a <RCCEx_GetLPTIMCLKFreq+0x342>
34189784:	0705182c 	.word	0x0705182c
34189788:	0705142c 	.word	0x0705142c
3418978c:	0705102c 	.word	0x0705102c
34189790:	07050c2c 	.word	0x07050c2c
34189794:	0705082c 	.word	0x0705082c
34189798:	0704182c 	.word	0x0704182c
3418979c:	0704142c 	.word	0x0704142c
341897a0:	0704102c 	.word	0x0704102c
341897a4:	07040c2c 	.word	0x07040c2c
341897a8:	0704082c 	.word	0x0704082c
341897ac:	0703182c 	.word	0x0703182c
341897b0:	0703142c 	.word	0x0703142c
341897b4:	0703102c 	.word	0x0703102c
341897b8:	07030c2c 	.word	0x07030c2c
341897bc:	0703082c 	.word	0x0703082c
341897c0:	0702182c 	.word	0x0702182c
341897c4:	0702142c 	.word	0x0702142c
341897c8:	0702102c 	.word	0x0702102c
341897cc:	07020c2c 	.word	0x07020c2c
341897d0:	0702082c 	.word	0x0702082c
341897d4:	0701182c 	.word	0x0701182c
341897d8:	0701142c 	.word	0x0701142c
341897dc:	0701102c 	.word	0x0701102c
341897e0:	07010c2c 	.word	0x07010c2c
341897e4:	0701082c 	.word	0x0701082c
341897e8:	0700182c 	.word	0x0700182c
341897ec:	0700142c 	.word	0x0700142c
341897f0:	0700102c 	.word	0x0700102c
341897f4:	0700082c 	.word	0x0700082c
341897f8:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
341897fc:	f7fa f8a6 	bl	3418394c <LL_RCC_LSI_IsReady>
34189800:	4603      	mov	r3, r0
34189802:	2b00      	cmp	r3, #0
34189804:	d013      	beq.n	3418982e <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34189806:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418980a:	60fb      	str	r3, [r7, #12]
      break;
3418980c:	e00f      	b.n	3418982e <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418980e:	f7f9 fc4b 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34189812:	4604      	mov	r4, r0
34189814:	f7fa fcb0 	bl	34184178 <LL_RCC_GetTIMPrescaler>
34189818:	4603      	mov	r3, r0
3418981a:	fa24 f303 	lsr.w	r3, r4, r3
3418981e:	60fb      	str	r3, [r7, #12]
      break;
34189820:	e006      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34189822:	bf00      	nop
34189824:	e004      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34189826:	bf00      	nop
34189828:	e002      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418982a:	bf00      	nop
3418982c:	e000      	b.n	34189830 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418982e:	bf00      	nop
  }

  return lptim_frequency;
34189830:	68fb      	ldr	r3, [r7, #12]
}
34189832:	4618      	mov	r0, r3
34189834:	3714      	adds	r7, #20
34189836:	46bd      	mov	sp, r7
34189838:	bd90      	pop	{r4, r7, pc}
3418983a:	bf00      	nop

3418983c <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3418983c:	b580      	push	{r7, lr}
3418983e:	b084      	sub	sp, #16
34189840:	af00      	add	r7, sp, #0
34189842:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34189844:	2300      	movs	r3, #0
34189846:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34189848:	6878      	ldr	r0, [r7, #4]
3418984a:	f7fa fb97 	bl	34183f7c <LL_RCC_GetLPUARTClockSource>
3418984e:	4603      	mov	r3, r0
34189850:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34189854:	f000 80c0 	beq.w	341899d8 <RCCEx_GetLPUARTCLKFreq+0x19c>
34189858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418985c:	f200 80db 	bhi.w	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
34189860:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34189864:	f000 80c6 	beq.w	341899f4 <RCCEx_GetLPUARTCLKFreq+0x1b8>
34189868:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418986c:	f200 80d3 	bhi.w	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
34189870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34189874:	f000 80c6 	beq.w	34189a04 <RCCEx_GetLPUARTCLKFreq+0x1c8>
34189878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418987c:	f200 80cb 	bhi.w	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
34189880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189884:	d065      	beq.n	34189952 <RCCEx_GetLPUARTCLKFreq+0x116>
34189886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418988a:	f200 80c4 	bhi.w	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418988e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189892:	d01a      	beq.n	341898ca <RCCEx_GetLPUARTCLKFreq+0x8e>
34189894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189898:	f200 80bd 	bhi.w	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418989c:	2b00      	cmp	r3, #0
3418989e:	d003      	beq.n	341898a8 <RCCEx_GetLPUARTCLKFreq+0x6c>
341898a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341898a4:	d00c      	beq.n	341898c0 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
341898a6:	e0b6      	b.n	34189a16 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341898a8:	f7f9 fbfe 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
341898ac:	4603      	mov	r3, r0
341898ae:	4618      	mov	r0, r3
341898b0:	f7fe fb8a 	bl	34187fc8 <RCCEx_GetHCLKFreq>
341898b4:	4603      	mov	r3, r0
341898b6:	4618      	mov	r0, r3
341898b8:	f7fe fbb8 	bl	3418802c <RCCEx_GetPCLK4Freq>
341898bc:	60f8      	str	r0, [r7, #12]
      break;
341898be:	e0b5      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341898c0:	2007      	movs	r0, #7
341898c2:	f7fe fe6d 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
341898c6:	60f8      	str	r0, [r7, #12]
      break;
341898c8:	e0b0      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
341898ca:	f7fb f811 	bl	341848f0 <LL_RCC_IC9_IsEnabled>
341898ce:	4603      	mov	r3, r0
341898d0:	2b00      	cmp	r3, #0
341898d2:	f000 80a2 	beq.w	34189a1a <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
341898d6:	f7fb f82d 	bl	34184934 <LL_RCC_IC9_GetDivider>
341898da:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
341898dc:	f7fb f81c 	bl	34184918 <LL_RCC_IC9_GetSource>
341898e0:	4603      	mov	r3, r0
341898e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898e6:	d029      	beq.n	3418993c <RCCEx_GetLPUARTCLKFreq+0x100>
341898e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898ec:	d82f      	bhi.n	3418994e <RCCEx_GetLPUARTCLKFreq+0x112>
341898ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898f2:	d01a      	beq.n	3418992a <RCCEx_GetLPUARTCLKFreq+0xee>
341898f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898f8:	d829      	bhi.n	3418994e <RCCEx_GetLPUARTCLKFreq+0x112>
341898fa:	2b00      	cmp	r3, #0
341898fc:	d003      	beq.n	34189906 <RCCEx_GetLPUARTCLKFreq+0xca>
341898fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189902:	d009      	beq.n	34189918 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34189904:	e023      	b.n	3418994e <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189906:	f7fe fa47 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418990a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418990c:	68fa      	ldr	r2, [r7, #12]
3418990e:	68bb      	ldr	r3, [r7, #8]
34189910:	fbb2 f3f3 	udiv	r3, r2, r3
34189914:	60fb      	str	r3, [r7, #12]
            break;
34189916:	e01b      	b.n	34189950 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189918:	f7fe fa84 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418991c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418991e:	68fa      	ldr	r2, [r7, #12]
34189920:	68bb      	ldr	r3, [r7, #8]
34189922:	fbb2 f3f3 	udiv	r3, r2, r3
34189926:	60fb      	str	r3, [r7, #12]
            break;
34189928:	e012      	b.n	34189950 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418992a:	f7fe fac1 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418992e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189930:	68fa      	ldr	r2, [r7, #12]
34189932:	68bb      	ldr	r3, [r7, #8]
34189934:	fbb2 f3f3 	udiv	r3, r2, r3
34189938:	60fb      	str	r3, [r7, #12]
            break;
3418993a:	e009      	b.n	34189950 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418993c:	f7fe fafe 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189940:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189942:	68fa      	ldr	r2, [r7, #12]
34189944:	68bb      	ldr	r3, [r7, #8]
34189946:	fbb2 f3f3 	udiv	r3, r2, r3
3418994a:	60fb      	str	r3, [r7, #12]
            break;
3418994c:	e000      	b.n	34189950 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3418994e:	bf00      	nop
      break;
34189950:	e063      	b.n	34189a1a <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34189952:	f7fb f8cd 	bl	34184af0 <LL_RCC_IC14_IsEnabled>
34189956:	4603      	mov	r3, r0
34189958:	2b00      	cmp	r3, #0
3418995a:	d060      	beq.n	34189a1e <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3418995c:	f7fb f8ea 	bl	34184b34 <LL_RCC_IC14_GetDivider>
34189960:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34189962:	f7fb f8d9 	bl	34184b18 <LL_RCC_IC14_GetSource>
34189966:	4603      	mov	r3, r0
34189968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418996c:	d029      	beq.n	341899c2 <RCCEx_GetLPUARTCLKFreq+0x186>
3418996e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189972:	d82f      	bhi.n	341899d4 <RCCEx_GetLPUARTCLKFreq+0x198>
34189974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189978:	d01a      	beq.n	341899b0 <RCCEx_GetLPUARTCLKFreq+0x174>
3418997a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418997e:	d829      	bhi.n	341899d4 <RCCEx_GetLPUARTCLKFreq+0x198>
34189980:	2b00      	cmp	r3, #0
34189982:	d003      	beq.n	3418998c <RCCEx_GetLPUARTCLKFreq+0x150>
34189984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189988:	d009      	beq.n	3418999e <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3418998a:	e023      	b.n	341899d4 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418998c:	f7fe fa04 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189990:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189992:	68fa      	ldr	r2, [r7, #12]
34189994:	68bb      	ldr	r3, [r7, #8]
34189996:	fbb2 f3f3 	udiv	r3, r2, r3
3418999a:	60fb      	str	r3, [r7, #12]
            break;
3418999c:	e01b      	b.n	341899d6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418999e:	f7fe fa41 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
341899a2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341899a4:	68fa      	ldr	r2, [r7, #12]
341899a6:	68bb      	ldr	r3, [r7, #8]
341899a8:	fbb2 f3f3 	udiv	r3, r2, r3
341899ac:	60fb      	str	r3, [r7, #12]
            break;
341899ae:	e012      	b.n	341899d6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341899b0:	f7fe fa7e 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
341899b4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341899b6:	68fa      	ldr	r2, [r7, #12]
341899b8:	68bb      	ldr	r3, [r7, #8]
341899ba:	fbb2 f3f3 	udiv	r3, r2, r3
341899be:	60fb      	str	r3, [r7, #12]
            break;
341899c0:	e009      	b.n	341899d6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341899c2:	f7fe fabb 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
341899c6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341899c8:	68fa      	ldr	r2, [r7, #12]
341899ca:	68bb      	ldr	r3, [r7, #8]
341899cc:	fbb2 f3f3 	udiv	r3, r2, r3
341899d0:	60fb      	str	r3, [r7, #12]
            break;
341899d2:	e000      	b.n	341899d6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
341899d4:	bf00      	nop
      break;
341899d6:	e022      	b.n	34189a1e <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
341899d8:	f7f9 ff66 	bl	341838a8 <LL_RCC_HSI_IsReady>
341899dc:	4603      	mov	r3, r0
341899de:	2b00      	cmp	r3, #0
341899e0:	d01f      	beq.n	34189a22 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341899e2:	f7f9 ff73 	bl	341838cc <LL_RCC_HSI_GetDivider>
341899e6:	4603      	mov	r3, r0
341899e8:	09db      	lsrs	r3, r3, #7
341899ea:	4a13      	ldr	r2, [pc, #76]	@ (34189a38 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
341899ec:	fa22 f303 	lsr.w	r3, r2, r3
341899f0:	60fb      	str	r3, [r7, #12]
      break;
341899f2:	e016      	b.n	34189a22 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
341899f4:	f7f9 ff78 	bl	341838e8 <LL_RCC_MSI_IsReady>
341899f8:	4603      	mov	r3, r0
341899fa:	2b00      	cmp	r3, #0
341899fc:	d013      	beq.n	34189a26 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
341899fe:	4b0f      	ldr	r3, [pc, #60]	@ (34189a3c <RCCEx_GetLPUARTCLKFreq+0x200>)
34189a00:	60fb      	str	r3, [r7, #12]
      break;
34189a02:	e010      	b.n	34189a26 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34189a04:	f7f9 ff90 	bl	34183928 <LL_RCC_LSE_IsReady>
34189a08:	4603      	mov	r3, r0
34189a0a:	2b00      	cmp	r3, #0
34189a0c:	d00d      	beq.n	34189a2a <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34189a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34189a12:	60fb      	str	r3, [r7, #12]
      break;
34189a14:	e009      	b.n	34189a2a <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
34189a16:	bf00      	nop
34189a18:	e008      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a1a:	bf00      	nop
34189a1c:	e006      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a1e:	bf00      	nop
34189a20:	e004      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a22:	bf00      	nop
34189a24:	e002      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a26:	bf00      	nop
34189a28:	e000      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a2a:	bf00      	nop
  }

  return lpuart_frequency;
34189a2c:	68fb      	ldr	r3, [r7, #12]
}
34189a2e:	4618      	mov	r0, r3
34189a30:	3710      	adds	r7, #16
34189a32:	46bd      	mov	sp, r7
34189a34:	bd80      	pop	{r7, pc}
34189a36:	bf00      	nop
34189a38:	03d09000 	.word	0x03d09000
34189a3c:	003d0900 	.word	0x003d0900

34189a40 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34189a40:	b580      	push	{r7, lr}
34189a42:	b084      	sub	sp, #16
34189a44:	af00      	add	r7, sp, #0
34189a46:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189a48:	2300      	movs	r3, #0
34189a4a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34189a4c:	6878      	ldr	r0, [r7, #4]
34189a4e:	f7fa faa7 	bl	34183fa0 <LL_RCC_GetLTDCClockSource>
34189a52:	4603      	mov	r3, r0
34189a54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34189a58:	d062      	beq.n	34189b20 <RCCEx_GetLTDCCLKFreq+0xe0>
34189a5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34189a5e:	d86d      	bhi.n	34189b3c <RCCEx_GetLTDCCLKFreq+0xfc>
34189a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34189a64:	d019      	beq.n	34189a9a <RCCEx_GetLTDCCLKFreq+0x5a>
34189a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34189a6a:	d867      	bhi.n	34189b3c <RCCEx_GetLTDCCLKFreq+0xfc>
34189a6c:	2b00      	cmp	r3, #0
34189a6e:	d003      	beq.n	34189a78 <RCCEx_GetLTDCCLKFreq+0x38>
34189a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34189a74:	d00c      	beq.n	34189a90 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189a76:	e061      	b.n	34189b3c <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189a78:	f7f9 fb16 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34189a7c:	4603      	mov	r3, r0
34189a7e:	4618      	mov	r0, r3
34189a80:	f7fe faa2 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34189a84:	4603      	mov	r3, r0
34189a86:	4618      	mov	r0, r3
34189a88:	f7fe fae1 	bl	3418804e <RCCEx_GetPCLK5Freq>
34189a8c:	60f8      	str	r0, [r7, #12]
      break;
34189a8e:	e05a      	b.n	34189b46 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189a90:	2007      	movs	r0, #7
34189a92:	f7fe fd85 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34189a96:	60f8      	str	r0, [r7, #12]
      break;
34189a98:	e055      	b.n	34189b46 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
34189a9a:	f7fb f8a9 	bl	34184bf0 <LL_RCC_IC16_IsEnabled>
34189a9e:	4603      	mov	r3, r0
34189aa0:	2b00      	cmp	r3, #0
34189aa2:	d04d      	beq.n	34189b40 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
34189aa4:	f7fb f8c6 	bl	34184c34 <LL_RCC_IC16_GetDivider>
34189aa8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
34189aaa:	f7fb f8b5 	bl	34184c18 <LL_RCC_IC16_GetSource>
34189aae:	4603      	mov	r3, r0
34189ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ab4:	d029      	beq.n	34189b0a <RCCEx_GetLTDCCLKFreq+0xca>
34189ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189aba:	d82f      	bhi.n	34189b1c <RCCEx_GetLTDCCLKFreq+0xdc>
34189abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ac0:	d01a      	beq.n	34189af8 <RCCEx_GetLTDCCLKFreq+0xb8>
34189ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ac6:	d829      	bhi.n	34189b1c <RCCEx_GetLTDCCLKFreq+0xdc>
34189ac8:	2b00      	cmp	r3, #0
34189aca:	d003      	beq.n	34189ad4 <RCCEx_GetLTDCCLKFreq+0x94>
34189acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189ad0:	d009      	beq.n	34189ae6 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
34189ad2:	e023      	b.n	34189b1c <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189ad4:	f7fe f960 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189ad8:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189ada:	68fa      	ldr	r2, [r7, #12]
34189adc:	68bb      	ldr	r3, [r7, #8]
34189ade:	fbb2 f3f3 	udiv	r3, r2, r3
34189ae2:	60fb      	str	r3, [r7, #12]
            break;
34189ae4:	e01b      	b.n	34189b1e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189ae6:	f7fe f99d 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189aea:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189aec:	68fa      	ldr	r2, [r7, #12]
34189aee:	68bb      	ldr	r3, [r7, #8]
34189af0:	fbb2 f3f3 	udiv	r3, r2, r3
34189af4:	60fb      	str	r3, [r7, #12]
            break;
34189af6:	e012      	b.n	34189b1e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189af8:	f7fe f9da 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189afc:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189afe:	68fa      	ldr	r2, [r7, #12]
34189b00:	68bb      	ldr	r3, [r7, #8]
34189b02:	fbb2 f3f3 	udiv	r3, r2, r3
34189b06:	60fb      	str	r3, [r7, #12]
            break;
34189b08:	e009      	b.n	34189b1e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189b0a:	f7fe fa17 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189b0e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189b10:	68fa      	ldr	r2, [r7, #12]
34189b12:	68bb      	ldr	r3, [r7, #8]
34189b14:	fbb2 f3f3 	udiv	r3, r2, r3
34189b18:	60fb      	str	r3, [r7, #12]
            break;
34189b1a:	e000      	b.n	34189b1e <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34189b1c:	bf00      	nop
      break;
34189b1e:	e00f      	b.n	34189b40 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34189b20:	f7f9 fec2 	bl	341838a8 <LL_RCC_HSI_IsReady>
34189b24:	4603      	mov	r3, r0
34189b26:	2b00      	cmp	r3, #0
34189b28:	d00c      	beq.n	34189b44 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189b2a:	f7f9 fecf 	bl	341838cc <LL_RCC_HSI_GetDivider>
34189b2e:	4603      	mov	r3, r0
34189b30:	09db      	lsrs	r3, r3, #7
34189b32:	4a07      	ldr	r2, [pc, #28]	@ (34189b50 <RCCEx_GetLTDCCLKFreq+0x110>)
34189b34:	fa22 f303 	lsr.w	r3, r2, r3
34189b38:	60fb      	str	r3, [r7, #12]
      break;
34189b3a:	e003      	b.n	34189b44 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34189b3c:	bf00      	nop
34189b3e:	e002      	b.n	34189b46 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34189b40:	bf00      	nop
34189b42:	e000      	b.n	34189b46 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34189b44:	bf00      	nop
  }

  return ltdc_frequency;
34189b46:	68fb      	ldr	r3, [r7, #12]
}
34189b48:	4618      	mov	r0, r3
34189b4a:	3710      	adds	r7, #16
34189b4c:	46bd      	mov	sp, r7
34189b4e:	bd80      	pop	{r7, pc}
34189b50:	03d09000 	.word	0x03d09000

34189b54 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34189b54:	b590      	push	{r4, r7, lr}
34189b56:	b085      	sub	sp, #20
34189b58:	af00      	add	r7, sp, #0
34189b5a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34189b5c:	2300      	movs	r3, #0
34189b5e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34189b60:	6878      	ldr	r0, [r7, #4]
34189b62:	f7fa fa2f 	bl	34183fc4 <LL_RCC_GetMDFClockSource>
34189b66:	4603      	mov	r3, r0
34189b68:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34189b6c:	f000 80dd 	beq.w	34189d2a <RCCEx_GetMDFCLKFreq+0x1d6>
34189b70:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34189b74:	f200 80e3 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189b78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189b7c:	f000 80d2 	beq.w	34189d24 <RCCEx_GetMDFCLKFreq+0x1d0>
34189b80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189b84:	f200 80db 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189b8c:	f000 80b4 	beq.w	34189cf8 <RCCEx_GetMDFCLKFreq+0x1a4>
34189b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189b94:	f200 80d3 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189b98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189b9c:	f000 80ba 	beq.w	34189d14 <RCCEx_GetMDFCLKFreq+0x1c0>
34189ba0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189ba4:	f200 80cb 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34189bac:	d061      	beq.n	34189c72 <RCCEx_GetMDFCLKFreq+0x11e>
34189bae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34189bb2:	f200 80c4 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189bba:	d016      	beq.n	34189bea <RCCEx_GetMDFCLKFreq+0x96>
34189bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189bc0:	f200 80bd 	bhi.w	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
34189bc4:	2b00      	cmp	r3, #0
34189bc6:	d003      	beq.n	34189bd0 <RCCEx_GetMDFCLKFreq+0x7c>
34189bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34189bcc:	d008      	beq.n	34189be0 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34189bce:	e0b6      	b.n	34189d3e <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189bd0:	f7f9 fa6a 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34189bd4:	4603      	mov	r3, r0
34189bd6:	4618      	mov	r0, r3
34189bd8:	f7fe f9f6 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34189bdc:	60f8      	str	r0, [r7, #12]
      break;
34189bde:	e0b7      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189be0:	2007      	movs	r0, #7
34189be2:	f7fe fcdd 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34189be6:	60f8      	str	r0, [r7, #12]
      break;
34189be8:	e0b2      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189bea:	f7fa fe01 	bl	341847f0 <LL_RCC_IC7_IsEnabled>
34189bee:	4603      	mov	r3, r0
34189bf0:	2b00      	cmp	r3, #0
34189bf2:	f000 80a6 	beq.w	34189d42 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34189bf6:	f7fa fe1d 	bl	34184834 <LL_RCC_IC7_GetDivider>
34189bfa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34189bfc:	f7fa fe0c 	bl	34184818 <LL_RCC_IC7_GetSource>
34189c00:	4603      	mov	r3, r0
34189c02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c06:	d029      	beq.n	34189c5c <RCCEx_GetMDFCLKFreq+0x108>
34189c08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c0c:	d82f      	bhi.n	34189c6e <RCCEx_GetMDFCLKFreq+0x11a>
34189c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c12:	d01a      	beq.n	34189c4a <RCCEx_GetMDFCLKFreq+0xf6>
34189c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c18:	d829      	bhi.n	34189c6e <RCCEx_GetMDFCLKFreq+0x11a>
34189c1a:	2b00      	cmp	r3, #0
34189c1c:	d003      	beq.n	34189c26 <RCCEx_GetMDFCLKFreq+0xd2>
34189c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189c22:	d009      	beq.n	34189c38 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34189c24:	e023      	b.n	34189c6e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189c26:	f7fe f8b7 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189c2a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c2c:	68fa      	ldr	r2, [r7, #12]
34189c2e:	68bb      	ldr	r3, [r7, #8]
34189c30:	fbb2 f3f3 	udiv	r3, r2, r3
34189c34:	60fb      	str	r3, [r7, #12]
            break;
34189c36:	e01b      	b.n	34189c70 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189c38:	f7fe f8f4 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189c3c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c3e:	68fa      	ldr	r2, [r7, #12]
34189c40:	68bb      	ldr	r3, [r7, #8]
34189c42:	fbb2 f3f3 	udiv	r3, r2, r3
34189c46:	60fb      	str	r3, [r7, #12]
            break;
34189c48:	e012      	b.n	34189c70 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189c4a:	f7fe f931 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189c4e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c50:	68fa      	ldr	r2, [r7, #12]
34189c52:	68bb      	ldr	r3, [r7, #8]
34189c54:	fbb2 f3f3 	udiv	r3, r2, r3
34189c58:	60fb      	str	r3, [r7, #12]
            break;
34189c5a:	e009      	b.n	34189c70 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189c5c:	f7fe f96e 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189c60:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c62:	68fa      	ldr	r2, [r7, #12]
34189c64:	68bb      	ldr	r3, [r7, #8]
34189c66:	fbb2 f3f3 	udiv	r3, r2, r3
34189c6a:	60fb      	str	r3, [r7, #12]
            break;
34189c6c:	e000      	b.n	34189c70 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34189c6e:	bf00      	nop
      break;
34189c70:	e067      	b.n	34189d42 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34189c72:	f7fa fdfd 	bl	34184870 <LL_RCC_IC8_IsEnabled>
34189c76:	4603      	mov	r3, r0
34189c78:	2b00      	cmp	r3, #0
34189c7a:	d064      	beq.n	34189d46 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34189c7c:	f7fa fe1a 	bl	341848b4 <LL_RCC_IC8_GetDivider>
34189c80:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34189c82:	f7fa fe09 	bl	34184898 <LL_RCC_IC8_GetSource>
34189c86:	4603      	mov	r3, r0
34189c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c8c:	d029      	beq.n	34189ce2 <RCCEx_GetMDFCLKFreq+0x18e>
34189c8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c92:	d82f      	bhi.n	34189cf4 <RCCEx_GetMDFCLKFreq+0x1a0>
34189c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c98:	d01a      	beq.n	34189cd0 <RCCEx_GetMDFCLKFreq+0x17c>
34189c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c9e:	d829      	bhi.n	34189cf4 <RCCEx_GetMDFCLKFreq+0x1a0>
34189ca0:	2b00      	cmp	r3, #0
34189ca2:	d003      	beq.n	34189cac <RCCEx_GetMDFCLKFreq+0x158>
34189ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189ca8:	d009      	beq.n	34189cbe <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34189caa:	e023      	b.n	34189cf4 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189cac:	f7fe f874 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189cb0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189cb2:	68fa      	ldr	r2, [r7, #12]
34189cb4:	68bb      	ldr	r3, [r7, #8]
34189cb6:	fbb2 f3f3 	udiv	r3, r2, r3
34189cba:	60fb      	str	r3, [r7, #12]
            break;
34189cbc:	e01b      	b.n	34189cf6 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189cbe:	f7fe f8b1 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189cc2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189cc4:	68fa      	ldr	r2, [r7, #12]
34189cc6:	68bb      	ldr	r3, [r7, #8]
34189cc8:	fbb2 f3f3 	udiv	r3, r2, r3
34189ccc:	60fb      	str	r3, [r7, #12]
            break;
34189cce:	e012      	b.n	34189cf6 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189cd0:	f7fe f8ee 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189cd4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189cd6:	68fa      	ldr	r2, [r7, #12]
34189cd8:	68bb      	ldr	r3, [r7, #8]
34189cda:	fbb2 f3f3 	udiv	r3, r2, r3
34189cde:	60fb      	str	r3, [r7, #12]
            break;
34189ce0:	e009      	b.n	34189cf6 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189ce2:	f7fe f92b 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189ce6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189ce8:	68fa      	ldr	r2, [r7, #12]
34189cea:	68bb      	ldr	r3, [r7, #8]
34189cec:	fbb2 f3f3 	udiv	r3, r2, r3
34189cf0:	60fb      	str	r3, [r7, #12]
            break;
34189cf2:	e000      	b.n	34189cf6 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34189cf4:	bf00      	nop
      break;
34189cf6:	e026      	b.n	34189d46 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34189cf8:	f7f9 fdd6 	bl	341838a8 <LL_RCC_HSI_IsReady>
34189cfc:	4603      	mov	r3, r0
34189cfe:	2b00      	cmp	r3, #0
34189d00:	d023      	beq.n	34189d4a <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189d02:	f7f9 fde3 	bl	341838cc <LL_RCC_HSI_GetDivider>
34189d06:	4603      	mov	r3, r0
34189d08:	09db      	lsrs	r3, r3, #7
34189d0a:	4a14      	ldr	r2, [pc, #80]	@ (34189d5c <RCCEx_GetMDFCLKFreq+0x208>)
34189d0c:	fa22 f303 	lsr.w	r3, r2, r3
34189d10:	60fb      	str	r3, [r7, #12]
      break;
34189d12:	e01a      	b.n	34189d4a <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34189d14:	f7f9 fde8 	bl	341838e8 <LL_RCC_MSI_IsReady>
34189d18:	4603      	mov	r3, r0
34189d1a:	2b00      	cmp	r3, #0
34189d1c:	d017      	beq.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34189d1e:	4b10      	ldr	r3, [pc, #64]	@ (34189d60 <RCCEx_GetMDFCLKFreq+0x20c>)
34189d20:	60fb      	str	r3, [r7, #12]
      break;
34189d22:	e014      	b.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34189d24:	4b0f      	ldr	r3, [pc, #60]	@ (34189d64 <RCCEx_GetMDFCLKFreq+0x210>)
34189d26:	60fb      	str	r3, [r7, #12]
      break;
34189d28:	e012      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34189d2a:	f7f9 f9bd 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34189d2e:	4604      	mov	r4, r0
34189d30:	f7fa fa22 	bl	34184178 <LL_RCC_GetTIMPrescaler>
34189d34:	4603      	mov	r3, r0
34189d36:	fa24 f303 	lsr.w	r3, r4, r3
34189d3a:	60fb      	str	r3, [r7, #12]
      break;
34189d3c:	e008      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d3e:	bf00      	nop
34189d40:	e006      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d42:	bf00      	nop
34189d44:	e004      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d46:	bf00      	nop
34189d48:	e002      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d4a:	bf00      	nop
34189d4c:	e000      	b.n	34189d50 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d4e:	bf00      	nop
  }

  return adf_frequency;
34189d50:	68fb      	ldr	r3, [r7, #12]
}
34189d52:	4618      	mov	r0, r3
34189d54:	3714      	adds	r7, #20
34189d56:	46bd      	mov	sp, r7
34189d58:	bd90      	pop	{r4, r7, pc}
34189d5a:	bf00      	nop
34189d5c:	03d09000 	.word	0x03d09000
34189d60:	003d0900 	.word	0x003d0900
34189d64:	00bb8000 	.word	0x00bb8000

34189d68 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34189d68:	b580      	push	{r7, lr}
34189d6a:	b084      	sub	sp, #16
34189d6c:	af00      	add	r7, sp, #0
34189d6e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34189d70:	2300      	movs	r3, #0
34189d72:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34189d74:	6878      	ldr	r0, [r7, #4]
34189d76:	f7fa f937 	bl	34183fe8 <LL_RCC_GetPSSIClockSource>
34189d7a:	4603      	mov	r3, r0
34189d7c:	2b30      	cmp	r3, #48	@ 0x30
34189d7e:	d05a      	beq.n	34189e36 <RCCEx_GetPSSICLKFreq+0xce>
34189d80:	2b30      	cmp	r3, #48	@ 0x30
34189d82:	d866      	bhi.n	34189e52 <RCCEx_GetPSSICLKFreq+0xea>
34189d84:	2b20      	cmp	r3, #32
34189d86:	d013      	beq.n	34189db0 <RCCEx_GetPSSICLKFreq+0x48>
34189d88:	2b20      	cmp	r3, #32
34189d8a:	d862      	bhi.n	34189e52 <RCCEx_GetPSSICLKFreq+0xea>
34189d8c:	2b00      	cmp	r3, #0
34189d8e:	d002      	beq.n	34189d96 <RCCEx_GetPSSICLKFreq+0x2e>
34189d90:	2b10      	cmp	r3, #16
34189d92:	d008      	beq.n	34189da6 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189d94:	e05d      	b.n	34189e52 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189d96:	f7f9 f987 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
34189d9a:	4603      	mov	r3, r0
34189d9c:	4618      	mov	r0, r3
34189d9e:	f7fe f913 	bl	34187fc8 <RCCEx_GetHCLKFreq>
34189da2:	60f8      	str	r0, [r7, #12]
      break;
34189da4:	e05a      	b.n	34189e5c <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189da6:	2007      	movs	r0, #7
34189da8:	f7fe fbfa 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
34189dac:	60f8      	str	r0, [r7, #12]
      break;
34189dae:	e055      	b.n	34189e5c <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
34189db0:	f7fb f81e 	bl	34184df0 <LL_RCC_IC20_IsEnabled>
34189db4:	4603      	mov	r3, r0
34189db6:	2b00      	cmp	r3, #0
34189db8:	d04d      	beq.n	34189e56 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34189dba:	f7fb f83b 	bl	34184e34 <LL_RCC_IC20_GetDivider>
34189dbe:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
34189dc0:	f7fb f82a 	bl	34184e18 <LL_RCC_IC20_GetSource>
34189dc4:	4603      	mov	r3, r0
34189dc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189dca:	d029      	beq.n	34189e20 <RCCEx_GetPSSICLKFreq+0xb8>
34189dcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189dd0:	d82f      	bhi.n	34189e32 <RCCEx_GetPSSICLKFreq+0xca>
34189dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189dd6:	d01a      	beq.n	34189e0e <RCCEx_GetPSSICLKFreq+0xa6>
34189dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ddc:	d829      	bhi.n	34189e32 <RCCEx_GetPSSICLKFreq+0xca>
34189dde:	2b00      	cmp	r3, #0
34189de0:	d003      	beq.n	34189dea <RCCEx_GetPSSICLKFreq+0x82>
34189de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189de6:	d009      	beq.n	34189dfc <RCCEx_GetPSSICLKFreq+0x94>
            break;
34189de8:	e023      	b.n	34189e32 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189dea:	f7fd ffd5 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
34189dee:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189df0:	68fa      	ldr	r2, [r7, #12]
34189df2:	68bb      	ldr	r3, [r7, #8]
34189df4:	fbb2 f3f3 	udiv	r3, r2, r3
34189df8:	60fb      	str	r3, [r7, #12]
            break;
34189dfa:	e01b      	b.n	34189e34 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189dfc:	f7fe f812 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
34189e00:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e02:	68fa      	ldr	r2, [r7, #12]
34189e04:	68bb      	ldr	r3, [r7, #8]
34189e06:	fbb2 f3f3 	udiv	r3, r2, r3
34189e0a:	60fb      	str	r3, [r7, #12]
            break;
34189e0c:	e012      	b.n	34189e34 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189e0e:	f7fe f84f 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
34189e12:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e14:	68fa      	ldr	r2, [r7, #12]
34189e16:	68bb      	ldr	r3, [r7, #8]
34189e18:	fbb2 f3f3 	udiv	r3, r2, r3
34189e1c:	60fb      	str	r3, [r7, #12]
            break;
34189e1e:	e009      	b.n	34189e34 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189e20:	f7fe f88c 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
34189e24:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e26:	68fa      	ldr	r2, [r7, #12]
34189e28:	68bb      	ldr	r3, [r7, #8]
34189e2a:	fbb2 f3f3 	udiv	r3, r2, r3
34189e2e:	60fb      	str	r3, [r7, #12]
            break;
34189e30:	e000      	b.n	34189e34 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34189e32:	bf00      	nop
      break;
34189e34:	e00f      	b.n	34189e56 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34189e36:	f7f9 fd37 	bl	341838a8 <LL_RCC_HSI_IsReady>
34189e3a:	4603      	mov	r3, r0
34189e3c:	2b00      	cmp	r3, #0
34189e3e:	d00c      	beq.n	34189e5a <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189e40:	f7f9 fd44 	bl	341838cc <LL_RCC_HSI_GetDivider>
34189e44:	4603      	mov	r3, r0
34189e46:	09db      	lsrs	r3, r3, #7
34189e48:	4a07      	ldr	r2, [pc, #28]	@ (34189e68 <RCCEx_GetPSSICLKFreq+0x100>)
34189e4a:	fa22 f303 	lsr.w	r3, r2, r3
34189e4e:	60fb      	str	r3, [r7, #12]
      break;
34189e50:	e003      	b.n	34189e5a <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34189e52:	bf00      	nop
34189e54:	e002      	b.n	34189e5c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34189e56:	bf00      	nop
34189e58:	e000      	b.n	34189e5c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34189e5a:	bf00      	nop
  }

  return pssi_frequency;
34189e5c:	68fb      	ldr	r3, [r7, #12]
}
34189e5e:	4618      	mov	r0, r3
34189e60:	3710      	adds	r7, #16
34189e62:	46bd      	mov	sp, r7
34189e64:	bd80      	pop	{r7, pc}
34189e66:	bf00      	nop
34189e68:	03d09000 	.word	0x03d09000

34189e6c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34189e6c:	b580      	push	{r7, lr}
34189e6e:	b082      	sub	sp, #8
34189e70:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189e72:	2300      	movs	r3, #0
34189e74:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34189e76:	f7fa f945 	bl	34184104 <LL_RCC_GetRTCClockSource>
34189e7a:	4603      	mov	r3, r0
34189e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189e80:	d020      	beq.n	34189ec4 <RCCEx_GetRTCCLKFreq+0x58>
34189e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189e86:	d830      	bhi.n	34189eea <RCCEx_GetRTCCLKFreq+0x7e>
34189e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189e8c:	d011      	beq.n	34189eb2 <RCCEx_GetRTCCLKFreq+0x46>
34189e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189e92:	d82a      	bhi.n	34189eea <RCCEx_GetRTCCLKFreq+0x7e>
34189e94:	2b00      	cmp	r3, #0
34189e96:	d02a      	beq.n	34189eee <RCCEx_GetRTCCLKFreq+0x82>
34189e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34189e9c:	d000      	beq.n	34189ea0 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189e9e:	e024      	b.n	34189eea <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34189ea0:	f7f9 fd42 	bl	34183928 <LL_RCC_LSE_IsReady>
34189ea4:	4603      	mov	r3, r0
34189ea6:	2b00      	cmp	r3, #0
34189ea8:	d023      	beq.n	34189ef2 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34189eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34189eae:	607b      	str	r3, [r7, #4]
      break;
34189eb0:	e01f      	b.n	34189ef2 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34189eb2:	f7f9 fd4b 	bl	3418394c <LL_RCC_LSI_IsReady>
34189eb6:	4603      	mov	r3, r0
34189eb8:	2b00      	cmp	r3, #0
34189eba:	d01c      	beq.n	34189ef6 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34189ebc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34189ec0:	607b      	str	r3, [r7, #4]
      break;
34189ec2:	e018      	b.n	34189ef6 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34189ec4:	f7f9 fcde 	bl	34183884 <LL_RCC_HSE_IsReady>
34189ec8:	4603      	mov	r3, r0
34189eca:	2b00      	cmp	r3, #0
34189ecc:	d015      	beq.n	34189efa <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34189ece:	4b0e      	ldr	r3, [pc, #56]	@ (34189f08 <RCCEx_GetRTCCLKFreq+0x9c>)
34189ed0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189ed4:	0b1b      	lsrs	r3, r3, #12
34189ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34189eda:	3301      	adds	r3, #1
34189edc:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34189ede:	4a0b      	ldr	r2, [pc, #44]	@ (34189f0c <RCCEx_GetRTCCLKFreq+0xa0>)
34189ee0:	683b      	ldr	r3, [r7, #0]
34189ee2:	fbb2 f3f3 	udiv	r3, r2, r3
34189ee6:	607b      	str	r3, [r7, #4]
      break;
34189ee8:	e007      	b.n	34189efa <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34189eea:	bf00      	nop
34189eec:	e006      	b.n	34189efc <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189eee:	bf00      	nop
34189ef0:	e004      	b.n	34189efc <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189ef2:	bf00      	nop
34189ef4:	e002      	b.n	34189efc <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189ef6:	bf00      	nop
34189ef8:	e000      	b.n	34189efc <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189efa:	bf00      	nop
  }

  return rtc_frequency;
34189efc:	687b      	ldr	r3, [r7, #4]
}
34189efe:	4618      	mov	r0, r3
34189f00:	3708      	adds	r7, #8
34189f02:	46bd      	mov	sp, r7
34189f04:	bd80      	pop	{r7, pc}
34189f06:	bf00      	nop
34189f08:	56028000 	.word	0x56028000
34189f0c:	02dc6c00 	.word	0x02dc6c00

34189f10 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34189f10:	b580      	push	{r7, lr}
34189f12:	b084      	sub	sp, #16
34189f14:	af00      	add	r7, sp, #0
34189f16:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34189f18:	2300      	movs	r3, #0
34189f1a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34189f1c:	6878      	ldr	r0, [r7, #4]
34189f1e:	f7fa f875 	bl	3418400c <LL_RCC_GetSAIClockSource>
34189f22:	4603      	mov	r3, r0
34189f24:	4a9a      	ldr	r2, [pc, #616]	@ (3418a190 <RCCEx_GetSAICLKFreq+0x280>)
34189f26:	4293      	cmp	r3, r2
34189f28:	f000 811f 	beq.w	3418a16a <RCCEx_GetSAICLKFreq+0x25a>
34189f2c:	4a98      	ldr	r2, [pc, #608]	@ (3418a190 <RCCEx_GetSAICLKFreq+0x280>)
34189f2e:	4293      	cmp	r3, r2
34189f30:	f200 8120 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f34:	4a97      	ldr	r2, [pc, #604]	@ (3418a194 <RCCEx_GetSAICLKFreq+0x284>)
34189f36:	4293      	cmp	r3, r2
34189f38:	f000 8117 	beq.w	3418a16a <RCCEx_GetSAICLKFreq+0x25a>
34189f3c:	4a95      	ldr	r2, [pc, #596]	@ (3418a194 <RCCEx_GetSAICLKFreq+0x284>)
34189f3e:	4293      	cmp	r3, r2
34189f40:	f200 8118 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f44:	4a94      	ldr	r2, [pc, #592]	@ (3418a198 <RCCEx_GetSAICLKFreq+0x288>)
34189f46:	4293      	cmp	r3, r2
34189f48:	f000 810c 	beq.w	3418a164 <RCCEx_GetSAICLKFreq+0x254>
34189f4c:	4a92      	ldr	r2, [pc, #584]	@ (3418a198 <RCCEx_GetSAICLKFreq+0x288>)
34189f4e:	4293      	cmp	r3, r2
34189f50:	f200 8110 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f54:	4a91      	ldr	r2, [pc, #580]	@ (3418a19c <RCCEx_GetSAICLKFreq+0x28c>)
34189f56:	4293      	cmp	r3, r2
34189f58:	f000 8104 	beq.w	3418a164 <RCCEx_GetSAICLKFreq+0x254>
34189f5c:	4a8f      	ldr	r2, [pc, #572]	@ (3418a19c <RCCEx_GetSAICLKFreq+0x28c>)
34189f5e:	4293      	cmp	r3, r2
34189f60:	f200 8108 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f64:	4a8e      	ldr	r2, [pc, #568]	@ (3418a1a0 <RCCEx_GetSAICLKFreq+0x290>)
34189f66:	4293      	cmp	r3, r2
34189f68:	f000 80e6 	beq.w	3418a138 <RCCEx_GetSAICLKFreq+0x228>
34189f6c:	4a8c      	ldr	r2, [pc, #560]	@ (3418a1a0 <RCCEx_GetSAICLKFreq+0x290>)
34189f6e:	4293      	cmp	r3, r2
34189f70:	f200 8100 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f74:	4a8b      	ldr	r2, [pc, #556]	@ (3418a1a4 <RCCEx_GetSAICLKFreq+0x294>)
34189f76:	4293      	cmp	r3, r2
34189f78:	f000 80de 	beq.w	3418a138 <RCCEx_GetSAICLKFreq+0x228>
34189f7c:	4a89      	ldr	r2, [pc, #548]	@ (3418a1a4 <RCCEx_GetSAICLKFreq+0x294>)
34189f7e:	4293      	cmp	r3, r2
34189f80:	f200 80f8 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f84:	4a88      	ldr	r2, [pc, #544]	@ (3418a1a8 <RCCEx_GetSAICLKFreq+0x298>)
34189f86:	4293      	cmp	r3, r2
34189f88:	f000 80e4 	beq.w	3418a154 <RCCEx_GetSAICLKFreq+0x244>
34189f8c:	4a86      	ldr	r2, [pc, #536]	@ (3418a1a8 <RCCEx_GetSAICLKFreq+0x298>)
34189f8e:	4293      	cmp	r3, r2
34189f90:	f200 80f0 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189f94:	4a85      	ldr	r2, [pc, #532]	@ (3418a1ac <RCCEx_GetSAICLKFreq+0x29c>)
34189f96:	4293      	cmp	r3, r2
34189f98:	f000 80dc 	beq.w	3418a154 <RCCEx_GetSAICLKFreq+0x244>
34189f9c:	4a83      	ldr	r2, [pc, #524]	@ (3418a1ac <RCCEx_GetSAICLKFreq+0x29c>)
34189f9e:	4293      	cmp	r3, r2
34189fa0:	f200 80e8 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fa4:	4a82      	ldr	r2, [pc, #520]	@ (3418a1b0 <RCCEx_GetSAICLKFreq+0x2a0>)
34189fa6:	4293      	cmp	r3, r2
34189fa8:	f000 8083 	beq.w	3418a0b2 <RCCEx_GetSAICLKFreq+0x1a2>
34189fac:	4a80      	ldr	r2, [pc, #512]	@ (3418a1b0 <RCCEx_GetSAICLKFreq+0x2a0>)
34189fae:	4293      	cmp	r3, r2
34189fb0:	f200 80e0 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fb4:	4a7f      	ldr	r2, [pc, #508]	@ (3418a1b4 <RCCEx_GetSAICLKFreq+0x2a4>)
34189fb6:	4293      	cmp	r3, r2
34189fb8:	d07b      	beq.n	3418a0b2 <RCCEx_GetSAICLKFreq+0x1a2>
34189fba:	4a7e      	ldr	r2, [pc, #504]	@ (3418a1b4 <RCCEx_GetSAICLKFreq+0x2a4>)
34189fbc:	4293      	cmp	r3, r2
34189fbe:	f200 80d9 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fc2:	4a7d      	ldr	r2, [pc, #500]	@ (3418a1b8 <RCCEx_GetSAICLKFreq+0x2a8>)
34189fc4:	4293      	cmp	r3, r2
34189fc6:	d030      	beq.n	3418a02a <RCCEx_GetSAICLKFreq+0x11a>
34189fc8:	4a7b      	ldr	r2, [pc, #492]	@ (3418a1b8 <RCCEx_GetSAICLKFreq+0x2a8>)
34189fca:	4293      	cmp	r3, r2
34189fcc:	f200 80d2 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fd0:	4a7a      	ldr	r2, [pc, #488]	@ (3418a1bc <RCCEx_GetSAICLKFreq+0x2ac>)
34189fd2:	4293      	cmp	r3, r2
34189fd4:	d029      	beq.n	3418a02a <RCCEx_GetSAICLKFreq+0x11a>
34189fd6:	4a79      	ldr	r2, [pc, #484]	@ (3418a1bc <RCCEx_GetSAICLKFreq+0x2ac>)
34189fd8:	4293      	cmp	r3, r2
34189fda:	f200 80cb 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fde:	4a78      	ldr	r2, [pc, #480]	@ (3418a1c0 <RCCEx_GetSAICLKFreq+0x2b0>)
34189fe0:	4293      	cmp	r3, r2
34189fe2:	d01d      	beq.n	3418a020 <RCCEx_GetSAICLKFreq+0x110>
34189fe4:	4a76      	ldr	r2, [pc, #472]	@ (3418a1c0 <RCCEx_GetSAICLKFreq+0x2b0>)
34189fe6:	4293      	cmp	r3, r2
34189fe8:	f200 80c4 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189fec:	4a75      	ldr	r2, [pc, #468]	@ (3418a1c4 <RCCEx_GetSAICLKFreq+0x2b4>)
34189fee:	4293      	cmp	r3, r2
34189ff0:	d016      	beq.n	3418a020 <RCCEx_GetSAICLKFreq+0x110>
34189ff2:	4a74      	ldr	r2, [pc, #464]	@ (3418a1c4 <RCCEx_GetSAICLKFreq+0x2b4>)
34189ff4:	4293      	cmp	r3, r2
34189ff6:	f200 80bd 	bhi.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
34189ffa:	4a73      	ldr	r2, [pc, #460]	@ (3418a1c8 <RCCEx_GetSAICLKFreq+0x2b8>)
34189ffc:	4293      	cmp	r3, r2
34189ffe:	d003      	beq.n	3418a008 <RCCEx_GetSAICLKFreq+0xf8>
3418a000:	4a72      	ldr	r2, [pc, #456]	@ (3418a1cc <RCCEx_GetSAICLKFreq+0x2bc>)
3418a002:	4293      	cmp	r3, r2
3418a004:	f040 80b6 	bne.w	3418a174 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a008:	f7f9 f84e 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a00c:	4603      	mov	r3, r0
3418a00e:	4618      	mov	r0, r3
3418a010:	f7fd ffda 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a014:	4603      	mov	r3, r0
3418a016:	4618      	mov	r0, r3
3418a018:	f7fd fff7 	bl	3418800a <RCCEx_GetPCLK2Freq>
3418a01c:	60f8      	str	r0, [r7, #12]
      break;
3418a01e:	e0b2      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a020:	2007      	movs	r0, #7
3418a022:	f7fe fabd 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418a026:	60f8      	str	r0, [r7, #12]
      break;
3418a028:	e0ad      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418a02a:	f7fa fbe1 	bl	341847f0 <LL_RCC_IC7_IsEnabled>
3418a02e:	4603      	mov	r3, r0
3418a030:	2b00      	cmp	r3, #0
3418a032:	f000 80a1 	beq.w	3418a178 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418a036:	f7fa fbfd 	bl	34184834 <LL_RCC_IC7_GetDivider>
3418a03a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418a03c:	f7fa fbec 	bl	34184818 <LL_RCC_IC7_GetSource>
3418a040:	4603      	mov	r3, r0
3418a042:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a046:	d029      	beq.n	3418a09c <RCCEx_GetSAICLKFreq+0x18c>
3418a048:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a04c:	d82f      	bhi.n	3418a0ae <RCCEx_GetSAICLKFreq+0x19e>
3418a04e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a052:	d01a      	beq.n	3418a08a <RCCEx_GetSAICLKFreq+0x17a>
3418a054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a058:	d829      	bhi.n	3418a0ae <RCCEx_GetSAICLKFreq+0x19e>
3418a05a:	2b00      	cmp	r3, #0
3418a05c:	d003      	beq.n	3418a066 <RCCEx_GetSAICLKFreq+0x156>
3418a05e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a062:	d009      	beq.n	3418a078 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a064:	e023      	b.n	3418a0ae <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a066:	f7fd fe97 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a06a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a06c:	68fa      	ldr	r2, [r7, #12]
3418a06e:	68bb      	ldr	r3, [r7, #8]
3418a070:	fbb2 f3f3 	udiv	r3, r2, r3
3418a074:	60fb      	str	r3, [r7, #12]
            break;
3418a076:	e01b      	b.n	3418a0b0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a078:	f7fd fed4 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a07c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a07e:	68fa      	ldr	r2, [r7, #12]
3418a080:	68bb      	ldr	r3, [r7, #8]
3418a082:	fbb2 f3f3 	udiv	r3, r2, r3
3418a086:	60fb      	str	r3, [r7, #12]
            break;
3418a088:	e012      	b.n	3418a0b0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a08a:	f7fd ff11 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a08e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a090:	68fa      	ldr	r2, [r7, #12]
3418a092:	68bb      	ldr	r3, [r7, #8]
3418a094:	fbb2 f3f3 	udiv	r3, r2, r3
3418a098:	60fb      	str	r3, [r7, #12]
            break;
3418a09a:	e009      	b.n	3418a0b0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a09c:	f7fd ff4e 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a0a0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0a2:	68fa      	ldr	r2, [r7, #12]
3418a0a4:	68bb      	ldr	r3, [r7, #8]
3418a0a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0aa:	60fb      	str	r3, [r7, #12]
            break;
3418a0ac:	e000      	b.n	3418a0b0 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418a0ae:	bf00      	nop
        }
      }
      break;
3418a0b0:	e062      	b.n	3418a178 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a0b2:	f7fa fbdd 	bl	34184870 <LL_RCC_IC8_IsEnabled>
3418a0b6:	4603      	mov	r3, r0
3418a0b8:	2b00      	cmp	r3, #0
3418a0ba:	d05f      	beq.n	3418a17c <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a0bc:	f7fa fbfa 	bl	341848b4 <LL_RCC_IC8_GetDivider>
3418a0c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a0c2:	f7fa fbe9 	bl	34184898 <LL_RCC_IC8_GetSource>
3418a0c6:	4603      	mov	r3, r0
3418a0c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a0cc:	d029      	beq.n	3418a122 <RCCEx_GetSAICLKFreq+0x212>
3418a0ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a0d2:	d82f      	bhi.n	3418a134 <RCCEx_GetSAICLKFreq+0x224>
3418a0d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0d8:	d01a      	beq.n	3418a110 <RCCEx_GetSAICLKFreq+0x200>
3418a0da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0de:	d829      	bhi.n	3418a134 <RCCEx_GetSAICLKFreq+0x224>
3418a0e0:	2b00      	cmp	r3, #0
3418a0e2:	d003      	beq.n	3418a0ec <RCCEx_GetSAICLKFreq+0x1dc>
3418a0e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a0e8:	d009      	beq.n	3418a0fe <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a0ea:	e023      	b.n	3418a134 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a0ec:	f7fd fe54 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a0f0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0f2:	68fa      	ldr	r2, [r7, #12]
3418a0f4:	68bb      	ldr	r3, [r7, #8]
3418a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0fa:	60fb      	str	r3, [r7, #12]
            break;
3418a0fc:	e01b      	b.n	3418a136 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a0fe:	f7fd fe91 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a102:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a104:	68fa      	ldr	r2, [r7, #12]
3418a106:	68bb      	ldr	r3, [r7, #8]
3418a108:	fbb2 f3f3 	udiv	r3, r2, r3
3418a10c:	60fb      	str	r3, [r7, #12]
            break;
3418a10e:	e012      	b.n	3418a136 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a110:	f7fd fece 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a114:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a116:	68fa      	ldr	r2, [r7, #12]
3418a118:	68bb      	ldr	r3, [r7, #8]
3418a11a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a11e:	60fb      	str	r3, [r7, #12]
            break;
3418a120:	e009      	b.n	3418a136 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a122:	f7fd ff0b 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a126:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a128:	68fa      	ldr	r2, [r7, #12]
3418a12a:	68bb      	ldr	r3, [r7, #8]
3418a12c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a130:	60fb      	str	r3, [r7, #12]
            break;
3418a132:	e000      	b.n	3418a136 <RCCEx_GetSAICLKFreq+0x226>
            break;
3418a134:	bf00      	nop
        }
      }
      break;
3418a136:	e021      	b.n	3418a17c <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a138:	f7f9 fbb6 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418a13c:	4603      	mov	r3, r0
3418a13e:	2b00      	cmp	r3, #0
3418a140:	d01e      	beq.n	3418a180 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a142:	f7f9 fbc3 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418a146:	4603      	mov	r3, r0
3418a148:	09db      	lsrs	r3, r3, #7
3418a14a:	4a21      	ldr	r2, [pc, #132]	@ (3418a1d0 <RCCEx_GetSAICLKFreq+0x2c0>)
3418a14c:	fa22 f303 	lsr.w	r3, r2, r3
3418a150:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a152:	e015      	b.n	3418a180 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a154:	f7f9 fbc8 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418a158:	4603      	mov	r3, r0
3418a15a:	2b00      	cmp	r3, #0
3418a15c:	d012      	beq.n	3418a184 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418a15e:	4b1d      	ldr	r3, [pc, #116]	@ (3418a1d4 <RCCEx_GetSAICLKFreq+0x2c4>)
3418a160:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a162:	e00f      	b.n	3418a184 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418a164:	4b1c      	ldr	r3, [pc, #112]	@ (3418a1d8 <RCCEx_GetSAICLKFreq+0x2c8>)
3418a166:	60fb      	str	r3, [r7, #12]
      break;
3418a168:	e00d      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418a16a:	2007      	movs	r0, #7
3418a16c:	f000 f920 	bl	3418a3b0 <RCCEx_GetSPDIFRXCLKFreq>
3418a170:	60f8      	str	r0, [r7, #12]
      break;
3418a172:	e008      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418a174:	bf00      	nop
3418a176:	e006      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a178:	bf00      	nop
3418a17a:	e004      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a17c:	bf00      	nop
3418a17e:	e002      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a180:	bf00      	nop
3418a182:	e000      	b.n	3418a186 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a184:	bf00      	nop
  }

  return sai_frequency;
3418a186:	68fb      	ldr	r3, [r7, #12]
}
3418a188:	4618      	mov	r0, r3
3418a18a:	3710      	adds	r7, #16
3418a18c:	46bd      	mov	sp, r7
3418a18e:	bd80      	pop	{r7, pc}
3418a190:	07071818 	.word	0x07071818
3418a194:	07071418 	.word	0x07071418
3418a198:	07061818 	.word	0x07061818
3418a19c:	07061418 	.word	0x07061418
3418a1a0:	07051818 	.word	0x07051818
3418a1a4:	07051418 	.word	0x07051418
3418a1a8:	07041818 	.word	0x07041818
3418a1ac:	07041418 	.word	0x07041418
3418a1b0:	07031818 	.word	0x07031818
3418a1b4:	07031418 	.word	0x07031418
3418a1b8:	07021818 	.word	0x07021818
3418a1bc:	07021418 	.word	0x07021418
3418a1c0:	07011818 	.word	0x07011818
3418a1c4:	07011418 	.word	0x07011418
3418a1c8:	07001418 	.word	0x07001418
3418a1cc:	07001818 	.word	0x07001818
3418a1d0:	03d09000 	.word	0x03d09000
3418a1d4:	003d0900 	.word	0x003d0900
3418a1d8:	00bb8000 	.word	0x00bb8000

3418a1dc <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418a1dc:	b580      	push	{r7, lr}
3418a1de:	b084      	sub	sp, #16
3418a1e0:	af00      	add	r7, sp, #0
3418a1e2:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a1e4:	2300      	movs	r3, #0
3418a1e6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418a1e8:	6878      	ldr	r0, [r7, #4]
3418a1ea:	f7f9 ff1b 	bl	34184024 <LL_RCC_GetSDMMCClockSource>
3418a1ee:	4603      	mov	r3, r0
3418a1f0:	4a67      	ldr	r2, [pc, #412]	@ (3418a390 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418a1f2:	4293      	cmp	r3, r2
3418a1f4:	d07e      	beq.n	3418a2f4 <RCCEx_GetSDMMCCLKFreq+0x118>
3418a1f6:	4a66      	ldr	r2, [pc, #408]	@ (3418a390 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418a1f8:	4293      	cmp	r3, r2
3418a1fa:	f200 80be 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a1fe:	4a65      	ldr	r2, [pc, #404]	@ (3418a394 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418a200:	4293      	cmp	r3, r2
3418a202:	d077      	beq.n	3418a2f4 <RCCEx_GetSDMMCCLKFreq+0x118>
3418a204:	4a63      	ldr	r2, [pc, #396]	@ (3418a394 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418a206:	4293      	cmp	r3, r2
3418a208:	f200 80b7 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a20c:	4a62      	ldr	r2, [pc, #392]	@ (3418a398 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418a20e:	4293      	cmp	r3, r2
3418a210:	d02c      	beq.n	3418a26c <RCCEx_GetSDMMCCLKFreq+0x90>
3418a212:	4a61      	ldr	r2, [pc, #388]	@ (3418a398 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418a214:	4293      	cmp	r3, r2
3418a216:	f200 80b0 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a21a:	4a60      	ldr	r2, [pc, #384]	@ (3418a39c <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418a21c:	4293      	cmp	r3, r2
3418a21e:	d025      	beq.n	3418a26c <RCCEx_GetSDMMCCLKFreq+0x90>
3418a220:	4a5e      	ldr	r2, [pc, #376]	@ (3418a39c <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418a222:	4293      	cmp	r3, r2
3418a224:	f200 80a9 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a228:	4a5d      	ldr	r2, [pc, #372]	@ (3418a3a0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418a22a:	4293      	cmp	r3, r2
3418a22c:	d019      	beq.n	3418a262 <RCCEx_GetSDMMCCLKFreq+0x86>
3418a22e:	4a5c      	ldr	r2, [pc, #368]	@ (3418a3a0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418a230:	4293      	cmp	r3, r2
3418a232:	f200 80a2 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a236:	4a5b      	ldr	r2, [pc, #364]	@ (3418a3a4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418a238:	4293      	cmp	r3, r2
3418a23a:	d012      	beq.n	3418a262 <RCCEx_GetSDMMCCLKFreq+0x86>
3418a23c:	4a59      	ldr	r2, [pc, #356]	@ (3418a3a4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418a23e:	4293      	cmp	r3, r2
3418a240:	f200 809b 	bhi.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a244:	4a58      	ldr	r2, [pc, #352]	@ (3418a3a8 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418a246:	4293      	cmp	r3, r2
3418a248:	d003      	beq.n	3418a252 <RCCEx_GetSDMMCCLKFreq+0x76>
3418a24a:	4a58      	ldr	r2, [pc, #352]	@ (3418a3ac <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418a24c:	4293      	cmp	r3, r2
3418a24e:	f040 8094 	bne.w	3418a37a <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418a252:	f7f8 ff29 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a256:	4603      	mov	r3, r0
3418a258:	4618      	mov	r0, r3
3418a25a:	f7fd feb5 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a25e:	60f8      	str	r0, [r7, #12]
      break;
3418a260:	e090      	b.n	3418a384 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a262:	2007      	movs	r0, #7
3418a264:	f7fe f99c 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418a268:	60f8      	str	r0, [r7, #12]
      break;
3418a26a:	e08b      	b.n	3418a384 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418a26c:	f7fa fa40 	bl	341846f0 <LL_RCC_IC4_IsEnabled>
3418a270:	4603      	mov	r3, r0
3418a272:	2b00      	cmp	r3, #0
3418a274:	f000 8083 	beq.w	3418a37e <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418a278:	f7fa fa5c 	bl	34184734 <LL_RCC_IC4_GetDivider>
3418a27c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418a27e:	f7fa fa4b 	bl	34184718 <LL_RCC_IC4_GetSource>
3418a282:	4603      	mov	r3, r0
3418a284:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a288:	d029      	beq.n	3418a2de <RCCEx_GetSDMMCCLKFreq+0x102>
3418a28a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a28e:	d82f      	bhi.n	3418a2f0 <RCCEx_GetSDMMCCLKFreq+0x114>
3418a290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a294:	d01a      	beq.n	3418a2cc <RCCEx_GetSDMMCCLKFreq+0xf0>
3418a296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a29a:	d829      	bhi.n	3418a2f0 <RCCEx_GetSDMMCCLKFreq+0x114>
3418a29c:	2b00      	cmp	r3, #0
3418a29e:	d003      	beq.n	3418a2a8 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418a2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a2a4:	d009      	beq.n	3418a2ba <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a2a6:	e023      	b.n	3418a2f0 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a2a8:	f7fd fd76 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a2ac:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a2ae:	68fa      	ldr	r2, [r7, #12]
3418a2b0:	68bb      	ldr	r3, [r7, #8]
3418a2b2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a2b6:	60fb      	str	r3, [r7, #12]
            break;
3418a2b8:	e01b      	b.n	3418a2f2 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a2ba:	f7fd fdb3 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a2be:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a2c0:	68fa      	ldr	r2, [r7, #12]
3418a2c2:	68bb      	ldr	r3, [r7, #8]
3418a2c4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a2c8:	60fb      	str	r3, [r7, #12]
            break;
3418a2ca:	e012      	b.n	3418a2f2 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a2cc:	f7fd fdf0 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a2d0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a2d2:	68fa      	ldr	r2, [r7, #12]
3418a2d4:	68bb      	ldr	r3, [r7, #8]
3418a2d6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a2da:	60fb      	str	r3, [r7, #12]
            break;
3418a2dc:	e009      	b.n	3418a2f2 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a2de:	f7fd fe2d 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a2e2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a2e4:	68fa      	ldr	r2, [r7, #12]
3418a2e6:	68bb      	ldr	r3, [r7, #8]
3418a2e8:	fbb2 f3f3 	udiv	r3, r2, r3
3418a2ec:	60fb      	str	r3, [r7, #12]
            break;
3418a2ee:	e000      	b.n	3418a2f2 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418a2f0:	bf00      	nop
        }
      }
      break;
3418a2f2:	e044      	b.n	3418a37e <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418a2f4:	f7fa fa3c 	bl	34184770 <LL_RCC_IC5_IsEnabled>
3418a2f8:	4603      	mov	r3, r0
3418a2fa:	2b00      	cmp	r3, #0
3418a2fc:	d041      	beq.n	3418a382 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418a2fe:	f7fa fa59 	bl	341847b4 <LL_RCC_IC5_GetDivider>
3418a302:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418a304:	f7fa fa48 	bl	34184798 <LL_RCC_IC5_GetSource>
3418a308:	4603      	mov	r3, r0
3418a30a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a30e:	d029      	beq.n	3418a364 <RCCEx_GetSDMMCCLKFreq+0x188>
3418a310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a314:	d82f      	bhi.n	3418a376 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418a316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a31a:	d01a      	beq.n	3418a352 <RCCEx_GetSDMMCCLKFreq+0x176>
3418a31c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a320:	d829      	bhi.n	3418a376 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418a322:	2b00      	cmp	r3, #0
3418a324:	d003      	beq.n	3418a32e <RCCEx_GetSDMMCCLKFreq+0x152>
3418a326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a32a:	d009      	beq.n	3418a340 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a32c:	e023      	b.n	3418a376 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a32e:	f7fd fd33 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a332:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a334:	68fa      	ldr	r2, [r7, #12]
3418a336:	68bb      	ldr	r3, [r7, #8]
3418a338:	fbb2 f3f3 	udiv	r3, r2, r3
3418a33c:	60fb      	str	r3, [r7, #12]
            break;
3418a33e:	e01b      	b.n	3418a378 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a340:	f7fd fd70 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a344:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a346:	68fa      	ldr	r2, [r7, #12]
3418a348:	68bb      	ldr	r3, [r7, #8]
3418a34a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a34e:	60fb      	str	r3, [r7, #12]
            break;
3418a350:	e012      	b.n	3418a378 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a352:	f7fd fdad 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a356:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a358:	68fa      	ldr	r2, [r7, #12]
3418a35a:	68bb      	ldr	r3, [r7, #8]
3418a35c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a360:	60fb      	str	r3, [r7, #12]
            break;
3418a362:	e009      	b.n	3418a378 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a364:	f7fd fdea 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a368:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a36a:	68fa      	ldr	r2, [r7, #12]
3418a36c:	68bb      	ldr	r3, [r7, #8]
3418a36e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a372:	60fb      	str	r3, [r7, #12]
            break;
3418a374:	e000      	b.n	3418a378 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418a376:	bf00      	nop
        }
      }
      break;
3418a378:	e003      	b.n	3418a382 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418a37a:	bf00      	nop
3418a37c:	e002      	b.n	3418a384 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418a37e:	bf00      	nop
3418a380:	e000      	b.n	3418a384 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418a382:	bf00      	nop
  }

  return sdmmc_frequency;
3418a384:	68fb      	ldr	r3, [r7, #12]
}
3418a386:	4618      	mov	r0, r3
3418a388:	3710      	adds	r7, #16
3418a38a:	46bd      	mov	sp, r7
3418a38c:	bd80      	pop	{r7, pc}
3418a38e:	bf00      	nop
3418a390:	0303041c 	.word	0x0303041c
3418a394:	0303001c 	.word	0x0303001c
3418a398:	0302041c 	.word	0x0302041c
3418a39c:	0302001c 	.word	0x0302001c
3418a3a0:	0301041c 	.word	0x0301041c
3418a3a4:	0301001c 	.word	0x0301001c
3418a3a8:	0300001c 	.word	0x0300001c
3418a3ac:	0300041c 	.word	0x0300041c

3418a3b0 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418a3b0:	b580      	push	{r7, lr}
3418a3b2:	b084      	sub	sp, #16
3418a3b4:	af00      	add	r7, sp, #0
3418a3b6:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a3b8:	2300      	movs	r3, #0
3418a3ba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418a3bc:	6878      	ldr	r0, [r7, #4]
3418a3be:	f7f9 fe3d 	bl	3418403c <LL_RCC_GetSPDIFRXClockSource>
3418a3c2:	4603      	mov	r3, r0
3418a3c4:	2b06      	cmp	r3, #6
3418a3c6:	f200 80c2 	bhi.w	3418a54e <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418a3ca:	a201      	add	r2, pc, #4	@ (adr r2, 3418a3d0 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418a3d0:	3418a3ed 	.word	0x3418a3ed
3418a3d4:	3418a405 	.word	0x3418a405
3418a3d8:	3418a40f 	.word	0x3418a40f
3418a3dc:	3418a497 	.word	0x3418a497
3418a3e0:	3418a539 	.word	0x3418a539
3418a3e4:	3418a51d 	.word	0x3418a51d
3418a3e8:	3418a549 	.word	0x3418a549
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a3ec:	f7f8 fe5c 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a3f0:	4603      	mov	r3, r0
3418a3f2:	4618      	mov	r0, r3
3418a3f4:	f7fd fde8 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a3f8:	4603      	mov	r3, r0
3418a3fa:	4618      	mov	r0, r3
3418a3fc:	f7fd fdf5 	bl	34187fea <RCCEx_GetPCLK1Freq>
3418a400:	60f8      	str	r0, [r7, #12]
      break;
3418a402:	e0ad      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a404:	2007      	movs	r0, #7
3418a406:	f7fe f8cb 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418a40a:	60f8      	str	r0, [r7, #12]
      break;
3418a40c:	e0a8      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418a40e:	f7fa f9ef 	bl	341847f0 <LL_RCC_IC7_IsEnabled>
3418a412:	4603      	mov	r3, r0
3418a414:	2b00      	cmp	r3, #0
3418a416:	f000 809c 	beq.w	3418a552 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418a41a:	f7fa fa0b 	bl	34184834 <LL_RCC_IC7_GetDivider>
3418a41e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418a420:	f7fa f9fa 	bl	34184818 <LL_RCC_IC7_GetSource>
3418a424:	4603      	mov	r3, r0
3418a426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a42a:	d029      	beq.n	3418a480 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418a42c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a430:	d82f      	bhi.n	3418a492 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418a432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a436:	d01a      	beq.n	3418a46e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418a438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a43c:	d829      	bhi.n	3418a492 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418a43e:	2b00      	cmp	r3, #0
3418a440:	d003      	beq.n	3418a44a <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418a442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a446:	d009      	beq.n	3418a45c <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a448:	e023      	b.n	3418a492 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a44a:	f7fd fca5 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a44e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a450:	68fa      	ldr	r2, [r7, #12]
3418a452:	68bb      	ldr	r3, [r7, #8]
3418a454:	fbb2 f3f3 	udiv	r3, r2, r3
3418a458:	60fb      	str	r3, [r7, #12]
            break;
3418a45a:	e01b      	b.n	3418a494 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a45c:	f7fd fce2 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a460:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a462:	68fa      	ldr	r2, [r7, #12]
3418a464:	68bb      	ldr	r3, [r7, #8]
3418a466:	fbb2 f3f3 	udiv	r3, r2, r3
3418a46a:	60fb      	str	r3, [r7, #12]
            break;
3418a46c:	e012      	b.n	3418a494 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a46e:	f7fd fd1f 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a472:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a474:	68fa      	ldr	r2, [r7, #12]
3418a476:	68bb      	ldr	r3, [r7, #8]
3418a478:	fbb2 f3f3 	udiv	r3, r2, r3
3418a47c:	60fb      	str	r3, [r7, #12]
            break;
3418a47e:	e009      	b.n	3418a494 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a480:	f7fd fd5c 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a484:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a486:	68fa      	ldr	r2, [r7, #12]
3418a488:	68bb      	ldr	r3, [r7, #8]
3418a48a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a48e:	60fb      	str	r3, [r7, #12]
            break;
3418a490:	e000      	b.n	3418a494 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418a492:	bf00      	nop
        }
      }
      break;
3418a494:	e05d      	b.n	3418a552 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a496:	f7fa f9eb 	bl	34184870 <LL_RCC_IC8_IsEnabled>
3418a49a:	4603      	mov	r3, r0
3418a49c:	2b00      	cmp	r3, #0
3418a49e:	d05a      	beq.n	3418a556 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a4a0:	f7fa fa08 	bl	341848b4 <LL_RCC_IC8_GetDivider>
3418a4a4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a4a6:	f7fa f9f7 	bl	34184898 <LL_RCC_IC8_GetSource>
3418a4aa:	4603      	mov	r3, r0
3418a4ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a4b0:	d029      	beq.n	3418a506 <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418a4b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a4b6:	d82f      	bhi.n	3418a518 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418a4b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4bc:	d01a      	beq.n	3418a4f4 <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418a4be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a4c2:	d829      	bhi.n	3418a518 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418a4c4:	2b00      	cmp	r3, #0
3418a4c6:	d003      	beq.n	3418a4d0 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418a4c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a4cc:	d009      	beq.n	3418a4e2 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a4ce:	e023      	b.n	3418a518 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a4d0:	f7fd fc62 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a4d4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4d6:	68fa      	ldr	r2, [r7, #12]
3418a4d8:	68bb      	ldr	r3, [r7, #8]
3418a4da:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4de:	60fb      	str	r3, [r7, #12]
            break;
3418a4e0:	e01b      	b.n	3418a51a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a4e2:	f7fd fc9f 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a4e6:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4e8:	68fa      	ldr	r2, [r7, #12]
3418a4ea:	68bb      	ldr	r3, [r7, #8]
3418a4ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4f0:	60fb      	str	r3, [r7, #12]
            break;
3418a4f2:	e012      	b.n	3418a51a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a4f4:	f7fd fcdc 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a4f8:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4fa:	68fa      	ldr	r2, [r7, #12]
3418a4fc:	68bb      	ldr	r3, [r7, #8]
3418a4fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418a502:	60fb      	str	r3, [r7, #12]
            break;
3418a504:	e009      	b.n	3418a51a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a506:	f7fd fd19 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a50a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a50c:	68fa      	ldr	r2, [r7, #12]
3418a50e:	68bb      	ldr	r3, [r7, #8]
3418a510:	fbb2 f3f3 	udiv	r3, r2, r3
3418a514:	60fb      	str	r3, [r7, #12]
            break;
3418a516:	e000      	b.n	3418a51a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418a518:	bf00      	nop
        }
      }
      break;
3418a51a:	e01c      	b.n	3418a556 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a51c:	f7f9 f9c4 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418a520:	4603      	mov	r3, r0
3418a522:	2b00      	cmp	r3, #0
3418a524:	d019      	beq.n	3418a55a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a526:	f7f9 f9d1 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418a52a:	4603      	mov	r3, r0
3418a52c:	09db      	lsrs	r3, r3, #7
3418a52e:	4a0f      	ldr	r2, [pc, #60]	@ (3418a56c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418a530:	fa22 f303 	lsr.w	r3, r2, r3
3418a534:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a536:	e010      	b.n	3418a55a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a538:	f7f9 f9d6 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418a53c:	4603      	mov	r3, r0
3418a53e:	2b00      	cmp	r3, #0
3418a540:	d00d      	beq.n	3418a55e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418a542:	4b0b      	ldr	r3, [pc, #44]	@ (3418a570 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418a544:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a546:	e00a      	b.n	3418a55e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418a548:	4b0a      	ldr	r3, [pc, #40]	@ (3418a574 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418a54a:	60fb      	str	r3, [r7, #12]
      break;
3418a54c:	e008      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418a54e:	bf00      	nop
3418a550:	e006      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a552:	bf00      	nop
3418a554:	e004      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a556:	bf00      	nop
3418a558:	e002      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a55a:	bf00      	nop
3418a55c:	e000      	b.n	3418a560 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a55e:	bf00      	nop
  }

  return spdifrx_frequency;
3418a560:	68fb      	ldr	r3, [r7, #12]
}
3418a562:	4618      	mov	r0, r3
3418a564:	3710      	adds	r7, #16
3418a566:	46bd      	mov	sp, r7
3418a568:	bd80      	pop	{r7, pc}
3418a56a:	bf00      	nop
3418a56c:	03d09000 	.word	0x03d09000
3418a570:	003d0900 	.word	0x003d0900
3418a574:	00bb8000 	.word	0x00bb8000

3418a578 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418a578:	b580      	push	{r7, lr}
3418a57a:	b084      	sub	sp, #16
3418a57c:	af00      	add	r7, sp, #0
3418a57e:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a580:	2300      	movs	r3, #0
3418a582:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418a584:	6878      	ldr	r0, [r7, #4]
3418a586:	f7f9 fd6b 	bl	34184060 <LL_RCC_GetSPIClockSource>
3418a58a:	4603      	mov	r3, r0
3418a58c:	4aa7      	ldr	r2, [pc, #668]	@ (3418a82c <RCCEx_GetSPICLKFreq+0x2b4>)
3418a58e:	4293      	cmp	r3, r2
3418a590:	f000 829e 	beq.w	3418aad0 <RCCEx_GetSPICLKFreq+0x558>
3418a594:	4aa5      	ldr	r2, [pc, #660]	@ (3418a82c <RCCEx_GetSPICLKFreq+0x2b4>)
3418a596:	4293      	cmp	r3, r2
3418a598:	f200 82a5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a59c:	4aa4      	ldr	r2, [pc, #656]	@ (3418a830 <RCCEx_GetSPICLKFreq+0x2b8>)
3418a59e:	4293      	cmp	r3, r2
3418a5a0:	f000 8299 	beq.w	3418aad6 <RCCEx_GetSPICLKFreq+0x55e>
3418a5a4:	4aa2      	ldr	r2, [pc, #648]	@ (3418a830 <RCCEx_GetSPICLKFreq+0x2b8>)
3418a5a6:	4293      	cmp	r3, r2
3418a5a8:	f200 829d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5ac:	4aa1      	ldr	r2, [pc, #644]	@ (3418a834 <RCCEx_GetSPICLKFreq+0x2bc>)
3418a5ae:	4293      	cmp	r3, r2
3418a5b0:	f000 8291 	beq.w	3418aad6 <RCCEx_GetSPICLKFreq+0x55e>
3418a5b4:	4a9f      	ldr	r2, [pc, #636]	@ (3418a834 <RCCEx_GetSPICLKFreq+0x2bc>)
3418a5b6:	4293      	cmp	r3, r2
3418a5b8:	f200 8295 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5bc:	4a9e      	ldr	r2, [pc, #632]	@ (3418a838 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a5be:	4293      	cmp	r3, r2
3418a5c0:	f000 8286 	beq.w	3418aad0 <RCCEx_GetSPICLKFreq+0x558>
3418a5c4:	4a9c      	ldr	r2, [pc, #624]	@ (3418a838 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a5c6:	4293      	cmp	r3, r2
3418a5c8:	f200 828d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5cc:	4a9b      	ldr	r2, [pc, #620]	@ (3418a83c <RCCEx_GetSPICLKFreq+0x2c4>)
3418a5ce:	4293      	cmp	r3, r2
3418a5d0:	f000 827e 	beq.w	3418aad0 <RCCEx_GetSPICLKFreq+0x558>
3418a5d4:	4a99      	ldr	r2, [pc, #612]	@ (3418a83c <RCCEx_GetSPICLKFreq+0x2c4>)
3418a5d6:	4293      	cmp	r3, r2
3418a5d8:	f200 8285 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5dc:	4a98      	ldr	r2, [pc, #608]	@ (3418a840 <RCCEx_GetSPICLKFreq+0x2c8>)
3418a5de:	4293      	cmp	r3, r2
3418a5e0:	f000 8276 	beq.w	3418aad0 <RCCEx_GetSPICLKFreq+0x558>
3418a5e4:	4a96      	ldr	r2, [pc, #600]	@ (3418a840 <RCCEx_GetSPICLKFreq+0x2c8>)
3418a5e6:	4293      	cmp	r3, r2
3418a5e8:	f200 827d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5ec:	4a95      	ldr	r2, [pc, #596]	@ (3418a844 <RCCEx_GetSPICLKFreq+0x2cc>)
3418a5ee:	4293      	cmp	r3, r2
3418a5f0:	f000 8258 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a5f4:	4a93      	ldr	r2, [pc, #588]	@ (3418a844 <RCCEx_GetSPICLKFreq+0x2cc>)
3418a5f6:	4293      	cmp	r3, r2
3418a5f8:	f200 8275 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a5fc:	4a92      	ldr	r2, [pc, #584]	@ (3418a848 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a5fe:	4293      	cmp	r3, r2
3418a600:	f000 8250 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a604:	4a90      	ldr	r2, [pc, #576]	@ (3418a848 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a606:	4293      	cmp	r3, r2
3418a608:	f200 826d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a60c:	4a8f      	ldr	r2, [pc, #572]	@ (3418a84c <RCCEx_GetSPICLKFreq+0x2d4>)
3418a60e:	4293      	cmp	r3, r2
3418a610:	f000 8248 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a614:	4a8d      	ldr	r2, [pc, #564]	@ (3418a84c <RCCEx_GetSPICLKFreq+0x2d4>)
3418a616:	4293      	cmp	r3, r2
3418a618:	f200 8265 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a61c:	4a8c      	ldr	r2, [pc, #560]	@ (3418a850 <RCCEx_GetSPICLKFreq+0x2d8>)
3418a61e:	4293      	cmp	r3, r2
3418a620:	f000 8240 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a624:	4a8a      	ldr	r2, [pc, #552]	@ (3418a850 <RCCEx_GetSPICLKFreq+0x2d8>)
3418a626:	4293      	cmp	r3, r2
3418a628:	f200 825d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a62c:	4a89      	ldr	r2, [pc, #548]	@ (3418a854 <RCCEx_GetSPICLKFreq+0x2dc>)
3418a62e:	4293      	cmp	r3, r2
3418a630:	f000 8238 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a634:	4a87      	ldr	r2, [pc, #540]	@ (3418a854 <RCCEx_GetSPICLKFreq+0x2dc>)
3418a636:	4293      	cmp	r3, r2
3418a638:	f200 8255 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a63c:	4a86      	ldr	r2, [pc, #536]	@ (3418a858 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a63e:	4293      	cmp	r3, r2
3418a640:	f000 8230 	beq.w	3418aaa4 <RCCEx_GetSPICLKFreq+0x52c>
3418a644:	4a84      	ldr	r2, [pc, #528]	@ (3418a858 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a646:	4293      	cmp	r3, r2
3418a648:	f200 824d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a64c:	4a83      	ldr	r2, [pc, #524]	@ (3418a85c <RCCEx_GetSPICLKFreq+0x2e4>)
3418a64e:	4293      	cmp	r3, r2
3418a650:	f000 8236 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a654:	4a81      	ldr	r2, [pc, #516]	@ (3418a85c <RCCEx_GetSPICLKFreq+0x2e4>)
3418a656:	4293      	cmp	r3, r2
3418a658:	f200 8245 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a65c:	4a80      	ldr	r2, [pc, #512]	@ (3418a860 <RCCEx_GetSPICLKFreq+0x2e8>)
3418a65e:	4293      	cmp	r3, r2
3418a660:	f000 822e 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a664:	4a7e      	ldr	r2, [pc, #504]	@ (3418a860 <RCCEx_GetSPICLKFreq+0x2e8>)
3418a666:	4293      	cmp	r3, r2
3418a668:	f200 823d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a66c:	4a7d      	ldr	r2, [pc, #500]	@ (3418a864 <RCCEx_GetSPICLKFreq+0x2ec>)
3418a66e:	4293      	cmp	r3, r2
3418a670:	f000 8226 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a674:	4a7b      	ldr	r2, [pc, #492]	@ (3418a864 <RCCEx_GetSPICLKFreq+0x2ec>)
3418a676:	4293      	cmp	r3, r2
3418a678:	f200 8235 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a67c:	4a7a      	ldr	r2, [pc, #488]	@ (3418a868 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a67e:	4293      	cmp	r3, r2
3418a680:	f000 821e 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a684:	4a78      	ldr	r2, [pc, #480]	@ (3418a868 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a686:	4293      	cmp	r3, r2
3418a688:	f200 822d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a68c:	4a77      	ldr	r2, [pc, #476]	@ (3418a86c <RCCEx_GetSPICLKFreq+0x2f4>)
3418a68e:	4293      	cmp	r3, r2
3418a690:	f000 8216 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a694:	4a75      	ldr	r2, [pc, #468]	@ (3418a86c <RCCEx_GetSPICLKFreq+0x2f4>)
3418a696:	4293      	cmp	r3, r2
3418a698:	f200 8225 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a69c:	4a74      	ldr	r2, [pc, #464]	@ (3418a870 <RCCEx_GetSPICLKFreq+0x2f8>)
3418a69e:	4293      	cmp	r3, r2
3418a6a0:	f000 820e 	beq.w	3418aac0 <RCCEx_GetSPICLKFreq+0x548>
3418a6a4:	4a72      	ldr	r2, [pc, #456]	@ (3418a870 <RCCEx_GetSPICLKFreq+0x2f8>)
3418a6a6:	4293      	cmp	r3, r2
3418a6a8:	f200 821d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6ac:	4a71      	ldr	r2, [pc, #452]	@ (3418a874 <RCCEx_GetSPICLKFreq+0x2fc>)
3418a6ae:	4293      	cmp	r3, r2
3418a6b0:	f000 8171 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a6b4:	4a6f      	ldr	r2, [pc, #444]	@ (3418a874 <RCCEx_GetSPICLKFreq+0x2fc>)
3418a6b6:	4293      	cmp	r3, r2
3418a6b8:	f200 8215 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6bc:	4a6e      	ldr	r2, [pc, #440]	@ (3418a878 <RCCEx_GetSPICLKFreq+0x300>)
3418a6be:	4293      	cmp	r3, r2
3418a6c0:	f000 81ad 	beq.w	3418aa1e <RCCEx_GetSPICLKFreq+0x4a6>
3418a6c4:	4a6c      	ldr	r2, [pc, #432]	@ (3418a878 <RCCEx_GetSPICLKFreq+0x300>)
3418a6c6:	4293      	cmp	r3, r2
3418a6c8:	f200 820d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6cc:	4a6b      	ldr	r2, [pc, #428]	@ (3418a87c <RCCEx_GetSPICLKFreq+0x304>)
3418a6ce:	4293      	cmp	r3, r2
3418a6d0:	f000 81a5 	beq.w	3418aa1e <RCCEx_GetSPICLKFreq+0x4a6>
3418a6d4:	4a69      	ldr	r2, [pc, #420]	@ (3418a87c <RCCEx_GetSPICLKFreq+0x304>)
3418a6d6:	4293      	cmp	r3, r2
3418a6d8:	f200 8205 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6dc:	4a68      	ldr	r2, [pc, #416]	@ (3418a880 <RCCEx_GetSPICLKFreq+0x308>)
3418a6de:	4293      	cmp	r3, r2
3418a6e0:	f000 8159 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a6e4:	4a66      	ldr	r2, [pc, #408]	@ (3418a880 <RCCEx_GetSPICLKFreq+0x308>)
3418a6e6:	4293      	cmp	r3, r2
3418a6e8:	f200 81fd 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6ec:	4a65      	ldr	r2, [pc, #404]	@ (3418a884 <RCCEx_GetSPICLKFreq+0x30c>)
3418a6ee:	4293      	cmp	r3, r2
3418a6f0:	f000 8151 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a6f4:	4a63      	ldr	r2, [pc, #396]	@ (3418a884 <RCCEx_GetSPICLKFreq+0x30c>)
3418a6f6:	4293      	cmp	r3, r2
3418a6f8:	f200 81f5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a6fc:	4a62      	ldr	r2, [pc, #392]	@ (3418a888 <RCCEx_GetSPICLKFreq+0x310>)
3418a6fe:	4293      	cmp	r3, r2
3418a700:	f000 8149 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a704:	4a60      	ldr	r2, [pc, #384]	@ (3418a888 <RCCEx_GetSPICLKFreq+0x310>)
3418a706:	4293      	cmp	r3, r2
3418a708:	f200 81ed 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a70c:	4a5f      	ldr	r2, [pc, #380]	@ (3418a88c <RCCEx_GetSPICLKFreq+0x314>)
3418a70e:	4293      	cmp	r3, r2
3418a710:	f000 80fd 	beq.w	3418a90e <RCCEx_GetSPICLKFreq+0x396>
3418a714:	4a5d      	ldr	r2, [pc, #372]	@ (3418a88c <RCCEx_GetSPICLKFreq+0x314>)
3418a716:	4293      	cmp	r3, r2
3418a718:	f200 81e5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a71c:	4a5c      	ldr	r2, [pc, #368]	@ (3418a890 <RCCEx_GetSPICLKFreq+0x318>)
3418a71e:	4293      	cmp	r3, r2
3418a720:	f000 8139 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a724:	4a5a      	ldr	r2, [pc, #360]	@ (3418a890 <RCCEx_GetSPICLKFreq+0x318>)
3418a726:	4293      	cmp	r3, r2
3418a728:	f200 81dd 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a72c:	4a59      	ldr	r2, [pc, #356]	@ (3418a894 <RCCEx_GetSPICLKFreq+0x31c>)
3418a72e:	4293      	cmp	r3, r2
3418a730:	f000 8131 	beq.w	3418a996 <RCCEx_GetSPICLKFreq+0x41e>
3418a734:	4a57      	ldr	r2, [pc, #348]	@ (3418a894 <RCCEx_GetSPICLKFreq+0x31c>)
3418a736:	4293      	cmp	r3, r2
3418a738:	f200 81d5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a73c:	4a56      	ldr	r2, [pc, #344]	@ (3418a898 <RCCEx_GetSPICLKFreq+0x320>)
3418a73e:	4293      	cmp	r3, r2
3418a740:	f000 80e5 	beq.w	3418a90e <RCCEx_GetSPICLKFreq+0x396>
3418a744:	4a54      	ldr	r2, [pc, #336]	@ (3418a898 <RCCEx_GetSPICLKFreq+0x320>)
3418a746:	4293      	cmp	r3, r2
3418a748:	f200 81cd 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a74c:	4a53      	ldr	r2, [pc, #332]	@ (3418a89c <RCCEx_GetSPICLKFreq+0x324>)
3418a74e:	4293      	cmp	r3, r2
3418a750:	f000 80dd 	beq.w	3418a90e <RCCEx_GetSPICLKFreq+0x396>
3418a754:	4a51      	ldr	r2, [pc, #324]	@ (3418a89c <RCCEx_GetSPICLKFreq+0x324>)
3418a756:	4293      	cmp	r3, r2
3418a758:	f200 81c5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a75c:	4a50      	ldr	r2, [pc, #320]	@ (3418a8a0 <RCCEx_GetSPICLKFreq+0x328>)
3418a75e:	4293      	cmp	r3, r2
3418a760:	f000 80d5 	beq.w	3418a90e <RCCEx_GetSPICLKFreq+0x396>
3418a764:	4a4e      	ldr	r2, [pc, #312]	@ (3418a8a0 <RCCEx_GetSPICLKFreq+0x328>)
3418a766:	4293      	cmp	r3, r2
3418a768:	f200 81bd 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a76c:	4a4d      	ldr	r2, [pc, #308]	@ (3418a8a4 <RCCEx_GetSPICLKFreq+0x32c>)
3418a76e:	4293      	cmp	r3, r2
3418a770:	f000 80c8 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a774:	4a4b      	ldr	r2, [pc, #300]	@ (3418a8a4 <RCCEx_GetSPICLKFreq+0x32c>)
3418a776:	4293      	cmp	r3, r2
3418a778:	f200 81b5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a77c:	4a4a      	ldr	r2, [pc, #296]	@ (3418a8a8 <RCCEx_GetSPICLKFreq+0x330>)
3418a77e:	4293      	cmp	r3, r2
3418a780:	f000 80c0 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a784:	4a48      	ldr	r2, [pc, #288]	@ (3418a8a8 <RCCEx_GetSPICLKFreq+0x330>)
3418a786:	4293      	cmp	r3, r2
3418a788:	f200 81ad 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a78c:	4a47      	ldr	r2, [pc, #284]	@ (3418a8ac <RCCEx_GetSPICLKFreq+0x334>)
3418a78e:	4293      	cmp	r3, r2
3418a790:	f000 80b8 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a794:	4a45      	ldr	r2, [pc, #276]	@ (3418a8ac <RCCEx_GetSPICLKFreq+0x334>)
3418a796:	4293      	cmp	r3, r2
3418a798:	f200 81a5 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a79c:	4a44      	ldr	r2, [pc, #272]	@ (3418a8b0 <RCCEx_GetSPICLKFreq+0x338>)
3418a79e:	4293      	cmp	r3, r2
3418a7a0:	f000 80b0 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a7a4:	4a42      	ldr	r2, [pc, #264]	@ (3418a8b0 <RCCEx_GetSPICLKFreq+0x338>)
3418a7a6:	4293      	cmp	r3, r2
3418a7a8:	f200 819d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7ac:	4a41      	ldr	r2, [pc, #260]	@ (3418a8b4 <RCCEx_GetSPICLKFreq+0x33c>)
3418a7ae:	4293      	cmp	r3, r2
3418a7b0:	f000 80a8 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a7b4:	4a3f      	ldr	r2, [pc, #252]	@ (3418a8b4 <RCCEx_GetSPICLKFreq+0x33c>)
3418a7b6:	4293      	cmp	r3, r2
3418a7b8:	f200 8195 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7bc:	4a3e      	ldr	r2, [pc, #248]	@ (3418a8b8 <RCCEx_GetSPICLKFreq+0x340>)
3418a7be:	4293      	cmp	r3, r2
3418a7c0:	f000 80a0 	beq.w	3418a904 <RCCEx_GetSPICLKFreq+0x38c>
3418a7c4:	4a3c      	ldr	r2, [pc, #240]	@ (3418a8b8 <RCCEx_GetSPICLKFreq+0x340>)
3418a7c6:	4293      	cmp	r3, r2
3418a7c8:	f200 818d 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7cc:	4a3b      	ldr	r2, [pc, #236]	@ (3418a8bc <RCCEx_GetSPICLKFreq+0x344>)
3418a7ce:	4293      	cmp	r3, r2
3418a7d0:	f000 808c 	beq.w	3418a8ec <RCCEx_GetSPICLKFreq+0x374>
3418a7d4:	4a39      	ldr	r2, [pc, #228]	@ (3418a8bc <RCCEx_GetSPICLKFreq+0x344>)
3418a7d6:	4293      	cmp	r3, r2
3418a7d8:	f200 8185 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7dc:	4a38      	ldr	r2, [pc, #224]	@ (3418a8c0 <RCCEx_GetSPICLKFreq+0x348>)
3418a7de:	4293      	cmp	r3, r2
3418a7e0:	d078      	beq.n	3418a8d4 <RCCEx_GetSPICLKFreq+0x35c>
3418a7e2:	4a37      	ldr	r2, [pc, #220]	@ (3418a8c0 <RCCEx_GetSPICLKFreq+0x348>)
3418a7e4:	4293      	cmp	r3, r2
3418a7e6:	f200 817e 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7ea:	4a36      	ldr	r2, [pc, #216]	@ (3418a8c4 <RCCEx_GetSPICLKFreq+0x34c>)
3418a7ec:	4293      	cmp	r3, r2
3418a7ee:	d071      	beq.n	3418a8d4 <RCCEx_GetSPICLKFreq+0x35c>
3418a7f0:	4a34      	ldr	r2, [pc, #208]	@ (3418a8c4 <RCCEx_GetSPICLKFreq+0x34c>)
3418a7f2:	4293      	cmp	r3, r2
3418a7f4:	f200 8177 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a7f8:	4a33      	ldr	r2, [pc, #204]	@ (3418a8c8 <RCCEx_GetSPICLKFreq+0x350>)
3418a7fa:	4293      	cmp	r3, r2
3418a7fc:	d00a      	beq.n	3418a814 <RCCEx_GetSPICLKFreq+0x29c>
3418a7fe:	4a32      	ldr	r2, [pc, #200]	@ (3418a8c8 <RCCEx_GetSPICLKFreq+0x350>)
3418a800:	4293      	cmp	r3, r2
3418a802:	f200 8170 	bhi.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
3418a806:	4a31      	ldr	r2, [pc, #196]	@ (3418a8cc <RCCEx_GetSPICLKFreq+0x354>)
3418a808:	4293      	cmp	r3, r2
3418a80a:	d063      	beq.n	3418a8d4 <RCCEx_GetSPICLKFreq+0x35c>
3418a80c:	4a30      	ldr	r2, [pc, #192]	@ (3418a8d0 <RCCEx_GetSPICLKFreq+0x358>)
3418a80e:	4293      	cmp	r3, r2
3418a810:	f040 8169 	bne.w	3418aae6 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a814:	f7f8 fc48 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a818:	4603      	mov	r3, r0
3418a81a:	4618      	mov	r0, r3
3418a81c:	f7fd fbd4 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a820:	4603      	mov	r3, r0
3418a822:	4618      	mov	r0, r3
3418a824:	f7fd fbe1 	bl	34187fea <RCCEx_GetPCLK1Freq>
3418a828:	60f8      	str	r0, [r7, #12]
      break;
3418a82a:	e169      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
3418a82c:	07061820 	.word	0x07061820
3418a830:	07061420 	.word	0x07061420
3418a834:	07061020 	.word	0x07061020
3418a838:	07060c20 	.word	0x07060c20
3418a83c:	07060820 	.word	0x07060820
3418a840:	07060420 	.word	0x07060420
3418a844:	07051820 	.word	0x07051820
3418a848:	07051420 	.word	0x07051420
3418a84c:	07051020 	.word	0x07051020
3418a850:	07050c20 	.word	0x07050c20
3418a854:	07050820 	.word	0x07050820
3418a858:	07050420 	.word	0x07050420
3418a85c:	07041820 	.word	0x07041820
3418a860:	07041420 	.word	0x07041420
3418a864:	07041020 	.word	0x07041020
3418a868:	07040c20 	.word	0x07040c20
3418a86c:	07040820 	.word	0x07040820
3418a870:	07040420 	.word	0x07040420
3418a874:	07031820 	.word	0x07031820
3418a878:	07031420 	.word	0x07031420
3418a87c:	07031020 	.word	0x07031020
3418a880:	07030c20 	.word	0x07030c20
3418a884:	07030820 	.word	0x07030820
3418a888:	07030420 	.word	0x07030420
3418a88c:	07021820 	.word	0x07021820
3418a890:	07021420 	.word	0x07021420
3418a894:	07021020 	.word	0x07021020
3418a898:	07020c20 	.word	0x07020c20
3418a89c:	07020820 	.word	0x07020820
3418a8a0:	07020420 	.word	0x07020420
3418a8a4:	07011820 	.word	0x07011820
3418a8a8:	07011420 	.word	0x07011420
3418a8ac:	07011020 	.word	0x07011020
3418a8b0:	07010c20 	.word	0x07010c20
3418a8b4:	07010820 	.word	0x07010820
3418a8b8:	07010420 	.word	0x07010420
3418a8bc:	07001820 	.word	0x07001820
3418a8c0:	07001420 	.word	0x07001420
3418a8c4:	07001020 	.word	0x07001020
3418a8c8:	07000c20 	.word	0x07000c20
3418a8cc:	07000420 	.word	0x07000420
3418a8d0:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a8d4:	f7f8 fbe8 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a8d8:	4603      	mov	r3, r0
3418a8da:	4618      	mov	r0, r3
3418a8dc:	f7fd fb74 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a8e0:	4603      	mov	r3, r0
3418a8e2:	4618      	mov	r0, r3
3418a8e4:	f7fd fb91 	bl	3418800a <RCCEx_GetPCLK2Freq>
3418a8e8:	60f8      	str	r0, [r7, #12]
      break;
3418a8ea:	e109      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a8ec:	f7f8 fbdc 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418a8f0:	4603      	mov	r3, r0
3418a8f2:	4618      	mov	r0, r3
3418a8f4:	f7fd fb68 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418a8f8:	4603      	mov	r3, r0
3418a8fa:	4618      	mov	r0, r3
3418a8fc:	f7fd fb96 	bl	3418802c <RCCEx_GetPCLK4Freq>
3418a900:	60f8      	str	r0, [r7, #12]
      break;
3418a902:	e0fd      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a904:	2007      	movs	r0, #7
3418a906:	f7fd fe4b 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418a90a:	60f8      	str	r0, [r7, #12]
      break;
3418a90c:	e0f8      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a90e:	f7f9 ffaf 	bl	34184870 <LL_RCC_IC8_IsEnabled>
3418a912:	4603      	mov	r3, r0
3418a914:	2b00      	cmp	r3, #0
3418a916:	f000 80e8 	beq.w	3418aaea <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a91a:	f7f9 ffcb 	bl	341848b4 <LL_RCC_IC8_GetDivider>
3418a91e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a920:	f7f9 ffba 	bl	34184898 <LL_RCC_IC8_GetSource>
3418a924:	4603      	mov	r3, r0
3418a926:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a92a:	d029      	beq.n	3418a980 <RCCEx_GetSPICLKFreq+0x408>
3418a92c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a930:	d82f      	bhi.n	3418a992 <RCCEx_GetSPICLKFreq+0x41a>
3418a932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a936:	d01a      	beq.n	3418a96e <RCCEx_GetSPICLKFreq+0x3f6>
3418a938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a93c:	d829      	bhi.n	3418a992 <RCCEx_GetSPICLKFreq+0x41a>
3418a93e:	2b00      	cmp	r3, #0
3418a940:	d003      	beq.n	3418a94a <RCCEx_GetSPICLKFreq+0x3d2>
3418a942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a946:	d009      	beq.n	3418a95c <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a948:	e023      	b.n	3418a992 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a94a:	f7fd fa25 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a94e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a950:	68fa      	ldr	r2, [r7, #12]
3418a952:	68bb      	ldr	r3, [r7, #8]
3418a954:	fbb2 f3f3 	udiv	r3, r2, r3
3418a958:	60fb      	str	r3, [r7, #12]
            break;
3418a95a:	e01b      	b.n	3418a994 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a95c:	f7fd fa62 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a960:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a962:	68fa      	ldr	r2, [r7, #12]
3418a964:	68bb      	ldr	r3, [r7, #8]
3418a966:	fbb2 f3f3 	udiv	r3, r2, r3
3418a96a:	60fb      	str	r3, [r7, #12]
            break;
3418a96c:	e012      	b.n	3418a994 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a96e:	f7fd fa9f 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a972:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a974:	68fa      	ldr	r2, [r7, #12]
3418a976:	68bb      	ldr	r3, [r7, #8]
3418a978:	fbb2 f3f3 	udiv	r3, r2, r3
3418a97c:	60fb      	str	r3, [r7, #12]
            break;
3418a97e:	e009      	b.n	3418a994 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a980:	f7fd fadc 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418a984:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a986:	68fa      	ldr	r2, [r7, #12]
3418a988:	68bb      	ldr	r3, [r7, #8]
3418a98a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a98e:	60fb      	str	r3, [r7, #12]
            break;
3418a990:	e000      	b.n	3418a994 <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418a992:	bf00      	nop
        }
      }
      break;
3418a994:	e0a9      	b.n	3418aaea <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418a996:	f7f9 ffab 	bl	341848f0 <LL_RCC_IC9_IsEnabled>
3418a99a:	4603      	mov	r3, r0
3418a99c:	2b00      	cmp	r3, #0
3418a99e:	f000 80a6 	beq.w	3418aaee <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418a9a2:	f7f9 ffc7 	bl	34184934 <LL_RCC_IC9_GetDivider>
3418a9a6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418a9a8:	f7f9 ffb6 	bl	34184918 <LL_RCC_IC9_GetSource>
3418a9ac:	4603      	mov	r3, r0
3418a9ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a9b2:	d029      	beq.n	3418aa08 <RCCEx_GetSPICLKFreq+0x490>
3418a9b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a9b8:	d82f      	bhi.n	3418aa1a <RCCEx_GetSPICLKFreq+0x4a2>
3418a9ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a9be:	d01a      	beq.n	3418a9f6 <RCCEx_GetSPICLKFreq+0x47e>
3418a9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a9c4:	d829      	bhi.n	3418aa1a <RCCEx_GetSPICLKFreq+0x4a2>
3418a9c6:	2b00      	cmp	r3, #0
3418a9c8:	d003      	beq.n	3418a9d2 <RCCEx_GetSPICLKFreq+0x45a>
3418a9ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a9ce:	d009      	beq.n	3418a9e4 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a9d0:	e023      	b.n	3418aa1a <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a9d2:	f7fd f9e1 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418a9d6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9d8:	68fa      	ldr	r2, [r7, #12]
3418a9da:	68bb      	ldr	r3, [r7, #8]
3418a9dc:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9e0:	60fb      	str	r3, [r7, #12]
            break;
3418a9e2:	e01b      	b.n	3418aa1c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a9e4:	f7fd fa1e 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418a9e8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9ea:	68fa      	ldr	r2, [r7, #12]
3418a9ec:	68bb      	ldr	r3, [r7, #8]
3418a9ee:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9f2:	60fb      	str	r3, [r7, #12]
            break;
3418a9f4:	e012      	b.n	3418aa1c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a9f6:	f7fd fa5b 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418a9fa:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9fc:	68fa      	ldr	r2, [r7, #12]
3418a9fe:	68bb      	ldr	r3, [r7, #8]
3418aa00:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa04:	60fb      	str	r3, [r7, #12]
            break;
3418aa06:	e009      	b.n	3418aa1c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aa08:	f7fd fa98 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418aa0c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa0e:	68fa      	ldr	r2, [r7, #12]
3418aa10:	68bb      	ldr	r3, [r7, #8]
3418aa12:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa16:	60fb      	str	r3, [r7, #12]
            break;
3418aa18:	e000      	b.n	3418aa1c <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418aa1a:	bf00      	nop
        }
      }
      break;
3418aa1c:	e067      	b.n	3418aaee <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418aa1e:	f7fa f867 	bl	34184af0 <LL_RCC_IC14_IsEnabled>
3418aa22:	4603      	mov	r3, r0
3418aa24:	2b00      	cmp	r3, #0
3418aa26:	d064      	beq.n	3418aaf2 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418aa28:	f7fa f884 	bl	34184b34 <LL_RCC_IC14_GetDivider>
3418aa2c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418aa2e:	f7fa f873 	bl	34184b18 <LL_RCC_IC14_GetSource>
3418aa32:	4603      	mov	r3, r0
3418aa34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa38:	d029      	beq.n	3418aa8e <RCCEx_GetSPICLKFreq+0x516>
3418aa3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa3e:	d82f      	bhi.n	3418aaa0 <RCCEx_GetSPICLKFreq+0x528>
3418aa40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aa44:	d01a      	beq.n	3418aa7c <RCCEx_GetSPICLKFreq+0x504>
3418aa46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aa4a:	d829      	bhi.n	3418aaa0 <RCCEx_GetSPICLKFreq+0x528>
3418aa4c:	2b00      	cmp	r3, #0
3418aa4e:	d003      	beq.n	3418aa58 <RCCEx_GetSPICLKFreq+0x4e0>
3418aa50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aa54:	d009      	beq.n	3418aa6a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418aa56:	e023      	b.n	3418aaa0 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aa58:	f7fd f99e 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418aa5c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa5e:	68fa      	ldr	r2, [r7, #12]
3418aa60:	68bb      	ldr	r3, [r7, #8]
3418aa62:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa66:	60fb      	str	r3, [r7, #12]
            break;
3418aa68:	e01b      	b.n	3418aaa2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aa6a:	f7fd f9db 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418aa6e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa70:	68fa      	ldr	r2, [r7, #12]
3418aa72:	68bb      	ldr	r3, [r7, #8]
3418aa74:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa78:	60fb      	str	r3, [r7, #12]
            break;
3418aa7a:	e012      	b.n	3418aaa2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aa7c:	f7fd fa18 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418aa80:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa82:	68fa      	ldr	r2, [r7, #12]
3418aa84:	68bb      	ldr	r3, [r7, #8]
3418aa86:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa8a:	60fb      	str	r3, [r7, #12]
            break;
3418aa8c:	e009      	b.n	3418aaa2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aa8e:	f7fd fa55 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418aa92:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa94:	68fa      	ldr	r2, [r7, #12]
3418aa96:	68bb      	ldr	r3, [r7, #8]
3418aa98:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa9c:	60fb      	str	r3, [r7, #12]
            break;
3418aa9e:	e000      	b.n	3418aaa2 <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418aaa0:	bf00      	nop
        }
      }
      break;
3418aaa2:	e026      	b.n	3418aaf2 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418aaa4:	f7f8 ff00 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418aaa8:	4603      	mov	r3, r0
3418aaaa:	2b00      	cmp	r3, #0
3418aaac:	d023      	beq.n	3418aaf6 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418aaae:	f7f8 ff0d 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418aab2:	4603      	mov	r3, r0
3418aab4:	09db      	lsrs	r3, r3, #7
3418aab6:	4a15      	ldr	r2, [pc, #84]	@ (3418ab0c <RCCEx_GetSPICLKFreq+0x594>)
3418aab8:	fa22 f303 	lsr.w	r3, r2, r3
3418aabc:	60fb      	str	r3, [r7, #12]
      }
      break;
3418aabe:	e01a      	b.n	3418aaf6 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418aac0:	f7f8 ff12 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418aac4:	4603      	mov	r3, r0
3418aac6:	2b00      	cmp	r3, #0
3418aac8:	d017      	beq.n	3418aafa <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418aaca:	4b11      	ldr	r3, [pc, #68]	@ (3418ab10 <RCCEx_GetSPICLKFreq+0x598>)
3418aacc:	60fb      	str	r3, [r7, #12]
      }
      break;
3418aace:	e014      	b.n	3418aafa <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418aad0:	4b10      	ldr	r3, [pc, #64]	@ (3418ab14 <RCCEx_GetSPICLKFreq+0x59c>)
3418aad2:	60fb      	str	r3, [r7, #12]
      break;
3418aad4:	e014      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418aad6:	f7f8 fed5 	bl	34183884 <LL_RCC_HSE_IsReady>
3418aada:	4603      	mov	r3, r0
3418aadc:	2b00      	cmp	r3, #0
3418aade:	d00e      	beq.n	3418aafe <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418aae0:	4b0d      	ldr	r3, [pc, #52]	@ (3418ab18 <RCCEx_GetSPICLKFreq+0x5a0>)
3418aae2:	60fb      	str	r3, [r7, #12]
      }
      break;
3418aae4:	e00b      	b.n	3418aafe <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418aae6:	bf00      	nop
3418aae8:	e00a      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aaea:	bf00      	nop
3418aaec:	e008      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aaee:	bf00      	nop
3418aaf0:	e006      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aaf2:	bf00      	nop
3418aaf4:	e004      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aaf6:	bf00      	nop
3418aaf8:	e002      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aafa:	bf00      	nop
3418aafc:	e000      	b.n	3418ab00 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418aafe:	bf00      	nop
  }

  return spi_frequency;
3418ab00:	68fb      	ldr	r3, [r7, #12]
}
3418ab02:	4618      	mov	r0, r3
3418ab04:	3710      	adds	r7, #16
3418ab06:	46bd      	mov	sp, r7
3418ab08:	bd80      	pop	{r7, pc}
3418ab0a:	bf00      	nop
3418ab0c:	03d09000 	.word	0x03d09000
3418ab10:	003d0900 	.word	0x003d0900
3418ab14:	00bb8000 	.word	0x00bb8000
3418ab18:	02dc6c00 	.word	0x02dc6c00

3418ab1c <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418ab1c:	b580      	push	{r7, lr}
3418ab1e:	b084      	sub	sp, #16
3418ab20:	af00      	add	r7, sp, #0
3418ab22:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ab24:	2300      	movs	r3, #0
3418ab26:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418ab28:	6878      	ldr	r0, [r7, #4]
3418ab2a:	f7f9 fab1 	bl	34184090 <LL_RCC_GetUARTClockSource>
3418ab2e:	4603      	mov	r3, r0
3418ab30:	4aa2      	ldr	r2, [pc, #648]	@ (3418adbc <RCCEx_GetUARTCLKFreq+0x2a0>)
3418ab32:	4293      	cmp	r3, r2
3418ab34:	f000 81e8 	beq.w	3418af08 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab38:	4aa0      	ldr	r2, [pc, #640]	@ (3418adbc <RCCEx_GetUARTCLKFreq+0x2a0>)
3418ab3a:	4293      	cmp	r3, r2
3418ab3c:	f200 8203 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab40:	4a9f      	ldr	r2, [pc, #636]	@ (3418adc0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418ab42:	4293      	cmp	r3, r2
3418ab44:	f000 81e0 	beq.w	3418af08 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab48:	4a9d      	ldr	r2, [pc, #628]	@ (3418adc0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418ab4a:	4293      	cmp	r3, r2
3418ab4c:	f200 81fb 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab50:	4a9c      	ldr	r2, [pc, #624]	@ (3418adc4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418ab52:	4293      	cmp	r3, r2
3418ab54:	f000 81d8 	beq.w	3418af08 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab58:	4a9a      	ldr	r2, [pc, #616]	@ (3418adc4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418ab5a:	4293      	cmp	r3, r2
3418ab5c:	f200 81f3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab60:	4a99      	ldr	r2, [pc, #612]	@ (3418adc8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418ab62:	4293      	cmp	r3, r2
3418ab64:	f000 81d0 	beq.w	3418af08 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab68:	4a97      	ldr	r2, [pc, #604]	@ (3418adc8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418ab6a:	4293      	cmp	r3, r2
3418ab6c:	f200 81eb 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab70:	4a96      	ldr	r2, [pc, #600]	@ (3418adcc <RCCEx_GetUARTCLKFreq+0x2b0>)
3418ab72:	4293      	cmp	r3, r2
3418ab74:	f000 81c8 	beq.w	3418af08 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab78:	4a94      	ldr	r2, [pc, #592]	@ (3418adcc <RCCEx_GetUARTCLKFreq+0x2b0>)
3418ab7a:	4293      	cmp	r3, r2
3418ab7c:	f200 81e3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab80:	4a93      	ldr	r2, [pc, #588]	@ (3418add0 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418ab82:	4293      	cmp	r3, r2
3418ab84:	f000 81ce 	beq.w	3418af24 <RCCEx_GetUARTCLKFreq+0x408>
3418ab88:	4a91      	ldr	r2, [pc, #580]	@ (3418add0 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418ab8a:	4293      	cmp	r3, r2
3418ab8c:	f200 81db 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ab90:	4a90      	ldr	r2, [pc, #576]	@ (3418add4 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418ab92:	4293      	cmp	r3, r2
3418ab94:	f000 81c6 	beq.w	3418af24 <RCCEx_GetUARTCLKFreq+0x408>
3418ab98:	4a8e      	ldr	r2, [pc, #568]	@ (3418add4 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418ab9a:	4293      	cmp	r3, r2
3418ab9c:	f200 81d3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418aba0:	4a8d      	ldr	r2, [pc, #564]	@ (3418add8 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418aba2:	4293      	cmp	r3, r2
3418aba4:	f000 81be 	beq.w	3418af24 <RCCEx_GetUARTCLKFreq+0x408>
3418aba8:	4a8b      	ldr	r2, [pc, #556]	@ (3418add8 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418abaa:	4293      	cmp	r3, r2
3418abac:	f200 81cb 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418abb0:	4a8a      	ldr	r2, [pc, #552]	@ (3418addc <RCCEx_GetUARTCLKFreq+0x2c0>)
3418abb2:	4293      	cmp	r3, r2
3418abb4:	f000 81b6 	beq.w	3418af24 <RCCEx_GetUARTCLKFreq+0x408>
3418abb8:	4a88      	ldr	r2, [pc, #544]	@ (3418addc <RCCEx_GetUARTCLKFreq+0x2c0>)
3418abba:	4293      	cmp	r3, r2
3418abbc:	f200 81c3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418abc0:	4a87      	ldr	r2, [pc, #540]	@ (3418ade0 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418abc2:	4293      	cmp	r3, r2
3418abc4:	f000 81ae 	beq.w	3418af24 <RCCEx_GetUARTCLKFreq+0x408>
3418abc8:	4a85      	ldr	r2, [pc, #532]	@ (3418ade0 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418abca:	4293      	cmp	r3, r2
3418abcc:	f200 81bb 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418abd0:	4a84      	ldr	r2, [pc, #528]	@ (3418ade4 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418abd2:	4293      	cmp	r3, r2
3418abd4:	f000 81ae 	beq.w	3418af34 <RCCEx_GetUARTCLKFreq+0x418>
3418abd8:	4a82      	ldr	r2, [pc, #520]	@ (3418ade4 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418abda:	4293      	cmp	r3, r2
3418abdc:	f200 81b3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418abe0:	4a81      	ldr	r2, [pc, #516]	@ (3418ade8 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418abe2:	4293      	cmp	r3, r2
3418abe4:	f000 81a6 	beq.w	3418af34 <RCCEx_GetUARTCLKFreq+0x418>
3418abe8:	4a7f      	ldr	r2, [pc, #508]	@ (3418ade8 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418abea:	4293      	cmp	r3, r2
3418abec:	f200 81ab 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418abf0:	4a7e      	ldr	r2, [pc, #504]	@ (3418adec <RCCEx_GetUARTCLKFreq+0x2d0>)
3418abf2:	4293      	cmp	r3, r2
3418abf4:	f000 819e 	beq.w	3418af34 <RCCEx_GetUARTCLKFreq+0x418>
3418abf8:	4a7c      	ldr	r2, [pc, #496]	@ (3418adec <RCCEx_GetUARTCLKFreq+0x2d0>)
3418abfa:	4293      	cmp	r3, r2
3418abfc:	f200 81a3 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac00:	4a7b      	ldr	r2, [pc, #492]	@ (3418adf0 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418ac02:	4293      	cmp	r3, r2
3418ac04:	f000 8196 	beq.w	3418af34 <RCCEx_GetUARTCLKFreq+0x418>
3418ac08:	4a79      	ldr	r2, [pc, #484]	@ (3418adf0 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418ac0a:	4293      	cmp	r3, r2
3418ac0c:	f200 819b 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac10:	4a78      	ldr	r2, [pc, #480]	@ (3418adf4 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418ac12:	4293      	cmp	r3, r2
3418ac14:	f000 818e 	beq.w	3418af34 <RCCEx_GetUARTCLKFreq+0x418>
3418ac18:	4a76      	ldr	r2, [pc, #472]	@ (3418adf4 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418ac1a:	4293      	cmp	r3, r2
3418ac1c:	f200 8193 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac20:	4a75      	ldr	r2, [pc, #468]	@ (3418adf8 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418ac22:	4293      	cmp	r3, r2
3418ac24:	f000 812d 	beq.w	3418ae82 <RCCEx_GetUARTCLKFreq+0x366>
3418ac28:	4a73      	ldr	r2, [pc, #460]	@ (3418adf8 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418ac2a:	4293      	cmp	r3, r2
3418ac2c:	f200 818b 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac30:	4a72      	ldr	r2, [pc, #456]	@ (3418adfc <RCCEx_GetUARTCLKFreq+0x2e0>)
3418ac32:	4293      	cmp	r3, r2
3418ac34:	f000 8125 	beq.w	3418ae82 <RCCEx_GetUARTCLKFreq+0x366>
3418ac38:	4a70      	ldr	r2, [pc, #448]	@ (3418adfc <RCCEx_GetUARTCLKFreq+0x2e0>)
3418ac3a:	4293      	cmp	r3, r2
3418ac3c:	f200 8183 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac40:	4a6f      	ldr	r2, [pc, #444]	@ (3418ae00 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418ac42:	4293      	cmp	r3, r2
3418ac44:	f000 811d 	beq.w	3418ae82 <RCCEx_GetUARTCLKFreq+0x366>
3418ac48:	4a6d      	ldr	r2, [pc, #436]	@ (3418ae00 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418ac4a:	4293      	cmp	r3, r2
3418ac4c:	f200 817b 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac50:	4a6c      	ldr	r2, [pc, #432]	@ (3418ae04 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418ac52:	4293      	cmp	r3, r2
3418ac54:	f000 8115 	beq.w	3418ae82 <RCCEx_GetUARTCLKFreq+0x366>
3418ac58:	4a6a      	ldr	r2, [pc, #424]	@ (3418ae04 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418ac5a:	4293      	cmp	r3, r2
3418ac5c:	f200 8173 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac60:	4a69      	ldr	r2, [pc, #420]	@ (3418ae08 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418ac62:	4293      	cmp	r3, r2
3418ac64:	f000 810d 	beq.w	3418ae82 <RCCEx_GetUARTCLKFreq+0x366>
3418ac68:	4a67      	ldr	r2, [pc, #412]	@ (3418ae08 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418ac6a:	4293      	cmp	r3, r2
3418ac6c:	f200 816b 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac70:	4a66      	ldr	r2, [pc, #408]	@ (3418ae0c <RCCEx_GetUARTCLKFreq+0x2f0>)
3418ac72:	4293      	cmp	r3, r2
3418ac74:	d07b      	beq.n	3418ad6e <RCCEx_GetUARTCLKFreq+0x252>
3418ac76:	4a65      	ldr	r2, [pc, #404]	@ (3418ae0c <RCCEx_GetUARTCLKFreq+0x2f0>)
3418ac78:	4293      	cmp	r3, r2
3418ac7a:	f200 8164 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac7e:	4a64      	ldr	r2, [pc, #400]	@ (3418ae10 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418ac80:	4293      	cmp	r3, r2
3418ac82:	d074      	beq.n	3418ad6e <RCCEx_GetUARTCLKFreq+0x252>
3418ac84:	4a62      	ldr	r2, [pc, #392]	@ (3418ae10 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418ac86:	4293      	cmp	r3, r2
3418ac88:	f200 815d 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac8c:	4a61      	ldr	r2, [pc, #388]	@ (3418ae14 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418ac8e:	4293      	cmp	r3, r2
3418ac90:	d06d      	beq.n	3418ad6e <RCCEx_GetUARTCLKFreq+0x252>
3418ac92:	4a60      	ldr	r2, [pc, #384]	@ (3418ae14 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418ac94:	4293      	cmp	r3, r2
3418ac96:	f200 8156 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ac9a:	4a5f      	ldr	r2, [pc, #380]	@ (3418ae18 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418ac9c:	4293      	cmp	r3, r2
3418ac9e:	d066      	beq.n	3418ad6e <RCCEx_GetUARTCLKFreq+0x252>
3418aca0:	4a5d      	ldr	r2, [pc, #372]	@ (3418ae18 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418aca2:	4293      	cmp	r3, r2
3418aca4:	f200 814f 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418aca8:	4a5c      	ldr	r2, [pc, #368]	@ (3418ae1c <RCCEx_GetUARTCLKFreq+0x300>)
3418acaa:	4293      	cmp	r3, r2
3418acac:	d05f      	beq.n	3418ad6e <RCCEx_GetUARTCLKFreq+0x252>
3418acae:	4a5b      	ldr	r2, [pc, #364]	@ (3418ae1c <RCCEx_GetUARTCLKFreq+0x300>)
3418acb0:	4293      	cmp	r3, r2
3418acb2:	f200 8148 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418acb6:	4a5a      	ldr	r2, [pc, #360]	@ (3418ae20 <RCCEx_GetUARTCLKFreq+0x304>)
3418acb8:	4293      	cmp	r3, r2
3418acba:	d053      	beq.n	3418ad64 <RCCEx_GetUARTCLKFreq+0x248>
3418acbc:	4a58      	ldr	r2, [pc, #352]	@ (3418ae20 <RCCEx_GetUARTCLKFreq+0x304>)
3418acbe:	4293      	cmp	r3, r2
3418acc0:	f200 8141 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418acc4:	4a57      	ldr	r2, [pc, #348]	@ (3418ae24 <RCCEx_GetUARTCLKFreq+0x308>)
3418acc6:	4293      	cmp	r3, r2
3418acc8:	d04c      	beq.n	3418ad64 <RCCEx_GetUARTCLKFreq+0x248>
3418acca:	4a56      	ldr	r2, [pc, #344]	@ (3418ae24 <RCCEx_GetUARTCLKFreq+0x308>)
3418accc:	4293      	cmp	r3, r2
3418acce:	f200 813a 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418acd2:	4a55      	ldr	r2, [pc, #340]	@ (3418ae28 <RCCEx_GetUARTCLKFreq+0x30c>)
3418acd4:	4293      	cmp	r3, r2
3418acd6:	d045      	beq.n	3418ad64 <RCCEx_GetUARTCLKFreq+0x248>
3418acd8:	4a53      	ldr	r2, [pc, #332]	@ (3418ae28 <RCCEx_GetUARTCLKFreq+0x30c>)
3418acda:	4293      	cmp	r3, r2
3418acdc:	f200 8133 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ace0:	4a52      	ldr	r2, [pc, #328]	@ (3418ae2c <RCCEx_GetUARTCLKFreq+0x310>)
3418ace2:	4293      	cmp	r3, r2
3418ace4:	d03e      	beq.n	3418ad64 <RCCEx_GetUARTCLKFreq+0x248>
3418ace6:	4a51      	ldr	r2, [pc, #324]	@ (3418ae2c <RCCEx_GetUARTCLKFreq+0x310>)
3418ace8:	4293      	cmp	r3, r2
3418acea:	f200 812c 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418acee:	4a50      	ldr	r2, [pc, #320]	@ (3418ae30 <RCCEx_GetUARTCLKFreq+0x314>)
3418acf0:	4293      	cmp	r3, r2
3418acf2:	d037      	beq.n	3418ad64 <RCCEx_GetUARTCLKFreq+0x248>
3418acf4:	4a4e      	ldr	r2, [pc, #312]	@ (3418ae30 <RCCEx_GetUARTCLKFreq+0x314>)
3418acf6:	4293      	cmp	r3, r2
3418acf8:	f200 8125 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418acfc:	4a4d      	ldr	r2, [pc, #308]	@ (3418ae34 <RCCEx_GetUARTCLKFreq+0x318>)
3418acfe:	4293      	cmp	r3, r2
3418ad00:	d018      	beq.n	3418ad34 <RCCEx_GetUARTCLKFreq+0x218>
3418ad02:	4a4c      	ldr	r2, [pc, #304]	@ (3418ae34 <RCCEx_GetUARTCLKFreq+0x318>)
3418ad04:	4293      	cmp	r3, r2
3418ad06:	f200 811e 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ad0a:	4a4b      	ldr	r2, [pc, #300]	@ (3418ae38 <RCCEx_GetUARTCLKFreq+0x31c>)
3418ad0c:	4293      	cmp	r3, r2
3418ad0e:	d011      	beq.n	3418ad34 <RCCEx_GetUARTCLKFreq+0x218>
3418ad10:	4a49      	ldr	r2, [pc, #292]	@ (3418ae38 <RCCEx_GetUARTCLKFreq+0x31c>)
3418ad12:	4293      	cmp	r3, r2
3418ad14:	f200 8117 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ad18:	4a48      	ldr	r2, [pc, #288]	@ (3418ae3c <RCCEx_GetUARTCLKFreq+0x320>)
3418ad1a:	4293      	cmp	r3, r2
3418ad1c:	d00a      	beq.n	3418ad34 <RCCEx_GetUARTCLKFreq+0x218>
3418ad1e:	4a47      	ldr	r2, [pc, #284]	@ (3418ae3c <RCCEx_GetUARTCLKFreq+0x320>)
3418ad20:	4293      	cmp	r3, r2
3418ad22:	f200 8110 	bhi.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
3418ad26:	4a46      	ldr	r2, [pc, #280]	@ (3418ae40 <RCCEx_GetUARTCLKFreq+0x324>)
3418ad28:	4293      	cmp	r3, r2
3418ad2a:	d00f      	beq.n	3418ad4c <RCCEx_GetUARTCLKFreq+0x230>
3418ad2c:	4a45      	ldr	r2, [pc, #276]	@ (3418ae44 <RCCEx_GetUARTCLKFreq+0x328>)
3418ad2e:	4293      	cmp	r3, r2
3418ad30:	f040 8109 	bne.w	3418af46 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ad34:	f7f8 f9b8 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418ad38:	4603      	mov	r3, r0
3418ad3a:	4618      	mov	r0, r3
3418ad3c:	f7fd f944 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418ad40:	4603      	mov	r3, r0
3418ad42:	4618      	mov	r0, r3
3418ad44:	f7fd f951 	bl	34187fea <RCCEx_GetPCLK1Freq>
3418ad48:	60f8      	str	r0, [r7, #12]
      break;
3418ad4a:	e107      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ad4c:	f7f8 f9ac 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418ad50:	4603      	mov	r3, r0
3418ad52:	4618      	mov	r0, r3
3418ad54:	f7fd f938 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418ad58:	4603      	mov	r3, r0
3418ad5a:	4618      	mov	r0, r3
3418ad5c:	f7fd f955 	bl	3418800a <RCCEx_GetPCLK2Freq>
3418ad60:	60f8      	str	r0, [r7, #12]
      break;
3418ad62:	e0fb      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ad64:	2007      	movs	r0, #7
3418ad66:	f7fd fc1b 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418ad6a:	60f8      	str	r0, [r7, #12]
      break;
3418ad6c:	e0f6      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418ad6e:	f7f9 fdbf 	bl	341848f0 <LL_RCC_IC9_IsEnabled>
3418ad72:	4603      	mov	r3, r0
3418ad74:	2b00      	cmp	r3, #0
3418ad76:	f000 80e8 	beq.w	3418af4a <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418ad7a:	f7f9 fddb 	bl	34184934 <LL_RCC_IC9_GetDivider>
3418ad7e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418ad80:	f7f9 fdca 	bl	34184918 <LL_RCC_IC9_GetSource>
3418ad84:	4603      	mov	r3, r0
3418ad86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad8a:	d06f      	beq.n	3418ae6c <RCCEx_GetUARTCLKFreq+0x350>
3418ad8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad90:	d875      	bhi.n	3418ae7e <RCCEx_GetUARTCLKFreq+0x362>
3418ad92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad96:	d060      	beq.n	3418ae5a <RCCEx_GetUARTCLKFreq+0x33e>
3418ad98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad9c:	d86f      	bhi.n	3418ae7e <RCCEx_GetUARTCLKFreq+0x362>
3418ad9e:	2b00      	cmp	r3, #0
3418ada0:	d003      	beq.n	3418adaa <RCCEx_GetUARTCLKFreq+0x28e>
3418ada2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ada6:	d04f      	beq.n	3418ae48 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ada8:	e069      	b.n	3418ae7e <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418adaa:	f7fc fff5 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418adae:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418adb0:	68fa      	ldr	r2, [r7, #12]
3418adb2:	68bb      	ldr	r3, [r7, #8]
3418adb4:	fbb2 f3f3 	udiv	r3, r2, r3
3418adb8:	60fb      	str	r3, [r7, #12]
            break;
3418adba:	e061      	b.n	3418ae80 <RCCEx_GetUARTCLKFreq+0x364>
3418adbc:	07061c30 	.word	0x07061c30
3418adc0:	07061830 	.word	0x07061830
3418adc4:	07061030 	.word	0x07061030
3418adc8:	07060c30 	.word	0x07060c30
3418adcc:	07060034 	.word	0x07060034
3418add0:	07051c30 	.word	0x07051c30
3418add4:	07051830 	.word	0x07051830
3418add8:	07051030 	.word	0x07051030
3418addc:	07050c30 	.word	0x07050c30
3418ade0:	07050034 	.word	0x07050034
3418ade4:	07041c30 	.word	0x07041c30
3418ade8:	07041830 	.word	0x07041830
3418adec:	07041030 	.word	0x07041030
3418adf0:	07040c30 	.word	0x07040c30
3418adf4:	07040034 	.word	0x07040034
3418adf8:	07031c30 	.word	0x07031c30
3418adfc:	07031830 	.word	0x07031830
3418ae00:	07031030 	.word	0x07031030
3418ae04:	07030c30 	.word	0x07030c30
3418ae08:	07030034 	.word	0x07030034
3418ae0c:	07021c30 	.word	0x07021c30
3418ae10:	07021830 	.word	0x07021830
3418ae14:	07021030 	.word	0x07021030
3418ae18:	07020c30 	.word	0x07020c30
3418ae1c:	07020034 	.word	0x07020034
3418ae20:	07011c30 	.word	0x07011c30
3418ae24:	07011830 	.word	0x07011830
3418ae28:	07011030 	.word	0x07011030
3418ae2c:	07010c30 	.word	0x07010c30
3418ae30:	07010034 	.word	0x07010034
3418ae34:	07001c30 	.word	0x07001c30
3418ae38:	07001830 	.word	0x07001830
3418ae3c:	07001030 	.word	0x07001030
3418ae40:	07000034 	.word	0x07000034
3418ae44:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ae48:	f7fc ffec 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418ae4c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ae4e:	68fa      	ldr	r2, [r7, #12]
3418ae50:	68bb      	ldr	r3, [r7, #8]
3418ae52:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae56:	60fb      	str	r3, [r7, #12]
            break;
3418ae58:	e012      	b.n	3418ae80 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ae5a:	f7fd f829 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418ae5e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ae60:	68fa      	ldr	r2, [r7, #12]
3418ae62:	68bb      	ldr	r3, [r7, #8]
3418ae64:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae68:	60fb      	str	r3, [r7, #12]
            break;
3418ae6a:	e009      	b.n	3418ae80 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ae6c:	f7fd f866 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418ae70:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ae72:	68fa      	ldr	r2, [r7, #12]
3418ae74:	68bb      	ldr	r3, [r7, #8]
3418ae76:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae7a:	60fb      	str	r3, [r7, #12]
            break;
3418ae7c:	e000      	b.n	3418ae80 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418ae7e:	bf00      	nop
        }
      }
      break;
3418ae80:	e063      	b.n	3418af4a <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418ae82:	f7f9 fe35 	bl	34184af0 <LL_RCC_IC14_IsEnabled>
3418ae86:	4603      	mov	r3, r0
3418ae88:	2b00      	cmp	r3, #0
3418ae8a:	d060      	beq.n	3418af4e <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418ae8c:	f7f9 fe52 	bl	34184b34 <LL_RCC_IC14_GetDivider>
3418ae90:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418ae92:	f7f9 fe41 	bl	34184b18 <LL_RCC_IC14_GetSource>
3418ae96:	4603      	mov	r3, r0
3418ae98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae9c:	d029      	beq.n	3418aef2 <RCCEx_GetUARTCLKFreq+0x3d6>
3418ae9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aea2:	d82f      	bhi.n	3418af04 <RCCEx_GetUARTCLKFreq+0x3e8>
3418aea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aea8:	d01a      	beq.n	3418aee0 <RCCEx_GetUARTCLKFreq+0x3c4>
3418aeaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aeae:	d829      	bhi.n	3418af04 <RCCEx_GetUARTCLKFreq+0x3e8>
3418aeb0:	2b00      	cmp	r3, #0
3418aeb2:	d003      	beq.n	3418aebc <RCCEx_GetUARTCLKFreq+0x3a0>
3418aeb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aeb8:	d009      	beq.n	3418aece <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418aeba:	e023      	b.n	3418af04 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aebc:	f7fc ff6c 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418aec0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aec2:	68fa      	ldr	r2, [r7, #12]
3418aec4:	68bb      	ldr	r3, [r7, #8]
3418aec6:	fbb2 f3f3 	udiv	r3, r2, r3
3418aeca:	60fb      	str	r3, [r7, #12]
            break;
3418aecc:	e01b      	b.n	3418af06 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aece:	f7fc ffa9 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418aed2:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aed4:	68fa      	ldr	r2, [r7, #12]
3418aed6:	68bb      	ldr	r3, [r7, #8]
3418aed8:	fbb2 f3f3 	udiv	r3, r2, r3
3418aedc:	60fb      	str	r3, [r7, #12]
            break;
3418aede:	e012      	b.n	3418af06 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aee0:	f7fc ffe6 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418aee4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aee6:	68fa      	ldr	r2, [r7, #12]
3418aee8:	68bb      	ldr	r3, [r7, #8]
3418aeea:	fbb2 f3f3 	udiv	r3, r2, r3
3418aeee:	60fb      	str	r3, [r7, #12]
            break;
3418aef0:	e009      	b.n	3418af06 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aef2:	f7fd f823 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418aef6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aef8:	68fa      	ldr	r2, [r7, #12]
3418aefa:	68bb      	ldr	r3, [r7, #8]
3418aefc:	fbb2 f3f3 	udiv	r3, r2, r3
3418af00:	60fb      	str	r3, [r7, #12]
            break;
3418af02:	e000      	b.n	3418af06 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418af04:	bf00      	nop
        }
      }
      break;
3418af06:	e022      	b.n	3418af4e <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418af08:	f7f8 fcce 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418af0c:	4603      	mov	r3, r0
3418af0e:	2b00      	cmp	r3, #0
3418af10:	d01f      	beq.n	3418af52 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418af12:	f7f8 fcdb 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418af16:	4603      	mov	r3, r0
3418af18:	09db      	lsrs	r3, r3, #7
3418af1a:	4a13      	ldr	r2, [pc, #76]	@ (3418af68 <RCCEx_GetUARTCLKFreq+0x44c>)
3418af1c:	fa22 f303 	lsr.w	r3, r2, r3
3418af20:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af22:	e016      	b.n	3418af52 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418af24:	f7f8 fce0 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418af28:	4603      	mov	r3, r0
3418af2a:	2b00      	cmp	r3, #0
3418af2c:	d013      	beq.n	3418af56 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418af2e:	4b0f      	ldr	r3, [pc, #60]	@ (3418af6c <RCCEx_GetUARTCLKFreq+0x450>)
3418af30:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af32:	e010      	b.n	3418af56 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418af34:	f7f8 fcf8 	bl	34183928 <LL_RCC_LSE_IsReady>
3418af38:	4603      	mov	r3, r0
3418af3a:	2b00      	cmp	r3, #0
3418af3c:	d00d      	beq.n	3418af5a <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418af42:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af44:	e009      	b.n	3418af5a <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418af46:	bf00      	nop
3418af48:	e008      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418af4a:	bf00      	nop
3418af4c:	e006      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418af4e:	bf00      	nop
3418af50:	e004      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418af52:	bf00      	nop
3418af54:	e002      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418af56:	bf00      	nop
3418af58:	e000      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418af5a:	bf00      	nop
  }

  return uart_frequency;
3418af5c:	68fb      	ldr	r3, [r7, #12]
}
3418af5e:	4618      	mov	r0, r3
3418af60:	3710      	adds	r7, #16
3418af62:	46bd      	mov	sp, r7
3418af64:	bd80      	pop	{r7, pc}
3418af66:	bf00      	nop
3418af68:	03d09000 	.word	0x03d09000
3418af6c:	003d0900 	.word	0x003d0900

3418af70 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418af70:	b580      	push	{r7, lr}
3418af72:	b084      	sub	sp, #16
3418af74:	af00      	add	r7, sp, #0
3418af76:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418af78:	2300      	movs	r3, #0
3418af7a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418af7c:	6878      	ldr	r0, [r7, #4]
3418af7e:	f7f9 f87b 	bl	34184078 <LL_RCC_GetUSARTClockSource>
3418af82:	4603      	mov	r3, r0
3418af84:	4aa2      	ldr	r2, [pc, #648]	@ (3418b210 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418af86:	4293      	cmp	r3, r2
3418af88:	f000 81e8 	beq.w	3418b35c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418af8c:	4aa0      	ldr	r2, [pc, #640]	@ (3418b210 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418af8e:	4293      	cmp	r3, r2
3418af90:	f200 8203 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418af94:	4a9f      	ldr	r2, [pc, #636]	@ (3418b214 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418af96:	4293      	cmp	r3, r2
3418af98:	f000 81e0 	beq.w	3418b35c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418af9c:	4a9d      	ldr	r2, [pc, #628]	@ (3418b214 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418af9e:	4293      	cmp	r3, r2
3418afa0:	f200 81fb 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418afa4:	4a9c      	ldr	r2, [pc, #624]	@ (3418b218 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418afa6:	4293      	cmp	r3, r2
3418afa8:	f000 81d8 	beq.w	3418b35c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418afac:	4a9a      	ldr	r2, [pc, #616]	@ (3418b218 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418afae:	4293      	cmp	r3, r2
3418afb0:	f200 81f3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418afb4:	4a99      	ldr	r2, [pc, #612]	@ (3418b21c <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418afb6:	4293      	cmp	r3, r2
3418afb8:	f000 81d0 	beq.w	3418b35c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418afbc:	4a97      	ldr	r2, [pc, #604]	@ (3418b21c <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418afbe:	4293      	cmp	r3, r2
3418afc0:	f200 81eb 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418afc4:	4a96      	ldr	r2, [pc, #600]	@ (3418b220 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418afc6:	4293      	cmp	r3, r2
3418afc8:	f000 81c8 	beq.w	3418b35c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418afcc:	4a94      	ldr	r2, [pc, #592]	@ (3418b220 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418afce:	4293      	cmp	r3, r2
3418afd0:	f200 81e3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418afd4:	4a93      	ldr	r2, [pc, #588]	@ (3418b224 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418afd6:	4293      	cmp	r3, r2
3418afd8:	f000 81ce 	beq.w	3418b378 <RCCEx_GetUSARTCLKFreq+0x408>
3418afdc:	4a91      	ldr	r2, [pc, #580]	@ (3418b224 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418afde:	4293      	cmp	r3, r2
3418afe0:	f200 81db 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418afe4:	4a90      	ldr	r2, [pc, #576]	@ (3418b228 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418afe6:	4293      	cmp	r3, r2
3418afe8:	f000 81c6 	beq.w	3418b378 <RCCEx_GetUSARTCLKFreq+0x408>
3418afec:	4a8e      	ldr	r2, [pc, #568]	@ (3418b228 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418afee:	4293      	cmp	r3, r2
3418aff0:	f200 81d3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418aff4:	4a8d      	ldr	r2, [pc, #564]	@ (3418b22c <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418aff6:	4293      	cmp	r3, r2
3418aff8:	f000 81be 	beq.w	3418b378 <RCCEx_GetUSARTCLKFreq+0x408>
3418affc:	4a8b      	ldr	r2, [pc, #556]	@ (3418b22c <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418affe:	4293      	cmp	r3, r2
3418b000:	f200 81cb 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b004:	4a8a      	ldr	r2, [pc, #552]	@ (3418b230 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418b006:	4293      	cmp	r3, r2
3418b008:	f000 81b6 	beq.w	3418b378 <RCCEx_GetUSARTCLKFreq+0x408>
3418b00c:	4a88      	ldr	r2, [pc, #544]	@ (3418b230 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418b00e:	4293      	cmp	r3, r2
3418b010:	f200 81c3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b014:	4a87      	ldr	r2, [pc, #540]	@ (3418b234 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418b016:	4293      	cmp	r3, r2
3418b018:	f000 81ae 	beq.w	3418b378 <RCCEx_GetUSARTCLKFreq+0x408>
3418b01c:	4a85      	ldr	r2, [pc, #532]	@ (3418b234 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418b01e:	4293      	cmp	r3, r2
3418b020:	f200 81bb 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b024:	4a84      	ldr	r2, [pc, #528]	@ (3418b238 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418b026:	4293      	cmp	r3, r2
3418b028:	f000 81ae 	beq.w	3418b388 <RCCEx_GetUSARTCLKFreq+0x418>
3418b02c:	4a82      	ldr	r2, [pc, #520]	@ (3418b238 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418b02e:	4293      	cmp	r3, r2
3418b030:	f200 81b3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b034:	4a81      	ldr	r2, [pc, #516]	@ (3418b23c <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418b036:	4293      	cmp	r3, r2
3418b038:	f000 81a6 	beq.w	3418b388 <RCCEx_GetUSARTCLKFreq+0x418>
3418b03c:	4a7f      	ldr	r2, [pc, #508]	@ (3418b23c <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418b03e:	4293      	cmp	r3, r2
3418b040:	f200 81ab 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b044:	4a7e      	ldr	r2, [pc, #504]	@ (3418b240 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418b046:	4293      	cmp	r3, r2
3418b048:	f000 819e 	beq.w	3418b388 <RCCEx_GetUSARTCLKFreq+0x418>
3418b04c:	4a7c      	ldr	r2, [pc, #496]	@ (3418b240 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418b04e:	4293      	cmp	r3, r2
3418b050:	f200 81a3 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b054:	4a7b      	ldr	r2, [pc, #492]	@ (3418b244 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418b056:	4293      	cmp	r3, r2
3418b058:	f000 8196 	beq.w	3418b388 <RCCEx_GetUSARTCLKFreq+0x418>
3418b05c:	4a79      	ldr	r2, [pc, #484]	@ (3418b244 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418b05e:	4293      	cmp	r3, r2
3418b060:	f200 819b 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b064:	4a78      	ldr	r2, [pc, #480]	@ (3418b248 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418b066:	4293      	cmp	r3, r2
3418b068:	f000 818e 	beq.w	3418b388 <RCCEx_GetUSARTCLKFreq+0x418>
3418b06c:	4a76      	ldr	r2, [pc, #472]	@ (3418b248 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418b06e:	4293      	cmp	r3, r2
3418b070:	f200 8193 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b074:	4a75      	ldr	r2, [pc, #468]	@ (3418b24c <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418b076:	4293      	cmp	r3, r2
3418b078:	f000 812d 	beq.w	3418b2d6 <RCCEx_GetUSARTCLKFreq+0x366>
3418b07c:	4a73      	ldr	r2, [pc, #460]	@ (3418b24c <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418b07e:	4293      	cmp	r3, r2
3418b080:	f200 818b 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b084:	4a72      	ldr	r2, [pc, #456]	@ (3418b250 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418b086:	4293      	cmp	r3, r2
3418b088:	f000 8125 	beq.w	3418b2d6 <RCCEx_GetUSARTCLKFreq+0x366>
3418b08c:	4a70      	ldr	r2, [pc, #448]	@ (3418b250 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418b08e:	4293      	cmp	r3, r2
3418b090:	f200 8183 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b094:	4a6f      	ldr	r2, [pc, #444]	@ (3418b254 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418b096:	4293      	cmp	r3, r2
3418b098:	f000 811d 	beq.w	3418b2d6 <RCCEx_GetUSARTCLKFreq+0x366>
3418b09c:	4a6d      	ldr	r2, [pc, #436]	@ (3418b254 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418b09e:	4293      	cmp	r3, r2
3418b0a0:	f200 817b 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0a4:	4a6c      	ldr	r2, [pc, #432]	@ (3418b258 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418b0a6:	4293      	cmp	r3, r2
3418b0a8:	f000 8115 	beq.w	3418b2d6 <RCCEx_GetUSARTCLKFreq+0x366>
3418b0ac:	4a6a      	ldr	r2, [pc, #424]	@ (3418b258 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418b0ae:	4293      	cmp	r3, r2
3418b0b0:	f200 8173 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0b4:	4a69      	ldr	r2, [pc, #420]	@ (3418b25c <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418b0b6:	4293      	cmp	r3, r2
3418b0b8:	f000 810d 	beq.w	3418b2d6 <RCCEx_GetUSARTCLKFreq+0x366>
3418b0bc:	4a67      	ldr	r2, [pc, #412]	@ (3418b25c <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418b0be:	4293      	cmp	r3, r2
3418b0c0:	f200 816b 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0c4:	4a66      	ldr	r2, [pc, #408]	@ (3418b260 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418b0c6:	4293      	cmp	r3, r2
3418b0c8:	d07b      	beq.n	3418b1c2 <RCCEx_GetUSARTCLKFreq+0x252>
3418b0ca:	4a65      	ldr	r2, [pc, #404]	@ (3418b260 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418b0cc:	4293      	cmp	r3, r2
3418b0ce:	f200 8164 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0d2:	4a64      	ldr	r2, [pc, #400]	@ (3418b264 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418b0d4:	4293      	cmp	r3, r2
3418b0d6:	d074      	beq.n	3418b1c2 <RCCEx_GetUSARTCLKFreq+0x252>
3418b0d8:	4a62      	ldr	r2, [pc, #392]	@ (3418b264 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418b0da:	4293      	cmp	r3, r2
3418b0dc:	f200 815d 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0e0:	4a61      	ldr	r2, [pc, #388]	@ (3418b268 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418b0e2:	4293      	cmp	r3, r2
3418b0e4:	d06d      	beq.n	3418b1c2 <RCCEx_GetUSARTCLKFreq+0x252>
3418b0e6:	4a60      	ldr	r2, [pc, #384]	@ (3418b268 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418b0e8:	4293      	cmp	r3, r2
3418b0ea:	f200 8156 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0ee:	4a5f      	ldr	r2, [pc, #380]	@ (3418b26c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418b0f0:	4293      	cmp	r3, r2
3418b0f2:	d066      	beq.n	3418b1c2 <RCCEx_GetUSARTCLKFreq+0x252>
3418b0f4:	4a5d      	ldr	r2, [pc, #372]	@ (3418b26c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418b0f6:	4293      	cmp	r3, r2
3418b0f8:	f200 814f 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0fc:	4a5c      	ldr	r2, [pc, #368]	@ (3418b270 <RCCEx_GetUSARTCLKFreq+0x300>)
3418b0fe:	4293      	cmp	r3, r2
3418b100:	d05f      	beq.n	3418b1c2 <RCCEx_GetUSARTCLKFreq+0x252>
3418b102:	4a5b      	ldr	r2, [pc, #364]	@ (3418b270 <RCCEx_GetUSARTCLKFreq+0x300>)
3418b104:	4293      	cmp	r3, r2
3418b106:	f200 8148 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b10a:	4a5a      	ldr	r2, [pc, #360]	@ (3418b274 <RCCEx_GetUSARTCLKFreq+0x304>)
3418b10c:	4293      	cmp	r3, r2
3418b10e:	d053      	beq.n	3418b1b8 <RCCEx_GetUSARTCLKFreq+0x248>
3418b110:	4a58      	ldr	r2, [pc, #352]	@ (3418b274 <RCCEx_GetUSARTCLKFreq+0x304>)
3418b112:	4293      	cmp	r3, r2
3418b114:	f200 8141 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b118:	4a57      	ldr	r2, [pc, #348]	@ (3418b278 <RCCEx_GetUSARTCLKFreq+0x308>)
3418b11a:	4293      	cmp	r3, r2
3418b11c:	d04c      	beq.n	3418b1b8 <RCCEx_GetUSARTCLKFreq+0x248>
3418b11e:	4a56      	ldr	r2, [pc, #344]	@ (3418b278 <RCCEx_GetUSARTCLKFreq+0x308>)
3418b120:	4293      	cmp	r3, r2
3418b122:	f200 813a 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b126:	4a55      	ldr	r2, [pc, #340]	@ (3418b27c <RCCEx_GetUSARTCLKFreq+0x30c>)
3418b128:	4293      	cmp	r3, r2
3418b12a:	d045      	beq.n	3418b1b8 <RCCEx_GetUSARTCLKFreq+0x248>
3418b12c:	4a53      	ldr	r2, [pc, #332]	@ (3418b27c <RCCEx_GetUSARTCLKFreq+0x30c>)
3418b12e:	4293      	cmp	r3, r2
3418b130:	f200 8133 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b134:	4a52      	ldr	r2, [pc, #328]	@ (3418b280 <RCCEx_GetUSARTCLKFreq+0x310>)
3418b136:	4293      	cmp	r3, r2
3418b138:	d03e      	beq.n	3418b1b8 <RCCEx_GetUSARTCLKFreq+0x248>
3418b13a:	4a51      	ldr	r2, [pc, #324]	@ (3418b280 <RCCEx_GetUSARTCLKFreq+0x310>)
3418b13c:	4293      	cmp	r3, r2
3418b13e:	f200 812c 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b142:	4a50      	ldr	r2, [pc, #320]	@ (3418b284 <RCCEx_GetUSARTCLKFreq+0x314>)
3418b144:	4293      	cmp	r3, r2
3418b146:	d037      	beq.n	3418b1b8 <RCCEx_GetUSARTCLKFreq+0x248>
3418b148:	4a4e      	ldr	r2, [pc, #312]	@ (3418b284 <RCCEx_GetUSARTCLKFreq+0x314>)
3418b14a:	4293      	cmp	r3, r2
3418b14c:	f200 8125 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b150:	4a4d      	ldr	r2, [pc, #308]	@ (3418b288 <RCCEx_GetUSARTCLKFreq+0x318>)
3418b152:	4293      	cmp	r3, r2
3418b154:	d018      	beq.n	3418b188 <RCCEx_GetUSARTCLKFreq+0x218>
3418b156:	4a4c      	ldr	r2, [pc, #304]	@ (3418b288 <RCCEx_GetUSARTCLKFreq+0x318>)
3418b158:	4293      	cmp	r3, r2
3418b15a:	f200 811e 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b15e:	4a4b      	ldr	r2, [pc, #300]	@ (3418b28c <RCCEx_GetUSARTCLKFreq+0x31c>)
3418b160:	4293      	cmp	r3, r2
3418b162:	d01d      	beq.n	3418b1a0 <RCCEx_GetUSARTCLKFreq+0x230>
3418b164:	4a49      	ldr	r2, [pc, #292]	@ (3418b28c <RCCEx_GetUSARTCLKFreq+0x31c>)
3418b166:	4293      	cmp	r3, r2
3418b168:	f200 8117 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b16c:	4a48      	ldr	r2, [pc, #288]	@ (3418b290 <RCCEx_GetUSARTCLKFreq+0x320>)
3418b16e:	4293      	cmp	r3, r2
3418b170:	d00a      	beq.n	3418b188 <RCCEx_GetUSARTCLKFreq+0x218>
3418b172:	4a47      	ldr	r2, [pc, #284]	@ (3418b290 <RCCEx_GetUSARTCLKFreq+0x320>)
3418b174:	4293      	cmp	r3, r2
3418b176:	f200 8110 	bhi.w	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
3418b17a:	4a46      	ldr	r2, [pc, #280]	@ (3418b294 <RCCEx_GetUSARTCLKFreq+0x324>)
3418b17c:	4293      	cmp	r3, r2
3418b17e:	d003      	beq.n	3418b188 <RCCEx_GetUSARTCLKFreq+0x218>
3418b180:	4a45      	ldr	r2, [pc, #276]	@ (3418b298 <RCCEx_GetUSARTCLKFreq+0x328>)
3418b182:	4293      	cmp	r3, r2
3418b184:	d00c      	beq.n	3418b1a0 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b186:	e108      	b.n	3418b39a <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b188:	f7f7 ff8e 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418b18c:	4603      	mov	r3, r0
3418b18e:	4618      	mov	r0, r3
3418b190:	f7fc ff1a 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418b194:	4603      	mov	r3, r0
3418b196:	4618      	mov	r0, r3
3418b198:	f7fc ff37 	bl	3418800a <RCCEx_GetPCLK2Freq>
3418b19c:	60f8      	str	r0, [r7, #12]
      break;
3418b19e:	e107      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b1a0:	f7f7 ff82 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418b1a4:	4603      	mov	r3, r0
3418b1a6:	4618      	mov	r0, r3
3418b1a8:	f7fc ff0e 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418b1ac:	4603      	mov	r3, r0
3418b1ae:	4618      	mov	r0, r3
3418b1b0:	f7fc ff1b 	bl	34187fea <RCCEx_GetPCLK1Freq>
3418b1b4:	60f8      	str	r0, [r7, #12]
      break;
3418b1b6:	e0fb      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b1b8:	2007      	movs	r0, #7
3418b1ba:	f7fd f9f1 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418b1be:	60f8      	str	r0, [r7, #12]
      break;
3418b1c0:	e0f6      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418b1c2:	f7f9 fb95 	bl	341848f0 <LL_RCC_IC9_IsEnabled>
3418b1c6:	4603      	mov	r3, r0
3418b1c8:	2b00      	cmp	r3, #0
3418b1ca:	f000 80e8 	beq.w	3418b39e <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418b1ce:	f7f9 fbb1 	bl	34184934 <LL_RCC_IC9_GetDivider>
3418b1d2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418b1d4:	f7f9 fba0 	bl	34184918 <LL_RCC_IC9_GetSource>
3418b1d8:	4603      	mov	r3, r0
3418b1da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1de:	d06f      	beq.n	3418b2c0 <RCCEx_GetUSARTCLKFreq+0x350>
3418b1e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1e4:	d875      	bhi.n	3418b2d2 <RCCEx_GetUSARTCLKFreq+0x362>
3418b1e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1ea:	d060      	beq.n	3418b2ae <RCCEx_GetUSARTCLKFreq+0x33e>
3418b1ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b1f0:	d86f      	bhi.n	3418b2d2 <RCCEx_GetUSARTCLKFreq+0x362>
3418b1f2:	2b00      	cmp	r3, #0
3418b1f4:	d003      	beq.n	3418b1fe <RCCEx_GetUSARTCLKFreq+0x28e>
3418b1f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b1fa:	d04f      	beq.n	3418b29c <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418b1fc:	e069      	b.n	3418b2d2 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b1fe:	f7fc fdcb 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418b202:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b204:	68fa      	ldr	r2, [r7, #12]
3418b206:	68bb      	ldr	r3, [r7, #8]
3418b208:	fbb2 f3f3 	udiv	r3, r2, r3
3418b20c:	60fb      	str	r3, [r7, #12]
            break;
3418b20e:	e061      	b.n	3418b2d4 <RCCEx_GetUSARTCLKFreq+0x364>
3418b210:	07061430 	.word	0x07061430
3418b214:	07060830 	.word	0x07060830
3418b218:	07060434 	.word	0x07060434
3418b21c:	07060430 	.word	0x07060430
3418b220:	07060030 	.word	0x07060030
3418b224:	07051430 	.word	0x07051430
3418b228:	07050830 	.word	0x07050830
3418b22c:	07050434 	.word	0x07050434
3418b230:	07050430 	.word	0x07050430
3418b234:	07050030 	.word	0x07050030
3418b238:	07041430 	.word	0x07041430
3418b23c:	07040830 	.word	0x07040830
3418b240:	07040434 	.word	0x07040434
3418b244:	07040430 	.word	0x07040430
3418b248:	07040030 	.word	0x07040030
3418b24c:	07031430 	.word	0x07031430
3418b250:	07030830 	.word	0x07030830
3418b254:	07030434 	.word	0x07030434
3418b258:	07030430 	.word	0x07030430
3418b25c:	07030030 	.word	0x07030030
3418b260:	07021430 	.word	0x07021430
3418b264:	07020830 	.word	0x07020830
3418b268:	07020434 	.word	0x07020434
3418b26c:	07020430 	.word	0x07020430
3418b270:	07020030 	.word	0x07020030
3418b274:	07011430 	.word	0x07011430
3418b278:	07010830 	.word	0x07010830
3418b27c:	07010434 	.word	0x07010434
3418b280:	07010430 	.word	0x07010430
3418b284:	07010030 	.word	0x07010030
3418b288:	07001430 	.word	0x07001430
3418b28c:	07000830 	.word	0x07000830
3418b290:	07000434 	.word	0x07000434
3418b294:	07000030 	.word	0x07000030
3418b298:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b29c:	f7fc fdc2 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418b2a0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b2a2:	68fa      	ldr	r2, [r7, #12]
3418b2a4:	68bb      	ldr	r3, [r7, #8]
3418b2a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2aa:	60fb      	str	r3, [r7, #12]
            break;
3418b2ac:	e012      	b.n	3418b2d4 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b2ae:	f7fc fdff 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b2b2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b2b4:	68fa      	ldr	r2, [r7, #12]
3418b2b6:	68bb      	ldr	r3, [r7, #8]
3418b2b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2bc:	60fb      	str	r3, [r7, #12]
            break;
3418b2be:	e009      	b.n	3418b2d4 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b2c0:	f7fc fe3c 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418b2c4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b2c6:	68fa      	ldr	r2, [r7, #12]
3418b2c8:	68bb      	ldr	r3, [r7, #8]
3418b2ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2ce:	60fb      	str	r3, [r7, #12]
            break;
3418b2d0:	e000      	b.n	3418b2d4 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418b2d2:	bf00      	nop
      break;
3418b2d4:	e063      	b.n	3418b39e <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418b2d6:	f7f9 fc0b 	bl	34184af0 <LL_RCC_IC14_IsEnabled>
3418b2da:	4603      	mov	r3, r0
3418b2dc:	2b00      	cmp	r3, #0
3418b2de:	d060      	beq.n	3418b3a2 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418b2e0:	f7f9 fc28 	bl	34184b34 <LL_RCC_IC14_GetDivider>
3418b2e4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418b2e6:	f7f9 fc17 	bl	34184b18 <LL_RCC_IC14_GetSource>
3418b2ea:	4603      	mov	r3, r0
3418b2ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b2f0:	d029      	beq.n	3418b346 <RCCEx_GetUSARTCLKFreq+0x3d6>
3418b2f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b2f6:	d82f      	bhi.n	3418b358 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b2fc:	d01a      	beq.n	3418b334 <RCCEx_GetUSARTCLKFreq+0x3c4>
3418b2fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b302:	d829      	bhi.n	3418b358 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418b304:	2b00      	cmp	r3, #0
3418b306:	d003      	beq.n	3418b310 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418b308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b30c:	d009      	beq.n	3418b322 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418b30e:	e023      	b.n	3418b358 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b310:	f7fc fd42 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418b314:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b316:	68fa      	ldr	r2, [r7, #12]
3418b318:	68bb      	ldr	r3, [r7, #8]
3418b31a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b31e:	60fb      	str	r3, [r7, #12]
            break;
3418b320:	e01b      	b.n	3418b35a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b322:	f7fc fd7f 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418b326:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b328:	68fa      	ldr	r2, [r7, #12]
3418b32a:	68bb      	ldr	r3, [r7, #8]
3418b32c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b330:	60fb      	str	r3, [r7, #12]
            break;
3418b332:	e012      	b.n	3418b35a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b334:	f7fc fdbc 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b338:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b33a:	68fa      	ldr	r2, [r7, #12]
3418b33c:	68bb      	ldr	r3, [r7, #8]
3418b33e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b342:	60fb      	str	r3, [r7, #12]
            break;
3418b344:	e009      	b.n	3418b35a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b346:	f7fc fdf9 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418b34a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b34c:	68fa      	ldr	r2, [r7, #12]
3418b34e:	68bb      	ldr	r3, [r7, #8]
3418b350:	fbb2 f3f3 	udiv	r3, r2, r3
3418b354:	60fb      	str	r3, [r7, #12]
            break;
3418b356:	e000      	b.n	3418b35a <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418b358:	bf00      	nop
      break;
3418b35a:	e022      	b.n	3418b3a2 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b35c:	f7f8 faa4 	bl	341838a8 <LL_RCC_HSI_IsReady>
3418b360:	4603      	mov	r3, r0
3418b362:	2b00      	cmp	r3, #0
3418b364:	d01f      	beq.n	3418b3a6 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b366:	f7f8 fab1 	bl	341838cc <LL_RCC_HSI_GetDivider>
3418b36a:	4603      	mov	r3, r0
3418b36c:	09db      	lsrs	r3, r3, #7
3418b36e:	4a13      	ldr	r2, [pc, #76]	@ (3418b3bc <RCCEx_GetUSARTCLKFreq+0x44c>)
3418b370:	fa22 f303 	lsr.w	r3, r2, r3
3418b374:	60fb      	str	r3, [r7, #12]
      break;
3418b376:	e016      	b.n	3418b3a6 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418b378:	f7f8 fab6 	bl	341838e8 <LL_RCC_MSI_IsReady>
3418b37c:	4603      	mov	r3, r0
3418b37e:	2b00      	cmp	r3, #0
3418b380:	d013      	beq.n	3418b3aa <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418b382:	4b0f      	ldr	r3, [pc, #60]	@ (3418b3c0 <RCCEx_GetUSARTCLKFreq+0x450>)
3418b384:	60fb      	str	r3, [r7, #12]
      break;
3418b386:	e010      	b.n	3418b3aa <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418b388:	f7f8 face 	bl	34183928 <LL_RCC_LSE_IsReady>
3418b38c:	4603      	mov	r3, r0
3418b38e:	2b00      	cmp	r3, #0
3418b390:	d00d      	beq.n	3418b3ae <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418b392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418b396:	60fb      	str	r3, [r7, #12]
      break;
3418b398:	e009      	b.n	3418b3ae <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418b39a:	bf00      	nop
3418b39c:	e008      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b39e:	bf00      	nop
3418b3a0:	e006      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3a2:	bf00      	nop
3418b3a4:	e004      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3a6:	bf00      	nop
3418b3a8:	e002      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3aa:	bf00      	nop
3418b3ac:	e000      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3ae:	bf00      	nop
  }

  return usart_frequency;
3418b3b0:	68fb      	ldr	r3, [r7, #12]
}
3418b3b2:	4618      	mov	r0, r3
3418b3b4:	3710      	adds	r7, #16
3418b3b6:	46bd      	mov	sp, r7
3418b3b8:	bd80      	pop	{r7, pc}
3418b3ba:	bf00      	nop
3418b3bc:	03d09000 	.word	0x03d09000
3418b3c0:	003d0900 	.word	0x003d0900

3418b3c4 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418b3c4:	b580      	push	{r7, lr}
3418b3c6:	b084      	sub	sp, #16
3418b3c8:	af00      	add	r7, sp, #0
3418b3ca:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b3cc:	2300      	movs	r3, #0
3418b3ce:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418b3d0:	6878      	ldr	r0, [r7, #4]
3418b3d2:	f7f8 fe69 	bl	341840a8 <LL_RCC_GetUSBClockSource>
3418b3d6:	4603      	mov	r3, r0
3418b3d8:	4a4b      	ldr	r2, [pc, #300]	@ (3418b508 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418b3da:	4293      	cmp	r3, r2
3418b3dc:	d035      	beq.n	3418b44a <RCCEx_GetOTGPHYCLKFreq+0x86>
3418b3de:	4a4a      	ldr	r2, [pc, #296]	@ (3418b508 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418b3e0:	4293      	cmp	r3, r2
3418b3e2:	f200 8085 	bhi.w	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b3e6:	4a49      	ldr	r2, [pc, #292]	@ (3418b50c <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418b3e8:	4293      	cmp	r3, r2
3418b3ea:	d02e      	beq.n	3418b44a <RCCEx_GetOTGPHYCLKFreq+0x86>
3418b3ec:	4a47      	ldr	r2, [pc, #284]	@ (3418b50c <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418b3ee:	4293      	cmp	r3, r2
3418b3f0:	d87e      	bhi.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b3f2:	4a47      	ldr	r2, [pc, #284]	@ (3418b510 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418b3f4:	4293      	cmp	r3, r2
3418b3f6:	d038      	beq.n	3418b46a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418b3f8:	4a45      	ldr	r2, [pc, #276]	@ (3418b510 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418b3fa:	4293      	cmp	r3, r2
3418b3fc:	d878      	bhi.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b3fe:	4a45      	ldr	r2, [pc, #276]	@ (3418b514 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418b400:	4293      	cmp	r3, r2
3418b402:	d032      	beq.n	3418b46a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418b404:	4a43      	ldr	r2, [pc, #268]	@ (3418b514 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418b406:	4293      	cmp	r3, r2
3418b408:	d872      	bhi.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b40a:	4a43      	ldr	r2, [pc, #268]	@ (3418b518 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418b40c:	4293      	cmp	r3, r2
3418b40e:	d00f      	beq.n	3418b430 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418b410:	4a41      	ldr	r2, [pc, #260]	@ (3418b518 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418b412:	4293      	cmp	r3, r2
3418b414:	d86c      	bhi.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b416:	4a41      	ldr	r2, [pc, #260]	@ (3418b51c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418b418:	4293      	cmp	r3, r2
3418b41a:	d009      	beq.n	3418b430 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418b41c:	4a3f      	ldr	r2, [pc, #252]	@ (3418b51c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418b41e:	4293      	cmp	r3, r2
3418b420:	d866      	bhi.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b422:	4a3f      	ldr	r2, [pc, #252]	@ (3418b520 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418b424:	4293      	cmp	r3, r2
3418b426:	d008      	beq.n	3418b43a <RCCEx_GetOTGPHYCLKFreq+0x76>
3418b428:	4a3e      	ldr	r2, [pc, #248]	@ (3418b524 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418b42a:	4293      	cmp	r3, r2
3418b42c:	d005      	beq.n	3418b43a <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b42e:	e05f      	b.n	3418b4f0 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b430:	2007      	movs	r0, #7
3418b432:	f7fd f8b5 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418b436:	60f8      	str	r0, [r7, #12]
      break;
3418b438:	e061      	b.n	3418b4fe <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b43a:	f7f8 fa23 	bl	34183884 <LL_RCC_HSE_IsReady>
3418b43e:	4603      	mov	r3, r0
3418b440:	2b00      	cmp	r3, #0
3418b442:	d057      	beq.n	3418b4f4 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418b444:	4b38      	ldr	r3, [pc, #224]	@ (3418b528 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418b446:	60fb      	str	r3, [r7, #12]
      break;
3418b448:	e054      	b.n	3418b4f4 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b44a:	f7f8 fa1b 	bl	34183884 <LL_RCC_HSE_IsReady>
3418b44e:	4603      	mov	r3, r0
3418b450:	2b00      	cmp	r3, #0
3418b452:	d051      	beq.n	3418b4f8 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418b454:	f7f8 fa04 	bl	34183860 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418b458:	4603      	mov	r3, r0
3418b45a:	2b00      	cmp	r3, #0
3418b45c:	d102      	bne.n	3418b464 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418b45e:	4b33      	ldr	r3, [pc, #204]	@ (3418b52c <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418b460:	60fb      	str	r3, [r7, #12]
      break;
3418b462:	e049      	b.n	3418b4f8 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418b464:	4b30      	ldr	r3, [pc, #192]	@ (3418b528 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418b466:	60fb      	str	r3, [r7, #12]
      break;
3418b468:	e046      	b.n	3418b4f8 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418b46a:	f7f9 fb81 	bl	34184b70 <LL_RCC_IC15_IsEnabled>
3418b46e:	4603      	mov	r3, r0
3418b470:	2b00      	cmp	r3, #0
3418b472:	d043      	beq.n	3418b4fc <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418b474:	f7f9 fb9e 	bl	34184bb4 <LL_RCC_IC15_GetDivider>
3418b478:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418b47a:	f7f9 fb8d 	bl	34184b98 <LL_RCC_IC15_GetSource>
3418b47e:	4603      	mov	r3, r0
3418b480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b484:	d029      	beq.n	3418b4da <RCCEx_GetOTGPHYCLKFreq+0x116>
3418b486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b48a:	d82f      	bhi.n	3418b4ec <RCCEx_GetOTGPHYCLKFreq+0x128>
3418b48c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b490:	d01a      	beq.n	3418b4c8 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418b492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b496:	d829      	bhi.n	3418b4ec <RCCEx_GetOTGPHYCLKFreq+0x128>
3418b498:	2b00      	cmp	r3, #0
3418b49a:	d003      	beq.n	3418b4a4 <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418b49c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b4a0:	d009      	beq.n	3418b4b6 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418b4a2:	e023      	b.n	3418b4ec <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b4a4:	f7fc fc78 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418b4a8:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b4aa:	68fa      	ldr	r2, [r7, #12]
3418b4ac:	68bb      	ldr	r3, [r7, #8]
3418b4ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4b2:	60fb      	str	r3, [r7, #12]
            break;
3418b4b4:	e01b      	b.n	3418b4ee <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b4b6:	f7fc fcb5 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418b4ba:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b4bc:	68fa      	ldr	r2, [r7, #12]
3418b4be:	68bb      	ldr	r3, [r7, #8]
3418b4c0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4c4:	60fb      	str	r3, [r7, #12]
            break;
3418b4c6:	e012      	b.n	3418b4ee <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b4c8:	f7fc fcf2 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b4cc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b4ce:	68fa      	ldr	r2, [r7, #12]
3418b4d0:	68bb      	ldr	r3, [r7, #8]
3418b4d2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4d6:	60fb      	str	r3, [r7, #12]
            break;
3418b4d8:	e009      	b.n	3418b4ee <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b4da:	f7fc fd2f 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418b4de:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b4e0:	68fa      	ldr	r2, [r7, #12]
3418b4e2:	68bb      	ldr	r3, [r7, #8]
3418b4e4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4e8:	60fb      	str	r3, [r7, #12]
            break;
3418b4ea:	e000      	b.n	3418b4ee <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418b4ec:	bf00      	nop
      break;
3418b4ee:	e005      	b.n	3418b4fc <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418b4f0:	bf00      	nop
3418b4f2:	e004      	b.n	3418b4fe <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b4f4:	bf00      	nop
3418b4f6:	e002      	b.n	3418b4fe <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b4f8:	bf00      	nop
3418b4fa:	e000      	b.n	3418b4fe <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b4fc:	bf00      	nop
  }

  return usb_frequency;
3418b4fe:	68fb      	ldr	r3, [r7, #12]
}
3418b500:	4618      	mov	r0, r3
3418b502:	3710      	adds	r7, #16
3418b504:	46bd      	mov	sp, r7
3418b506:	bd80      	pop	{r7, pc}
3418b508:	03031414 	.word	0x03031414
3418b50c:	03030c14 	.word	0x03030c14
3418b510:	03021414 	.word	0x03021414
3418b514:	03020c14 	.word	0x03020c14
3418b518:	03011414 	.word	0x03011414
3418b51c:	03010c14 	.word	0x03010c14
3418b520:	03000c14 	.word	0x03000c14
3418b524:	03001414 	.word	0x03001414
3418b528:	016e3600 	.word	0x016e3600
3418b52c:	02dc6c00 	.word	0x02dc6c00

3418b530 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418b530:	b580      	push	{r7, lr}
3418b532:	b084      	sub	sp, #16
3418b534:	af00      	add	r7, sp, #0
3418b536:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b538:	2300      	movs	r3, #0
3418b53a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418b53c:	6878      	ldr	r0, [r7, #4]
3418b53e:	f7f8 fdb3 	bl	341840a8 <LL_RCC_GetUSBClockSource>
3418b542:	4603      	mov	r3, r0
3418b544:	4a1a      	ldr	r2, [pc, #104]	@ (3418b5b0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418b546:	4293      	cmp	r3, r2
3418b548:	d00f      	beq.n	3418b56a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418b54a:	4a19      	ldr	r2, [pc, #100]	@ (3418b5b0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418b54c:	4293      	cmp	r3, r2
3418b54e:	d826      	bhi.n	3418b59e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418b550:	4a18      	ldr	r2, [pc, #96]	@ (3418b5b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418b552:	4293      	cmp	r3, r2
3418b554:	d009      	beq.n	3418b56a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418b556:	4a17      	ldr	r2, [pc, #92]	@ (3418b5b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418b558:	4293      	cmp	r3, r2
3418b55a:	d820      	bhi.n	3418b59e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418b55c:	4a16      	ldr	r2, [pc, #88]	@ (3418b5b8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418b55e:	4293      	cmp	r3, r2
3418b560:	d013      	beq.n	3418b58a <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418b562:	4a16      	ldr	r2, [pc, #88]	@ (3418b5bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418b564:	4293      	cmp	r3, r2
3418b566:	d015      	beq.n	3418b594 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418b568:	e019      	b.n	3418b59e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b56a:	f7f8 f98b 	bl	34183884 <LL_RCC_HSE_IsReady>
3418b56e:	4603      	mov	r3, r0
3418b570:	2b00      	cmp	r3, #0
3418b572:	d016      	beq.n	3418b5a2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418b574:	f7f8 f974 	bl	34183860 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418b578:	4603      	mov	r3, r0
3418b57a:	2b00      	cmp	r3, #0
3418b57c:	d102      	bne.n	3418b584 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418b57e:	4b10      	ldr	r3, [pc, #64]	@ (3418b5c0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418b580:	60fb      	str	r3, [r7, #12]
      break;
3418b582:	e00e      	b.n	3418b5a2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418b584:	4b0f      	ldr	r3, [pc, #60]	@ (3418b5c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418b586:	60fb      	str	r3, [r7, #12]
      break;
3418b588:	e00b      	b.n	3418b5a2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418b58a:	480f      	ldr	r0, [pc, #60]	@ (3418b5c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418b58c:	f7ff ff1a 	bl	3418b3c4 <RCCEx_GetOTGPHYCLKFreq>
3418b590:	60f8      	str	r0, [r7, #12]
      break;
3418b592:	e007      	b.n	3418b5a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418b594:	480d      	ldr	r0, [pc, #52]	@ (3418b5cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418b596:	f7ff ff15 	bl	3418b3c4 <RCCEx_GetOTGPHYCLKFreq>
3418b59a:	60f8      	str	r0, [r7, #12]
      break;
3418b59c:	e002      	b.n	3418b5a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b59e:	bf00      	nop
3418b5a0:	e000      	b.n	3418b5a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b5a2:	bf00      	nop
  }

  return usb_frequency;
3418b5a4:	68fb      	ldr	r3, [r7, #12]
}
3418b5a6:	4618      	mov	r0, r3
3418b5a8:	3710      	adds	r7, #16
3418b5aa:	46bd      	mov	sp, r7
3418b5ac:	bd80      	pop	{r7, pc}
3418b5ae:	bf00      	nop
3418b5b0:	01011814 	.word	0x01011814
3418b5b4:	01011014 	.word	0x01011014
3418b5b8:	01001014 	.word	0x01001014
3418b5bc:	01001814 	.word	0x01001814
3418b5c0:	02dc6c00 	.word	0x02dc6c00
3418b5c4:	016e3600 	.word	0x016e3600
3418b5c8:	03000c14 	.word	0x03000c14
3418b5cc:	03001414 	.word	0x03001414

3418b5d0 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418b5d0:	b580      	push	{r7, lr}
3418b5d2:	b084      	sub	sp, #16
3418b5d4:	af00      	add	r7, sp, #0
3418b5d6:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b5d8:	2300      	movs	r3, #0
3418b5da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418b5dc:	6878      	ldr	r0, [r7, #4]
3418b5de:	f7f8 fd6f 	bl	341840c0 <LL_RCC_GetXSPIClockSource>
3418b5e2:	4603      	mov	r3, r0
3418b5e4:	4a76      	ldr	r2, [pc, #472]	@ (3418b7c0 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b5e6:	4293      	cmp	r3, r2
3418b5e8:	f000 809d 	beq.w	3418b726 <RCCEx_GetXSPICLKFreq+0x156>
3418b5ec:	4a74      	ldr	r2, [pc, #464]	@ (3418b7c0 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b5ee:	4293      	cmp	r3, r2
3418b5f0:	f200 80dc 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b5f4:	4a73      	ldr	r2, [pc, #460]	@ (3418b7c4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b5f6:	4293      	cmp	r3, r2
3418b5f8:	f000 8095 	beq.w	3418b726 <RCCEx_GetXSPICLKFreq+0x156>
3418b5fc:	4a71      	ldr	r2, [pc, #452]	@ (3418b7c4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b5fe:	4293      	cmp	r3, r2
3418b600:	f200 80d4 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b604:	4a70      	ldr	r2, [pc, #448]	@ (3418b7c8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b606:	4293      	cmp	r3, r2
3418b608:	f000 808d 	beq.w	3418b726 <RCCEx_GetXSPICLKFreq+0x156>
3418b60c:	4a6e      	ldr	r2, [pc, #440]	@ (3418b7c8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b60e:	4293      	cmp	r3, r2
3418b610:	f200 80cc 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b614:	4a6d      	ldr	r2, [pc, #436]	@ (3418b7cc <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b616:	4293      	cmp	r3, r2
3418b618:	d041      	beq.n	3418b69e <RCCEx_GetXSPICLKFreq+0xce>
3418b61a:	4a6c      	ldr	r2, [pc, #432]	@ (3418b7cc <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b61c:	4293      	cmp	r3, r2
3418b61e:	f200 80c5 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b622:	4a6b      	ldr	r2, [pc, #428]	@ (3418b7d0 <RCCEx_GetXSPICLKFreq+0x200>)
3418b624:	4293      	cmp	r3, r2
3418b626:	d03a      	beq.n	3418b69e <RCCEx_GetXSPICLKFreq+0xce>
3418b628:	4a69      	ldr	r2, [pc, #420]	@ (3418b7d0 <RCCEx_GetXSPICLKFreq+0x200>)
3418b62a:	4293      	cmp	r3, r2
3418b62c:	f200 80be 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b630:	4a68      	ldr	r2, [pc, #416]	@ (3418b7d4 <RCCEx_GetXSPICLKFreq+0x204>)
3418b632:	4293      	cmp	r3, r2
3418b634:	d033      	beq.n	3418b69e <RCCEx_GetXSPICLKFreq+0xce>
3418b636:	4a67      	ldr	r2, [pc, #412]	@ (3418b7d4 <RCCEx_GetXSPICLKFreq+0x204>)
3418b638:	4293      	cmp	r3, r2
3418b63a:	f200 80b7 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b63e:	4a66      	ldr	r2, [pc, #408]	@ (3418b7d8 <RCCEx_GetXSPICLKFreq+0x208>)
3418b640:	4293      	cmp	r3, r2
3418b642:	d027      	beq.n	3418b694 <RCCEx_GetXSPICLKFreq+0xc4>
3418b644:	4a64      	ldr	r2, [pc, #400]	@ (3418b7d8 <RCCEx_GetXSPICLKFreq+0x208>)
3418b646:	4293      	cmp	r3, r2
3418b648:	f200 80b0 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b64c:	4a63      	ldr	r2, [pc, #396]	@ (3418b7dc <RCCEx_GetXSPICLKFreq+0x20c>)
3418b64e:	4293      	cmp	r3, r2
3418b650:	d020      	beq.n	3418b694 <RCCEx_GetXSPICLKFreq+0xc4>
3418b652:	4a62      	ldr	r2, [pc, #392]	@ (3418b7dc <RCCEx_GetXSPICLKFreq+0x20c>)
3418b654:	4293      	cmp	r3, r2
3418b656:	f200 80a9 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b65a:	4a61      	ldr	r2, [pc, #388]	@ (3418b7e0 <RCCEx_GetXSPICLKFreq+0x210>)
3418b65c:	4293      	cmp	r3, r2
3418b65e:	d019      	beq.n	3418b694 <RCCEx_GetXSPICLKFreq+0xc4>
3418b660:	4a5f      	ldr	r2, [pc, #380]	@ (3418b7e0 <RCCEx_GetXSPICLKFreq+0x210>)
3418b662:	4293      	cmp	r3, r2
3418b664:	f200 80a2 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b668:	4a5e      	ldr	r2, [pc, #376]	@ (3418b7e4 <RCCEx_GetXSPICLKFreq+0x214>)
3418b66a:	4293      	cmp	r3, r2
3418b66c:	d00a      	beq.n	3418b684 <RCCEx_GetXSPICLKFreq+0xb4>
3418b66e:	4a5d      	ldr	r2, [pc, #372]	@ (3418b7e4 <RCCEx_GetXSPICLKFreq+0x214>)
3418b670:	4293      	cmp	r3, r2
3418b672:	f200 809b 	bhi.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
3418b676:	4a5c      	ldr	r2, [pc, #368]	@ (3418b7e8 <RCCEx_GetXSPICLKFreq+0x218>)
3418b678:	4293      	cmp	r3, r2
3418b67a:	d003      	beq.n	3418b684 <RCCEx_GetXSPICLKFreq+0xb4>
3418b67c:	4a5b      	ldr	r2, [pc, #364]	@ (3418b7ec <RCCEx_GetXSPICLKFreq+0x21c>)
3418b67e:	4293      	cmp	r3, r2
3418b680:	f040 8094 	bne.w	3418b7ac <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b684:	f7f7 fd10 	bl	341830a8 <HAL_RCC_GetSysClockFreq>
3418b688:	4603      	mov	r3, r0
3418b68a:	4618      	mov	r0, r3
3418b68c:	f7fc fc9c 	bl	34187fc8 <RCCEx_GetHCLKFreq>
3418b690:	60f8      	str	r0, [r7, #12]
      break;
3418b692:	e090      	b.n	3418b7b6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b694:	2007      	movs	r0, #7
3418b696:	f7fc ff83 	bl	341885a0 <RCCEx_GetCLKPCLKFreq>
3418b69a:	60f8      	str	r0, [r7, #12]
      break;
3418b69c:	e08b      	b.n	3418b7b6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418b69e:	f7f8 ffe7 	bl	34184670 <LL_RCC_IC3_IsEnabled>
3418b6a2:	4603      	mov	r3, r0
3418b6a4:	2b00      	cmp	r3, #0
3418b6a6:	f000 8083 	beq.w	3418b7b0 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418b6aa:	f7f9 f803 	bl	341846b4 <LL_RCC_IC3_GetDivider>
3418b6ae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418b6b0:	f7f8 fff2 	bl	34184698 <LL_RCC_IC3_GetSource>
3418b6b4:	4603      	mov	r3, r0
3418b6b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b6ba:	d029      	beq.n	3418b710 <RCCEx_GetXSPICLKFreq+0x140>
3418b6bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b6c0:	d82f      	bhi.n	3418b722 <RCCEx_GetXSPICLKFreq+0x152>
3418b6c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b6c6:	d01a      	beq.n	3418b6fe <RCCEx_GetXSPICLKFreq+0x12e>
3418b6c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b6cc:	d829      	bhi.n	3418b722 <RCCEx_GetXSPICLKFreq+0x152>
3418b6ce:	2b00      	cmp	r3, #0
3418b6d0:	d003      	beq.n	3418b6da <RCCEx_GetXSPICLKFreq+0x10a>
3418b6d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b6d6:	d009      	beq.n	3418b6ec <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b6d8:	e023      	b.n	3418b722 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b6da:	f7fc fb5d 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418b6de:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b6e0:	68fa      	ldr	r2, [r7, #12]
3418b6e2:	68bb      	ldr	r3, [r7, #8]
3418b6e4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6e8:	60fb      	str	r3, [r7, #12]
            break;
3418b6ea:	e01b      	b.n	3418b724 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b6ec:	f7fc fb9a 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418b6f0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b6f2:	68fa      	ldr	r2, [r7, #12]
3418b6f4:	68bb      	ldr	r3, [r7, #8]
3418b6f6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6fa:	60fb      	str	r3, [r7, #12]
            break;
3418b6fc:	e012      	b.n	3418b724 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b6fe:	f7fc fbd7 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b702:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b704:	68fa      	ldr	r2, [r7, #12]
3418b706:	68bb      	ldr	r3, [r7, #8]
3418b708:	fbb2 f3f3 	udiv	r3, r2, r3
3418b70c:	60fb      	str	r3, [r7, #12]
            break;
3418b70e:	e009      	b.n	3418b724 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b710:	f7fc fc14 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418b714:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b716:	68fa      	ldr	r2, [r7, #12]
3418b718:	68bb      	ldr	r3, [r7, #8]
3418b71a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b71e:	60fb      	str	r3, [r7, #12]
            break;
3418b720:	e000      	b.n	3418b724 <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418b722:	bf00      	nop
        }
      }
      break;
3418b724:	e044      	b.n	3418b7b0 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418b726:	f7f8 ffe3 	bl	341846f0 <LL_RCC_IC4_IsEnabled>
3418b72a:	4603      	mov	r3, r0
3418b72c:	2b00      	cmp	r3, #0
3418b72e:	d041      	beq.n	3418b7b4 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418b730:	f7f9 f800 	bl	34184734 <LL_RCC_IC4_GetDivider>
3418b734:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418b736:	f7f8 ffef 	bl	34184718 <LL_RCC_IC4_GetSource>
3418b73a:	4603      	mov	r3, r0
3418b73c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b740:	d029      	beq.n	3418b796 <RCCEx_GetXSPICLKFreq+0x1c6>
3418b742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b746:	d82f      	bhi.n	3418b7a8 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b74c:	d01a      	beq.n	3418b784 <RCCEx_GetXSPICLKFreq+0x1b4>
3418b74e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b752:	d829      	bhi.n	3418b7a8 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b754:	2b00      	cmp	r3, #0
3418b756:	d003      	beq.n	3418b760 <RCCEx_GetXSPICLKFreq+0x190>
3418b758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b75c:	d009      	beq.n	3418b772 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b75e:	e023      	b.n	3418b7a8 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b760:	f7fc fb1a 	bl	34187d98 <HAL_RCCEx_GetPLL1CLKFreq>
3418b764:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b766:	68fa      	ldr	r2, [r7, #12]
3418b768:	68bb      	ldr	r3, [r7, #8]
3418b76a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b76e:	60fb      	str	r3, [r7, #12]
            break;
3418b770:	e01b      	b.n	3418b7aa <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b772:	f7fc fb57 	bl	34187e24 <HAL_RCCEx_GetPLL2CLKFreq>
3418b776:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b778:	68fa      	ldr	r2, [r7, #12]
3418b77a:	68bb      	ldr	r3, [r7, #8]
3418b77c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b780:	60fb      	str	r3, [r7, #12]
            break;
3418b782:	e012      	b.n	3418b7aa <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b784:	f7fc fb94 	bl	34187eb0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b788:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b78a:	68fa      	ldr	r2, [r7, #12]
3418b78c:	68bb      	ldr	r3, [r7, #8]
3418b78e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b792:	60fb      	str	r3, [r7, #12]
            break;
3418b794:	e009      	b.n	3418b7aa <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b796:	f7fc fbd1 	bl	34187f3c <HAL_RCCEx_GetPLL4CLKFreq>
3418b79a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b79c:	68fa      	ldr	r2, [r7, #12]
3418b79e:	68bb      	ldr	r3, [r7, #8]
3418b7a0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7a4:	60fb      	str	r3, [r7, #12]
            break;
3418b7a6:	e000      	b.n	3418b7aa <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418b7a8:	bf00      	nop
        }
      }
      break;
3418b7aa:	e003      	b.n	3418b7b4 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418b7ac:	bf00      	nop
3418b7ae:	e002      	b.n	3418b7b6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b7b0:	bf00      	nop
3418b7b2:	e000      	b.n	3418b7b6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b7b4:	bf00      	nop
  }

  return xspi_frequency;
3418b7b6:	68fb      	ldr	r3, [r7, #12]
}
3418b7b8:	4618      	mov	r0, r3
3418b7ba:	3710      	adds	r7, #16
3418b7bc:	46bd      	mov	sp, r7
3418b7be:	bd80      	pop	{r7, pc}
3418b7c0:	03030814 	.word	0x03030814
3418b7c4:	03030414 	.word	0x03030414
3418b7c8:	03030014 	.word	0x03030014
3418b7cc:	03020814 	.word	0x03020814
3418b7d0:	03020414 	.word	0x03020414
3418b7d4:	03020014 	.word	0x03020014
3418b7d8:	03010814 	.word	0x03010814
3418b7dc:	03010414 	.word	0x03010414
3418b7e0:	03010014 	.word	0x03010014
3418b7e4:	03000814 	.word	0x03000814
3418b7e8:	03000014 	.word	0x03000014
3418b7ec:	03000414 	.word	0x03000414

3418b7f0 <LL_AHB5_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB5_GRP1_IsEnabledClock(uint32_t Periphs)
{
3418b7f0:	b480      	push	{r7}
3418b7f2:	b083      	sub	sp, #12
3418b7f4:	af00      	add	r7, sp, #0
3418b7f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418b7f8:	4b08      	ldr	r3, [pc, #32]	@ (3418b81c <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418b7fa:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418b7fe:	687b      	ldr	r3, [r7, #4]
3418b800:	4013      	ands	r3, r2
3418b802:	687a      	ldr	r2, [r7, #4]
3418b804:	429a      	cmp	r2, r3
3418b806:	d101      	bne.n	3418b80c <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418b808:	2301      	movs	r3, #1
3418b80a:	e000      	b.n	3418b80e <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418b80c:	2300      	movs	r3, #0
}
3418b80e:	4618      	mov	r0, r3
3418b810:	370c      	adds	r7, #12
3418b812:	46bd      	mov	sp, r7
3418b814:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b818:	4770      	bx	lr
3418b81a:	bf00      	nop
3418b81c:	56028000 	.word	0x56028000

3418b820 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418b820:	b580      	push	{r7, lr}
3418b822:	b086      	sub	sp, #24
3418b824:	af02      	add	r7, sp, #8
3418b826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418b828:	2300      	movs	r3, #0
3418b82a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418b82c:	f7f5 fefe 	bl	3418162c <HAL_GetTick>
3418b830:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418b832:	687b      	ldr	r3, [r7, #4]
3418b834:	2b00      	cmp	r3, #0
3418b836:	d102      	bne.n	3418b83e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418b838:	2301      	movs	r3, #1
3418b83a:	73fb      	strb	r3, [r7, #15]
3418b83c:	e0ef      	b.n	3418ba1e <HAL_XSPI_Init+0x1fe>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418b83e:	687b      	ldr	r3, [r7, #4]
3418b840:	2200      	movs	r2, #0
3418b842:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418b844:	687b      	ldr	r3, [r7, #4]
3418b846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418b848:	2b00      	cmp	r3, #0
3418b84a:	f040 80e8 	bne.w	3418ba1e <HAL_XSPI_Init+0x1fe>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418b84e:	6878      	ldr	r0, [r7, #4]
3418b850:	f7f5 fa92 	bl	34180d78 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418b854:	f241 3188 	movw	r1, #5000	@ 0x1388
3418b858:	6878      	ldr	r0, [r7, #4]
3418b85a:	f000 fc16 	bl	3418c08a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418b85e:	687b      	ldr	r3, [r7, #4]
3418b860:	681b      	ldr	r3, [r3, #0]
3418b862:	689a      	ldr	r2, [r3, #8]
3418b864:	4b70      	ldr	r3, [pc, #448]	@ (3418ba28 <HAL_XSPI_Init+0x208>)
3418b866:	4013      	ands	r3, r2
3418b868:	687a      	ldr	r2, [r7, #4]
3418b86a:	68d1      	ldr	r1, [r2, #12]
3418b86c:	687a      	ldr	r2, [r7, #4]
3418b86e:	6912      	ldr	r2, [r2, #16]
3418b870:	0412      	lsls	r2, r2, #16
3418b872:	4311      	orrs	r1, r2
3418b874:	687a      	ldr	r2, [r7, #4]
3418b876:	6952      	ldr	r2, [r2, #20]
3418b878:	3a01      	subs	r2, #1
3418b87a:	0212      	lsls	r2, r2, #8
3418b87c:	4311      	orrs	r1, r2
3418b87e:	687a      	ldr	r2, [r7, #4]
3418b880:	69d2      	ldr	r2, [r2, #28]
3418b882:	4311      	orrs	r1, r2
3418b884:	687a      	ldr	r2, [r7, #4]
3418b886:	6812      	ldr	r2, [r2, #0]
3418b888:	430b      	orrs	r3, r1
3418b88a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418b88c:	687b      	ldr	r3, [r7, #4]
3418b88e:	681b      	ldr	r3, [r3, #0]
3418b890:	68db      	ldr	r3, [r3, #12]
3418b892:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418b896:	687b      	ldr	r3, [r7, #4]
3418b898:	6a1a      	ldr	r2, [r3, #32]
3418b89a:	687b      	ldr	r3, [r7, #4]
3418b89c:	681b      	ldr	r3, [r3, #0]
3418b89e:	430a      	orrs	r2, r1
3418b8a0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418b8a2:	687b      	ldr	r3, [r7, #4]
3418b8a4:	681b      	ldr	r3, [r3, #0]
3418b8a6:	691b      	ldr	r3, [r3, #16]
3418b8a8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418b8ac:	687b      	ldr	r3, [r7, #4]
3418b8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418b8b0:	041a      	lsls	r2, r3, #16
3418b8b2:	687b      	ldr	r3, [r7, #4]
3418b8b4:	681b      	ldr	r3, [r3, #0]
3418b8b6:	430a      	orrs	r2, r1
3418b8b8:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418b8ba:	687b      	ldr	r3, [r7, #4]
3418b8bc:	681b      	ldr	r3, [r3, #0]
3418b8be:	691b      	ldr	r3, [r3, #16]
3418b8c0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418b8c4:	687b      	ldr	r3, [r7, #4]
3418b8c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418b8c8:	687b      	ldr	r3, [r7, #4]
3418b8ca:	681b      	ldr	r3, [r3, #0]
3418b8cc:	430a      	orrs	r2, r1
3418b8ce:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418b8d0:	687b      	ldr	r3, [r7, #4]
3418b8d2:	681b      	ldr	r3, [r3, #0]
3418b8d4:	687a      	ldr	r2, [r7, #4]
3418b8d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418b8d8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418b8da:	687b      	ldr	r3, [r7, #4]
3418b8dc:	681b      	ldr	r3, [r3, #0]
3418b8de:	681b      	ldr	r3, [r3, #0]
3418b8e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418b8e4:	687b      	ldr	r3, [r7, #4]
3418b8e6:	685b      	ldr	r3, [r3, #4]
3418b8e8:	3b01      	subs	r3, #1
3418b8ea:	021a      	lsls	r2, r3, #8
3418b8ec:	687b      	ldr	r3, [r7, #4]
3418b8ee:	681b      	ldr	r3, [r3, #0]
3418b8f0:	430a      	orrs	r2, r1
3418b8f2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418b8f4:	687b      	ldr	r3, [r7, #4]
3418b8f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418b8f8:	9300      	str	r3, [sp, #0]
3418b8fa:	68bb      	ldr	r3, [r7, #8]
3418b8fc:	2200      	movs	r2, #0
3418b8fe:	2120      	movs	r1, #32
3418b900:	6878      	ldr	r0, [r7, #4]
3418b902:	f000 fcfd 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418b906:	4603      	mov	r3, r0
3418b908:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418b90a:	7bfb      	ldrb	r3, [r7, #15]
3418b90c:	2b00      	cmp	r3, #0
3418b90e:	f040 8086 	bne.w	3418ba1e <HAL_XSPI_Init+0x1fe>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418b912:	687b      	ldr	r3, [r7, #4]
3418b914:	681b      	ldr	r3, [r3, #0]
3418b916:	68db      	ldr	r3, [r3, #12]
3418b918:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418b91c:	687b      	ldr	r3, [r7, #4]
3418b91e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418b920:	687b      	ldr	r3, [r7, #4]
3418b922:	681b      	ldr	r3, [r3, #0]
3418b924:	430a      	orrs	r2, r1
3418b926:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418b928:	687b      	ldr	r3, [r7, #4]
3418b92a:	681b      	ldr	r3, [r3, #0]
3418b92c:	4a3f      	ldr	r2, [pc, #252]	@ (3418ba2c <HAL_XSPI_Init+0x20c>)
3418b92e:	4293      	cmp	r3, r2
3418b930:	d018      	beq.n	3418b964 <HAL_XSPI_Init+0x144>
3418b932:	687b      	ldr	r3, [r7, #4]
3418b934:	681b      	ldr	r3, [r3, #0]
3418b936:	4a3e      	ldr	r2, [pc, #248]	@ (3418ba30 <HAL_XSPI_Init+0x210>)
3418b938:	4293      	cmp	r3, r2
3418b93a:	d013      	beq.n	3418b964 <HAL_XSPI_Init+0x144>
3418b93c:	687b      	ldr	r3, [r7, #4]
3418b93e:	681b      	ldr	r3, [r3, #0]
3418b940:	4a3c      	ldr	r2, [pc, #240]	@ (3418ba34 <HAL_XSPI_Init+0x214>)
3418b942:	4293      	cmp	r3, r2
3418b944:	d00e      	beq.n	3418b964 <HAL_XSPI_Init+0x144>
3418b946:	687b      	ldr	r3, [r7, #4]
3418b948:	681b      	ldr	r3, [r3, #0]
3418b94a:	4a3b      	ldr	r2, [pc, #236]	@ (3418ba38 <HAL_XSPI_Init+0x218>)
3418b94c:	4293      	cmp	r3, r2
3418b94e:	d009      	beq.n	3418b964 <HAL_XSPI_Init+0x144>
3418b950:	687b      	ldr	r3, [r7, #4]
3418b952:	681b      	ldr	r3, [r3, #0]
3418b954:	4a39      	ldr	r2, [pc, #228]	@ (3418ba3c <HAL_XSPI_Init+0x21c>)
3418b956:	4293      	cmp	r3, r2
3418b958:	d004      	beq.n	3418b964 <HAL_XSPI_Init+0x144>
3418b95a:	687b      	ldr	r3, [r7, #4]
3418b95c:	681b      	ldr	r3, [r3, #0]
3418b95e:	4a38      	ldr	r2, [pc, #224]	@ (3418ba40 <HAL_XSPI_Init+0x220>)
3418b960:	4293      	cmp	r3, r2
3418b962:	d10f      	bne.n	3418b984 <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418b964:	687b      	ldr	r3, [r7, #4]
3418b966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418b968:	9300      	str	r3, [sp, #0]
3418b96a:	68bb      	ldr	r3, [r7, #8]
3418b96c:	2200      	movs	r2, #0
3418b96e:	2120      	movs	r1, #32
3418b970:	6878      	ldr	r0, [r7, #4]
3418b972:	f000 fcc5 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418b976:	4603      	mov	r3, r0
3418b978:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418b97a:	7bfb      	ldrb	r3, [r7, #15]
3418b97c:	2b00      	cmp	r3, #0
3418b97e:	d001      	beq.n	3418b984 <HAL_XSPI_Init+0x164>
          {
            return status;
3418b980:	7bfb      	ldrb	r3, [r7, #15]
3418b982:	e04d      	b.n	3418ba20 <HAL_XSPI_Init+0x200>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418b984:	687b      	ldr	r3, [r7, #4]
3418b986:	681b      	ldr	r3, [r3, #0]
3418b988:	681b      	ldr	r3, [r3, #0]
3418b98a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418b98e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418b992:	687a      	ldr	r2, [r7, #4]
3418b994:	6891      	ldr	r1, [r2, #8]
3418b996:	687a      	ldr	r2, [r7, #4]
3418b998:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418b99a:	4311      	orrs	r1, r2
3418b99c:	687a      	ldr	r2, [r7, #4]
3418b99e:	6812      	ldr	r2, [r2, #0]
3418b9a0:	430b      	orrs	r3, r1
3418b9a2:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3418b9a4:	687b      	ldr	r3, [r7, #4]
3418b9a6:	681b      	ldr	r3, [r3, #0]
3418b9a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418b9ac:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
3418b9b0:	687b      	ldr	r3, [r7, #4]
3418b9b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418b9b4:	687b      	ldr	r3, [r7, #4]
3418b9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418b9b8:	431a      	orrs	r2, r3
3418b9ba:	687b      	ldr	r3, [r7, #4]
3418b9bc:	681b      	ldr	r3, [r3, #0]
3418b9be:	430a      	orrs	r2, r1
3418b9c0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418b9c4:	687b      	ldr	r3, [r7, #4]
3418b9c6:	681b      	ldr	r3, [r3, #0]
3418b9c8:	681a      	ldr	r2, [r3, #0]
3418b9ca:	687b      	ldr	r3, [r7, #4]
3418b9cc:	681b      	ldr	r3, [r3, #0]
3418b9ce:	f042 0201 	orr.w	r2, r2, #1
3418b9d2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418b9d4:	687b      	ldr	r3, [r7, #4]
3418b9d6:	699b      	ldr	r3, [r3, #24]
3418b9d8:	2b02      	cmp	r3, #2
3418b9da:	d107      	bne.n	3418b9ec <HAL_XSPI_Init+0x1cc>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418b9dc:	687b      	ldr	r3, [r7, #4]
3418b9de:	681b      	ldr	r3, [r3, #0]
3418b9e0:	689a      	ldr	r2, [r3, #8]
3418b9e2:	687b      	ldr	r3, [r7, #4]
3418b9e4:	681b      	ldr	r3, [r3, #0]
3418b9e6:	f042 0202 	orr.w	r2, r2, #2
3418b9ea:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418b9ec:	687b      	ldr	r3, [r7, #4]
3418b9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418b9f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b9f4:	d107      	bne.n	3418ba06 <HAL_XSPI_Init+0x1e6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418b9f6:	687b      	ldr	r3, [r7, #4]
3418b9f8:	681b      	ldr	r3, [r3, #0]
3418b9fa:	689a      	ldr	r2, [r3, #8]
3418b9fc:	687b      	ldr	r3, [r7, #4]
3418b9fe:	681b      	ldr	r3, [r3, #0]
3418ba00:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418ba04:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418ba06:	687b      	ldr	r3, [r7, #4]
3418ba08:	68db      	ldr	r3, [r3, #12]
3418ba0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418ba0e:	d103      	bne.n	3418ba18 <HAL_XSPI_Init+0x1f8>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418ba10:	687b      	ldr	r3, [r7, #4]
3418ba12:	2201      	movs	r2, #1
3418ba14:	659a      	str	r2, [r3, #88]	@ 0x58
3418ba16:	e002      	b.n	3418ba1e <HAL_XSPI_Init+0x1fe>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418ba18:	687b      	ldr	r3, [r7, #4]
3418ba1a:	2202      	movs	r2, #2
3418ba1c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418ba1e:	7bfb      	ldrb	r3, [r7, #15]
}
3418ba20:	4618      	mov	r0, r3
3418ba22:	3710      	adds	r7, #16
3418ba24:	46bd      	mov	sp, r7
3418ba26:	bd80      	pop	{r7, pc}
3418ba28:	f8e0c0fc 	.word	0xf8e0c0fc
3418ba2c:	58025000 	.word	0x58025000
3418ba30:	48025000 	.word	0x48025000
3418ba34:	5802a000 	.word	0x5802a000
3418ba38:	4802a000 	.word	0x4802a000
3418ba3c:	5802d000 	.word	0x5802d000
3418ba40:	4802d000 	.word	0x4802d000

3418ba44 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
3418ba44:	b580      	push	{r7, lr}
3418ba46:	b08a      	sub	sp, #40	@ 0x28
3418ba48:	af02      	add	r7, sp, #8
3418ba4a:	60f8      	str	r0, [r7, #12]
3418ba4c:	60b9      	str	r1, [r7, #8]
3418ba4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418ba50:	f7f5 fdec 	bl	3418162c <HAL_GetTick>
3418ba54:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418ba56:	68bb      	ldr	r3, [r7, #8]
3418ba58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ba5a:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418ba5c:	68fb      	ldr	r3, [r7, #12]
3418ba5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418ba60:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418ba62:	697b      	ldr	r3, [r7, #20]
3418ba64:	2b02      	cmp	r3, #2
3418ba66:	d104      	bne.n	3418ba72 <HAL_XSPI_Command+0x2e>
3418ba68:	68fb      	ldr	r3, [r7, #12]
3418ba6a:	68db      	ldr	r3, [r3, #12]
3418ba6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418ba70:	d115      	bne.n	3418ba9e <HAL_XSPI_Command+0x5a>
3418ba72:	697b      	ldr	r3, [r7, #20]
3418ba74:	2b14      	cmp	r3, #20
3418ba76:	d107      	bne.n	3418ba88 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418ba78:	68bb      	ldr	r3, [r7, #8]
3418ba7a:	681b      	ldr	r3, [r3, #0]
3418ba7c:	2b02      	cmp	r3, #2
3418ba7e:	d00e      	beq.n	3418ba9e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418ba80:	68bb      	ldr	r3, [r7, #8]
3418ba82:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418ba84:	2b03      	cmp	r3, #3
3418ba86:	d00a      	beq.n	3418ba9e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418ba88:	697b      	ldr	r3, [r7, #20]
3418ba8a:	2b24      	cmp	r3, #36	@ 0x24
3418ba8c:	d15e      	bne.n	3418bb4c <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418ba8e:	68bb      	ldr	r3, [r7, #8]
3418ba90:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418ba92:	2b01      	cmp	r3, #1
3418ba94:	d003      	beq.n	3418ba9e <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418ba96:	68bb      	ldr	r3, [r7, #8]
3418ba98:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418ba9a:	2b03      	cmp	r3, #3
3418ba9c:	d156      	bne.n	3418bb4c <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418ba9e:	687b      	ldr	r3, [r7, #4]
3418baa0:	9300      	str	r3, [sp, #0]
3418baa2:	69bb      	ldr	r3, [r7, #24]
3418baa4:	2200      	movs	r2, #0
3418baa6:	2120      	movs	r1, #32
3418baa8:	68f8      	ldr	r0, [r7, #12]
3418baaa:	f000 fc29 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418baae:	4603      	mov	r3, r0
3418bab0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418bab2:	7ffb      	ldrb	r3, [r7, #31]
3418bab4:	2b00      	cmp	r3, #0
3418bab6:	d146      	bne.n	3418bb46 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418bab8:	68fb      	ldr	r3, [r7, #12]
3418baba:	2200      	movs	r2, #0
3418babc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418babe:	68b9      	ldr	r1, [r7, #8]
3418bac0:	68f8      	ldr	r0, [r7, #12]
3418bac2:	f000 fc53 	bl	3418c36c <XSPI_ConfigCmd>
3418bac6:	4603      	mov	r3, r0
3418bac8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418baca:	7ffb      	ldrb	r3, [r7, #31]
3418bacc:	2b00      	cmp	r3, #0
3418bace:	d143      	bne.n	3418bb58 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418bad0:	68bb      	ldr	r3, [r7, #8]
3418bad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418bad4:	2b00      	cmp	r3, #0
3418bad6:	d10e      	bne.n	3418baf6 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418bad8:	687b      	ldr	r3, [r7, #4]
3418bada:	9300      	str	r3, [sp, #0]
3418badc:	69bb      	ldr	r3, [r7, #24]
3418bade:	2201      	movs	r2, #1
3418bae0:	2102      	movs	r1, #2
3418bae2:	68f8      	ldr	r0, [r7, #12]
3418bae4:	f000 fc0c 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bae8:	4603      	mov	r3, r0
3418baea:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418baec:	68fb      	ldr	r3, [r7, #12]
3418baee:	681b      	ldr	r3, [r3, #0]
3418baf0:	2202      	movs	r2, #2
3418baf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418baf4:	e030      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418baf6:	68bb      	ldr	r3, [r7, #8]
3418baf8:	681b      	ldr	r3, [r3, #0]
3418bafa:	2b00      	cmp	r3, #0
3418bafc:	d103      	bne.n	3418bb06 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418bafe:	68fb      	ldr	r3, [r7, #12]
3418bb00:	2204      	movs	r2, #4
3418bb02:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418bb04:	e028      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418bb06:	68bb      	ldr	r3, [r7, #8]
3418bb08:	681b      	ldr	r3, [r3, #0]
3418bb0a:	2b01      	cmp	r3, #1
3418bb0c:	d10b      	bne.n	3418bb26 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418bb0e:	68fb      	ldr	r3, [r7, #12]
3418bb10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bb12:	2b24      	cmp	r3, #36	@ 0x24
3418bb14:	d103      	bne.n	3418bb1e <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418bb16:	68fb      	ldr	r3, [r7, #12]
3418bb18:	2204      	movs	r2, #4
3418bb1a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418bb1c:	e01c      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418bb1e:	68fb      	ldr	r3, [r7, #12]
3418bb20:	2214      	movs	r2, #20
3418bb22:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418bb24:	e018      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418bb26:	68bb      	ldr	r3, [r7, #8]
3418bb28:	681b      	ldr	r3, [r3, #0]
3418bb2a:	2b02      	cmp	r3, #2
3418bb2c:	d114      	bne.n	3418bb58 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418bb2e:	68fb      	ldr	r3, [r7, #12]
3418bb30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bb32:	2b14      	cmp	r3, #20
3418bb34:	d103      	bne.n	3418bb3e <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418bb36:	68fb      	ldr	r3, [r7, #12]
3418bb38:	2204      	movs	r2, #4
3418bb3a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418bb3c:	e00c      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418bb3e:	68fb      	ldr	r3, [r7, #12]
3418bb40:	2224      	movs	r2, #36	@ 0x24
3418bb42:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418bb44:	e008      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418bb46:	2302      	movs	r3, #2
3418bb48:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418bb4a:	e005      	b.n	3418bb58 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418bb4c:	2301      	movs	r3, #1
3418bb4e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418bb50:	68fb      	ldr	r3, [r7, #12]
3418bb52:	2210      	movs	r2, #16
3418bb54:	65da      	str	r2, [r3, #92]	@ 0x5c
3418bb56:	e000      	b.n	3418bb5a <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418bb58:	bf00      	nop
  }

  return status;
3418bb5a:	7ffb      	ldrb	r3, [r7, #31]
}
3418bb5c:	4618      	mov	r0, r3
3418bb5e:	3720      	adds	r7, #32
3418bb60:	46bd      	mov	sp, r7
3418bb62:	bd80      	pop	{r7, pc}

3418bb64 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418bb64:	b580      	push	{r7, lr}
3418bb66:	b08a      	sub	sp, #40	@ 0x28
3418bb68:	af02      	add	r7, sp, #8
3418bb6a:	60f8      	str	r0, [r7, #12]
3418bb6c:	60b9      	str	r1, [r7, #8]
3418bb6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418bb70:	f7f5 fd5c 	bl	3418162c <HAL_GetTick>
3418bb74:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418bb76:	68fb      	ldr	r3, [r7, #12]
3418bb78:	681b      	ldr	r3, [r3, #0]
3418bb7a:	3350      	adds	r3, #80	@ 0x50
3418bb7c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418bb7e:	68bb      	ldr	r3, [r7, #8]
3418bb80:	2b00      	cmp	r3, #0
3418bb82:	d105      	bne.n	3418bb90 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418bb84:	2301      	movs	r3, #1
3418bb86:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418bb88:	68fb      	ldr	r3, [r7, #12]
3418bb8a:	2208      	movs	r2, #8
3418bb8c:	65da      	str	r2, [r3, #92]	@ 0x5c
3418bb8e:	e057      	b.n	3418bc40 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418bb90:	68fb      	ldr	r3, [r7, #12]
3418bb92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bb94:	2b04      	cmp	r3, #4
3418bb96:	d14e      	bne.n	3418bc36 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418bb98:	68fb      	ldr	r3, [r7, #12]
3418bb9a:	681b      	ldr	r3, [r3, #0]
3418bb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418bb9e:	1c5a      	adds	r2, r3, #1
3418bba0:	68fb      	ldr	r3, [r7, #12]
3418bba2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418bba4:	68fb      	ldr	r3, [r7, #12]
3418bba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418bba8:	68fb      	ldr	r3, [r7, #12]
3418bbaa:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418bbac:	68fb      	ldr	r3, [r7, #12]
3418bbae:	68ba      	ldr	r2, [r7, #8]
3418bbb0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418bbb2:	68fb      	ldr	r3, [r7, #12]
3418bbb4:	681b      	ldr	r3, [r3, #0]
3418bbb6:	681a      	ldr	r2, [r3, #0]
3418bbb8:	68fb      	ldr	r3, [r7, #12]
3418bbba:	681b      	ldr	r3, [r3, #0]
3418bbbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418bbc0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418bbc2:	687b      	ldr	r3, [r7, #4]
3418bbc4:	9300      	str	r3, [sp, #0]
3418bbc6:	69bb      	ldr	r3, [r7, #24]
3418bbc8:	2201      	movs	r2, #1
3418bbca:	2104      	movs	r1, #4
3418bbcc:	68f8      	ldr	r0, [r7, #12]
3418bbce:	f000 fb97 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bbd2:	4603      	mov	r3, r0
3418bbd4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418bbd6:	7ffb      	ldrb	r3, [r7, #31]
3418bbd8:	2b00      	cmp	r3, #0
3418bbda:	d113      	bne.n	3418bc04 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418bbdc:	68fb      	ldr	r3, [r7, #12]
3418bbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bbe0:	781a      	ldrb	r2, [r3, #0]
3418bbe2:	697b      	ldr	r3, [r7, #20]
3418bbe4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418bbe6:	68fb      	ldr	r3, [r7, #12]
3418bbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bbea:	1c5a      	adds	r2, r3, #1
3418bbec:	68fb      	ldr	r3, [r7, #12]
3418bbee:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418bbf0:	68fb      	ldr	r3, [r7, #12]
3418bbf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bbf4:	1e5a      	subs	r2, r3, #1
3418bbf6:	68fb      	ldr	r3, [r7, #12]
3418bbf8:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418bbfa:	68fb      	ldr	r3, [r7, #12]
3418bbfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bbfe:	2b00      	cmp	r3, #0
3418bc00:	d1df      	bne.n	3418bbc2 <HAL_XSPI_Transmit+0x5e>
3418bc02:	e000      	b.n	3418bc06 <HAL_XSPI_Transmit+0xa2>
          break;
3418bc04:	bf00      	nop

      if (status == HAL_OK)
3418bc06:	7ffb      	ldrb	r3, [r7, #31]
3418bc08:	2b00      	cmp	r3, #0
3418bc0a:	d119      	bne.n	3418bc40 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418bc0c:	687b      	ldr	r3, [r7, #4]
3418bc0e:	9300      	str	r3, [sp, #0]
3418bc10:	69bb      	ldr	r3, [r7, #24]
3418bc12:	2201      	movs	r2, #1
3418bc14:	2102      	movs	r1, #2
3418bc16:	68f8      	ldr	r0, [r7, #12]
3418bc18:	f000 fb72 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bc1c:	4603      	mov	r3, r0
3418bc1e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418bc20:	7ffb      	ldrb	r3, [r7, #31]
3418bc22:	2b00      	cmp	r3, #0
3418bc24:	d10c      	bne.n	3418bc40 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418bc26:	68fb      	ldr	r3, [r7, #12]
3418bc28:	681b      	ldr	r3, [r3, #0]
3418bc2a:	2202      	movs	r2, #2
3418bc2c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418bc2e:	68fb      	ldr	r3, [r7, #12]
3418bc30:	2202      	movs	r2, #2
3418bc32:	659a      	str	r2, [r3, #88]	@ 0x58
3418bc34:	e004      	b.n	3418bc40 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418bc36:	2301      	movs	r3, #1
3418bc38:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418bc3a:	68fb      	ldr	r3, [r7, #12]
3418bc3c:	2210      	movs	r2, #16
3418bc3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418bc40:	7ffb      	ldrb	r3, [r7, #31]
}
3418bc42:	4618      	mov	r0, r3
3418bc44:	3720      	adds	r7, #32
3418bc46:	46bd      	mov	sp, r7
3418bc48:	bd80      	pop	{r7, pc}

3418bc4a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
3418bc4a:	b580      	push	{r7, lr}
3418bc4c:	b08c      	sub	sp, #48	@ 0x30
3418bc4e:	af02      	add	r7, sp, #8
3418bc50:	60f8      	str	r0, [r7, #12]
3418bc52:	60b9      	str	r1, [r7, #8]
3418bc54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418bc56:	f7f5 fce9 	bl	3418162c <HAL_GetTick>
3418bc5a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418bc5c:	68fb      	ldr	r3, [r7, #12]
3418bc5e:	681b      	ldr	r3, [r3, #0]
3418bc60:	3350      	adds	r3, #80	@ 0x50
3418bc62:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418bc64:	68fb      	ldr	r3, [r7, #12]
3418bc66:	681b      	ldr	r3, [r3, #0]
3418bc68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418bc6a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418bc6c:	68fb      	ldr	r3, [r7, #12]
3418bc6e:	681b      	ldr	r3, [r3, #0]
3418bc70:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418bc74:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418bc76:	68bb      	ldr	r3, [r7, #8]
3418bc78:	2b00      	cmp	r3, #0
3418bc7a:	d106      	bne.n	3418bc8a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418bc7c:	2301      	movs	r3, #1
3418bc7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418bc82:	68fb      	ldr	r3, [r7, #12]
3418bc84:	2208      	movs	r2, #8
3418bc86:	65da      	str	r2, [r3, #92]	@ 0x5c
3418bc88:	e07c      	b.n	3418bd84 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418bc8a:	68fb      	ldr	r3, [r7, #12]
3418bc8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bc8e:	2b04      	cmp	r3, #4
3418bc90:	d172      	bne.n	3418bd78 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418bc92:	68fb      	ldr	r3, [r7, #12]
3418bc94:	681b      	ldr	r3, [r3, #0]
3418bc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418bc98:	1c5a      	adds	r2, r3, #1
3418bc9a:	68fb      	ldr	r3, [r7, #12]
3418bc9c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418bc9e:	68fb      	ldr	r3, [r7, #12]
3418bca0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418bca2:	68fb      	ldr	r3, [r7, #12]
3418bca4:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418bca6:	68fb      	ldr	r3, [r7, #12]
3418bca8:	68ba      	ldr	r2, [r7, #8]
3418bcaa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418bcac:	68fb      	ldr	r3, [r7, #12]
3418bcae:	681b      	ldr	r3, [r3, #0]
3418bcb0:	681b      	ldr	r3, [r3, #0]
3418bcb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418bcb6:	68fb      	ldr	r3, [r7, #12]
3418bcb8:	681b      	ldr	r3, [r3, #0]
3418bcba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418bcbe:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418bcc0:	68fb      	ldr	r3, [r7, #12]
3418bcc2:	68db      	ldr	r3, [r3, #12]
3418bcc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418bcc8:	d104      	bne.n	3418bcd4 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418bcca:	68fb      	ldr	r3, [r7, #12]
3418bccc:	681b      	ldr	r3, [r3, #0]
3418bcce:	69ba      	ldr	r2, [r7, #24]
3418bcd0:	649a      	str	r2, [r3, #72]	@ 0x48
3418bcd2:	e011      	b.n	3418bcf8 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418bcd4:	68fb      	ldr	r3, [r7, #12]
3418bcd6:	681b      	ldr	r3, [r3, #0]
3418bcd8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418bcdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418bce0:	2b00      	cmp	r3, #0
3418bce2:	d004      	beq.n	3418bcee <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418bce4:	68fb      	ldr	r3, [r7, #12]
3418bce6:	681b      	ldr	r3, [r3, #0]
3418bce8:	69ba      	ldr	r2, [r7, #24]
3418bcea:	649a      	str	r2, [r3, #72]	@ 0x48
3418bcec:	e004      	b.n	3418bcf8 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418bcee:	68fb      	ldr	r3, [r7, #12]
3418bcf0:	681b      	ldr	r3, [r3, #0]
3418bcf2:	697a      	ldr	r2, [r7, #20]
3418bcf4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418bcf8:	687b      	ldr	r3, [r7, #4]
3418bcfa:	9300      	str	r3, [sp, #0]
3418bcfc:	6a3b      	ldr	r3, [r7, #32]
3418bcfe:	2201      	movs	r2, #1
3418bd00:	2106      	movs	r1, #6
3418bd02:	68f8      	ldr	r0, [r7, #12]
3418bd04:	f000 fafc 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bd08:	4603      	mov	r3, r0
3418bd0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418bd0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418bd12:	2b00      	cmp	r3, #0
3418bd14:	d114      	bne.n	3418bd40 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418bd16:	68fb      	ldr	r3, [r7, #12]
3418bd18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bd1a:	69fa      	ldr	r2, [r7, #28]
3418bd1c:	7812      	ldrb	r2, [r2, #0]
3418bd1e:	b2d2      	uxtb	r2, r2
3418bd20:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418bd22:	68fb      	ldr	r3, [r7, #12]
3418bd24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bd26:	1c5a      	adds	r2, r3, #1
3418bd28:	68fb      	ldr	r3, [r7, #12]
3418bd2a:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418bd2c:	68fb      	ldr	r3, [r7, #12]
3418bd2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bd30:	1e5a      	subs	r2, r3, #1
3418bd32:	68fb      	ldr	r3, [r7, #12]
3418bd34:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418bd36:	68fb      	ldr	r3, [r7, #12]
3418bd38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bd3a:	2b00      	cmp	r3, #0
3418bd3c:	d1dc      	bne.n	3418bcf8 <HAL_XSPI_Receive+0xae>
3418bd3e:	e000      	b.n	3418bd42 <HAL_XSPI_Receive+0xf8>
          break;
3418bd40:	bf00      	nop

      if (status == HAL_OK)
3418bd42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418bd46:	2b00      	cmp	r3, #0
3418bd48:	d11c      	bne.n	3418bd84 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418bd4a:	687b      	ldr	r3, [r7, #4]
3418bd4c:	9300      	str	r3, [sp, #0]
3418bd4e:	6a3b      	ldr	r3, [r7, #32]
3418bd50:	2201      	movs	r2, #1
3418bd52:	2102      	movs	r1, #2
3418bd54:	68f8      	ldr	r0, [r7, #12]
3418bd56:	f000 fad3 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bd5a:	4603      	mov	r3, r0
3418bd5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418bd60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418bd64:	2b00      	cmp	r3, #0
3418bd66:	d10d      	bne.n	3418bd84 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418bd68:	68fb      	ldr	r3, [r7, #12]
3418bd6a:	681b      	ldr	r3, [r3, #0]
3418bd6c:	2202      	movs	r2, #2
3418bd6e:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418bd70:	68fb      	ldr	r3, [r7, #12]
3418bd72:	2202      	movs	r2, #2
3418bd74:	659a      	str	r2, [r3, #88]	@ 0x58
3418bd76:	e005      	b.n	3418bd84 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418bd78:	2301      	movs	r3, #1
3418bd7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418bd7e:	68fb      	ldr	r3, [r7, #12]
3418bd80:	2210      	movs	r2, #16
3418bd82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418bd84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418bd88:	4618      	mov	r0, r3
3418bd8a:	3728      	adds	r7, #40	@ 0x28
3418bd8c:	46bd      	mov	sp, r7
3418bd8e:	bd80      	pop	{r7, pc}

3418bd90 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
3418bd90:	b580      	push	{r7, lr}
3418bd92:	b08a      	sub	sp, #40	@ 0x28
3418bd94:	af02      	add	r7, sp, #8
3418bd96:	60f8      	str	r0, [r7, #12]
3418bd98:	60b9      	str	r1, [r7, #8]
3418bd9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418bd9c:	f7f5 fc46 	bl	3418162c <HAL_GetTick>
3418bda0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418bda2:	68fb      	ldr	r3, [r7, #12]
3418bda4:	681b      	ldr	r3, [r3, #0]
3418bda6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418bda8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418bdaa:	68fb      	ldr	r3, [r7, #12]
3418bdac:	681b      	ldr	r3, [r3, #0]
3418bdae:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418bdb2:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418bdb4:	68fb      	ldr	r3, [r7, #12]
3418bdb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bdb8:	2b04      	cmp	r3, #4
3418bdba:	d167      	bne.n	3418be8c <HAL_XSPI_AutoPolling+0xfc>
3418bdbc:	68bb      	ldr	r3, [r7, #8]
3418bdbe:	68db      	ldr	r3, [r3, #12]
3418bdc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418bdc4:	d162      	bne.n	3418be8c <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418bdc6:	687b      	ldr	r3, [r7, #4]
3418bdc8:	9300      	str	r3, [sp, #0]
3418bdca:	69bb      	ldr	r3, [r7, #24]
3418bdcc:	2200      	movs	r2, #0
3418bdce:	2120      	movs	r1, #32
3418bdd0:	68f8      	ldr	r0, [r7, #12]
3418bdd2:	f000 fa95 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bdd6:	4603      	mov	r3, r0
3418bdd8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418bdda:	7ffb      	ldrb	r3, [r7, #31]
3418bddc:	2b00      	cmp	r3, #0
3418bdde:	d152      	bne.n	3418be86 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418bde0:	68fb      	ldr	r3, [r7, #12]
3418bde2:	681b      	ldr	r3, [r3, #0]
3418bde4:	68ba      	ldr	r2, [r7, #8]
3418bde6:	6812      	ldr	r2, [r2, #0]
3418bde8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418bdec:	68fb      	ldr	r3, [r7, #12]
3418bdee:	681b      	ldr	r3, [r3, #0]
3418bdf0:	68ba      	ldr	r2, [r7, #8]
3418bdf2:	6852      	ldr	r2, [r2, #4]
3418bdf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418bdf8:	68fb      	ldr	r3, [r7, #12]
3418bdfa:	681b      	ldr	r3, [r3, #0]
3418bdfc:	68ba      	ldr	r2, [r7, #8]
3418bdfe:	6912      	ldr	r2, [r2, #16]
3418be00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418be04:	68fb      	ldr	r3, [r7, #12]
3418be06:	681b      	ldr	r3, [r3, #0]
3418be08:	681b      	ldr	r3, [r3, #0]
3418be0a:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
3418be0e:	68bb      	ldr	r3, [r7, #8]
3418be10:	6899      	ldr	r1, [r3, #8]
3418be12:	68bb      	ldr	r3, [r7, #8]
3418be14:	68db      	ldr	r3, [r3, #12]
3418be16:	430b      	orrs	r3, r1
3418be18:	431a      	orrs	r2, r3
3418be1a:	68fb      	ldr	r3, [r7, #12]
3418be1c:	681b      	ldr	r3, [r3, #0]
3418be1e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
3418be22:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418be24:	68fb      	ldr	r3, [r7, #12]
3418be26:	68db      	ldr	r3, [r3, #12]
3418be28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418be2c:	d104      	bne.n	3418be38 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418be2e:	68fb      	ldr	r3, [r7, #12]
3418be30:	681b      	ldr	r3, [r3, #0]
3418be32:	697a      	ldr	r2, [r7, #20]
3418be34:	649a      	str	r2, [r3, #72]	@ 0x48
3418be36:	e011      	b.n	3418be5c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418be38:	68fb      	ldr	r3, [r7, #12]
3418be3a:	681b      	ldr	r3, [r3, #0]
3418be3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418be40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418be44:	2b00      	cmp	r3, #0
3418be46:	d004      	beq.n	3418be52 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418be48:	68fb      	ldr	r3, [r7, #12]
3418be4a:	681b      	ldr	r3, [r3, #0]
3418be4c:	697a      	ldr	r2, [r7, #20]
3418be4e:	649a      	str	r2, [r3, #72]	@ 0x48
3418be50:	e004      	b.n	3418be5c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418be52:	68fb      	ldr	r3, [r7, #12]
3418be54:	681b      	ldr	r3, [r3, #0]
3418be56:	693a      	ldr	r2, [r7, #16]
3418be58:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3418be5c:	687b      	ldr	r3, [r7, #4]
3418be5e:	9300      	str	r3, [sp, #0]
3418be60:	69bb      	ldr	r3, [r7, #24]
3418be62:	2201      	movs	r2, #1
3418be64:	2108      	movs	r1, #8
3418be66:	68f8      	ldr	r0, [r7, #12]
3418be68:	f000 fa4a 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418be6c:	4603      	mov	r3, r0
3418be6e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418be70:	7ffb      	ldrb	r3, [r7, #31]
3418be72:	2b00      	cmp	r3, #0
3418be74:	d110      	bne.n	3418be98 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3418be76:	68fb      	ldr	r3, [r7, #12]
3418be78:	681b      	ldr	r3, [r3, #0]
3418be7a:	2208      	movs	r2, #8
3418be7c:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3418be7e:	68fb      	ldr	r3, [r7, #12]
3418be80:	2202      	movs	r2, #2
3418be82:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418be84:	e008      	b.n	3418be98 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3418be86:	2302      	movs	r3, #2
3418be88:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418be8a:	e005      	b.n	3418be98 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
3418be8c:	2301      	movs	r3, #1
3418be8e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418be90:	68fb      	ldr	r3, [r7, #12]
3418be92:	2210      	movs	r2, #16
3418be94:	65da      	str	r2, [r3, #92]	@ 0x5c
3418be96:	e000      	b.n	3418be9a <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3418be98:	bf00      	nop
  }

  return status;
3418be9a:	7ffb      	ldrb	r3, [r7, #31]
}
3418be9c:	4618      	mov	r0, r3
3418be9e:	3720      	adds	r7, #32
3418bea0:	46bd      	mov	sp, r7
3418bea2:	bd80      	pop	{r7, pc}

3418bea4 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
3418bea4:	b580      	push	{r7, lr}
3418bea6:	b086      	sub	sp, #24
3418bea8:	af02      	add	r7, sp, #8
3418beaa:	6078      	str	r0, [r7, #4]
3418beac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418beae:	f7f5 fbbd 	bl	3418162c <HAL_GetTick>
3418beb2:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418beb4:	687b      	ldr	r3, [r7, #4]
3418beb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418beb8:	2b04      	cmp	r3, #4
3418beba:	d155      	bne.n	3418bf68 <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418bebc:	687b      	ldr	r3, [r7, #4]
3418bebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418bec0:	9300      	str	r3, [sp, #0]
3418bec2:	68bb      	ldr	r3, [r7, #8]
3418bec4:	2200      	movs	r2, #0
3418bec6:	2120      	movs	r1, #32
3418bec8:	6878      	ldr	r0, [r7, #4]
3418beca:	f000 fa19 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418bece:	4603      	mov	r3, r0
3418bed0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
3418bed2:	7bfb      	ldrb	r3, [r7, #15]
3418bed4:	2b00      	cmp	r3, #0
3418bed6:	d14c      	bne.n	3418bf72 <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3418bed8:	687b      	ldr	r3, [r7, #4]
3418beda:	2288      	movs	r2, #136	@ 0x88
3418bedc:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3418bede:	683b      	ldr	r3, [r7, #0]
3418bee0:	689b      	ldr	r3, [r3, #8]
3418bee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418bee6:	d10b      	bne.n	3418bf00 <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3418bee8:	687b      	ldr	r3, [r7, #4]
3418beea:	681b      	ldr	r3, [r3, #0]
3418beec:	681b      	ldr	r3, [r3, #0]
3418beee:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
3418bef2:	683b      	ldr	r3, [r7, #0]
3418bef4:	689a      	ldr	r2, [r3, #8]
3418bef6:	687b      	ldr	r3, [r7, #4]
3418bef8:	681b      	ldr	r3, [r3, #0]
3418befa:	430a      	orrs	r2, r1
3418befc:	601a      	str	r2, [r3, #0]
3418befe:	e00d      	b.n	3418bf1c <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3418bf00:	687b      	ldr	r3, [r7, #4]
3418bf02:	681b      	ldr	r3, [r3, #0]
3418bf04:	681b      	ldr	r3, [r3, #0]
3418bf06:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3418bf0a:	683b      	ldr	r3, [r7, #0]
3418bf0c:	689a      	ldr	r2, [r3, #8]
3418bf0e:	683b      	ldr	r3, [r7, #0]
3418bf10:	68db      	ldr	r3, [r3, #12]
3418bf12:	431a      	orrs	r2, r3
3418bf14:	687b      	ldr	r3, [r7, #4]
3418bf16:	681b      	ldr	r3, [r3, #0]
3418bf18:	430a      	orrs	r2, r1
3418bf1a:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3418bf1c:	683b      	ldr	r3, [r7, #0]
3418bf1e:	681b      	ldr	r3, [r3, #0]
3418bf20:	2b08      	cmp	r3, #8
3418bf22:	d111      	bne.n	3418bf48 <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3418bf24:	687b      	ldr	r3, [r7, #4]
3418bf26:	681b      	ldr	r3, [r3, #0]
3418bf28:	683a      	ldr	r2, [r7, #0]
3418bf2a:	6852      	ldr	r2, [r2, #4]
3418bf2c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3418bf30:	687b      	ldr	r3, [r7, #4]
3418bf32:	681b      	ldr	r3, [r3, #0]
3418bf34:	2210      	movs	r2, #16
3418bf36:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3418bf38:	687b      	ldr	r3, [r7, #4]
3418bf3a:	681b      	ldr	r3, [r3, #0]
3418bf3c:	681a      	ldr	r2, [r3, #0]
3418bf3e:	687b      	ldr	r3, [r7, #4]
3418bf40:	681b      	ldr	r3, [r3, #0]
3418bf42:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3418bf46:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3418bf48:	687b      	ldr	r3, [r7, #4]
3418bf4a:	681b      	ldr	r3, [r3, #0]
3418bf4c:	681b      	ldr	r3, [r3, #0]
3418bf4e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3418bf52:	f023 0308 	bic.w	r3, r3, #8
3418bf56:	683a      	ldr	r2, [r7, #0]
3418bf58:	6812      	ldr	r2, [r2, #0]
3418bf5a:	431a      	orrs	r2, r3
3418bf5c:	687b      	ldr	r3, [r7, #4]
3418bf5e:	681b      	ldr	r3, [r3, #0]
3418bf60:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3418bf64:	601a      	str	r2, [r3, #0]
3418bf66:	e004      	b.n	3418bf72 <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3418bf68:	2301      	movs	r3, #1
3418bf6a:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418bf6c:	687b      	ldr	r3, [r7, #4]
3418bf6e:	2210      	movs	r2, #16
3418bf70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418bf72:	7bfb      	ldrb	r3, [r7, #15]
}
3418bf74:	4618      	mov	r0, r3
3418bf76:	3710      	adds	r7, #16
3418bf78:	46bd      	mov	sp, r7
3418bf7a:	bd80      	pop	{r7, pc}

3418bf7c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
3418bf7c:	b580      	push	{r7, lr}
3418bf7e:	b086      	sub	sp, #24
3418bf80:	af02      	add	r7, sp, #8
3418bf82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418bf84:	2300      	movs	r3, #0
3418bf86:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418bf88:	f7f5 fb50 	bl	3418162c <HAL_GetTick>
3418bf8c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
3418bf8e:	687b      	ldr	r3, [r7, #4]
3418bf90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418bf92:	2b00      	cmp	r3, #0
3418bf94:	d06f      	beq.n	3418c076 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418bf96:	687b      	ldr	r3, [r7, #4]
3418bf98:	681b      	ldr	r3, [r3, #0]
3418bf9a:	681b      	ldr	r3, [r3, #0]
3418bf9c:	f003 0304 	and.w	r3, r3, #4
3418bfa0:	2b00      	cmp	r3, #0
3418bfa2:	d021      	beq.n	3418bfe8 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418bfa4:	687b      	ldr	r3, [r7, #4]
3418bfa6:	681b      	ldr	r3, [r3, #0]
3418bfa8:	681a      	ldr	r2, [r3, #0]
3418bfaa:	687b      	ldr	r3, [r7, #4]
3418bfac:	681b      	ldr	r3, [r3, #0]
3418bfae:	f022 0204 	bic.w	r2, r2, #4
3418bfb2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
3418bfb4:	687b      	ldr	r3, [r7, #4]
3418bfb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418bfb8:	4618      	mov	r0, r3
3418bfba:	f7f5 fd22 	bl	34181a02 <HAL_DMA_Abort>
3418bfbe:	4603      	mov	r3, r0
3418bfc0:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418bfc2:	7bfb      	ldrb	r3, [r7, #15]
3418bfc4:	2b00      	cmp	r3, #0
3418bfc6:	d002      	beq.n	3418bfce <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418bfc8:	687b      	ldr	r3, [r7, #4]
3418bfca:	2204      	movs	r2, #4
3418bfcc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
3418bfce:	687b      	ldr	r3, [r7, #4]
3418bfd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418bfd2:	4618      	mov	r0, r3
3418bfd4:	f7f5 fd15 	bl	34181a02 <HAL_DMA_Abort>
3418bfd8:	4603      	mov	r3, r0
3418bfda:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418bfdc:	7bfb      	ldrb	r3, [r7, #15]
3418bfde:	2b00      	cmp	r3, #0
3418bfe0:	d002      	beq.n	3418bfe8 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418bfe2:	687b      	ldr	r3, [r7, #4]
3418bfe4:	2204      	movs	r2, #4
3418bfe6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418bfe8:	687b      	ldr	r3, [r7, #4]
3418bfea:	681b      	ldr	r3, [r3, #0]
3418bfec:	6a1b      	ldr	r3, [r3, #32]
3418bfee:	f003 0320 	and.w	r3, r3, #32
3418bff2:	2b00      	cmp	r3, #0
3418bff4:	d033      	beq.n	3418c05e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418bff6:	687b      	ldr	r3, [r7, #4]
3418bff8:	681b      	ldr	r3, [r3, #0]
3418bffa:	681a      	ldr	r2, [r3, #0]
3418bffc:	687b      	ldr	r3, [r7, #4]
3418bffe:	681b      	ldr	r3, [r3, #0]
3418c000:	f042 0202 	orr.w	r2, r2, #2
3418c004:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3418c006:	687b      	ldr	r3, [r7, #4]
3418c008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c00a:	9300      	str	r3, [sp, #0]
3418c00c:	68bb      	ldr	r3, [r7, #8]
3418c00e:	2201      	movs	r2, #1
3418c010:	2102      	movs	r1, #2
3418c012:	6878      	ldr	r0, [r7, #4]
3418c014:	f000 f974 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418c018:	4603      	mov	r3, r0
3418c01a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418c01c:	7bfb      	ldrb	r3, [r7, #15]
3418c01e:	2b00      	cmp	r3, #0
3418c020:	d12e      	bne.n	3418c080 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418c022:	687b      	ldr	r3, [r7, #4]
3418c024:	681b      	ldr	r3, [r3, #0]
3418c026:	2202      	movs	r2, #2
3418c028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418c02a:	687b      	ldr	r3, [r7, #4]
3418c02c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c02e:	9300      	str	r3, [sp, #0]
3418c030:	68bb      	ldr	r3, [r7, #8]
3418c032:	2200      	movs	r2, #0
3418c034:	2120      	movs	r1, #32
3418c036:	6878      	ldr	r0, [r7, #4]
3418c038:	f000 f962 	bl	3418c300 <XSPI_WaitFlagStateUntilTimeout>
3418c03c:	4603      	mov	r3, r0
3418c03e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
3418c040:	7bfb      	ldrb	r3, [r7, #15]
3418c042:	2b00      	cmp	r3, #0
3418c044:	d11c      	bne.n	3418c080 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418c046:	687b      	ldr	r3, [r7, #4]
3418c048:	681b      	ldr	r3, [r3, #0]
3418c04a:	681a      	ldr	r2, [r3, #0]
3418c04c:	687b      	ldr	r3, [r7, #4]
3418c04e:	681b      	ldr	r3, [r3, #0]
3418c050:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418c054:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
3418c056:	687b      	ldr	r3, [r7, #4]
3418c058:	2202      	movs	r2, #2
3418c05a:	659a      	str	r2, [r3, #88]	@ 0x58
3418c05c:	e010      	b.n	3418c080 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418c05e:	687b      	ldr	r3, [r7, #4]
3418c060:	681b      	ldr	r3, [r3, #0]
3418c062:	681a      	ldr	r2, [r3, #0]
3418c064:	687b      	ldr	r3, [r7, #4]
3418c066:	681b      	ldr	r3, [r3, #0]
3418c068:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418c06c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418c06e:	687b      	ldr	r3, [r7, #4]
3418c070:	2202      	movs	r2, #2
3418c072:	659a      	str	r2, [r3, #88]	@ 0x58
3418c074:	e004      	b.n	3418c080 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3418c076:	2301      	movs	r3, #1
3418c078:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418c07a:	687b      	ldr	r3, [r7, #4]
3418c07c:	2210      	movs	r2, #16
3418c07e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418c080:	7bfb      	ldrb	r3, [r7, #15]
}
3418c082:	4618      	mov	r0, r3
3418c084:	3710      	adds	r7, #16
3418c086:	46bd      	mov	sp, r7
3418c088:	bd80      	pop	{r7, pc}

3418c08a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3418c08a:	b480      	push	{r7}
3418c08c:	b083      	sub	sp, #12
3418c08e:	af00      	add	r7, sp, #0
3418c090:	6078      	str	r0, [r7, #4]
3418c092:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3418c094:	687b      	ldr	r3, [r7, #4]
3418c096:	683a      	ldr	r2, [r7, #0]
3418c098:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3418c09a:	2300      	movs	r3, #0
}
3418c09c:	4618      	mov	r0, r3
3418c09e:	370c      	adds	r7, #12
3418c0a0:	46bd      	mov	sp, r7
3418c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c0a6:	4770      	bx	lr

3418c0a8 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
3418c0a8:	b580      	push	{r7, lr}
3418c0aa:	b08e      	sub	sp, #56	@ 0x38
3418c0ac:	af00      	add	r7, sp, #0
3418c0ae:	60f8      	str	r0, [r7, #12]
3418c0b0:	60b9      	str	r1, [r7, #8]
3418c0b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418c0b4:	2300      	movs	r3, #0
3418c0b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3418c0ba:	2300      	movs	r3, #0
3418c0bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3418c0c0:	f107 0310 	add.w	r3, r7, #16
3418c0c4:	2224      	movs	r2, #36	@ 0x24
3418c0c6:	2100      	movs	r1, #0
3418c0c8:	4618      	mov	r0, r3
3418c0ca:	f003 fa93 	bl	3418f5f4 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418c0ce:	2300      	movs	r3, #0
3418c0d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418c0d4:	e014      	b.n	3418c100 <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3418c0d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c0da:	3301      	adds	r3, #1
3418c0dc:	b2d8      	uxtb	r0, r3
3418c0de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418c0e2:	f107 0110 	add.w	r1, r7, #16
3418c0e6:	4613      	mov	r3, r2
3418c0e8:	005b      	lsls	r3, r3, #1
3418c0ea:	4413      	add	r3, r2
3418c0ec:	009b      	lsls	r3, r3, #2
3418c0ee:	440b      	add	r3, r1
3418c0f0:	4619      	mov	r1, r3
3418c0f2:	f000 fad5 	bl	3418c6a0 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418c0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c0fa:	3301      	adds	r3, #1
3418c0fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418c100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c104:	2b02      	cmp	r3, #2
3418c106:	d9e6      	bls.n	3418c0d6 <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3418c108:	2020      	movs	r0, #32
3418c10a:	f7ff fb71 	bl	3418b7f0 <LL_AHB5_GRP1_IsEnabledClock>
3418c10e:	4603      	mov	r3, r0
3418c110:	2b00      	cmp	r3, #0
3418c112:	d011      	beq.n	3418c138 <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
3418c114:	4b76      	ldr	r3, [pc, #472]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c116:	681b      	ldr	r3, [r3, #0]
3418c118:	f003 0301 	and.w	r3, r3, #1
3418c11c:	2b00      	cmp	r3, #0
3418c11e:	d00b      	beq.n	3418c138 <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3418c120:	4b73      	ldr	r3, [pc, #460]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c122:	681b      	ldr	r3, [r3, #0]
3418c124:	4a72      	ldr	r2, [pc, #456]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c126:	f023 0301 	bic.w	r3, r3, #1
3418c12a:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
3418c12c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418c130:	f043 0301 	orr.w	r3, r3, #1
3418c134:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
3418c138:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418c13c:	f7ff fb58 	bl	3418b7f0 <LL_AHB5_GRP1_IsEnabledClock>
3418c140:	4603      	mov	r3, r0
3418c142:	2b00      	cmp	r3, #0
3418c144:	d011      	beq.n	3418c16a <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
3418c146:	4b6b      	ldr	r3, [pc, #428]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c148:	681b      	ldr	r3, [r3, #0]
3418c14a:	f003 0301 	and.w	r3, r3, #1
3418c14e:	2b00      	cmp	r3, #0
3418c150:	d00b      	beq.n	3418c16a <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418c152:	4b68      	ldr	r3, [pc, #416]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c154:	681b      	ldr	r3, [r3, #0]
3418c156:	4a67      	ldr	r2, [pc, #412]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c158:	f023 0301 	bic.w	r3, r3, #1
3418c15c:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
3418c15e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418c162:	f043 0302 	orr.w	r3, r3, #2
3418c166:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
3418c16a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3418c16e:	f7ff fb3f 	bl	3418b7f0 <LL_AHB5_GRP1_IsEnabledClock>
3418c172:	4603      	mov	r3, r0
3418c174:	2b00      	cmp	r3, #0
3418c176:	d011      	beq.n	3418c19c <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3418c178:	4b5f      	ldr	r3, [pc, #380]	@ (3418c2f8 <HAL_XSPIM_Config+0x250>)
3418c17a:	681b      	ldr	r3, [r3, #0]
3418c17c:	f003 0301 	and.w	r3, r3, #1
3418c180:	2b00      	cmp	r3, #0
3418c182:	d00b      	beq.n	3418c19c <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418c184:	4b5b      	ldr	r3, [pc, #364]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c186:	681b      	ldr	r3, [r3, #0]
3418c188:	4a5a      	ldr	r2, [pc, #360]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c18a:	f023 0301 	bic.w	r3, r3, #1
3418c18e:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
3418c190:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418c194:	f043 0304 	orr.w	r3, r3, #4
3418c198:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
3418c19c:	4b57      	ldr	r3, [pc, #348]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c19e:	2200      	movs	r2, #0
3418c1a0:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
3418c1a2:	4b56      	ldr	r3, [pc, #344]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c1a4:	681b      	ldr	r3, [r3, #0]
3418c1a6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3418c1aa:	68bb      	ldr	r3, [r7, #8]
3418c1ac:	689b      	ldr	r3, [r3, #8]
3418c1ae:	3b01      	subs	r3, #1
3418c1b0:	041b      	lsls	r3, r3, #16
3418c1b2:	4952      	ldr	r1, [pc, #328]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c1b4:	4313      	orrs	r3, r2
3418c1b6:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3418c1b8:	68fb      	ldr	r3, [r7, #12]
3418c1ba:	681b      	ldr	r3, [r3, #0]
3418c1bc:	4a4c      	ldr	r2, [pc, #304]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c1be:	4293      	cmp	r3, r2
3418c1c0:	d110      	bne.n	3418c1e4 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3418c1c2:	68bb      	ldr	r3, [r7, #8]
3418c1c4:	685b      	ldr	r3, [r3, #4]
3418c1c6:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418c1c8:	68bb      	ldr	r3, [r7, #8]
3418c1ca:	681b      	ldr	r3, [r3, #0]
3418c1cc:	2b00      	cmp	r3, #0
3418c1ce:	d03e      	beq.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418c1d0:	4b4a      	ldr	r3, [pc, #296]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c1d2:	681b      	ldr	r3, [r3, #0]
3418c1d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418c1d8:	68bb      	ldr	r3, [r7, #8]
3418c1da:	681b      	ldr	r3, [r3, #0]
3418c1dc:	4947      	ldr	r1, [pc, #284]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c1de:	4313      	orrs	r3, r2
3418c1e0:	600b      	str	r3, [r1, #0]
3418c1e2:	e034      	b.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
3418c1e4:	68fb      	ldr	r3, [r7, #12]
3418c1e6:	681b      	ldr	r3, [r3, #0]
3418c1e8:	4a42      	ldr	r2, [pc, #264]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c1ea:	4293      	cmp	r3, r2
3418c1ec:	d110      	bne.n	3418c210 <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3418c1ee:	68bb      	ldr	r3, [r7, #8]
3418c1f0:	685b      	ldr	r3, [r3, #4]
3418c1f2:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418c1f4:	68bb      	ldr	r3, [r7, #8]
3418c1f6:	681b      	ldr	r3, [r3, #0]
3418c1f8:	2b00      	cmp	r3, #0
3418c1fa:	d028      	beq.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418c1fc:	4b3f      	ldr	r3, [pc, #252]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c1fe:	681b      	ldr	r3, [r3, #0]
3418c200:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
3418c204:	68bb      	ldr	r3, [r7, #8]
3418c206:	681b      	ldr	r3, [r3, #0]
3418c208:	493c      	ldr	r1, [pc, #240]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c20a:	4313      	orrs	r3, r2
3418c20c:	600b      	str	r3, [r1, #0]
3418c20e:	e01e      	b.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3418c210:	68fb      	ldr	r3, [r7, #12]
3418c212:	681b      	ldr	r3, [r3, #0]
3418c214:	4a38      	ldr	r2, [pc, #224]	@ (3418c2f8 <HAL_XSPIM_Config+0x250>)
3418c216:	4293      	cmp	r3, r2
3418c218:	d111      	bne.n	3418c23e <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
3418c21a:	68bb      	ldr	r3, [r7, #8]
3418c21c:	685b      	ldr	r3, [r3, #4]
3418c21e:	2b00      	cmp	r3, #0
3418c220:	d104      	bne.n	3418c22c <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3418c222:	2301      	movs	r3, #1
3418c224:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
3418c226:	2301      	movs	r3, #1
3418c228:	623b      	str	r3, [r7, #32]
3418c22a:	e010      	b.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
3418c22c:	68bb      	ldr	r3, [r7, #8]
3418c22e:	685b      	ldr	r3, [r3, #4]
3418c230:	2b01      	cmp	r3, #1
3418c232:	d10c      	bne.n	3418c24e <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
3418c234:	2300      	movs	r3, #0
3418c236:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
3418c238:	2300      	movs	r3, #0
3418c23a:	623b      	str	r3, [r7, #32]
3418c23c:	e007      	b.n	3418c24e <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3418c23e:	68fb      	ldr	r3, [r7, #12]
3418c240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418c242:	f043 0208 	orr.w	r2, r3, #8
3418c246:	68fb      	ldr	r3, [r7, #12]
3418c248:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
3418c24a:	2301      	movs	r3, #1
3418c24c:	e04c      	b.n	3418c2e8 <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418c24e:	2300      	movs	r3, #0
3418c250:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418c254:	e02a      	b.n	3418c2ac <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
3418c256:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418c25a:	4613      	mov	r3, r2
3418c25c:	005b      	lsls	r3, r3, #1
3418c25e:	4413      	add	r3, r2
3418c260:	009b      	lsls	r3, r3, #2
3418c262:	3338      	adds	r3, #56	@ 0x38
3418c264:	443b      	add	r3, r7
3418c266:	3b24      	subs	r3, #36	@ 0x24
3418c268:	6819      	ldr	r1, [r3, #0]
3418c26a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c26e:	1c5a      	adds	r2, r3, #1
3418c270:	4613      	mov	r3, r2
3418c272:	005b      	lsls	r3, r3, #1
3418c274:	4413      	add	r3, r2
3418c276:	009b      	lsls	r3, r3, #2
3418c278:	3338      	adds	r3, #56	@ 0x38
3418c27a:	443b      	add	r3, r7
3418c27c:	3b24      	subs	r3, #36	@ 0x24
3418c27e:	681b      	ldr	r3, [r3, #0]
3418c280:	4299      	cmp	r1, r3
3418c282:	d105      	bne.n	3418c290 <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
3418c284:	4b1d      	ldr	r3, [pc, #116]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c286:	681b      	ldr	r3, [r3, #0]
3418c288:	4a1c      	ldr	r2, [pc, #112]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c28a:	f043 0301 	orr.w	r3, r3, #1
3418c28e:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
3418c290:	697b      	ldr	r3, [r7, #20]
3418c292:	2b01      	cmp	r3, #1
3418c294:	d105      	bne.n	3418c2a2 <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3418c296:	4b19      	ldr	r3, [pc, #100]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c298:	681b      	ldr	r3, [r3, #0]
3418c29a:	4a18      	ldr	r2, [pc, #96]	@ (3418c2fc <HAL_XSPIM_Config+0x254>)
3418c29c:	f043 0302 	orr.w	r3, r3, #2
3418c2a0:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418c2a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c2a6:	3301      	adds	r3, #1
3418c2a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418c2ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418c2b0:	2b00      	cmp	r3, #0
3418c2b2:	d0d0      	beq.n	3418c256 <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
3418c2b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418c2b8:	f003 0301 	and.w	r3, r3, #1
3418c2bc:	2b00      	cmp	r3, #0
3418c2be:	d005      	beq.n	3418c2cc <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3418c2c0:	4b0b      	ldr	r3, [pc, #44]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c2c2:	681b      	ldr	r3, [r3, #0]
3418c2c4:	4a0a      	ldr	r2, [pc, #40]	@ (3418c2f0 <HAL_XSPIM_Config+0x248>)
3418c2c6:	f043 0301 	orr.w	r3, r3, #1
3418c2ca:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
3418c2cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418c2d0:	f003 0302 	and.w	r3, r3, #2
3418c2d4:	2b00      	cmp	r3, #0
3418c2d6:	d005      	beq.n	3418c2e4 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3418c2d8:	4b06      	ldr	r3, [pc, #24]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c2da:	681b      	ldr	r3, [r3, #0]
3418c2dc:	4a05      	ldr	r2, [pc, #20]	@ (3418c2f4 <HAL_XSPIM_Config+0x24c>)
3418c2de:	f043 0301 	orr.w	r3, r3, #1
3418c2e2:	6013      	str	r3, [r2, #0]
  }

  return status;
3418c2e4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3418c2e8:	4618      	mov	r0, r3
3418c2ea:	3738      	adds	r7, #56	@ 0x38
3418c2ec:	46bd      	mov	sp, r7
3418c2ee:	bd80      	pop	{r7, pc}
3418c2f0:	58025000 	.word	0x58025000
3418c2f4:	5802a000 	.word	0x5802a000
3418c2f8:	5802d000 	.word	0x5802d000
3418c2fc:	5802b400 	.word	0x5802b400

3418c300 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3418c300:	b580      	push	{r7, lr}
3418c302:	b084      	sub	sp, #16
3418c304:	af00      	add	r7, sp, #0
3418c306:	60f8      	str	r0, [r7, #12]
3418c308:	60b9      	str	r1, [r7, #8]
3418c30a:	603b      	str	r3, [r7, #0]
3418c30c:	4613      	mov	r3, r2
3418c30e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418c310:	e019      	b.n	3418c346 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418c312:	69bb      	ldr	r3, [r7, #24]
3418c314:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c318:	d015      	beq.n	3418c346 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418c31a:	f7f5 f987 	bl	3418162c <HAL_GetTick>
3418c31e:	4602      	mov	r2, r0
3418c320:	683b      	ldr	r3, [r7, #0]
3418c322:	1ad3      	subs	r3, r2, r3
3418c324:	69ba      	ldr	r2, [r7, #24]
3418c326:	429a      	cmp	r2, r3
3418c328:	d302      	bcc.n	3418c330 <XSPI_WaitFlagStateUntilTimeout+0x30>
3418c32a:	69bb      	ldr	r3, [r7, #24]
3418c32c:	2b00      	cmp	r3, #0
3418c32e:	d10a      	bne.n	3418c346 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3418c330:	68fb      	ldr	r3, [r7, #12]
3418c332:	2202      	movs	r2, #2
3418c334:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3418c336:	68fb      	ldr	r3, [r7, #12]
3418c338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418c33a:	f043 0201 	orr.w	r2, r3, #1
3418c33e:	68fb      	ldr	r3, [r7, #12]
3418c340:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3418c342:	2303      	movs	r3, #3
3418c344:	e00e      	b.n	3418c364 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418c346:	68fb      	ldr	r3, [r7, #12]
3418c348:	681b      	ldr	r3, [r3, #0]
3418c34a:	6a1a      	ldr	r2, [r3, #32]
3418c34c:	68bb      	ldr	r3, [r7, #8]
3418c34e:	4013      	ands	r3, r2
3418c350:	2b00      	cmp	r3, #0
3418c352:	bf14      	ite	ne
3418c354:	2301      	movne	r3, #1
3418c356:	2300      	moveq	r3, #0
3418c358:	b2db      	uxtb	r3, r3
3418c35a:	461a      	mov	r2, r3
3418c35c:	79fb      	ldrb	r3, [r7, #7]
3418c35e:	429a      	cmp	r2, r3
3418c360:	d1d7      	bne.n	3418c312 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3418c362:	2300      	movs	r3, #0
}
3418c364:	4618      	mov	r0, r3
3418c366:	3710      	adds	r7, #16
3418c368:	46bd      	mov	sp, r7
3418c36a:	bd80      	pop	{r7, pc}

3418c36c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
3418c36c:	b480      	push	{r7}
3418c36e:	b089      	sub	sp, #36	@ 0x24
3418c370:	af00      	add	r7, sp, #0
3418c372:	6078      	str	r0, [r7, #4]
3418c374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418c376:	2300      	movs	r3, #0
3418c378:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3418c37a:	687b      	ldr	r3, [r7, #4]
3418c37c:	681b      	ldr	r3, [r3, #0]
3418c37e:	681a      	ldr	r2, [r3, #0]
3418c380:	687b      	ldr	r3, [r7, #4]
3418c382:	681b      	ldr	r3, [r3, #0]
3418c384:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418c388:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3418c38a:	687b      	ldr	r3, [r7, #4]
3418c38c:	689b      	ldr	r3, [r3, #8]
3418c38e:	2b00      	cmp	r3, #0
3418c390:	d10a      	bne.n	3418c3a8 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3418c392:	687b      	ldr	r3, [r7, #4]
3418c394:	681b      	ldr	r3, [r3, #0]
3418c396:	681b      	ldr	r3, [r3, #0]
3418c398:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3418c39c:	683b      	ldr	r3, [r7, #0]
3418c39e:	685a      	ldr	r2, [r3, #4]
3418c3a0:	687b      	ldr	r3, [r7, #4]
3418c3a2:	681b      	ldr	r3, [r3, #0]
3418c3a4:	430a      	orrs	r2, r1
3418c3a6:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418c3a8:	683b      	ldr	r3, [r7, #0]
3418c3aa:	681b      	ldr	r3, [r3, #0]
3418c3ac:	2b02      	cmp	r3, #2
3418c3ae:	d114      	bne.n	3418c3da <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3418c3b0:	687b      	ldr	r3, [r7, #4]
3418c3b2:	681b      	ldr	r3, [r3, #0]
3418c3b4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3418c3b8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3418c3ba:	687b      	ldr	r3, [r7, #4]
3418c3bc:	681b      	ldr	r3, [r3, #0]
3418c3be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3418c3c2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3418c3c4:	687b      	ldr	r3, [r7, #4]
3418c3c6:	681b      	ldr	r3, [r3, #0]
3418c3c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3418c3cc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3418c3ce:	687b      	ldr	r3, [r7, #4]
3418c3d0:	681b      	ldr	r3, [r3, #0]
3418c3d2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
3418c3d6:	60fb      	str	r3, [r7, #12]
3418c3d8:	e02c      	b.n	3418c434 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3418c3da:	683b      	ldr	r3, [r7, #0]
3418c3dc:	681b      	ldr	r3, [r3, #0]
3418c3de:	2b03      	cmp	r3, #3
3418c3e0:	d114      	bne.n	3418c40c <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3418c3e2:	687b      	ldr	r3, [r7, #4]
3418c3e4:	681b      	ldr	r3, [r3, #0]
3418c3e6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3418c3ea:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3418c3ec:	687b      	ldr	r3, [r7, #4]
3418c3ee:	681b      	ldr	r3, [r3, #0]
3418c3f0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3418c3f4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
3418c3f6:	687b      	ldr	r3, [r7, #4]
3418c3f8:	681b      	ldr	r3, [r3, #0]
3418c3fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3418c3fe:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3418c400:	687b      	ldr	r3, [r7, #4]
3418c402:	681b      	ldr	r3, [r3, #0]
3418c404:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418c408:	60fb      	str	r3, [r7, #12]
3418c40a:	e013      	b.n	3418c434 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3418c40c:	687b      	ldr	r3, [r7, #4]
3418c40e:	681b      	ldr	r3, [r3, #0]
3418c410:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418c414:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
3418c416:	687b      	ldr	r3, [r7, #4]
3418c418:	681b      	ldr	r3, [r3, #0]
3418c41a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3418c41e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3418c420:	687b      	ldr	r3, [r7, #4]
3418c422:	681b      	ldr	r3, [r3, #0]
3418c424:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3418c428:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3418c42a:	687b      	ldr	r3, [r7, #4]
3418c42c:	681b      	ldr	r3, [r3, #0]
3418c42e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3418c432:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3418c434:	683b      	ldr	r3, [r7, #0]
3418c436:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c438:	69bb      	ldr	r3, [r7, #24]
3418c43a:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3418c43c:	683b      	ldr	r3, [r7, #0]
3418c43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c440:	2b00      	cmp	r3, #0
3418c442:	d012      	beq.n	3418c46a <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3418c444:	683b      	ldr	r3, [r7, #0]
3418c446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418c448:	68fb      	ldr	r3, [r7, #12]
3418c44a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3418c44c:	69bb      	ldr	r3, [r7, #24]
3418c44e:	681b      	ldr	r3, [r3, #0]
3418c450:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3418c454:	683b      	ldr	r3, [r7, #0]
3418c456:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418c458:	683b      	ldr	r3, [r7, #0]
3418c45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418c45c:	4319      	orrs	r1, r3
3418c45e:	683b      	ldr	r3, [r7, #0]
3418c460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418c462:	430b      	orrs	r3, r1
3418c464:	431a      	orrs	r2, r3
3418c466:	69bb      	ldr	r3, [r7, #24]
3418c468:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3418c46a:	697b      	ldr	r3, [r7, #20]
3418c46c:	681b      	ldr	r3, [r3, #0]
3418c46e:	f023 021f 	bic.w	r2, r3, #31
3418c472:	683b      	ldr	r3, [r7, #0]
3418c474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c476:	431a      	orrs	r2, r3
3418c478:	697b      	ldr	r3, [r7, #20]
3418c47a:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c47c:	683b      	ldr	r3, [r7, #0]
3418c47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c480:	2b00      	cmp	r3, #0
3418c482:	d009      	beq.n	3418c498 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418c484:	683b      	ldr	r3, [r7, #0]
3418c486:	681b      	ldr	r3, [r3, #0]
3418c488:	2b00      	cmp	r3, #0
3418c48a:	d105      	bne.n	3418c498 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418c48c:	683b      	ldr	r3, [r7, #0]
3418c48e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418c490:	687b      	ldr	r3, [r7, #4]
3418c492:	681b      	ldr	r3, [r3, #0]
3418c494:	3a01      	subs	r2, #1
3418c496:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c498:	683b      	ldr	r3, [r7, #0]
3418c49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c49c:	2b00      	cmp	r3, #0
3418c49e:	d01e      	beq.n	3418c4de <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418c4a0:	683b      	ldr	r3, [r7, #0]
3418c4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c4a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418c4a8:	d10a      	bne.n	3418c4c0 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418c4aa:	687b      	ldr	r3, [r7, #4]
3418c4ac:	681b      	ldr	r3, [r3, #0]
3418c4ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418c4b2:	687b      	ldr	r3, [r7, #4]
3418c4b4:	681b      	ldr	r3, [r3, #0]
3418c4b6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3418c4ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3418c4be:	e00e      	b.n	3418c4de <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3418c4c0:	687b      	ldr	r3, [r7, #4]
3418c4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418c4c8:	d109      	bne.n	3418c4de <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418c4ca:	687b      	ldr	r3, [r7, #4]
3418c4cc:	681b      	ldr	r3, [r3, #0]
3418c4ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418c4d2:	687b      	ldr	r3, [r7, #4]
3418c4d4:	681b      	ldr	r3, [r3, #0]
3418c4d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3418c4da:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3418c4de:	683b      	ldr	r3, [r7, #0]
3418c4e0:	68db      	ldr	r3, [r3, #12]
3418c4e2:	2b00      	cmp	r3, #0
3418c4e4:	f000 8099 	beq.w	3418c61a <XSPI_ConfigCmd+0x2ae>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418c4e8:	683b      	ldr	r3, [r7, #0]
3418c4ea:	69db      	ldr	r3, [r3, #28]
3418c4ec:	2b00      	cmp	r3, #0
3418c4ee:	d055      	beq.n	3418c59c <XSPI_ConfigCmd+0x230>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c4f0:	683b      	ldr	r3, [r7, #0]
3418c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c4f4:	2b00      	cmp	r3, #0
3418c4f6:	d01e      	beq.n	3418c536 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418c4f8:	69bb      	ldr	r3, [r7, #24]
3418c4fa:	681a      	ldr	r2, [r3, #0]
3418c4fc:	4b67      	ldr	r3, [pc, #412]	@ (3418c69c <XSPI_ConfigCmd+0x330>)
3418c4fe:	4013      	ands	r3, r2
3418c500:	683a      	ldr	r2, [r7, #0]
3418c502:	68d1      	ldr	r1, [r2, #12]
3418c504:	683a      	ldr	r2, [r7, #0]
3418c506:	6952      	ldr	r2, [r2, #20]
3418c508:	4311      	orrs	r1, r2
3418c50a:	683a      	ldr	r2, [r7, #0]
3418c50c:	6912      	ldr	r2, [r2, #16]
3418c50e:	4311      	orrs	r1, r2
3418c510:	683a      	ldr	r2, [r7, #0]
3418c512:	69d2      	ldr	r2, [r2, #28]
3418c514:	4311      	orrs	r1, r2
3418c516:	683a      	ldr	r2, [r7, #0]
3418c518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418c51a:	4311      	orrs	r1, r2
3418c51c:	683a      	ldr	r2, [r7, #0]
3418c51e:	6a12      	ldr	r2, [r2, #32]
3418c520:	4311      	orrs	r1, r2
3418c522:	683a      	ldr	r2, [r7, #0]
3418c524:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c526:	4311      	orrs	r1, r2
3418c528:	683a      	ldr	r2, [r7, #0]
3418c52a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418c52c:	430a      	orrs	r2, r1
3418c52e:	431a      	orrs	r2, r3
3418c530:	69bb      	ldr	r3, [r7, #24]
3418c532:	601a      	str	r2, [r3, #0]
3418c534:	e028      	b.n	3418c588 <XSPI_ConfigCmd+0x21c>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418c536:	69bb      	ldr	r3, [r7, #24]
3418c538:	681b      	ldr	r3, [r3, #0]
3418c53a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418c53e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418c542:	683a      	ldr	r2, [r7, #0]
3418c544:	68d1      	ldr	r1, [r2, #12]
3418c546:	683a      	ldr	r2, [r7, #0]
3418c548:	6952      	ldr	r2, [r2, #20]
3418c54a:	4311      	orrs	r1, r2
3418c54c:	683a      	ldr	r2, [r7, #0]
3418c54e:	6912      	ldr	r2, [r2, #16]
3418c550:	4311      	orrs	r1, r2
3418c552:	683a      	ldr	r2, [r7, #0]
3418c554:	69d2      	ldr	r2, [r2, #28]
3418c556:	4311      	orrs	r1, r2
3418c558:	683a      	ldr	r2, [r7, #0]
3418c55a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418c55c:	4311      	orrs	r1, r2
3418c55e:	683a      	ldr	r2, [r7, #0]
3418c560:	6a12      	ldr	r2, [r2, #32]
3418c562:	430a      	orrs	r2, r1
3418c564:	431a      	orrs	r2, r3
3418c566:	69bb      	ldr	r3, [r7, #24]
3418c568:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c56a:	687b      	ldr	r3, [r7, #4]
3418c56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c56e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c572:	d109      	bne.n	3418c588 <XSPI_ConfigCmd+0x21c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418c574:	683b      	ldr	r3, [r7, #0]
3418c576:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c578:	2b08      	cmp	r3, #8
3418c57a:	d105      	bne.n	3418c588 <XSPI_ConfigCmd+0x21c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418c57c:	69bb      	ldr	r3, [r7, #24]
3418c57e:	681b      	ldr	r3, [r3, #0]
3418c580:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418c584:	69bb      	ldr	r3, [r7, #24]
3418c586:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418c588:	683b      	ldr	r3, [r7, #0]
3418c58a:	689a      	ldr	r2, [r3, #8]
3418c58c:	693b      	ldr	r3, [r7, #16]
3418c58e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3418c590:	687b      	ldr	r3, [r7, #4]
3418c592:	681b      	ldr	r3, [r3, #0]
3418c594:	683a      	ldr	r2, [r7, #0]
3418c596:	6992      	ldr	r2, [r2, #24]
3418c598:	649a      	str	r2, [r3, #72]	@ 0x48
3418c59a:	e078      	b.n	3418c68e <XSPI_ConfigCmd+0x322>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c59c:	683b      	ldr	r3, [r7, #0]
3418c59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c5a0:	2b00      	cmp	r3, #0
3418c5a2:	d017      	beq.n	3418c5d4 <XSPI_ConfigCmd+0x268>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3418c5a4:	69bb      	ldr	r3, [r7, #24]
3418c5a6:	681b      	ldr	r3, [r3, #0]
3418c5a8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418c5ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418c5b0:	683a      	ldr	r2, [r7, #0]
3418c5b2:	68d1      	ldr	r1, [r2, #12]
3418c5b4:	683a      	ldr	r2, [r7, #0]
3418c5b6:	6952      	ldr	r2, [r2, #20]
3418c5b8:	4311      	orrs	r1, r2
3418c5ba:	683a      	ldr	r2, [r7, #0]
3418c5bc:	6912      	ldr	r2, [r2, #16]
3418c5be:	4311      	orrs	r1, r2
3418c5c0:	683a      	ldr	r2, [r7, #0]
3418c5c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c5c4:	4311      	orrs	r1, r2
3418c5c6:	683a      	ldr	r2, [r7, #0]
3418c5c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418c5ca:	430a      	orrs	r2, r1
3418c5cc:	431a      	orrs	r2, r3
3418c5ce:	69bb      	ldr	r3, [r7, #24]
3418c5d0:	601a      	str	r2, [r3, #0]
3418c5d2:	e01d      	b.n	3418c610 <XSPI_ConfigCmd+0x2a4>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3418c5d4:	69bb      	ldr	r3, [r7, #24]
3418c5d6:	681b      	ldr	r3, [r3, #0]
3418c5d8:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
3418c5dc:	683b      	ldr	r3, [r7, #0]
3418c5de:	68d9      	ldr	r1, [r3, #12]
3418c5e0:	683b      	ldr	r3, [r7, #0]
3418c5e2:	695b      	ldr	r3, [r3, #20]
3418c5e4:	4319      	orrs	r1, r3
3418c5e6:	683b      	ldr	r3, [r7, #0]
3418c5e8:	691b      	ldr	r3, [r3, #16]
3418c5ea:	430b      	orrs	r3, r1
3418c5ec:	431a      	orrs	r2, r3
3418c5ee:	69bb      	ldr	r3, [r7, #24]
3418c5f0:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c5f2:	687b      	ldr	r3, [r7, #4]
3418c5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c5f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c5fa:	d109      	bne.n	3418c610 <XSPI_ConfigCmd+0x2a4>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418c5fc:	683b      	ldr	r3, [r7, #0]
3418c5fe:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418c600:	2b08      	cmp	r3, #8
3418c602:	d105      	bne.n	3418c610 <XSPI_ConfigCmd+0x2a4>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418c604:	69bb      	ldr	r3, [r7, #24]
3418c606:	681b      	ldr	r3, [r3, #0]
3418c608:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418c60c:	69bb      	ldr	r3, [r7, #24]
3418c60e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418c610:	683b      	ldr	r3, [r7, #0]
3418c612:	689a      	ldr	r2, [r3, #8]
3418c614:	693b      	ldr	r3, [r7, #16]
3418c616:	601a      	str	r2, [r3, #0]
3418c618:	e039      	b.n	3418c68e <XSPI_ConfigCmd+0x322>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418c61a:	683b      	ldr	r3, [r7, #0]
3418c61c:	69db      	ldr	r3, [r3, #28]
3418c61e:	2b00      	cmp	r3, #0
3418c620:	d030      	beq.n	3418c684 <XSPI_ConfigCmd+0x318>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c622:	683b      	ldr	r3, [r7, #0]
3418c624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c626:	2b00      	cmp	r3, #0
3418c628:	d017      	beq.n	3418c65a <XSPI_ConfigCmd+0x2ee>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3418c62a:	69bb      	ldr	r3, [r7, #24]
3418c62c:	681b      	ldr	r3, [r3, #0]
3418c62e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418c632:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418c636:	683a      	ldr	r2, [r7, #0]
3418c638:	69d1      	ldr	r1, [r2, #28]
3418c63a:	683a      	ldr	r2, [r7, #0]
3418c63c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418c63e:	4311      	orrs	r1, r2
3418c640:	683a      	ldr	r2, [r7, #0]
3418c642:	6a12      	ldr	r2, [r2, #32]
3418c644:	4311      	orrs	r1, r2
3418c646:	683a      	ldr	r2, [r7, #0]
3418c648:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c64a:	4311      	orrs	r1, r2
3418c64c:	683a      	ldr	r2, [r7, #0]
3418c64e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418c650:	430a      	orrs	r2, r1
3418c652:	431a      	orrs	r2, r3
3418c654:	69bb      	ldr	r3, [r7, #24]
3418c656:	601a      	str	r2, [r3, #0]
3418c658:	e00e      	b.n	3418c678 <XSPI_ConfigCmd+0x30c>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3418c65a:	69bb      	ldr	r3, [r7, #24]
3418c65c:	681b      	ldr	r3, [r3, #0]
3418c65e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3418c662:	683b      	ldr	r3, [r7, #0]
3418c664:	69d9      	ldr	r1, [r3, #28]
3418c666:	683b      	ldr	r3, [r7, #0]
3418c668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c66a:	4319      	orrs	r1, r3
3418c66c:	683b      	ldr	r3, [r7, #0]
3418c66e:	6a1b      	ldr	r3, [r3, #32]
3418c670:	430b      	orrs	r3, r1
3418c672:	431a      	orrs	r2, r3
3418c674:	69bb      	ldr	r3, [r7, #24]
3418c676:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3418c678:	687b      	ldr	r3, [r7, #4]
3418c67a:	681b      	ldr	r3, [r3, #0]
3418c67c:	683a      	ldr	r2, [r7, #0]
3418c67e:	6992      	ldr	r2, [r2, #24]
3418c680:	649a      	str	r2, [r3, #72]	@ 0x48
3418c682:	e004      	b.n	3418c68e <XSPI_ConfigCmd+0x322>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
3418c684:	2301      	movs	r3, #1
3418c686:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418c688:	687b      	ldr	r3, [r7, #4]
3418c68a:	2208      	movs	r2, #8
3418c68c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418c68e:	7ffb      	ldrb	r3, [r7, #31]
}
3418c690:	4618      	mov	r0, r3
3418c692:	3724      	adds	r7, #36	@ 0x24
3418c694:	46bd      	mov	sp, r7
3418c696:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c69a:	4770      	bx	lr
3418c69c:	f0ffc0c0 	.word	0xf0ffc0c0

3418c6a0 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
3418c6a0:	b480      	push	{r7}
3418c6a2:	b085      	sub	sp, #20
3418c6a4:	af00      	add	r7, sp, #0
3418c6a6:	4603      	mov	r3, r0
3418c6a8:	6039      	str	r1, [r7, #0]
3418c6aa:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3418c6ac:	79fb      	ldrb	r3, [r7, #7]
3418c6ae:	2b01      	cmp	r3, #1
3418c6b0:	d124      	bne.n	3418c6fc <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
3418c6b2:	4b2c      	ldr	r3, [pc, #176]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c6b4:	681b      	ldr	r3, [r3, #0]
3418c6b6:	f003 0302 	and.w	r3, r3, #2
3418c6ba:	2b00      	cmp	r3, #0
3418c6bc:	d103      	bne.n	3418c6c6 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418c6be:	683b      	ldr	r3, [r7, #0]
3418c6c0:	2200      	movs	r2, #0
3418c6c2:	605a      	str	r2, [r3, #4]
3418c6c4:	e002      	b.n	3418c6cc <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418c6c6:	683b      	ldr	r3, [r7, #0]
3418c6c8:	2201      	movs	r2, #1
3418c6ca:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418c6cc:	4b25      	ldr	r3, [pc, #148]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c6ce:	681b      	ldr	r3, [r3, #0]
3418c6d0:	f003 0310 	and.w	r3, r3, #16
3418c6d4:	2b10      	cmp	r3, #16
3418c6d6:	d003      	beq.n	3418c6e0 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418c6d8:	683b      	ldr	r3, [r7, #0]
3418c6da:	2200      	movs	r2, #0
3418c6dc:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3418c6de:	e03a      	b.n	3418c756 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
3418c6e0:	4b20      	ldr	r3, [pc, #128]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c6e2:	681b      	ldr	r3, [r3, #0]
3418c6e4:	f003 0320 	and.w	r3, r3, #32
3418c6e8:	2b20      	cmp	r3, #32
3418c6ea:	d103      	bne.n	3418c6f4 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418c6ec:	683b      	ldr	r3, [r7, #0]
3418c6ee:	2270      	movs	r2, #112	@ 0x70
3418c6f0:	601a      	str	r2, [r3, #0]
}
3418c6f2:	e030      	b.n	3418c756 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418c6f4:	683b      	ldr	r3, [r7, #0]
3418c6f6:	2210      	movs	r2, #16
3418c6f8:	601a      	str	r2, [r3, #0]
}
3418c6fa:	e02c      	b.n	3418c756 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3418c6fc:	4b19      	ldr	r3, [pc, #100]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c6fe:	681b      	ldr	r3, [r3, #0]
3418c700:	f003 0301 	and.w	r3, r3, #1
3418c704:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
3418c706:	4b17      	ldr	r3, [pc, #92]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c708:	681b      	ldr	r3, [r3, #0]
3418c70a:	085b      	lsrs	r3, r3, #1
3418c70c:	f003 0301 	and.w	r3, r3, #1
3418c710:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
3418c712:	68fa      	ldr	r2, [r7, #12]
3418c714:	68bb      	ldr	r3, [r7, #8]
3418c716:	429a      	cmp	r2, r3
3418c718:	d003      	beq.n	3418c722 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418c71a:	683b      	ldr	r3, [r7, #0]
3418c71c:	2200      	movs	r2, #0
3418c71e:	605a      	str	r2, [r3, #4]
3418c720:	e002      	b.n	3418c728 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418c722:	683b      	ldr	r3, [r7, #0]
3418c724:	2201      	movs	r2, #1
3418c726:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418c728:	4b0e      	ldr	r3, [pc, #56]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c72a:	681b      	ldr	r3, [r3, #0]
3418c72c:	f003 0310 	and.w	r3, r3, #16
3418c730:	2b10      	cmp	r3, #16
3418c732:	d003      	beq.n	3418c73c <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418c734:	683b      	ldr	r3, [r7, #0]
3418c736:	2200      	movs	r2, #0
3418c738:	601a      	str	r2, [r3, #0]
}
3418c73a:	e00c      	b.n	3418c756 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
3418c73c:	4b09      	ldr	r3, [pc, #36]	@ (3418c764 <XSPIM_GetConfig+0xc4>)
3418c73e:	681b      	ldr	r3, [r3, #0]
3418c740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418c744:	2b40      	cmp	r3, #64	@ 0x40
3418c746:	d103      	bne.n	3418c750 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418c748:	683b      	ldr	r3, [r7, #0]
3418c74a:	2270      	movs	r2, #112	@ 0x70
3418c74c:	601a      	str	r2, [r3, #0]
}
3418c74e:	e002      	b.n	3418c756 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418c750:	683b      	ldr	r3, [r7, #0]
3418c752:	2210      	movs	r2, #16
3418c754:	601a      	str	r2, [r3, #0]
}
3418c756:	bf00      	nop
3418c758:	3714      	adds	r7, #20
3418c75a:	46bd      	mov	sp, r7
3418c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c760:	4770      	bx	lr
3418c762:	bf00      	nop
3418c764:	5802b400 	.word	0x5802b400

3418c768 <BOOT_Application>:
/**
  *  @addtogroup BOOT_LRUN_Exported_Functions Boot LRUN exported functions
  * @{
  */
BOOTStatus_TypeDef BOOT_Application(void)
{
3418c768:	b580      	push	{r7, lr}
3418c76a:	b082      	sub	sp, #8
3418c76c:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
3418c76e:	f000 f815 	bl	3418c79c <MapMemory>
3418c772:	4603      	mov	r3, r0
3418c774:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
3418c776:	79fb      	ldrb	r3, [r7, #7]
3418c778:	2b00      	cmp	r3, #0
3418c77a:	d10a      	bne.n	3418c792 <BOOT_Application+0x2a>
  {
    retr = CopyApplication();
3418c77c:	f000 f840 	bl	3418c800 <CopyApplication>
3418c780:	4603      	mov	r3, r0
3418c782:	71fb      	strb	r3, [r7, #7]
    if (BOOT_OK == retr)
3418c784:	79fb      	ldrb	r3, [r7, #7]
3418c786:	2b00      	cmp	r3, #0
3418c788:	d103      	bne.n	3418c792 <BOOT_Application+0x2a>
    {
      /* jump on the application */
      retr = JumpToApplication();
3418c78a:	f000 f88f 	bl	3418c8ac <JumpToApplication>
3418c78e:	4603      	mov	r3, r0
3418c790:	71fb      	strb	r3, [r7, #7]
    }
  }
  return retr;
3418c792:	79fb      	ldrb	r3, [r7, #7]
}
3418c794:	4618      	mov	r0, r3
3418c796:	3708      	adds	r7, #8
3418c798:	46bd      	mov	sp, r7
3418c79a:	bd80      	pop	{r7, pc}

3418c79c <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
3418c79c:	b580      	push	{r7, lr}
3418c79e:	b082      	sub	sp, #8
3418c7a0:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418c7a2:	2300      	movs	r3, #0
3418c7a4:	71fb      	strb	r3, [r7, #7]
  uint32_t BaseAddress = 0;
3418c7a6:	2300      	movs	r3, #0
3418c7a8:	603b      	str	r3, [r7, #0]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418c7aa:	2300      	movs	r3, #0
3418c7ac:	71bb      	strb	r3, [r7, #6]
3418c7ae:	e01f      	b.n	3418c7f0 <MapMemory+0x54>
  {
    switch(EXTMEM_GetMapAddress(index, &BaseAddress))
3418c7b0:	79bb      	ldrb	r3, [r7, #6]
3418c7b2:	463a      	mov	r2, r7
3418c7b4:	4611      	mov	r1, r2
3418c7b6:	4618      	mov	r0, r3
3418c7b8:	f000 fa50 	bl	3418cc5c <EXTMEM_GetMapAddress>
3418c7bc:	4603      	mov	r3, r0
3418c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c7c2:	d00f      	beq.n	3418c7e4 <MapMemory+0x48>
3418c7c4:	2b00      	cmp	r3, #0
3418c7c6:	d10a      	bne.n	3418c7de <MapMemory+0x42>
    {
      case EXTMEM_OK :{
      if (EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE) != EXTMEM_OK)
3418c7c8:	79bb      	ldrb	r3, [r7, #6]
3418c7ca:	2100      	movs	r1, #0
3418c7cc:	4618      	mov	r0, r3
3418c7ce:	f000 f9cd 	bl	3418cb6c <EXTMEM_MemoryMappedMode>
3418c7d2:	4603      	mov	r3, r0
3418c7d4:	2b00      	cmp	r3, #0
3418c7d6:	d007      	beq.n	3418c7e8 <MapMemory+0x4c>
      {
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418c7d8:	2303      	movs	r3, #3
3418c7da:	71fb      	strb	r3, [r7, #7]
      }
      break;
3418c7dc:	e004      	b.n	3418c7e8 <MapMemory+0x4c>
      case EXTMEM_ERROR_NOTSUPPORTED :{
        /* the memory doesn't support map mode, nothing to do */
        break;
      }
      default :{
        retr = BOOT_ERROR_NOBASEADDRESS;
3418c7de:	2302      	movs	r3, #2
3418c7e0:	71fb      	strb	r3, [r7, #7]
      break;
3418c7e2:	e002      	b.n	3418c7ea <MapMemory+0x4e>
        break;
3418c7e4:	bf00      	nop
3418c7e6:	e000      	b.n	3418c7ea <MapMemory+0x4e>
      break;
3418c7e8:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418c7ea:	79bb      	ldrb	r3, [r7, #6]
3418c7ec:	3301      	adds	r3, #1
3418c7ee:	71bb      	strb	r3, [r7, #6]
3418c7f0:	79bb      	ldrb	r3, [r7, #6]
3418c7f2:	2b01      	cmp	r3, #1
3418c7f4:	d9dc      	bls.n	3418c7b0 <MapMemory+0x14>
      }
    }
  }
  return retr;
3418c7f6:	79fb      	ldrb	r3, [r7, #7]
}
3418c7f8:	4618      	mov	r0, r3
3418c7fa:	3708      	adds	r7, #8
3418c7fc:	46bd      	mov	sp, r7
3418c7fe:	bd80      	pop	{r7, pc}

3418c800 <CopyApplication>:
/**
  * @brief  This function copy the data from source to destination
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef CopyApplication(void)
{
3418c800:	b580      	push	{r7, lr}
3418c802:	b086      	sub	sp, #24
3418c804:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418c806:	2300      	movs	r3, #0
3418c808:	75fb      	strb	r3, [r7, #23]

#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  /* this case correspond to copy the SW from external memory into internal memory */
  destination = (uint8_t *)EXTMEM_LRUN_DESTINATION_ADDRESS;
#else
  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_LRUN_DESTINATION, &MapAddress))
3418c80a:	463b      	mov	r3, r7
3418c80c:	4619      	mov	r1, r3
3418c80e:	2001      	movs	r0, #1
3418c810:	f000 fa24 	bl	3418cc5c <EXTMEM_GetMapAddress>
3418c814:	4603      	mov	r3, r0
3418c816:	2b00      	cmp	r3, #0
3418c818:	d001      	beq.n	3418c81e <CopyApplication+0x1e>
  {
    return BOOT_ERROR_MAPPEDMODEFAIL;
3418c81a:	2303      	movs	r3, #3
3418c81c:	e041      	b.n	3418c8a2 <CopyApplication+0xa2>
  }
  destination = (uint8_t *)(MapAddress + EXTMEM_LRUN_DESTINATION_ADDRESS);
3418c81e:	683b      	ldr	r3, [r7, #0]
3418c820:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
3418c824:	60fb      	str	r3, [r7, #12]
#endif

  /* get the map address of the source memory */
  switch(EXTMEM_GetMapAddress(EXTMEM_LRUN_SOURCE, &MapAddress)){
3418c826:	463b      	mov	r3, r7
3418c828:	4619      	mov	r1, r3
3418c82a:	2000      	movs	r0, #0
3418c82c:	f000 fa16 	bl	3418cc5c <EXTMEM_GetMapAddress>
3418c830:	4603      	mov	r3, r0
3418c832:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c836:	d01d      	beq.n	3418c874 <CopyApplication+0x74>
3418c838:	2b00      	cmp	r3, #0
3418c83a:	d12d      	bne.n	3418c898 <CopyApplication+0x98>
  case EXTMEM_OK :{
    /* manage the copy in mapped mode */
    source = (uint8_t*)(MapAddress + EXTMEM_LRUN_SOURCE_ADDRESS);
3418c83c:	683b      	ldr	r3, [r7, #0]
3418c83e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
3418c842:	60bb      	str	r3, [r7, #8]
    img_size = BOOT_GetApplicationSize((uint32_t) source);
3418c844:	68bb      	ldr	r3, [r7, #8]
3418c846:	4618      	mov	r0, r3
3418c848:	f000 f8c4 	bl	3418c9d4 <BOOT_GetApplicationSize>
3418c84c:	6078      	str	r0, [r7, #4]
    /* copy form source to destination in mapped mode */
    for (uint32_t index=0; index < img_size; index++)
3418c84e:	2300      	movs	r3, #0
3418c850:	613b      	str	r3, [r7, #16]
3418c852:	e00a      	b.n	3418c86a <CopyApplication+0x6a>
    {
      destination[index] = source[index];
3418c854:	68ba      	ldr	r2, [r7, #8]
3418c856:	693b      	ldr	r3, [r7, #16]
3418c858:	441a      	add	r2, r3
3418c85a:	68f9      	ldr	r1, [r7, #12]
3418c85c:	693b      	ldr	r3, [r7, #16]
3418c85e:	440b      	add	r3, r1
3418c860:	7812      	ldrb	r2, [r2, #0]
3418c862:	701a      	strb	r2, [r3, #0]
    for (uint32_t index=0; index < img_size; index++)
3418c864:	693b      	ldr	r3, [r7, #16]
3418c866:	3301      	adds	r3, #1
3418c868:	613b      	str	r3, [r7, #16]
3418c86a:	693a      	ldr	r2, [r7, #16]
3418c86c:	687b      	ldr	r3, [r7, #4]
3418c86e:	429a      	cmp	r2, r3
3418c870:	d3f0      	bcc.n	3418c854 <CopyApplication+0x54>
    for (uint32_t index=0; index < img_size; index++)
    {
      destination[index] = source[index];
    }
#endif
    break;
3418c872:	e015      	b.n	3418c8a0 <CopyApplication+0xa0>
  }

  case EXTMEM_ERROR_NOTSUPPORTED:{
    img_size = BOOT_GetApplicationSize(EXTMEM_LRUN_SOURCE_ADDRESS);
3418c874:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
3418c878:	f000 f8ac 	bl	3418c9d4 <BOOT_GetApplicationSize>
3418c87c:	6078      	str	r0, [r7, #4]
    /* manage the copy using EXTMEM_Read */
    if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS, destination, img_size))
3418c87e:	687b      	ldr	r3, [r7, #4]
3418c880:	68fa      	ldr	r2, [r7, #12]
3418c882:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
3418c886:	2000      	movs	r0, #0
3418c888:	f000 f934 	bl	3418caf4 <EXTMEM_Read>
3418c88c:	4603      	mov	r3, r0
3418c88e:	2b00      	cmp	r3, #0
3418c890:	d005      	beq.n	3418c89e <CopyApplication+0x9e>
    {
      retr = BOOT_ERROR_COPY;
3418c892:	2304      	movs	r3, #4
3418c894:	75fb      	strb	r3, [r7, #23]
     if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS_NS, destination, img_size))
    {
      retr = BOOT_ERROR_COPY;
    }
#endif
    break;
3418c896:	e002      	b.n	3418c89e <CopyApplication+0x9e>
  }

  default :{
    /* return an error */
    retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418c898:	2303      	movs	r3, #3
3418c89a:	75fb      	strb	r3, [r7, #23]
    break;
3418c89c:	e000      	b.n	3418c8a0 <CopyApplication+0xa0>
    break;
3418c89e:	bf00      	nop
  }
}
  return retr;
3418c8a0:	7dfb      	ldrb	r3, [r7, #23]
}
3418c8a2:	4618      	mov	r0, r3
3418c8a4:	3718      	adds	r7, #24
3418c8a6:	46bd      	mov	sp, r7
3418c8a8:	bd80      	pop	{r7, pc}
	...

3418c8ac <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
3418c8ac:	b580      	push	{r7, lr}
3418c8ae:	b08a      	sub	sp, #40	@ 0x28
3418c8b0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;
  /* Suspend SysTick */
  HAL_SuspendTick();
3418c8b2:	f7f4 feeb 	bl	3418168c <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
3418c8b6:	4b45      	ldr	r3, [pc, #276]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8b8:	695b      	ldr	r3, [r3, #20]
3418c8ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418c8be:	2b00      	cmp	r3, #0
3418c8c0:	d016      	beq.n	3418c8f0 <JumpToApplication+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
3418c8c2:	f3bf 8f4f 	dsb	sy
}
3418c8c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c8c8:	f3bf 8f6f 	isb	sy
}
3418c8cc:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
3418c8ce:	4b3f      	ldr	r3, [pc, #252]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8d0:	695b      	ldr	r3, [r3, #20]
3418c8d2:	4a3e      	ldr	r2, [pc, #248]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418c8d8:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3418c8da:	4b3c      	ldr	r3, [pc, #240]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8dc:	2200      	movs	r2, #0
3418c8de:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3418c8e2:	f3bf 8f4f 	dsb	sy
}
3418c8e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c8e8:	f3bf 8f6f 	isb	sy
}
3418c8ec:	bf00      	nop
}
3418c8ee:	bf00      	nop
  }
#endif /* defined(ICACHE_PRESENT) && (ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
3418c8f0:	4b36      	ldr	r3, [pc, #216]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8f2:	695b      	ldr	r3, [r3, #20]
3418c8f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418c8f8:	2b00      	cmp	r3, #0
3418c8fa:	d039      	beq.n	3418c970 <JumpToApplication+0xc4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3418c8fc:	4b33      	ldr	r3, [pc, #204]	@ (3418c9cc <JumpToApplication+0x120>)
3418c8fe:	2200      	movs	r2, #0
3418c900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418c904:	f3bf 8f4f 	dsb	sy
}
3418c908:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
3418c90a:	4b30      	ldr	r3, [pc, #192]	@ (3418c9cc <JumpToApplication+0x120>)
3418c90c:	695b      	ldr	r3, [r3, #20]
3418c90e:	4a2f      	ldr	r2, [pc, #188]	@ (3418c9cc <JumpToApplication+0x120>)
3418c910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c914:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418c916:	f3bf 8f4f 	dsb	sy
}
3418c91a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
3418c91c:	4b2b      	ldr	r3, [pc, #172]	@ (3418c9cc <JumpToApplication+0x120>)
3418c91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418c922:	61fb      	str	r3, [r7, #28]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3418c924:	69fb      	ldr	r3, [r7, #28]
3418c926:	0b5b      	lsrs	r3, r3, #13
3418c928:	f3c3 030e 	ubfx	r3, r3, #0, #15
3418c92c:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3418c92e:	69fb      	ldr	r3, [r7, #28]
3418c930:	08db      	lsrs	r3, r3, #3
3418c932:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418c936:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418c938:	69bb      	ldr	r3, [r7, #24]
3418c93a:	015a      	lsls	r2, r3, #5
3418c93c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3418c940:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
3418c942:	697a      	ldr	r2, [r7, #20]
3418c944:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418c946:	4921      	ldr	r1, [pc, #132]	@ (3418c9cc <JumpToApplication+0x120>)
3418c948:	4313      	orrs	r3, r2
3418c94a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
3418c94e:	697b      	ldr	r3, [r7, #20]
3418c950:	1e5a      	subs	r2, r3, #1
3418c952:	617a      	str	r2, [r7, #20]
3418c954:	2b00      	cmp	r3, #0
3418c956:	d1ef      	bne.n	3418c938 <JumpToApplication+0x8c>
    } while(sets-- != 0U);
3418c958:	69bb      	ldr	r3, [r7, #24]
3418c95a:	1e5a      	subs	r2, r3, #1
3418c95c:	61ba      	str	r2, [r7, #24]
3418c95e:	2b00      	cmp	r3, #0
3418c960:	d1e5      	bne.n	3418c92e <JumpToApplication+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
3418c962:	f3bf 8f4f 	dsb	sy
}
3418c966:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418c968:	f3bf 8f6f 	isb	sy
}
3418c96c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
3418c96e:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418c970:	f3ef 8310 	mrs	r3, PRIMASK
3418c974:	607b      	str	r3, [r7, #4]
  return(result);
3418c976:	687b      	ldr	r3, [r7, #4]
    SCB_DisableDCache();
  }
#endif /* defined(DCACHE_PRESENT) && (DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
3418c978:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
3418c97a:	b672      	cpsid	i
}
3418c97c:	bf00      	nop
  __disable_irq();

  Application_vector = BOOT_GetApplicationVectorTable();
3418c97e:	f000 f835 	bl	3418c9ec <BOOT_GetApplicationVectorTable>
3418c982:	6238      	str	r0, [r7, #32]

  SCB->VTOR = (uint32_t)Application_vector;
3418c984:	4a11      	ldr	r2, [pc, #68]	@ (3418c9cc <JumpToApplication+0x120>)
3418c986:	6a3b      	ldr	r3, [r7, #32]
3418c988:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4));
3418c98a:	6a3b      	ldr	r3, [r7, #32]
3418c98c:	3304      	adds	r3, #4
3418c98e:	681b      	ldr	r3, [r3, #0]
3418c990:	461a      	mov	r2, r3
3418c992:	4b0f      	ldr	r3, [pc, #60]	@ (3418c9d0 <JumpToApplication+0x124>)
3418c994:	601a      	str	r2, [r3, #0]
3418c996:	2300      	movs	r3, #0
3418c998:	60bb      	str	r3, [r7, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
3418c99a:	68bb      	ldr	r3, [r7, #8]
3418c99c:	f383 880a 	msr	MSPLIM, r3
#endif
}
3418c9a0:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*)Application_vector);
3418c9a2:	6a3b      	ldr	r3, [r7, #32]
3418c9a4:	681b      	ldr	r3, [r3, #0]
3418c9a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
3418c9a8:	68fb      	ldr	r3, [r7, #12]
3418c9aa:	f383 8808 	msr	MSP, r3
}
3418c9ae:	bf00      	nop
3418c9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418c9b4:	693b      	ldr	r3, [r7, #16]
3418c9b6:	f383 8810 	msr	PRIMASK, r3
}
3418c9ba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
3418c9bc:	4b04      	ldr	r3, [pc, #16]	@ (3418c9d0 <JumpToApplication+0x124>)
3418c9be:	681b      	ldr	r3, [r3, #0]
3418c9c0:	4798      	blx	r3
  return BOOT_OK;
3418c9c2:	2300      	movs	r3, #0
}
3418c9c4:	4618      	mov	r0, r3
3418c9c6:	3728      	adds	r7, #40	@ 0x28
3418c9c8:	46bd      	mov	sp, r7
3418c9ca:	bd80      	pop	{r7, pc}
3418c9cc:	e000ed00 	.word	0xe000ed00
3418c9d0:	341c00fc 	.word	0x341c00fc

3418c9d4 <BOOT_GetApplicationSize>:


 __weak uint32_t BOOT_GetApplicationSize(uint32_t img_addr)
{
3418c9d4:	b480      	push	{r7}
3418c9d6:	b083      	sub	sp, #12
3418c9d8:	af00      	add	r7, sp, #0
3418c9da:	6078      	str	r0, [r7, #4]
  UNUSED(img_addr);
  return EXTMEM_LRUN_SOURCE_SIZE;
3418c9dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
}
3418c9e0:	4618      	mov	r0, r3
3418c9e2:	370c      	adds	r7, #12
3418c9e4:	46bd      	mov	sp, r7
3418c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c9ea:	4770      	bx	lr

3418c9ec <BOOT_GetApplicationVectorTable>:

__weak uint32_t BOOT_GetApplicationVectorTable(void)
{
3418c9ec:	b580      	push	{r7, lr}
3418c9ee:	b082      	sub	sp, #8
3418c9f0:	af00      	add	r7, sp, #0
  uint32_t vector_table;
#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  vector_table = EXTMEM_LRUN_DESTINATION_ADDRESS;
#else
  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_LRUN_DESTINATION, &vector_table))
3418c9f2:	1d3b      	adds	r3, r7, #4
3418c9f4:	4619      	mov	r1, r3
3418c9f6:	2001      	movs	r0, #1
3418c9f8:	f000 f930 	bl	3418cc5c <EXTMEM_GetMapAddress>
3418c9fc:	4603      	mov	r3, r0
3418c9fe:	2b00      	cmp	r3, #0
3418ca00:	d002      	beq.n	3418ca08 <BOOT_GetApplicationVectorTable+0x1c>
  {
    return 0xffffffff;
3418ca02:	f04f 33ff 	mov.w	r3, #4294967295
3418ca06:	e008      	b.n	3418ca1a <BOOT_GetApplicationVectorTable+0x2e>
  }
  vector_table += EXTMEM_LRUN_DESTINATION_ADDRESS;
3418ca08:	687b      	ldr	r3, [r7, #4]
3418ca0a:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
3418ca0e:	607b      	str	r3, [r7, #4]
#endif
  vector_table += EXTMEM_HEADER_OFFSET;
3418ca10:	687b      	ldr	r3, [r7, #4]
3418ca12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418ca16:	607b      	str	r3, [r7, #4]
  return vector_table;
3418ca18:	687b      	ldr	r3, [r7, #4]
}
3418ca1a:	4618      	mov	r0, r3
3418ca1c:	3708      	adds	r7, #8
3418ca1e:	46bd      	mov	sp, r7
3418ca20:	bd80      	pop	{r7, pc}
	...

3418ca24 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
3418ca24:	b580      	push	{r7, lr}
3418ca26:	b084      	sub	sp, #16
3418ca28:	af00      	add	r7, sp, #0
3418ca2a:	6078      	str	r0, [r7, #4]
3418ca2c:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418ca2e:	23fb      	movs	r3, #251	@ 0xfb
3418ca30:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418ca32:	687b      	ldr	r3, [r7, #4]
3418ca34:	2b01      	cmp	r3, #1
3418ca36:	d855      	bhi.n	3418cae4 <EXTMEM_Init+0xc0>
  {
    retr = EXTMEM_OK;
3418ca38:	2300      	movs	r3, #0
3418ca3a:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418ca3c:	4a2c      	ldr	r2, [pc, #176]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418ca3e:	687b      	ldr	r3, [r7, #4]
3418ca40:	21ac      	movs	r1, #172	@ 0xac
3418ca42:	fb01 f303 	mul.w	r3, r1, r3
3418ca46:	4413      	add	r3, r2
3418ca48:	781b      	ldrb	r3, [r3, #0]
3418ca4a:	2b00      	cmp	r3, #0
3418ca4c:	d002      	beq.n	3418ca54 <EXTMEM_Init+0x30>
3418ca4e:	2b02      	cmp	r3, #2
3418ca50:	d021      	beq.n	3418ca96 <EXTMEM_Init+0x72>
3418ca52:	e041      	b.n	3418cad8 <EXTMEM_Init+0xb4>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
3418ca54:	4a26      	ldr	r2, [pc, #152]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418ca56:	687b      	ldr	r3, [r7, #4]
3418ca58:	21ac      	movs	r1, #172	@ 0xac
3418ca5a:	fb01 f303 	mul.w	r3, r1, r3
3418ca5e:	4413      	add	r3, r2
3418ca60:	3304      	adds	r3, #4
3418ca62:	6818      	ldr	r0, [r3, #0]
3418ca64:	4a22      	ldr	r2, [pc, #136]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418ca66:	687b      	ldr	r3, [r7, #4]
3418ca68:	21ac      	movs	r1, #172	@ 0xac
3418ca6a:	fb01 f303 	mul.w	r3, r1, r3
3418ca6e:	4413      	add	r3, r2
3418ca70:	3308      	adds	r3, #8
3418ca72:	7819      	ldrb	r1, [r3, #0]
3418ca74:	687b      	ldr	r3, [r7, #4]
3418ca76:	22ac      	movs	r2, #172	@ 0xac
3418ca78:	fb02 f303 	mul.w	r3, r2, r3
3418ca7c:	3308      	adds	r3, #8
3418ca7e:	4a1c      	ldr	r2, [pc, #112]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418ca80:	4413      	add	r3, r2
3418ca82:	3304      	adds	r3, #4
3418ca84:	683a      	ldr	r2, [r7, #0]
3418ca86:	f002 fc97 	bl	3418f3b8 <EXTMEM_DRIVER_NOR_SFDP_Init>
3418ca8a:	4603      	mov	r3, r0
3418ca8c:	2b00      	cmp	r3, #0
3418ca8e:	d026      	beq.n	3418cade <EXTMEM_Init+0xba>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418ca90:	23fd      	movs	r3, #253	@ 0xfd
3418ca92:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418ca94:	e023      	b.n	3418cade <EXTMEM_Init+0xba>
    }
#endif /* EXTMEM_DRIVER_SDCARD == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
	  case EXTMEM_PSRAM : {
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_PSRAM_OK != EXTMEM_DRIVER_PSRAM_Init(extmem_list_config[MemId].Handle,
3418ca96:	4a16      	ldr	r2, [pc, #88]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418ca98:	687b      	ldr	r3, [r7, #4]
3418ca9a:	21ac      	movs	r1, #172	@ 0xac
3418ca9c:	fb01 f303 	mul.w	r3, r1, r3
3418caa0:	4413      	add	r3, r2
3418caa2:	3304      	adds	r3, #4
3418caa4:	6818      	ldr	r0, [r3, #0]
3418caa6:	4a12      	ldr	r2, [pc, #72]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418caa8:	687b      	ldr	r3, [r7, #4]
3418caaa:	21ac      	movs	r1, #172	@ 0xac
3418caac:	fb01 f303 	mul.w	r3, r1, r3
3418cab0:	4413      	add	r3, r2
3418cab2:	3308      	adds	r3, #8
3418cab4:	7819      	ldrb	r1, [r3, #0]
3418cab6:	687b      	ldr	r3, [r7, #4]
3418cab8:	22ac      	movs	r2, #172	@ 0xac
3418caba:	fb02 f303 	mul.w	r3, r2, r3
3418cabe:	3308      	adds	r3, #8
3418cac0:	4a0b      	ldr	r2, [pc, #44]	@ (3418caf0 <EXTMEM_Init+0xcc>)
3418cac2:	4413      	add	r3, r2
3418cac4:	3304      	adds	r3, #4
3418cac6:	683a      	ldr	r2, [r7, #0]
3418cac8:	f000 f928 	bl	3418cd1c <EXTMEM_DRIVER_PSRAM_Init>
3418cacc:	4603      	mov	r3, r0
3418cace:	2b00      	cmp	r3, #0
3418cad0:	d007      	beq.n	3418cae2 <EXTMEM_Init+0xbe>
                                                               extmem_list_config[MemId].ConfigType,
                                                               ClockInput,
                                                               &extmem_list_config[MemId].PsramObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418cad2:	23fd      	movs	r3, #253	@ 0xfd
3418cad4:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418cad6:	e004      	b.n	3418cae2 <EXTMEM_Init+0xbe>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418cad8:	23fe      	movs	r3, #254	@ 0xfe
3418cada:	73fb      	strb	r3, [r7, #15]
        break;
3418cadc:	e002      	b.n	3418cae4 <EXTMEM_Init+0xc0>
        break;
3418cade:	bf00      	nop
3418cae0:	e000      	b.n	3418cae4 <EXTMEM_Init+0xc0>
        break;
3418cae2:	bf00      	nop
      }
    }
  }
  return retr;
3418cae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418cae8:	4618      	mov	r0, r3
3418caea:	3710      	adds	r7, #16
3418caec:	46bd      	mov	sp, r7
3418caee:	bd80      	pop	{r7, pc}
3418caf0:	341c0100 	.word	0x341c0100

3418caf4 <EXTMEM_Read>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_Read(uint32_t MemId, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418caf4:	b580      	push	{r7, lr}
3418caf6:	b086      	sub	sp, #24
3418caf8:	af00      	add	r7, sp, #0
3418cafa:	60f8      	str	r0, [r7, #12]
3418cafc:	60b9      	str	r1, [r7, #8]
3418cafe:	607a      	str	r2, [r7, #4]
3418cb00:	603b      	str	r3, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418cb02:	23fb      	movs	r3, #251	@ 0xfb
3418cb04:	75fb      	strb	r3, [r7, #23]
  EXTMEM_FUNC_CALL()

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418cb06:	68fb      	ldr	r3, [r7, #12]
3418cb08:	2b01      	cmp	r3, #1
3418cb0a:	d827      	bhi.n	3418cb5c <EXTMEM_Read+0x68>
  {
    retr = EXTMEM_OK;
3418cb0c:	2300      	movs	r3, #0
3418cb0e:	75fb      	strb	r3, [r7, #23]
    switch (extmem_list_config[MemId].MemType)
3418cb10:	4a15      	ldr	r2, [pc, #84]	@ (3418cb68 <EXTMEM_Read+0x74>)
3418cb12:	68fb      	ldr	r3, [r7, #12]
3418cb14:	21ac      	movs	r1, #172	@ 0xac
3418cb16:	fb01 f303 	mul.w	r3, r1, r3
3418cb1a:	4413      	add	r3, r2
3418cb1c:	781b      	ldrb	r3, [r3, #0]
3418cb1e:	2b00      	cmp	r3, #0
3418cb20:	d002      	beq.n	3418cb28 <EXTMEM_Read+0x34>
3418cb22:	2b02      	cmp	r3, #2
3418cb24:	d013      	beq.n	3418cb4e <EXTMEM_Read+0x5a>
3418cb26:	e015      	b.n	3418cb54 <EXTMEM_Read+0x60>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
    case EXTMEM_NOR_SFDP:{
      if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Read(&extmem_list_config[MemId].NorSfdpObject,
3418cb28:	68fb      	ldr	r3, [r7, #12]
3418cb2a:	22ac      	movs	r2, #172	@ 0xac
3418cb2c:	fb02 f303 	mul.w	r3, r2, r3
3418cb30:	3308      	adds	r3, #8
3418cb32:	4a0d      	ldr	r2, [pc, #52]	@ (3418cb68 <EXTMEM_Read+0x74>)
3418cb34:	4413      	add	r3, r2
3418cb36:	1d18      	adds	r0, r3, #4
3418cb38:	683b      	ldr	r3, [r7, #0]
3418cb3a:	687a      	ldr	r2, [r7, #4]
3418cb3c:	68b9      	ldr	r1, [r7, #8]
3418cb3e:	f002 fcf5 	bl	3418f52c <EXTMEM_DRIVER_NOR_SFDP_Read>
3418cb42:	4603      	mov	r3, r0
3418cb44:	2b00      	cmp	r3, #0
3418cb46:	d008      	beq.n	3418cb5a <EXTMEM_Read+0x66>
                                                           Address, Data, Size))
      {
        retr = EXTMEM_ERROR_DRIVER;
3418cb48:	23fd      	movs	r3, #253	@ 0xfd
3418cb4a:	75fb      	strb	r3, [r7, #23]
      }
      break;
3418cb4c:	e005      	b.n	3418cb5a <EXTMEM_Read+0x66>
      break;
    }
#endif /* EXTMEM_DRIVER_SDCARD == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
    case EXTMEM_PSRAM : {
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418cb4e:	23ff      	movs	r3, #255	@ 0xff
3418cb50:	75fb      	strb	r3, [r7, #23]
      break;
3418cb52:	e003      	b.n	3418cb5c <EXTMEM_Read+0x68>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
      EXTMEM_DEBUG("\terror unknown type\n");
      retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418cb54:	23fe      	movs	r3, #254	@ 0xfe
3418cb56:	75fb      	strb	r3, [r7, #23]
      break;
3418cb58:	e000      	b.n	3418cb5c <EXTMEM_Read+0x68>
      break;
3418cb5a:	bf00      	nop
    }
    }
  }
  return retr;
3418cb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418cb60:	4618      	mov	r0, r3
3418cb62:	3718      	adds	r7, #24
3418cb64:	46bd      	mov	sp, r7
3418cb66:	bd80      	pop	{r7, pc}
3418cb68:	341c0100 	.word	0x341c0100

3418cb6c <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
3418cb6c:	b580      	push	{r7, lr}
3418cb6e:	b084      	sub	sp, #16
3418cb70:	af00      	add	r7, sp, #0
3418cb72:	6078      	str	r0, [r7, #4]
3418cb74:	460b      	mov	r3, r1
3418cb76:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418cb78:	23fb      	movs	r3, #251	@ 0xfb
3418cb7a:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418cb7c:	687b      	ldr	r3, [r7, #4]
3418cb7e:	2b01      	cmp	r3, #1
3418cb80:	d864      	bhi.n	3418cc4c <EXTMEM_MemoryMappedMode+0xe0>
  {
    retr = EXTMEM_OK;
3418cb82:	2300      	movs	r3, #0
3418cb84:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418cb86:	4a34      	ldr	r2, [pc, #208]	@ (3418cc58 <EXTMEM_MemoryMappedMode+0xec>)
3418cb88:	687b      	ldr	r3, [r7, #4]
3418cb8a:	21ac      	movs	r1, #172	@ 0xac
3418cb8c:	fb01 f303 	mul.w	r3, r1, r3
3418cb90:	4413      	add	r3, r2
3418cb92:	781b      	ldrb	r3, [r3, #0]
3418cb94:	2b03      	cmp	r3, #3
3418cb96:	d050      	beq.n	3418cc3a <EXTMEM_MemoryMappedMode+0xce>
3418cb98:	2b03      	cmp	r3, #3
3418cb9a:	dc51      	bgt.n	3418cc40 <EXTMEM_MemoryMappedMode+0xd4>
3418cb9c:	2b00      	cmp	r3, #0
3418cb9e:	d002      	beq.n	3418cba6 <EXTMEM_MemoryMappedMode+0x3a>
3418cba0:	2b02      	cmp	r3, #2
3418cba2:	d025      	beq.n	3418cbf0 <EXTMEM_MemoryMappedMode+0x84>
3418cba4:	e04c      	b.n	3418cc40 <EXTMEM_MemoryMappedMode+0xd4>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
3418cba6:	78fb      	ldrb	r3, [r7, #3]
3418cba8:	2b00      	cmp	r3, #0
3418cbaa:	d110      	bne.n	3418cbce <EXTMEM_MemoryMappedMode+0x62>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418cbac:	687b      	ldr	r3, [r7, #4]
3418cbae:	22ac      	movs	r2, #172	@ 0xac
3418cbb0:	fb02 f303 	mul.w	r3, r2, r3
3418cbb4:	3308      	adds	r3, #8
3418cbb6:	4a28      	ldr	r2, [pc, #160]	@ (3418cc58 <EXTMEM_MemoryMappedMode+0xec>)
3418cbb8:	4413      	add	r3, r2
3418cbba:	3304      	adds	r3, #4
3418cbbc:	4618      	mov	r0, r3
3418cbbe:	f002 fce2 	bl	3418f586 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
3418cbc2:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418cbc4:	2b00      	cmp	r3, #0
3418cbc6:	d03e      	beq.n	3418cc46 <EXTMEM_MemoryMappedMode+0xda>
          {
            return EXTMEM_ERROR_DRIVER;
3418cbc8:	f06f 0302 	mvn.w	r3, #2
3418cbcc:	e040      	b.n	3418cc50 <EXTMEM_MemoryMappedMode+0xe4>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418cbce:	687b      	ldr	r3, [r7, #4]
3418cbd0:	22ac      	movs	r2, #172	@ 0xac
3418cbd2:	fb02 f303 	mul.w	r3, r2, r3
3418cbd6:	3308      	adds	r3, #8
3418cbd8:	4a1f      	ldr	r2, [pc, #124]	@ (3418cc58 <EXTMEM_MemoryMappedMode+0xec>)
3418cbda:	4413      	add	r3, r2
3418cbdc:	3304      	adds	r3, #4
3418cbde:	4618      	mov	r0, r3
3418cbe0:	f002 fcf2 	bl	3418f5c8 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
3418cbe4:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418cbe6:	2b00      	cmp	r3, #0
3418cbe8:	d02d      	beq.n	3418cc46 <EXTMEM_MemoryMappedMode+0xda>
          {
            return EXTMEM_ERROR_DRIVER;
3418cbea:	f06f 0302 	mvn.w	r3, #2
3418cbee:	e02f      	b.n	3418cc50 <EXTMEM_MemoryMappedMode+0xe4>
        break;
      }
#endif /* EXTMEM_DRIVER_NOR_SFDP == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM : {
        if (EXTMEM_ENABLE == State)
3418cbf0:	78fb      	ldrb	r3, [r7, #3]
3418cbf2:	2b00      	cmp	r3, #0
3418cbf4:	d110      	bne.n	3418cc18 <EXTMEM_MemoryMappedMode+0xac>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_PSRAM_OK !=
              EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode(&extmem_list_config[MemId].PsramObject))
3418cbf6:	687b      	ldr	r3, [r7, #4]
3418cbf8:	22ac      	movs	r2, #172	@ 0xac
3418cbfa:	fb02 f303 	mul.w	r3, r2, r3
3418cbfe:	3308      	adds	r3, #8
3418cc00:	4a15      	ldr	r2, [pc, #84]	@ (3418cc58 <EXTMEM_MemoryMappedMode+0xec>)
3418cc02:	4413      	add	r3, r2
3418cc04:	3304      	adds	r3, #4
3418cc06:	4618      	mov	r0, r3
3418cc08:	f000 f8ee 	bl	3418cde8 <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode>
3418cc0c:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_PSRAM_OK !=
3418cc0e:	2b00      	cmp	r3, #0
3418cc10:	d01b      	beq.n	3418cc4a <EXTMEM_MemoryMappedMode+0xde>
          {
            return EXTMEM_ERROR_DRIVER;
3418cc12:	f06f 0302 	mvn.w	r3, #2
3418cc16:	e01b      	b.n	3418cc50 <EXTMEM_MemoryMappedMode+0xe4>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_PSRAM_OK !=
              EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode(&extmem_list_config[MemId].PsramObject))
3418cc18:	687b      	ldr	r3, [r7, #4]
3418cc1a:	22ac      	movs	r2, #172	@ 0xac
3418cc1c:	fb02 f303 	mul.w	r3, r2, r3
3418cc20:	3308      	adds	r3, #8
3418cc22:	4a0d      	ldr	r2, [pc, #52]	@ (3418cc58 <EXTMEM_MemoryMappedMode+0xec>)
3418cc24:	4413      	add	r3, r2
3418cc26:	3304      	adds	r3, #4
3418cc28:	4618      	mov	r0, r3
3418cc2a:	f000 f90e 	bl	3418ce4a <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode>
3418cc2e:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_PSRAM_OK !=
3418cc30:	2b00      	cmp	r3, #0
3418cc32:	d00a      	beq.n	3418cc4a <EXTMEM_MemoryMappedMode+0xde>
          {
            return EXTMEM_ERROR_DRIVER;
3418cc34:	f06f 0302 	mvn.w	r3, #2
3418cc38:	e00a      	b.n	3418cc50 <EXTMEM_MemoryMappedMode+0xe4>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418cc3a:	23ff      	movs	r3, #255	@ 0xff
3418cc3c:	73fb      	strb	r3, [r7, #15]
    break;
3418cc3e:	e005      	b.n	3418cc4c <EXTMEM_MemoryMappedMode+0xe0>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418cc40:	23fe      	movs	r3, #254	@ 0xfe
3418cc42:	73fb      	strb	r3, [r7, #15]
        break;
3418cc44:	e002      	b.n	3418cc4c <EXTMEM_MemoryMappedMode+0xe0>
        break;
3418cc46:	bf00      	nop
3418cc48:	e000      	b.n	3418cc4c <EXTMEM_MemoryMappedMode+0xe0>
        break;
3418cc4a:	bf00      	nop
      }
    }
  }
  return retr;
3418cc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418cc50:	4618      	mov	r0, r3
3418cc52:	3710      	adds	r7, #16
3418cc54:	46bd      	mov	sp, r7
3418cc56:	bd80      	pop	{r7, pc}
3418cc58:	341c0100 	.word	0x341c0100

3418cc5c <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
3418cc5c:	b480      	push	{r7}
3418cc5e:	b085      	sub	sp, #20
3418cc60:	af00      	add	r7, sp, #0
3418cc62:	6078      	str	r0, [r7, #4]
3418cc64:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418cc66:	23fb      	movs	r3, #251	@ 0xfb
3418cc68:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418cc6a:	687b      	ldr	r3, [r7, #4]
3418cc6c:	2b01      	cmp	r3, #1
3418cc6e:	d845      	bhi.n	3418ccfc <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
3418cc70:	2300      	movs	r3, #0
3418cc72:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418cc74:	4a25      	ldr	r2, [pc, #148]	@ (3418cd0c <EXTMEM_GetMapAddress+0xb0>)
3418cc76:	687b      	ldr	r3, [r7, #4]
3418cc78:	21ac      	movs	r1, #172	@ 0xac
3418cc7a:	fb01 f303 	mul.w	r3, r1, r3
3418cc7e:	4413      	add	r3, r2
3418cc80:	781b      	ldrb	r3, [r3, #0]
3418cc82:	2b00      	cmp	r3, #0
3418cc84:	d001      	beq.n	3418cc8a <EXTMEM_GetMapAddress+0x2e>
3418cc86:	2b02      	cmp	r3, #2
3418cc88:	d135      	bne.n	3418ccf6 <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
3418cc8a:	4a20      	ldr	r2, [pc, #128]	@ (3418cd0c <EXTMEM_GetMapAddress+0xb0>)
3418cc8c:	687b      	ldr	r3, [r7, #4]
3418cc8e:	21ac      	movs	r1, #172	@ 0xac
3418cc90:	fb01 f303 	mul.w	r3, r1, r3
3418cc94:	4413      	add	r3, r2
3418cc96:	3304      	adds	r3, #4
3418cc98:	681b      	ldr	r3, [r3, #0]
3418cc9a:	681b      	ldr	r3, [r3, #0]
3418cc9c:	4a1c      	ldr	r2, [pc, #112]	@ (3418cd10 <EXTMEM_GetMapAddress+0xb4>)
3418cc9e:	4293      	cmp	r3, r2
3418cca0:	d104      	bne.n	3418ccac <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
3418cca2:	683b      	ldr	r3, [r7, #0]
3418cca4:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3418cca8:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
3418ccaa:	e027      	b.n	3418ccfc <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
3418ccac:	4a17      	ldr	r2, [pc, #92]	@ (3418cd0c <EXTMEM_GetMapAddress+0xb0>)
3418ccae:	687b      	ldr	r3, [r7, #4]
3418ccb0:	21ac      	movs	r1, #172	@ 0xac
3418ccb2:	fb01 f303 	mul.w	r3, r1, r3
3418ccb6:	4413      	add	r3, r2
3418ccb8:	3304      	adds	r3, #4
3418ccba:	681b      	ldr	r3, [r3, #0]
3418ccbc:	681b      	ldr	r3, [r3, #0]
3418ccbe:	4a15      	ldr	r2, [pc, #84]	@ (3418cd14 <EXTMEM_GetMapAddress+0xb8>)
3418ccc0:	4293      	cmp	r3, r2
3418ccc2:	d104      	bne.n	3418ccce <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
3418ccc4:	683b      	ldr	r3, [r7, #0]
3418ccc6:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
3418ccca:	601a      	str	r2, [r3, #0]
       break;
3418cccc:	e016      	b.n	3418ccfc <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
3418ccce:	4a0f      	ldr	r2, [pc, #60]	@ (3418cd0c <EXTMEM_GetMapAddress+0xb0>)
3418ccd0:	687b      	ldr	r3, [r7, #4]
3418ccd2:	21ac      	movs	r1, #172	@ 0xac
3418ccd4:	fb01 f303 	mul.w	r3, r1, r3
3418ccd8:	4413      	add	r3, r2
3418ccda:	3304      	adds	r3, #4
3418ccdc:	681b      	ldr	r3, [r3, #0]
3418ccde:	681b      	ldr	r3, [r3, #0]
3418cce0:	4a0d      	ldr	r2, [pc, #52]	@ (3418cd18 <EXTMEM_GetMapAddress+0xbc>)
3418cce2:	4293      	cmp	r3, r2
3418cce4:	d104      	bne.n	3418ccf0 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
3418cce6:	683b      	ldr	r3, [r7, #0]
3418cce8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418ccec:	601a      	str	r2, [r3, #0]
       break;
3418ccee:	e005      	b.n	3418ccfc <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
3418ccf0:	23fd      	movs	r3, #253	@ 0xfd
3418ccf2:	73fb      	strb	r3, [r7, #15]
       break;
3418ccf4:	e002      	b.n	3418ccfc <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418ccf6:	23fe      	movs	r3, #254	@ 0xfe
3418ccf8:	73fb      	strb	r3, [r7, #15]
        break;
3418ccfa:	bf00      	nop
      }
    }
  }
  return retr;
3418ccfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418cd00:	4618      	mov	r0, r3
3418cd02:	3714      	adds	r7, #20
3418cd04:	46bd      	mov	sp, r7
3418cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd0a:	4770      	bx	lr
3418cd0c:	341c0100 	.word	0x341c0100
3418cd10:	58025000 	.word	0x58025000
3418cd14:	5802a000 	.word	0x5802a000
3418cd18:	5802d000 	.word	0x5802d000

3418cd1c <EXTMEM_DRIVER_PSRAM_Init>:
  */

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config,
                                                           uint32_t ClockInput,
                                                           EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
3418cd1c:	b580      	push	{r7, lr}
3418cd1e:	b088      	sub	sp, #32
3418cd20:	af00      	add	r7, sp, #0
3418cd22:	60f8      	str	r0, [r7, #12]
3418cd24:	607a      	str	r2, [r7, #4]
3418cd26:	603b      	str	r3, [r7, #0]
3418cd28:	460b      	mov	r3, r1
3418cd2a:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
3418cd2c:	2300      	movs	r3, #0
3418cd2e:	77fb      	strb	r3, [r7, #31]

  /* initialize the instance */
  DEBUG_STR("initialize the instance")
  
  /* Initialize XSPI low layer */
  (void)SAL_XSPI_Init(&PsramObject->psram_private.SALObject, Peripheral);
3418cd30:	683b      	ldr	r3, [r7, #0]
3418cd32:	68f9      	ldr	r1, [r7, #12]
3418cd34:	4618      	mov	r0, r3
3418cd36:	f000 f94b 	bl	3418cfd0 <SAL_XSPI_Init>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject);
3418cd3a:	683b      	ldr	r3, [r7, #0]
3418cd3c:	4618      	mov	r0, r3
3418cd3e:	f000 fe43 	bl	3418d9c8 <SAL_XSPI_DisableMapMode>

  /* Set the frequency prescaler */
  DEBUG_STR("set memory speed according freqIn and freqMax supported by the memory")
  if (HAL_OK != SAL_XSPI_SetClock(&PsramObject->psram_private.SALObject, ClockInput, PsramObject->psram_public.FreqMax, &ClockOut))
3418cd42:	6838      	ldr	r0, [r7, #0]
3418cd44:	683b      	ldr	r3, [r7, #0]
3418cd46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3418cd48:	f107 0318 	add.w	r3, r7, #24
3418cd4c:	6879      	ldr	r1, [r7, #4]
3418cd4e:	f000 f900 	bl	3418cf52 <SAL_XSPI_SetClock>
3418cd52:	4603      	mov	r3, r0
3418cd54:	2b00      	cmp	r3, #0
3418cd56:	d002      	beq.n	3418cd5e <EXTMEM_DRIVER_PSRAM_Init+0x42>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR;
3418cd58:	2380      	movs	r3, #128	@ 0x80
3418cd5a:	77fb      	strb	r3, [r7, #31]
    goto error;
3418cd5c:	e03e      	b.n	3418cddc <EXTMEM_DRIVER_PSRAM_Init+0xc0>
  }

  /* Set the memory size */
  DEBUG_STR("set memory size according")
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_FLASHSIZE, &PsramObject->psram_public.MemorySize);
3418cd5e:	6838      	ldr	r0, [r7, #0]
3418cd60:	683b      	ldr	r3, [r7, #0]
3418cd62:	3354      	adds	r3, #84	@ 0x54
3418cd64:	461a      	mov	r2, r3
3418cd66:	2104      	movs	r1, #4
3418cd68:	f000 f966 	bl	3418d038 <SAL_XSPI_MemoryConfig>

  /* Set the memory size */
  DEBUG_STR("set xspi link config")
  linkvalue = PHY_LINK_RAM8;
3418cd6c:	230a      	movs	r3, #10
3418cd6e:	75fb      	strb	r3, [r7, #23]
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_PHY_LINK, &linkvalue);
3418cd70:	683b      	ldr	r3, [r7, #0]
3418cd72:	f107 0217 	add.w	r2, r7, #23
3418cd76:	2100      	movs	r1, #0
3418cd78:	4618      	mov	r0, r3
3418cd7a:	f000 f95d 	bl	3418d038 <SAL_XSPI_MemoryConfig>

  /* Set the configuration to perform register operation */
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_DUMMY_CYCLES, &PsramObject->psram_public.REG_DummyCycle);
3418cd7e:	6838      	ldr	r0, [r7, #0]
3418cd80:	683b      	ldr	r3, [r7, #0]
3418cd82:	3369      	adds	r3, #105	@ 0x69
3418cd84:	461a      	mov	r2, r3
3418cd86:	2101      	movs	r1, #1
3418cd88:	f000 f956 	bl	3418d038 <SAL_XSPI_MemoryConfig>

  /* Execute the command sequence */
  for (uint8_t command_index = 0u; command_index < PsramObject->psram_public.NumberOfConfig; command_index++)
3418cd8c:	2300      	movs	r3, #0
3418cd8e:	77bb      	strb	r3, [r7, #30]
3418cd90:	e00d      	b.n	3418cdae <EXTMEM_DRIVER_PSRAM_Init+0x92>
  {
    retr = PSRAM_ExecuteCommand(PsramObject, command_index);
3418cd92:	7fbb      	ldrb	r3, [r7, #30]
3418cd94:	4619      	mov	r1, r3
3418cd96:	6838      	ldr	r0, [r7, #0]
3418cd98:	f000 f86c 	bl	3418ce74 <PSRAM_ExecuteCommand>
3418cd9c:	4603      	mov	r3, r0
3418cd9e:	77fb      	strb	r3, [r7, #31]
    if (retr != EXTMEM_DRIVER_PSRAM_OK)
3418cda0:	f997 301f 	ldrsb.w	r3, [r7, #31]
3418cda4:	2b00      	cmp	r3, #0
3418cda6:	d118      	bne.n	3418cdda <EXTMEM_DRIVER_PSRAM_Init+0xbe>
  for (uint8_t command_index = 0u; command_index < PsramObject->psram_public.NumberOfConfig; command_index++)
3418cda8:	7fbb      	ldrb	r3, [r7, #30]
3418cdaa:	3301      	adds	r3, #1
3418cdac:	77bb      	strb	r3, [r7, #30]
3418cdae:	683b      	ldr	r3, [r7, #0]
3418cdb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418cdb4:	7fba      	ldrb	r2, [r7, #30]
3418cdb6:	429a      	cmp	r2, r3
3418cdb8:	d3eb      	bcc.n	3418cd92 <EXTMEM_DRIVER_PSRAM_Init+0x76>
    {
      goto error;
    }
  }

  switch(Config)
3418cdba:	7afb      	ldrb	r3, [r7, #11]
3418cdbc:	2b04      	cmp	r3, #4
3418cdbe:	d109      	bne.n	3418cdd4 <EXTMEM_DRIVER_PSRAM_Init+0xb8>
  {
  case EXTMEM_LINK_CONFIG_16LINES:
    linkvalue = PHY_LINK_RAM16;
3418cdc0:	230b      	movs	r3, #11
3418cdc2:	75fb      	strb	r3, [r7, #23]
    (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_PHY_LINK, &linkvalue);
3418cdc4:	683b      	ldr	r3, [r7, #0]
3418cdc6:	f107 0217 	add.w	r2, r7, #23
3418cdca:	2100      	movs	r1, #0
3418cdcc:	4618      	mov	r0, r3
3418cdce:	f000 f933 	bl	3418d038 <SAL_XSPI_MemoryConfig>
    break;
3418cdd2:	e003      	b.n	3418cddc <EXTMEM_DRIVER_PSRAM_Init+0xc0>

  case EXTMEM_LINK_CONFIG_8LINES:
  default:
    retr = EXTMEM_DRIVER_PSRAM_ERROR;
3418cdd4:	2380      	movs	r3, #128	@ 0x80
3418cdd6:	77fb      	strb	r3, [r7, #31]
    goto error;
3418cdd8:	e000      	b.n	3418cddc <EXTMEM_DRIVER_PSRAM_Init+0xc0>
      goto error;
3418cdda:	bf00      	nop
    break;
  }

error:
  return retr;
3418cddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
3418cde0:	4618      	mov	r0, r3
3418cde2:	3720      	adds	r7, #32
3418cde4:	46bd      	mov	sp, r7
3418cde6:	bd80      	pop	{r7, pc}

3418cde8 <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode>:
  (void)SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject);
  return EXTMEM_DRIVER_PSRAM_OK;
}

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
3418cde8:	b590      	push	{r4, r7, lr}
3418cdea:	b087      	sub	sp, #28
3418cdec:	af02      	add	r7, sp, #8
3418cdee:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
3418cdf0:	2300      	movs	r3, #0
3418cdf2:	73fb      	strb	r3, [r7, #15]

  /* configure the read wrap mode */
  if (HAL_OK != SAL_XSPI_ConfigureWrappMode(&PsramObject->psram_private.SALObject, 
3418cdf4:	6878      	ldr	r0, [r7, #4]
3418cdf6:	687b      	ldr	r3, [r7, #4]
3418cdf8:	f893 106d 	ldrb.w	r1, [r3, #109]	@ 0x6d
3418cdfc:	687b      	ldr	r3, [r7, #4]
3418cdfe:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
3418ce02:	461a      	mov	r2, r3
3418ce04:	f000 fd2b 	bl	3418d85e <SAL_XSPI_ConfigureWrappMode>
3418ce08:	4603      	mov	r3, r0
3418ce0a:	2b00      	cmp	r3, #0
3418ce0c:	d001      	beq.n	3418ce12 <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode+0x2a>
                                            PsramObject->psram_public.WrapRead_command, 
                                            PsramObject->psram_public.Write_DummyCycle))
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_ENABLE;
3418ce0e:	23fb      	movs	r3, #251	@ 0xfb
3418ce10:	73fb      	strb	r3, [r7, #15]
  }
   
  /* launch the memory mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&PsramObject->psram_private.SALObject, 
3418ce12:	6878      	ldr	r0, [r7, #4]
3418ce14:	687b      	ldr	r3, [r7, #4]
3418ce16:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
3418ce1a:	687b      	ldr	r3, [r7, #4]
3418ce1c:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
3418ce20:	687b      	ldr	r3, [r7, #4]
3418ce22:	f893 406a 	ldrb.w	r4, [r3, #106]	@ 0x6a
3418ce26:	687b      	ldr	r3, [r7, #4]
3418ce28:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
3418ce2c:	9300      	str	r3, [sp, #0]
3418ce2e:	4623      	mov	r3, r4
3418ce30:	f000 fd51 	bl	3418d8d6 <SAL_XSPI_EnableMapMode>
3418ce34:	4603      	mov	r3, r0
3418ce36:	2b00      	cmp	r3, #0
3418ce38:	d001      	beq.n	3418ce3e <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode+0x56>
                                       PsramObject->psram_public.Read_command, 
                                       PsramObject->psram_public.Read_DummyCycle,
                                       PsramObject->psram_public.Write_command, 
                                       PsramObject->psram_public.Write_DummyCycle))
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_ENABLE;
3418ce3a:	23fb      	movs	r3, #251	@ 0xfb
3418ce3c:	73fb      	strb	r3, [r7, #15]
  }
  return retr;
3418ce3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418ce42:	4618      	mov	r0, r3
3418ce44:	3714      	adds	r7, #20
3418ce46:	46bd      	mov	sp, r7
3418ce48:	bd90      	pop	{r4, r7, pc}

3418ce4a <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
3418ce4a:	b580      	push	{r7, lr}
3418ce4c:	b084      	sub	sp, #16
3418ce4e:	af00      	add	r7, sp, #0
3418ce50:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
3418ce52:	2300      	movs	r3, #0
3418ce54:	73fb      	strb	r3, [r7, #15]

  /* launch mass erase command */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject))
3418ce56:	687b      	ldr	r3, [r7, #4]
3418ce58:	4618      	mov	r0, r3
3418ce5a:	f000 fdb5 	bl	3418d9c8 <SAL_XSPI_DisableMapMode>
3418ce5e:	4603      	mov	r3, r0
3418ce60:	2b00      	cmp	r3, #0
3418ce62:	d001      	beq.n	3418ce68 <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode+0x1e>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_DISABLE;
3418ce64:	23fa      	movs	r3, #250	@ 0xfa
3418ce66:	73fb      	strb	r3, [r7, #15]
  }
  return retr;
3418ce68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418ce6c:	4618      	mov	r0, r3
3418ce6e:	3710      	adds	r7, #16
3418ce70:	46bd      	mov	sp, r7
3418ce72:	bd80      	pop	{r7, pc}

3418ce74 <PSRAM_ExecuteCommand>:
 * @param PsramObject psram memory object
 * @param Index command index
 * @return @ref EXTMEM_DRIVER_PSRAM_StatusTypeDef
 **/
EXTMEM_DRIVER_PSRAM_StatusTypeDef PSRAM_ExecuteCommand(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject, uint8_t Index)
{
3418ce74:	b590      	push	{r4, r7, lr}
3418ce76:	b087      	sub	sp, #28
3418ce78:	af02      	add	r7, sp, #8
3418ce7a:	6078      	str	r0, [r7, #4]
3418ce7c:	460b      	mov	r3, r1
3418ce7e:	70fb      	strb	r3, [r7, #3]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
3418ce80:	2300      	movs	r3, #0
3418ce82:	73fb      	strb	r3, [r7, #15]
  uint8_t regval[2];

  if (PsramObject->psram_public.ReadREGSize > 2u)
3418ce84:	687b      	ldr	r3, [r7, #4]
3418ce86:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418ce8a:	2b02      	cmp	r3, #2
3418ce8c:	d902      	bls.n	3418ce94 <PSRAM_ExecuteCommand+0x20>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_REGSIZE;
3418ce8e:	23f9      	movs	r3, #249	@ 0xf9
3418ce90:	73fb      	strb	r3, [r7, #15]
    goto error;
3418ce92:	e058      	b.n	3418cf46 <PSRAM_ExecuteCommand+0xd2>
  }

  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
3418ce94:	6878      	ldr	r0, [r7, #4]
3418ce96:	687b      	ldr	r3, [r7, #4]
3418ce98:	f893 4066 	ldrb.w	r4, [r3, #102]	@ 0x66
                              PsramObject->psram_public.ReadREG,
                              PsramObject->psram_public.config[Index].REGAddress, 
3418ce9c:	78fa      	ldrb	r2, [r7, #3]
3418ce9e:	6879      	ldr	r1, [r7, #4]
3418cea0:	4613      	mov	r3, r2
3418cea2:	005b      	lsls	r3, r3, #1
3418cea4:	4413      	add	r3, r2
3418cea6:	440b      	add	r3, r1
3418cea8:	335f      	adds	r3, #95	@ 0x5f
3418ceaa:	781b      	ldrb	r3, [r3, #0]
  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
3418ceac:	4619      	mov	r1, r3
                              regval, PsramObject->psram_public.ReadREGSize))
3418ceae:	687b      	ldr	r3, [r7, #4]
3418ceb0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
3418ceb4:	461a      	mov	r2, r3
3418ceb6:	f107 030c 	add.w	r3, r7, #12
3418ceba:	9200      	str	r2, [sp, #0]
3418cebc:	460a      	mov	r2, r1
3418cebe:	4621      	mov	r1, r4
3418cec0:	f000 fabb 	bl	3418d43a <SAL_XSPI_Read>
3418cec4:	4603      	mov	r3, r0
3418cec6:	2b00      	cmp	r3, #0
3418cec8:	d002      	beq.n	3418ced0 <PSRAM_ExecuteCommand+0x5c>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_READREG;
3418ceca:	23ff      	movs	r3, #255	@ 0xff
3418cecc:	73fb      	strb	r3, [r7, #15]
    goto error;
3418cece:	e03a      	b.n	3418cf46 <PSRAM_ExecuteCommand+0xd2>
  }

  MODIFY_REG(regval[0], 
3418ced0:	7b3b      	ldrb	r3, [r7, #12]
3418ced2:	b259      	sxtb	r1, r3
3418ced4:	78fa      	ldrb	r2, [r7, #3]
3418ced6:	6878      	ldr	r0, [r7, #4]
3418ced8:	4613      	mov	r3, r2
3418ceda:	005b      	lsls	r3, r3, #1
3418cedc:	4413      	add	r3, r2
3418cede:	4403      	add	r3, r0
3418cee0:	335d      	adds	r3, #93	@ 0x5d
3418cee2:	781b      	ldrb	r3, [r3, #0]
3418cee4:	b25b      	sxtb	r3, r3
3418cee6:	43db      	mvns	r3, r3
3418cee8:	b25b      	sxtb	r3, r3
3418ceea:	400b      	ands	r3, r1
3418ceec:	b259      	sxtb	r1, r3
3418ceee:	78fa      	ldrb	r2, [r7, #3]
3418cef0:	6878      	ldr	r0, [r7, #4]
3418cef2:	4613      	mov	r3, r2
3418cef4:	005b      	lsls	r3, r3, #1
3418cef6:	4413      	add	r3, r2
3418cef8:	4403      	add	r3, r0
3418cefa:	335e      	adds	r3, #94	@ 0x5e
3418cefc:	781b      	ldrb	r3, [r3, #0]
3418cefe:	b25b      	sxtb	r3, r3
3418cf00:	430b      	orrs	r3, r1
3418cf02:	b25b      	sxtb	r3, r3
3418cf04:	b2db      	uxtb	r3, r3
3418cf06:	733b      	strb	r3, [r7, #12]
             PsramObject->psram_public.config[Index].WriteMask, 
             PsramObject->psram_public.config[Index].WriteValue);

  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
3418cf08:	6878      	ldr	r0, [r7, #4]
3418cf0a:	687b      	ldr	r3, [r7, #4]
3418cf0c:	f893 4067 	ldrb.w	r4, [r3, #103]	@ 0x67
                               PsramObject->psram_public.WriteREG,
                               PsramObject->psram_public.config[Index].REGAddress, 
3418cf10:	78fa      	ldrb	r2, [r7, #3]
3418cf12:	6879      	ldr	r1, [r7, #4]
3418cf14:	4613      	mov	r3, r2
3418cf16:	005b      	lsls	r3, r3, #1
3418cf18:	4413      	add	r3, r2
3418cf1a:	440b      	add	r3, r1
3418cf1c:	335f      	adds	r3, #95	@ 0x5f
3418cf1e:	781b      	ldrb	r3, [r3, #0]
  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
3418cf20:	4619      	mov	r1, r3
                               regval, PsramObject->psram_public.ReadREGSize))
3418cf22:	687b      	ldr	r3, [r7, #4]
3418cf24:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
3418cf28:	461a      	mov	r2, r3
3418cf2a:	f107 030c 	add.w	r3, r7, #12
3418cf2e:	9200      	str	r2, [sp, #0]
3418cf30:	460a      	mov	r2, r1
3418cf32:	4621      	mov	r1, r4
3418cf34:	f000 fae9 	bl	3418d50a <SAL_XSPI_Write>
3418cf38:	4603      	mov	r3, r0
3418cf3a:	2b00      	cmp	r3, #0
3418cf3c:	d002      	beq.n	3418cf44 <PSRAM_ExecuteCommand+0xd0>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_WRITEREG;
3418cf3e:	23fe      	movs	r3, #254	@ 0xfe
3418cf40:	73fb      	strb	r3, [r7, #15]
    goto error;
3418cf42:	e000      	b.n	3418cf46 <PSRAM_ExecuteCommand+0xd2>
  }

error:
3418cf44:	bf00      	nop
  return retr;
3418cf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418cf4a:	4618      	mov	r0, r3
3418cf4c:	3714      	adds	r7, #20
3418cf4e:	46bd      	mov	sp, r7
3418cf50:	bd90      	pop	{r4, r7, pc}

3418cf52 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
3418cf52:	b480      	push	{r7}
3418cf54:	b087      	sub	sp, #28
3418cf56:	af00      	add	r7, sp, #0
3418cf58:	60f8      	str	r0, [r7, #12]
3418cf5a:	60b9      	str	r1, [r7, #8]
3418cf5c:	607a      	str	r2, [r7, #4]
3418cf5e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
3418cf60:	2300      	movs	r3, #0
3418cf62:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
3418cf64:	687b      	ldr	r3, [r7, #4]
3418cf66:	2b00      	cmp	r3, #0
3418cf68:	d102      	bne.n	3418cf70 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
3418cf6a:	2301      	movs	r3, #1
3418cf6c:	75fb      	strb	r3, [r7, #23]
3418cf6e:	e028      	b.n	3418cfc2 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
3418cf70:	68ba      	ldr	r2, [r7, #8]
3418cf72:	687b      	ldr	r3, [r7, #4]
3418cf74:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf78:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
3418cf7a:	693b      	ldr	r3, [r7, #16]
3418cf7c:	2b00      	cmp	r3, #0
3418cf7e:	d00d      	beq.n	3418cf9c <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
3418cf80:	68ba      	ldr	r2, [r7, #8]
3418cf82:	693b      	ldr	r3, [r7, #16]
3418cf84:	fbb2 f2f3 	udiv	r2, r2, r3
3418cf88:	683b      	ldr	r3, [r7, #0]
3418cf8a:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
3418cf8c:	683b      	ldr	r3, [r7, #0]
3418cf8e:	681b      	ldr	r3, [r3, #0]
3418cf90:	687a      	ldr	r2, [r7, #4]
3418cf92:	429a      	cmp	r2, r3
3418cf94:	d302      	bcc.n	3418cf9c <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
3418cf96:	693b      	ldr	r3, [r7, #16]
3418cf98:	3b01      	subs	r3, #1
3418cf9a:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
3418cf9c:	693b      	ldr	r3, [r7, #16]
3418cf9e:	3301      	adds	r3, #1
3418cfa0:	68ba      	ldr	r2, [r7, #8]
3418cfa2:	fbb2 f2f3 	udiv	r2, r2, r3
3418cfa6:	683b      	ldr	r3, [r7, #0]
3418cfa8:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
3418cfaa:	68fb      	ldr	r3, [r7, #12]
3418cfac:	681b      	ldr	r3, [r3, #0]
3418cfae:	681b      	ldr	r3, [r3, #0]
3418cfb0:	68db      	ldr	r3, [r3, #12]
3418cfb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418cfb6:	68fb      	ldr	r3, [r7, #12]
3418cfb8:	681b      	ldr	r3, [r3, #0]
3418cfba:	681b      	ldr	r3, [r3, #0]
3418cfbc:	693a      	ldr	r2, [r7, #16]
3418cfbe:	430a      	orrs	r2, r1
3418cfc0:	60da      	str	r2, [r3, #12]
  }

  return retr;
3418cfc2:	7dfb      	ldrb	r3, [r7, #23]
}
3418cfc4:	4618      	mov	r0, r3
3418cfc6:	371c      	adds	r7, #28
3418cfc8:	46bd      	mov	sp, r7
3418cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cfce:	4770      	bx	lr

3418cfd0 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
3418cfd0:	b580      	push	{r7, lr}
3418cfd2:	b096      	sub	sp, #88	@ 0x58
3418cfd4:	af00      	add	r7, sp, #0
3418cfd6:	6078      	str	r0, [r7, #4]
3418cfd8:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
3418cfda:	f107 030c 	add.w	r3, r7, #12
3418cfde:	224c      	movs	r2, #76	@ 0x4c
3418cfe0:	2100      	movs	r1, #0
3418cfe2:	4618      	mov	r0, r3
3418cfe4:	f002 fb06 	bl	3418f5f4 <memset>
3418cfe8:	235a      	movs	r3, #90	@ 0x5a
3418cfea:	617b      	str	r3, [r7, #20]
3418cfec:	2301      	movs	r3, #1
3418cfee:	61bb      	str	r3, [r7, #24]
3418cff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418cff4:	62bb      	str	r3, [r7, #40]	@ 0x28
3418cff6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418cffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418cffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d000:	647b      	str	r3, [r7, #68]	@ 0x44
3418d002:	2308      	movs	r3, #8
3418d004:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
3418d006:	687b      	ldr	r3, [r7, #4]
3418d008:	683a      	ldr	r2, [r7, #0]
3418d00a:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3418d00c:	687b      	ldr	r3, [r7, #4]
3418d00e:	3304      	adds	r3, #4
3418d010:	f107 010c 	add.w	r1, r7, #12
3418d014:	224c      	movs	r2, #76	@ 0x4c
3418d016:	4618      	mov	r0, r3
3418d018:	f002 fb18 	bl	3418f64c <memcpy>
  SalXspi->CommandExtension = 0;
3418d01c:	687b      	ldr	r3, [r7, #4]
3418d01e:	2200      	movs	r2, #0
3418d020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
3418d024:	687b      	ldr	r3, [r7, #4]
3418d026:	2200      	movs	r2, #0
3418d028:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3418d02c:	2300      	movs	r3, #0
}
3418d02e:	4618      	mov	r0, r3
3418d030:	3758      	adds	r7, #88	@ 0x58
3418d032:	46bd      	mov	sp, r7
3418d034:	bd80      	pop	{r7, pc}
	...

3418d038 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
3418d038:	b580      	push	{r7, lr}
3418d03a:	b098      	sub	sp, #96	@ 0x60
3418d03c:	af00      	add	r7, sp, #0
3418d03e:	60f8      	str	r0, [r7, #12]
3418d040:	460b      	mov	r3, r1
3418d042:	607a      	str	r2, [r7, #4]
3418d044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
3418d046:	2300      	movs	r3, #0
3418d048:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
3418d04c:	68fb      	ldr	r3, [r7, #12]
3418d04e:	f107 0010 	add.w	r0, r7, #16
3418d052:	3304      	adds	r3, #4
3418d054:	224c      	movs	r2, #76	@ 0x4c
3418d056:	4619      	mov	r1, r3
3418d058:	f002 faf8 	bl	3418f64c <memcpy>

  switch (ParmetersType) {
3418d05c:	7afb      	ldrb	r3, [r7, #11]
3418d05e:	2b04      	cmp	r3, #4
3418d060:	f200 812a 	bhi.w	3418d2b8 <SAL_XSPI_MemoryConfig+0x280>
3418d064:	a201      	add	r2, pc, #4	@ (adr r2, 3418d06c <SAL_XSPI_MemoryConfig+0x34>)
3418d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d06a:	bf00      	nop
3418d06c:	3418d081 	.word	0x3418d081
3418d070:	3418d2a9 	.word	0x3418d2a9
3418d074:	3418d27b 	.word	0x3418d27b
3418d078:	3418d2b9 	.word	0x3418d2b9
3418d07c:	3418d283 	.word	0x3418d283
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3418d080:	687b      	ldr	r3, [r7, #4]
3418d082:	781a      	ldrb	r2, [r3, #0]
3418d084:	68fb      	ldr	r3, [r7, #12]
3418d086:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
3418d08a:	68fb      	ldr	r3, [r7, #12]
3418d08c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418d090:	2b0b      	cmp	r3, #11
3418d092:	f200 80ed 	bhi.w	3418d270 <SAL_XSPI_MemoryConfig+0x238>
3418d096:	a201      	add	r2, pc, #4	@ (adr r2, 3418d09c <SAL_XSPI_MemoryConfig+0x64>)
3418d098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d09c:	3418d0cd 	.word	0x3418d0cd
3418d0a0:	3418d0cd 	.word	0x3418d0cd
3418d0a4:	3418d0cd 	.word	0x3418d0cd
3418d0a8:	3418d0cd 	.word	0x3418d0cd
3418d0ac:	3418d0fd 	.word	0x3418d0fd
3418d0b0:	3418d0fd 	.word	0x3418d0fd
3418d0b4:	3418d12d 	.word	0x3418d12d
3418d0b8:	3418d161 	.word	0x3418d161
3418d0bc:	3418d191 	.word	0x3418d191
3418d0c0:	3418d1c7 	.word	0x3418d1c7
3418d0c4:	3418d1fd 	.word	0x3418d1fd
3418d0c8:	3418d237 	.word	0x3418d237
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418d0cc:	2301      	movs	r3, #1
3418d0ce:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d0d0:	2300      	movs	r3, #0
3418d0d2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d0d4:	2300      	movs	r3, #0
3418d0d6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
3418d0d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418d0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418d0de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d0e2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418d0e4:	2300      	movs	r3, #0
3418d0e6:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
3418d0e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418d0ee:	2300      	movs	r3, #0
3418d0f0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418d0f2:	2308      	movs	r3, #8
3418d0f4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418d0f6:	2300      	movs	r3, #0
3418d0f8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d0fa:	e0bd      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418d0fc:	2303      	movs	r3, #3
3418d0fe:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d100:	2300      	movs	r3, #0
3418d102:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d104:	2300      	movs	r3, #0
3418d106:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418d108:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418d10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418d10e:	2300      	movs	r3, #0
3418d110:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418d112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d116:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418d118:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418d11c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418d11e:	2300      	movs	r3, #0
3418d120:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418d122:	2306      	movs	r3, #6
3418d124:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418d126:	2300      	movs	r3, #0
3418d128:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d12a:	e0a5      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418d12c:	2303      	movs	r3, #3
3418d12e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d130:	2300      	movs	r3, #0
3418d132:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418d134:	2308      	movs	r3, #8
3418d136:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418d138:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418d13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418d13e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d142:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d144:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d148:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418d14a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418d14e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418d150:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d154:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418d156:	2306      	movs	r3, #6
3418d158:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418d15a:	2300      	movs	r3, #0
3418d15c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d15e:	e08b      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418d160:	2301      	movs	r3, #1
3418d162:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d164:	2300      	movs	r3, #0
3418d166:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d168:	2300      	movs	r3, #0
3418d16a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418d16c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418d172:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d176:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418d178:	2300      	movs	r3, #0
3418d17a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418d17c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418d180:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418d182:	2300      	movs	r3, #0
3418d184:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418d186:	2308      	movs	r3, #8
3418d188:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418d18a:	2300      	movs	r3, #0
3418d18c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d18e:	e073      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418d190:	2304      	movs	r3, #4
3418d192:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d194:	2300      	movs	r3, #0
3418d196:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d198:	2300      	movs	r3, #0
3418d19a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418d19c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418d1a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d1a6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d1a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d1ac:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418d1ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418d1b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418d1b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d1b8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418d1ba:	2308      	movs	r3, #8
3418d1bc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418d1be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418d1c2:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d1c4:	e058      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418d1c6:	2304      	movs	r3, #4
3418d1c8:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3418d1ca:	2310      	movs	r3, #16
3418d1cc:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418d1ce:	2308      	movs	r3, #8
3418d1d0:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418d1d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418d1d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d1dc:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d1de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d1e2:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418d1e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418d1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418d1ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d1ee:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3418d1f0:	2314      	movs	r3, #20
3418d1f2:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418d1f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418d1f8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d1fa:	e03d      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418d1fc:	2304      	movs	r3, #4
3418d1fe:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418d200:	2300      	movs	r3, #0
3418d202:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d204:	2300      	movs	r3, #0
3418d206:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418d208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418d20e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d212:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d218:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418d21a:	2300      	movs	r3, #0
3418d21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3418d21e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418d222:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418d224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d228:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418d22a:	230a      	movs	r3, #10
3418d22c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418d22e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418d232:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d234:	e020      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418d236:	2304      	movs	r3, #4
3418d238:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418d23a:	2300      	movs	r3, #0
3418d23c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d23e:	2300      	movs	r3, #0
3418d240:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418d242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418d248:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d24c:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d24e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d252:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418d254:	2300      	movs	r3, #0
3418d256:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
3418d258:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
3418d25c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418d25e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d262:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418d264:	230a      	movs	r3, #10
3418d266:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418d268:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418d26c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418d26e:	e003      	b.n	3418d278 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3418d270:	2301      	movs	r3, #1
3418d272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
3418d276:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
3418d278:	e022      	b.n	3418d2c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418d27a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d27e:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3418d280:	e01e      	b.n	3418d2c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418d282:	687b      	ldr	r3, [r7, #4]
3418d284:	781b      	ldrb	r3, [r3, #0]
3418d286:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
3418d28a:	68fb      	ldr	r3, [r7, #12]
3418d28c:	681b      	ldr	r3, [r3, #0]
3418d28e:	681b      	ldr	r3, [r3, #0]
3418d290:	689b      	ldr	r3, [r3, #8]
3418d292:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418d296:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
3418d29a:	041a      	lsls	r2, r3, #16
3418d29c:	68fb      	ldr	r3, [r7, #12]
3418d29e:	681b      	ldr	r3, [r3, #0]
3418d2a0:	681b      	ldr	r3, [r3, #0]
3418d2a2:	430a      	orrs	r2, r1
3418d2a4:	609a      	str	r2, [r3, #8]
    break;
3418d2a6:	e00b      	b.n	3418d2c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418d2a8:	687b      	ldr	r3, [r7, #4]
3418d2aa:	781b      	ldrb	r3, [r3, #0]
3418d2ac:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
3418d2b0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
3418d2b4:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
3418d2b6:	e003      	b.n	3418d2c0 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
3418d2b8:	2301      	movs	r3, #1
3418d2ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
3418d2be:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
3418d2c0:	68fb      	ldr	r3, [r7, #12]
3418d2c2:	3304      	adds	r3, #4
3418d2c4:	f107 0110 	add.w	r1, r7, #16
3418d2c8:	224c      	movs	r2, #76	@ 0x4c
3418d2ca:	4618      	mov	r0, r3
3418d2cc:	f002 f9be 	bl	3418f64c <memcpy>
  return retr;
3418d2d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d2d4:	4618      	mov	r0, r3
3418d2d6:	3760      	adds	r7, #96	@ 0x60
3418d2d8:	46bd      	mov	sp, r7
3418d2da:	bd80      	pop	{r7, pc}

3418d2dc <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418d2dc:	b580      	push	{r7, lr}
3418d2de:	b098      	sub	sp, #96	@ 0x60
3418d2e0:	af00      	add	r7, sp, #0
3418d2e2:	60f8      	str	r0, [r7, #12]
3418d2e4:	60b9      	str	r1, [r7, #8]
3418d2e6:	607a      	str	r2, [r7, #4]
3418d2e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d2ea:	68fb      	ldr	r3, [r7, #12]
3418d2ec:	f107 0010 	add.w	r0, r7, #16
3418d2f0:	3304      	adds	r3, #4
3418d2f2:	224c      	movs	r2, #76	@ 0x4c
3418d2f4:	4619      	mov	r1, r3
3418d2f6:	f002 f9a9 	bl	3418f64c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
3418d2fa:	68fb      	ldr	r3, [r7, #12]
3418d2fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d300:	6a39      	ldr	r1, [r7, #32]
3418d302:	225a      	movs	r2, #90	@ 0x5a
3418d304:	4618      	mov	r0, r3
3418d306:	f000 fbb6 	bl	3418da76 <XSPI_FormatCommand>
3418d30a:	4603      	mov	r3, r0
3418d30c:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
3418d30e:	68bb      	ldr	r3, [r7, #8]
3418d310:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3418d312:	683b      	ldr	r3, [r7, #0]
3418d314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
3418d316:	68fb      	ldr	r3, [r7, #12]
3418d318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418d31c:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3418d31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418d320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418d324:	d102      	bne.n	3418d32c <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418d326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d32a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418d32c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418d32e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418d332:	d103      	bne.n	3418d33c <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3418d334:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418d338:	65bb      	str	r3, [r7, #88]	@ 0x58
3418d33a:	e001      	b.n	3418d340 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3418d33c:	2300      	movs	r3, #0
3418d33e:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d340:	68fb      	ldr	r3, [r7, #12]
3418d342:	681b      	ldr	r3, [r3, #0]
3418d344:	f107 0110 	add.w	r1, r7, #16
3418d348:	2264      	movs	r2, #100	@ 0x64
3418d34a:	4618      	mov	r0, r3
3418d34c:	f7fe fb7a 	bl	3418ba44 <HAL_XSPI_Command>
3418d350:	4603      	mov	r3, r0
3418d352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418d356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d35a:	2b00      	cmp	r3, #0
3418d35c:	d10a      	bne.n	3418d374 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d35e:	68fb      	ldr	r3, [r7, #12]
3418d360:	681b      	ldr	r3, [r3, #0]
3418d362:	2264      	movs	r2, #100	@ 0x64
3418d364:	6879      	ldr	r1, [r7, #4]
3418d366:	4618      	mov	r0, r3
3418d368:	f7fe fc6f 	bl	3418bc4a <HAL_XSPI_Receive>
3418d36c:	4603      	mov	r3, r0
3418d36e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418d372:	e000      	b.n	3418d376 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
3418d374:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d376:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d37a:	2b00      	cmp	r3, #0
3418d37c:	d004      	beq.n	3418d388 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d37e:	68fb      	ldr	r3, [r7, #12]
3418d380:	681b      	ldr	r3, [r3, #0]
3418d382:	4618      	mov	r0, r3
3418d384:	f7fe fdfa 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d388:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d38c:	4618      	mov	r0, r3
3418d38e:	3760      	adds	r7, #96	@ 0x60
3418d390:	46bd      	mov	sp, r7
3418d392:	bd80      	pop	{r7, pc}

3418d394 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
3418d394:	b580      	push	{r7, lr}
3418d396:	b098      	sub	sp, #96	@ 0x60
3418d398:	af00      	add	r7, sp, #0
3418d39a:	60f8      	str	r0, [r7, #12]
3418d39c:	60b9      	str	r1, [r7, #8]
3418d39e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d3a0:	68fb      	ldr	r3, [r7, #12]
3418d3a2:	f107 0010 	add.w	r0, r7, #16
3418d3a6:	3304      	adds	r3, #4
3418d3a8:	224c      	movs	r2, #76	@ 0x4c
3418d3aa:	4619      	mov	r1, r3
3418d3ac:	f002 f94e 	bl	3418f64c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
3418d3b0:	68fb      	ldr	r3, [r7, #12]
3418d3b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d3b6:	6a39      	ldr	r1, [r7, #32]
3418d3b8:	229f      	movs	r2, #159	@ 0x9f
3418d3ba:	4618      	mov	r0, r3
3418d3bc:	f000 fb5b 	bl	3418da76 <XSPI_FormatCommand>
3418d3c0:	4603      	mov	r3, r0
3418d3c2:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
3418d3c4:	687b      	ldr	r3, [r7, #4]
3418d3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
3418d3c8:	2300      	movs	r3, #0
3418d3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418d3cc:	69fb      	ldr	r3, [r7, #28]
3418d3ce:	2b01      	cmp	r3, #1
3418d3d0:	d105      	bne.n	3418d3de <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
3418d3d2:	2300      	movs	r3, #0
3418d3d4:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
3418d3d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d3da:	64bb      	str	r3, [r7, #72]	@ 0x48
3418d3dc:	e003      	b.n	3418d3e6 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
3418d3de:	2300      	movs	r3, #0
3418d3e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
3418d3e2:	2308      	movs	r3, #8
3418d3e4:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d3e6:	68fb      	ldr	r3, [r7, #12]
3418d3e8:	681b      	ldr	r3, [r3, #0]
3418d3ea:	f107 0110 	add.w	r1, r7, #16
3418d3ee:	2264      	movs	r2, #100	@ 0x64
3418d3f0:	4618      	mov	r0, r3
3418d3f2:	f7fe fb27 	bl	3418ba44 <HAL_XSPI_Command>
3418d3f6:	4603      	mov	r3, r0
3418d3f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418d3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d400:	2b00      	cmp	r3, #0
3418d402:	d10a      	bne.n	3418d41a <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d404:	68fb      	ldr	r3, [r7, #12]
3418d406:	681b      	ldr	r3, [r3, #0]
3418d408:	2264      	movs	r2, #100	@ 0x64
3418d40a:	68b9      	ldr	r1, [r7, #8]
3418d40c:	4618      	mov	r0, r3
3418d40e:	f7fe fc1c 	bl	3418bc4a <HAL_XSPI_Receive>
3418d412:	4603      	mov	r3, r0
3418d414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418d418:	e000      	b.n	3418d41c <SAL_XSPI_GetId+0x88>
    goto error;
3418d41a:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d41c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d420:	2b00      	cmp	r3, #0
3418d422:	d004      	beq.n	3418d42e <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d424:	68fb      	ldr	r3, [r7, #12]
3418d426:	681b      	ldr	r3, [r3, #0]
3418d428:	4618      	mov	r0, r3
3418d42a:	f7fe fda7 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d42e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d432:	4618      	mov	r0, r3
3418d434:	3760      	adds	r7, #96	@ 0x60
3418d436:	46bd      	mov	sp, r7
3418d438:	bd80      	pop	{r7, pc}

3418d43a <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418d43a:	b580      	push	{r7, lr}
3418d43c:	b098      	sub	sp, #96	@ 0x60
3418d43e:	af00      	add	r7, sp, #0
3418d440:	60f8      	str	r0, [r7, #12]
3418d442:	607a      	str	r2, [r7, #4]
3418d444:	603b      	str	r3, [r7, #0]
3418d446:	460b      	mov	r3, r1
3418d448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d44a:	68fb      	ldr	r3, [r7, #12]
3418d44c:	f107 0010 	add.w	r0, r7, #16
3418d450:	3304      	adds	r3, #4
3418d452:	224c      	movs	r2, #76	@ 0x4c
3418d454:	4619      	mov	r1, r3
3418d456:	f002 f8f9 	bl	3418f64c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d45a:	68fb      	ldr	r3, [r7, #12]
3418d45c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d460:	6a39      	ldr	r1, [r7, #32]
3418d462:	7afa      	ldrb	r2, [r7, #11]
3418d464:	4618      	mov	r0, r3
3418d466:	f000 fb06 	bl	3418da76 <XSPI_FormatCommand>
3418d46a:	4603      	mov	r3, r0
3418d46c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418d46e:	687b      	ldr	r3, [r7, #4]
3418d470:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418d472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418d474:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
3418d476:	68fb      	ldr	r3, [r7, #12]
3418d478:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418d47c:	2b05      	cmp	r3, #5
3418d47e:	d006      	beq.n	3418d48e <SAL_XSPI_Read+0x54>
3418d480:	2b05      	cmp	r3, #5
3418d482:	dc1a      	bgt.n	3418d4ba <SAL_XSPI_Read+0x80>
3418d484:	2b01      	cmp	r3, #1
3418d486:	d014      	beq.n	3418d4b2 <SAL_XSPI_Read+0x78>
3418d488:	2b02      	cmp	r3, #2
3418d48a:	d00b      	beq.n	3418d4a4 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
3418d48c:	e015      	b.n	3418d4ba <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418d48e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d492:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
3418d494:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418d498:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
3418d49a:	68fb      	ldr	r3, [r7, #12]
3418d49c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418d4a0:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
3418d4a2:	e00b      	b.n	3418d4bc <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
3418d4a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418d4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418d4aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418d4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418d4b0:	e004      	b.n	3418d4bc <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418d4b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418d4b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418d4b8:	e000      	b.n	3418d4bc <SAL_XSPI_Read+0x82>
   break;
3418d4ba:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d4bc:	68fb      	ldr	r3, [r7, #12]
3418d4be:	681b      	ldr	r3, [r3, #0]
3418d4c0:	f107 0110 	add.w	r1, r7, #16
3418d4c4:	2264      	movs	r2, #100	@ 0x64
3418d4c6:	4618      	mov	r0, r3
3418d4c8:	f7fe fabc 	bl	3418ba44 <HAL_XSPI_Command>
3418d4cc:	4603      	mov	r3, r0
3418d4ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418d4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d4d6:	2b00      	cmp	r3, #0
3418d4d8:	d107      	bne.n	3418d4ea <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
3418d4da:	6839      	ldr	r1, [r7, #0]
3418d4dc:	68f8      	ldr	r0, [r7, #12]
3418d4de:	f000 fb06 	bl	3418daee <XSPI_Receive>
3418d4e2:	4603      	mov	r3, r0
3418d4e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418d4e8:	e000      	b.n	3418d4ec <SAL_XSPI_Read+0xb2>
    goto error;
3418d4ea:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d4f0:	2b00      	cmp	r3, #0
3418d4f2:	d004      	beq.n	3418d4fe <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d4f4:	68fb      	ldr	r3, [r7, #12]
3418d4f6:	681b      	ldr	r3, [r3, #0]
3418d4f8:	4618      	mov	r0, r3
3418d4fa:	f7fe fd3f 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d4fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d502:	4618      	mov	r0, r3
3418d504:	3760      	adds	r7, #96	@ 0x60
3418d506:	46bd      	mov	sp, r7
3418d508:	bd80      	pop	{r7, pc}

3418d50a <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
3418d50a:	b580      	push	{r7, lr}
3418d50c:	b098      	sub	sp, #96	@ 0x60
3418d50e:	af00      	add	r7, sp, #0
3418d510:	60f8      	str	r0, [r7, #12]
3418d512:	607a      	str	r2, [r7, #4]
3418d514:	603b      	str	r3, [r7, #0]
3418d516:	460b      	mov	r3, r1
3418d518:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d51a:	68fb      	ldr	r3, [r7, #12]
3418d51c:	f107 0010 	add.w	r0, r7, #16
3418d520:	3304      	adds	r3, #4
3418d522:	224c      	movs	r2, #76	@ 0x4c
3418d524:	4619      	mov	r1, r3
3418d526:	f002 f891 	bl	3418f64c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d52a:	68fb      	ldr	r3, [r7, #12]
3418d52c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d530:	6a39      	ldr	r1, [r7, #32]
3418d532:	7afa      	ldrb	r2, [r7, #11]
3418d534:	4618      	mov	r0, r3
3418d536:	f000 fa9e 	bl	3418da76 <XSPI_FormatCommand>
3418d53a:	4603      	mov	r3, r0
3418d53c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418d53e:	687b      	ldr	r3, [r7, #4]
3418d540:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418d542:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418d544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
3418d546:	2300      	movs	r3, #0
3418d548:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
3418d54a:	2300      	movs	r3, #0
3418d54c:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d54e:	68fb      	ldr	r3, [r7, #12]
3418d550:	681b      	ldr	r3, [r3, #0]
3418d552:	f107 0110 	add.w	r1, r7, #16
3418d556:	2264      	movs	r2, #100	@ 0x64
3418d558:	4618      	mov	r0, r3
3418d55a:	f7fe fa73 	bl	3418ba44 <HAL_XSPI_Command>
3418d55e:	4603      	mov	r3, r0
3418d560:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
3418d564:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d568:	2b00      	cmp	r3, #0
3418d56a:	d107      	bne.n	3418d57c <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
3418d56c:	6839      	ldr	r1, [r7, #0]
3418d56e:	68f8      	ldr	r0, [r7, #12]
3418d570:	f000 faaa 	bl	3418dac8 <XSPI_Transmit>
3418d574:	4603      	mov	r3, r0
3418d576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418d57a:	e000      	b.n	3418d57e <SAL_XSPI_Write+0x74>
    goto error;
3418d57c:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d57e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d582:	2b00      	cmp	r3, #0
3418d584:	d004      	beq.n	3418d590 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d586:	68fb      	ldr	r3, [r7, #12]
3418d588:	681b      	ldr	r3, [r3, #0]
3418d58a:	4618      	mov	r0, r3
3418d58c:	f7fe fcf6 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d590:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d594:	4618      	mov	r0, r3
3418d596:	3760      	adds	r7, #96	@ 0x60
3418d598:	46bd      	mov	sp, r7
3418d59a:	bd80      	pop	{r7, pc}

3418d59c <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418d59c:	b580      	push	{r7, lr}
3418d59e:	b098      	sub	sp, #96	@ 0x60
3418d5a0:	af00      	add	r7, sp, #0
3418d5a2:	60f8      	str	r0, [r7, #12]
3418d5a4:	607a      	str	r2, [r7, #4]
3418d5a6:	461a      	mov	r2, r3
3418d5a8:	460b      	mov	r3, r1
3418d5aa:	72fb      	strb	r3, [r7, #11]
3418d5ac:	4613      	mov	r3, r2
3418d5ae:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418d5b0:	68fb      	ldr	r3, [r7, #12]
3418d5b2:	f107 0010 	add.w	r0, r7, #16
3418d5b6:	3304      	adds	r3, #4
3418d5b8:	224c      	movs	r2, #76	@ 0x4c
3418d5ba:	4619      	mov	r1, r3
3418d5bc:	f002 f846 	bl	3418f64c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d5c0:	68fb      	ldr	r3, [r7, #12]
3418d5c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d5c6:	6a39      	ldr	r1, [r7, #32]
3418d5c8:	7afa      	ldrb	r2, [r7, #11]
3418d5ca:	4618      	mov	r0, r3
3418d5cc:	f000 fa53 	bl	3418da76 <XSPI_FormatCommand>
3418d5d0:	4603      	mov	r3, r0
3418d5d2:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418d5d4:	2300      	movs	r3, #0
3418d5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
3418d5d8:	2300      	movs	r3, #0
3418d5da:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418d5dc:	893b      	ldrh	r3, [r7, #8]
3418d5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418d5e0:	2300      	movs	r3, #0
3418d5e2:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418d5e4:	893b      	ldrh	r3, [r7, #8]
3418d5e6:	2b00      	cmp	r3, #0
3418d5e8:	d101      	bne.n	3418d5ee <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418d5ea:	2300      	movs	r3, #0
3418d5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d5ee:	68fb      	ldr	r3, [r7, #12]
3418d5f0:	681b      	ldr	r3, [r3, #0]
3418d5f2:	f107 0110 	add.w	r1, r7, #16
3418d5f6:	2264      	movs	r2, #100	@ 0x64
3418d5f8:	4618      	mov	r0, r3
3418d5fa:	f7fe fa23 	bl	3418ba44 <HAL_XSPI_Command>
3418d5fe:	4603      	mov	r3, r0
3418d600:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418d604:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d608:	2b00      	cmp	r3, #0
3418d60a:	d10c      	bne.n	3418d626 <SAL_XSPI_CommandSendData+0x8a>
3418d60c:	893b      	ldrh	r3, [r7, #8]
3418d60e:	2b00      	cmp	r3, #0
3418d610:	d009      	beq.n	3418d626 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d612:	68fb      	ldr	r3, [r7, #12]
3418d614:	681b      	ldr	r3, [r3, #0]
3418d616:	2264      	movs	r2, #100	@ 0x64
3418d618:	6879      	ldr	r1, [r7, #4]
3418d61a:	4618      	mov	r0, r3
3418d61c:	f7fe faa2 	bl	3418bb64 <HAL_XSPI_Transmit>
3418d620:	4603      	mov	r3, r0
3418d622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418d626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d62a:	2b00      	cmp	r3, #0
3418d62c:	d004      	beq.n	3418d638 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d62e:	68fb      	ldr	r3, [r7, #12]
3418d630:	681b      	ldr	r3, [r3, #0]
3418d632:	4618      	mov	r0, r3
3418d634:	f7fe fca2 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d638:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d63c:	4618      	mov	r0, r3
3418d63e:	3760      	adds	r7, #96	@ 0x60
3418d640:	46bd      	mov	sp, r7
3418d642:	bd80      	pop	{r7, pc}

3418d644 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418d644:	b580      	push	{r7, lr}
3418d646:	b098      	sub	sp, #96	@ 0x60
3418d648:	af00      	add	r7, sp, #0
3418d64a:	60f8      	str	r0, [r7, #12]
3418d64c:	607a      	str	r2, [r7, #4]
3418d64e:	461a      	mov	r2, r3
3418d650:	460b      	mov	r3, r1
3418d652:	72fb      	strb	r3, [r7, #11]
3418d654:	4613      	mov	r3, r2
3418d656:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418d658:	68fb      	ldr	r3, [r7, #12]
3418d65a:	f107 0010 	add.w	r0, r7, #16
3418d65e:	3304      	adds	r3, #4
3418d660:	224c      	movs	r2, #76	@ 0x4c
3418d662:	4619      	mov	r1, r3
3418d664:	f001 fff2 	bl	3418f64c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d668:	68fb      	ldr	r3, [r7, #12]
3418d66a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d66e:	6a39      	ldr	r1, [r7, #32]
3418d670:	7afa      	ldrb	r2, [r7, #11]
3418d672:	4618      	mov	r0, r3
3418d674:	f000 f9ff 	bl	3418da76 <XSPI_FormatCommand>
3418d678:	4603      	mov	r3, r0
3418d67a:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418d67c:	2300      	movs	r3, #0
3418d67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3418d680:	2300      	movs	r3, #0
3418d682:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418d684:	893b      	ldrh	r3, [r7, #8]
3418d686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418d688:	2300      	movs	r3, #0
3418d68a:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418d68c:	893b      	ldrh	r3, [r7, #8]
3418d68e:	2b00      	cmp	r3, #0
3418d690:	d101      	bne.n	3418d696 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418d692:	2300      	movs	r3, #0
3418d694:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d696:	68fb      	ldr	r3, [r7, #12]
3418d698:	681b      	ldr	r3, [r3, #0]
3418d69a:	f107 0110 	add.w	r1, r7, #16
3418d69e:	2264      	movs	r2, #100	@ 0x64
3418d6a0:	4618      	mov	r0, r3
3418d6a2:	f7fe f9cf 	bl	3418ba44 <HAL_XSPI_Command>
3418d6a6:	4603      	mov	r3, r0
3418d6a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418d6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d6b0:	2b00      	cmp	r3, #0
3418d6b2:	d10c      	bne.n	3418d6ce <SAL_XSPI_SendReadCommand+0x8a>
3418d6b4:	893b      	ldrh	r3, [r7, #8]
3418d6b6:	2b00      	cmp	r3, #0
3418d6b8:	d009      	beq.n	3418d6ce <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d6ba:	68fb      	ldr	r3, [r7, #12]
3418d6bc:	681b      	ldr	r3, [r3, #0]
3418d6be:	2264      	movs	r2, #100	@ 0x64
3418d6c0:	6879      	ldr	r1, [r7, #4]
3418d6c2:	4618      	mov	r0, r3
3418d6c4:	f7fe fac1 	bl	3418bc4a <HAL_XSPI_Receive>
3418d6c8:	4603      	mov	r3, r0
3418d6ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418d6ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d6d2:	2b00      	cmp	r3, #0
3418d6d4:	d004      	beq.n	3418d6e0 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d6d6:	68fb      	ldr	r3, [r7, #12]
3418d6d8:	681b      	ldr	r3, [r3, #0]
3418d6da:	4618      	mov	r0, r3
3418d6dc:	f7fe fc4e 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d6e4:	4618      	mov	r0, r3
3418d6e6:	3760      	adds	r7, #96	@ 0x60
3418d6e8:	46bd      	mov	sp, r7
3418d6ea:	bd80      	pop	{r7, pc}

3418d6ec <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
3418d6ec:	b580      	push	{r7, lr}
3418d6ee:	b098      	sub	sp, #96	@ 0x60
3418d6f0:	af00      	add	r7, sp, #0
3418d6f2:	60f8      	str	r0, [r7, #12]
3418d6f4:	607a      	str	r2, [r7, #4]
3418d6f6:	603b      	str	r3, [r7, #0]
3418d6f8:	460b      	mov	r3, r1
3418d6fa:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418d6fc:	68fb      	ldr	r3, [r7, #12]
3418d6fe:	f107 0010 	add.w	r0, r7, #16
3418d702:	3304      	adds	r3, #4
3418d704:	224c      	movs	r2, #76	@ 0x4c
3418d706:	4619      	mov	r1, r3
3418d708:	f001 ffa0 	bl	3418f64c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d70c:	68fb      	ldr	r3, [r7, #12]
3418d70e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d712:	6a39      	ldr	r1, [r7, #32]
3418d714:	7afa      	ldrb	r2, [r7, #11]
3418d716:	4618      	mov	r0, r3
3418d718:	f000 f9ad 	bl	3418da76 <XSPI_FormatCommand>
3418d71c:	4603      	mov	r3, r0
3418d71e:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3418d720:	687b      	ldr	r3, [r7, #4]
3418d722:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
3418d724:	68fb      	ldr	r3, [r7, #12]
3418d726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418d72a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418d72c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3418d730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418d732:	2300      	movs	r3, #0
3418d734:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d736:	68fb      	ldr	r3, [r7, #12]
3418d738:	681b      	ldr	r3, [r3, #0]
3418d73a:	f107 0110 	add.w	r1, r7, #16
3418d73e:	2264      	movs	r2, #100	@ 0x64
3418d740:	4618      	mov	r0, r3
3418d742:	f7fe f97f 	bl	3418ba44 <HAL_XSPI_Command>
3418d746:	4603      	mov	r3, r0
3418d748:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
3418d74c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d750:	2b00      	cmp	r3, #0
3418d752:	d109      	bne.n	3418d768 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d754:	68fb      	ldr	r3, [r7, #12]
3418d756:	681b      	ldr	r3, [r3, #0]
3418d758:	2264      	movs	r2, #100	@ 0x64
3418d75a:	6839      	ldr	r1, [r7, #0]
3418d75c:	4618      	mov	r0, r3
3418d75e:	f7fe fa74 	bl	3418bc4a <HAL_XSPI_Receive>
3418d762:	4603      	mov	r3, r0
3418d764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418d768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418d76c:	2b00      	cmp	r3, #0
3418d76e:	d004      	beq.n	3418d77a <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d770:	68fb      	ldr	r3, [r7, #12]
3418d772:	681b      	ldr	r3, [r3, #0]
3418d774:	4618      	mov	r0, r3
3418d776:	f7fe fc01 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  return retr;
3418d77a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418d77e:	4618      	mov	r0, r3
3418d780:	3760      	adds	r7, #96	@ 0x60
3418d782:	46bd      	mov	sp, r7
3418d784:	bd80      	pop	{r7, pc}

3418d786 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
3418d786:	b580      	push	{r7, lr}
3418d788:	b09e      	sub	sp, #120	@ 0x78
3418d78a:	af00      	add	r7, sp, #0
3418d78c:	60f8      	str	r0, [r7, #12]
3418d78e:	607a      	str	r2, [r7, #4]
3418d790:	461a      	mov	r2, r3
3418d792:	460b      	mov	r3, r1
3418d794:	72fb      	strb	r3, [r7, #11]
3418d796:	4613      	mov	r3, r2
3418d798:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d79a:	68fb      	ldr	r3, [r7, #12]
3418d79c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
3418d7a0:	3304      	adds	r3, #4
3418d7a2:	224c      	movs	r2, #76	@ 0x4c
3418d7a4:	4619      	mov	r1, r3
3418d7a6:	f001 ff51 	bl	3418f64c <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
3418d7aa:	7abb      	ldrb	r3, [r7, #10]
3418d7ac:	617b      	str	r3, [r7, #20]
3418d7ae:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
3418d7b2:	61bb      	str	r3, [r7, #24]
3418d7b4:	2300      	movs	r3, #0
3418d7b6:	61fb      	str	r3, [r7, #28]
3418d7b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3418d7bc:	623b      	str	r3, [r7, #32]
3418d7be:	2310      	movs	r3, #16
3418d7c0:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418d7c2:	68fb      	ldr	r3, [r7, #12]
3418d7c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d7c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
3418d7ca:	7afa      	ldrb	r2, [r7, #11]
3418d7cc:	4618      	mov	r0, r3
3418d7ce:	f000 f952 	bl	3418da76 <XSPI_FormatCommand>
3418d7d2:	4603      	mov	r3, r0
3418d7d4:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
3418d7d6:	2301      	movs	r3, #1
3418d7d8:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
3418d7da:	2300      	movs	r3, #0
3418d7dc:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418d7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418d7e0:	2b01      	cmp	r3, #1
3418d7e2:	d106      	bne.n	3418d7f2 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
3418d7e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d7e8:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
3418d7ea:	2300      	movs	r3, #0
3418d7ec:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3418d7ee:	2300      	movs	r3, #0
3418d7f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3418d7f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418d7f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418d7f8:	d107      	bne.n	3418d80a <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
3418d7fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d7fe:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3418d800:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418d804:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
3418d806:	687b      	ldr	r3, [r7, #4]
3418d808:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d80a:	68fb      	ldr	r3, [r7, #12]
3418d80c:	681b      	ldr	r3, [r3, #0]
3418d80e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3418d812:	2264      	movs	r2, #100	@ 0x64
3418d814:	4618      	mov	r0, r3
3418d816:	f7fe f915 	bl	3418ba44 <HAL_XSPI_Command>
3418d81a:	4603      	mov	r3, r0
3418d81c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3418d820:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418d824:	2b00      	cmp	r3, #0
3418d826:	d10b      	bne.n	3418d840 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
3418d828:	68fb      	ldr	r3, [r7, #12]
3418d82a:	681b      	ldr	r3, [r3, #0]
3418d82c:	f107 0114 	add.w	r1, r7, #20
3418d830:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
3418d834:	4618      	mov	r0, r3
3418d836:	f7fe faab 	bl	3418bd90 <HAL_XSPI_AutoPolling>
3418d83a:	4603      	mov	r3, r0
3418d83c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3418d840:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418d844:	2b00      	cmp	r3, #0
3418d846:	d004      	beq.n	3418d852 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d848:	68fb      	ldr	r3, [r7, #12]
3418d84a:	681b      	ldr	r3, [r3, #0]
3418d84c:	4618      	mov	r0, r3
3418d84e:	f7fe fb95 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418d852:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
3418d856:	4618      	mov	r0, r3
3418d858:	3778      	adds	r7, #120	@ 0x78
3418d85a:	46bd      	mov	sp, r7
3418d85c:	bd80      	pop	{r7, pc}

3418d85e <SAL_XSPI_ConfigureWrappMode>:

HAL_StatusTypeDef SAL_XSPI_ConfigureWrappMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t WrapCommand, uint8_t WrapDummy)
{
3418d85e:	b580      	push	{r7, lr}
3418d860:	b096      	sub	sp, #88	@ 0x58
3418d862:	af00      	add	r7, sp, #0
3418d864:	6078      	str	r0, [r7, #4]
3418d866:	460b      	mov	r3, r1
3418d868:	70fb      	strb	r3, [r7, #3]
3418d86a:	4613      	mov	r3, r2
3418d86c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d86e:	687b      	ldr	r3, [r7, #4]
3418d870:	f107 0008 	add.w	r0, r7, #8
3418d874:	3304      	adds	r3, #4
3418d876:	224c      	movs	r2, #76	@ 0x4c
3418d878:	4619      	mov	r1, r3
3418d87a:	f001 fee7 	bl	3418f64c <memcpy>

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRAP_CFG;
3418d87e:	2303      	movs	r3, #3
3418d880:	60bb      	str	r3, [r7, #8]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, WrapCommand);
3418d882:	687b      	ldr	r3, [r7, #4]
3418d884:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d888:	69b9      	ldr	r1, [r7, #24]
3418d88a:	78fa      	ldrb	r2, [r7, #3]
3418d88c:	4618      	mov	r0, r3
3418d88e:	f000 f8f2 	bl	3418da76 <XSPI_FormatCommand>
3418d892:	4603      	mov	r3, r0
3418d894:	613b      	str	r3, [r7, #16]
  s_command.DummyCycles = WrapDummy;
3418d896:	78bb      	ldrb	r3, [r7, #2]
3418d898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d89a:	687b      	ldr	r3, [r7, #4]
3418d89c:	681b      	ldr	r3, [r3, #0]
3418d89e:	f107 0108 	add.w	r1, r7, #8
3418d8a2:	2264      	movs	r2, #100	@ 0x64
3418d8a4:	4618      	mov	r0, r3
3418d8a6:	f7fe f8cd 	bl	3418ba44 <HAL_XSPI_Command>
3418d8aa:	4603      	mov	r3, r0
3418d8ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if ( retr  != HAL_OK)
3418d8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
3418d8b4:	2b00      	cmp	r3, #0
  {
    goto error;
  }

error:
3418d8b6:	bf00      	nop
  if (retr != HAL_OK )
3418d8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
3418d8bc:	2b00      	cmp	r3, #0
3418d8be:	d004      	beq.n	3418d8ca <SAL_XSPI_ConfigureWrappMode+0x6c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d8c0:	687b      	ldr	r3, [r7, #4]
3418d8c2:	681b      	ldr	r3, [r3, #0]
3418d8c4:	4618      	mov	r0, r3
3418d8c6:	f7fe fb59 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418d8ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
3418d8ce:	4618      	mov	r0, r3
3418d8d0:	3758      	adds	r7, #88	@ 0x58
3418d8d2:	46bd      	mov	sp, r7
3418d8d4:	bd80      	pop	{r7, pc}

3418d8d6 <SAL_XSPI_EnableMapMode>:

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3418d8d6:	b580      	push	{r7, lr}
3418d8d8:	b09a      	sub	sp, #104	@ 0x68
3418d8da:	af00      	add	r7, sp, #0
3418d8dc:	6078      	str	r0, [r7, #4]
3418d8de:	4608      	mov	r0, r1
3418d8e0:	4611      	mov	r1, r2
3418d8e2:	461a      	mov	r2, r3
3418d8e4:	4603      	mov	r3, r0
3418d8e6:	70fb      	strb	r3, [r7, #3]
3418d8e8:	460b      	mov	r3, r1
3418d8ea:	70bb      	strb	r3, [r7, #2]
3418d8ec:	4613      	mov	r3, r2
3418d8ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418d8f0:	687b      	ldr	r3, [r7, #4]
3418d8f2:	f107 0018 	add.w	r0, r7, #24
3418d8f6:	3304      	adds	r3, #4
3418d8f8:	224c      	movs	r2, #76	@ 0x4c
3418d8fa:	4619      	mov	r1, r3
3418d8fc:	f001 fea6 	bl	3418f64c <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3418d900:	f107 0308 	add.w	r3, r7, #8
3418d904:	2200      	movs	r2, #0
3418d906:	601a      	str	r2, [r3, #0]
3418d908:	605a      	str	r2, [r3, #4]
3418d90a:	609a      	str	r2, [r3, #8]
3418d90c:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3418d90e:	2301      	movs	r3, #1
3418d910:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
3418d912:	687b      	ldr	r3, [r7, #4]
3418d914:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d91a:	78fa      	ldrb	r2, [r7, #3]
3418d91c:	4618      	mov	r0, r3
3418d91e:	f000 f8aa 	bl	3418da76 <XSPI_FormatCommand>
3418d922:	4603      	mov	r3, r0
3418d924:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
3418d926:	78bb      	ldrb	r3, [r7, #2]
3418d928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d92a:	687b      	ldr	r3, [r7, #4]
3418d92c:	681b      	ldr	r3, [r3, #0]
3418d92e:	f107 0118 	add.w	r1, r7, #24
3418d932:	2264      	movs	r2, #100	@ 0x64
3418d934:	4618      	mov	r0, r3
3418d936:	f7fe f885 	bl	3418ba44 <HAL_XSPI_Command>
3418d93a:	4603      	mov	r3, r0
3418d93c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418d940:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d944:	2b00      	cmp	r3, #0
3418d946:	d12d      	bne.n	3418d9a4 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
3418d948:	2302      	movs	r3, #2
3418d94a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
3418d94c:	687b      	ldr	r3, [r7, #4]
3418d94e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418d952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d954:	787a      	ldrb	r2, [r7, #1]
3418d956:	4618      	mov	r0, r3
3418d958:	f000 f88d 	bl	3418da76 <XSPI_FormatCommand>
3418d95c:	4603      	mov	r3, r0
3418d95e:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
3418d960:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
3418d964:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d966:	687b      	ldr	r3, [r7, #4]
3418d968:	681b      	ldr	r3, [r3, #0]
3418d96a:	f107 0118 	add.w	r1, r7, #24
3418d96e:	2264      	movs	r2, #100	@ 0x64
3418d970:	4618      	mov	r0, r3
3418d972:	f7fe f867 	bl	3418ba44 <HAL_XSPI_Command>
3418d976:	4603      	mov	r3, r0
3418d978:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418d97c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d980:	2b00      	cmp	r3, #0
3418d982:	d111      	bne.n	3418d9a8 <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3418d984:	2300      	movs	r3, #0
3418d986:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3418d988:	2350      	movs	r3, #80	@ 0x50
3418d98a:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
3418d98c:	687b      	ldr	r3, [r7, #4]
3418d98e:	681b      	ldr	r3, [r3, #0]
3418d990:	f107 0208 	add.w	r2, r7, #8
3418d994:	4611      	mov	r1, r2
3418d996:	4618      	mov	r0, r3
3418d998:	f7fe fa84 	bl	3418bea4 <HAL_XSPI_MemoryMapped>
3418d99c:	4603      	mov	r3, r0
3418d99e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
3418d9a2:	e002      	b.n	3418d9aa <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418d9a4:	bf00      	nop
3418d9a6:	e000      	b.n	3418d9aa <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418d9a8:	bf00      	nop

error:
  if (retr != HAL_OK )
3418d9aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418d9ae:	2b00      	cmp	r3, #0
3418d9b0:	d004      	beq.n	3418d9bc <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418d9b2:	687b      	ldr	r3, [r7, #4]
3418d9b4:	681b      	ldr	r3, [r3, #0]
3418d9b6:	4618      	mov	r0, r3
3418d9b8:	f7fe fae0 	bl	3418bf7c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418d9bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
3418d9c0:	4618      	mov	r0, r3
3418d9c2:	3768      	adds	r7, #104	@ 0x68
3418d9c4:	46bd      	mov	sp, r7
3418d9c6:	bd80      	pop	{r7, pc}

3418d9c8 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418d9c8:	b580      	push	{r7, lr}
3418d9ca:	b082      	sub	sp, #8
3418d9cc:	af00      	add	r7, sp, #0
3418d9ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418d9d0:	f3bf 8f4f 	dsb	sy
}
3418d9d4:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418d9d6:	687b      	ldr	r3, [r7, #4]
3418d9d8:	681b      	ldr	r3, [r3, #0]
3418d9da:	4618      	mov	r0, r3
3418d9dc:	f7fe face 	bl	3418bf7c <HAL_XSPI_Abort>
3418d9e0:	4603      	mov	r3, r0
}
3418d9e2:	4618      	mov	r0, r3
3418d9e4:	3708      	adds	r7, #8
3418d9e6:	46bd      	mov	sp, r7
3418d9e8:	bd80      	pop	{r7, pc}

3418d9ea <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3418d9ea:	b480      	push	{r7}
3418d9ec:	b085      	sub	sp, #20
3418d9ee:	af00      	add	r7, sp, #0
3418d9f0:	6078      	str	r0, [r7, #4]
3418d9f2:	460b      	mov	r3, r1
3418d9f4:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3418d9f6:	2300      	movs	r3, #0
3418d9f8:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3418d9fa:	687b      	ldr	r3, [r7, #4]
3418d9fc:	681b      	ldr	r3, [r3, #0]
3418d9fe:	681b      	ldr	r3, [r3, #0]
3418da00:	689b      	ldr	r3, [r3, #8]
3418da02:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
3418da06:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
3418da08:	78fb      	ldrb	r3, [r7, #3]
3418da0a:	2b00      	cmp	r3, #0
3418da0c:	d11e      	bne.n	3418da4c <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
3418da0e:	68bb      	ldr	r3, [r7, #8]
3418da10:	2b00      	cmp	r3, #0
3418da12:	d103      	bne.n	3418da1c <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
3418da14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418da18:	60bb      	str	r3, [r7, #8]
3418da1a:	e008      	b.n	3418da2e <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
3418da1c:	68bb      	ldr	r3, [r7, #8]
3418da1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418da22:	d102      	bne.n	3418da2a <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
3418da24:	2300      	movs	r3, #0
3418da26:	60bb      	str	r3, [r7, #8]
3418da28:	e001      	b.n	3418da2e <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
3418da2a:	2301      	movs	r3, #1
3418da2c:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
3418da2e:	687b      	ldr	r3, [r7, #4]
3418da30:	681b      	ldr	r3, [r3, #0]
3418da32:	681b      	ldr	r3, [r3, #0]
3418da34:	689b      	ldr	r3, [r3, #8]
3418da36:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
3418da3a:	687b      	ldr	r3, [r7, #4]
3418da3c:	681b      	ldr	r3, [r3, #0]
3418da3e:	681b      	ldr	r3, [r3, #0]
3418da40:	68ba      	ldr	r2, [r7, #8]
3418da42:	430a      	orrs	r2, r1
3418da44:	609a      	str	r2, [r3, #8]
    break;
3418da46:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
3418da48:	7bfb      	ldrb	r3, [r7, #15]
3418da4a:	e000      	b.n	3418da4e <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
3418da4c:	2301      	movs	r3, #1
}
3418da4e:	4618      	mov	r0, r3
3418da50:	3714      	adds	r7, #20
3418da52:	46bd      	mov	sp, r7
3418da54:	f85d 7b04 	ldr.w	r7, [sp], #4
3418da58:	4770      	bx	lr

3418da5a <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418da5a:	b580      	push	{r7, lr}
3418da5c:	b082      	sub	sp, #8
3418da5e:	af00      	add	r7, sp, #0
3418da60:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418da62:	687b      	ldr	r3, [r7, #4]
3418da64:	681b      	ldr	r3, [r3, #0]
3418da66:	4618      	mov	r0, r3
3418da68:	f7fe fa88 	bl	3418bf7c <HAL_XSPI_Abort>
3418da6c:	4603      	mov	r3, r0
}
3418da6e:	4618      	mov	r0, r3
3418da70:	3708      	adds	r7, #8
3418da72:	46bd      	mov	sp, r7
3418da74:	bd80      	pop	{r7, pc}

3418da76 <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
3418da76:	b480      	push	{r7}
3418da78:	b085      	sub	sp, #20
3418da7a:	af00      	add	r7, sp, #0
3418da7c:	4603      	mov	r3, r0
3418da7e:	6039      	str	r1, [r7, #0]
3418da80:	71fb      	strb	r3, [r7, #7]
3418da82:	4613      	mov	r3, r2
3418da84:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
3418da86:	683b      	ldr	r3, [r7, #0]
3418da88:	2b10      	cmp	r3, #16
3418da8a:	d114      	bne.n	3418dab6 <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
3418da8c:	79bb      	ldrb	r3, [r7, #6]
3418da8e:	b29b      	uxth	r3, r3
3418da90:	021b      	lsls	r3, r3, #8
3418da92:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
3418da94:	79fb      	ldrb	r3, [r7, #7]
3418da96:	2b01      	cmp	r3, #1
3418da98:	d107      	bne.n	3418daaa <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
3418da9a:	79bb      	ldrb	r3, [r7, #6]
3418da9c:	43db      	mvns	r3, r3
3418da9e:	b2db      	uxtb	r3, r3
3418daa0:	461a      	mov	r2, r3
3418daa2:	89fb      	ldrh	r3, [r7, #14]
3418daa4:	4313      	orrs	r3, r2
3418daa6:	81fb      	strh	r3, [r7, #14]
3418daa8:	e007      	b.n	3418daba <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
3418daaa:	79bb      	ldrb	r3, [r7, #6]
3418daac:	b29a      	uxth	r2, r3
3418daae:	89fb      	ldrh	r3, [r7, #14]
3418dab0:	4313      	orrs	r3, r2
3418dab2:	81fb      	strh	r3, [r7, #14]
3418dab4:	e001      	b.n	3418daba <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
3418dab6:	79bb      	ldrb	r3, [r7, #6]
3418dab8:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
3418daba:	89fb      	ldrh	r3, [r7, #14]
}
3418dabc:	4618      	mov	r0, r3
3418dabe:	3714      	adds	r7, #20
3418dac0:	46bd      	mov	sp, r7
3418dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dac6:	4770      	bx	lr

3418dac8 <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
3418dac8:	b580      	push	{r7, lr}
3418daca:	b084      	sub	sp, #16
3418dacc:	af00      	add	r7, sp, #0
3418dace:	6078      	str	r0, [r7, #4]
3418dad0:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dad2:	687b      	ldr	r3, [r7, #4]
3418dad4:	681b      	ldr	r3, [r3, #0]
3418dad6:	2264      	movs	r2, #100	@ 0x64
3418dad8:	6839      	ldr	r1, [r7, #0]
3418dada:	4618      	mov	r0, r3
3418dadc:	f7fe f842 	bl	3418bb64 <HAL_XSPI_Transmit>
3418dae0:	4603      	mov	r3, r0
3418dae2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
3418dae4:	7bfb      	ldrb	r3, [r7, #15]
}
3418dae6:	4618      	mov	r0, r3
3418dae8:	3710      	adds	r7, #16
3418daea:	46bd      	mov	sp, r7
3418daec:	bd80      	pop	{r7, pc}

3418daee <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
3418daee:	b580      	push	{r7, lr}
3418daf0:	b084      	sub	sp, #16
3418daf2:	af00      	add	r7, sp, #0
3418daf4:	6078      	str	r0, [r7, #4]
3418daf6:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418daf8:	687b      	ldr	r3, [r7, #4]
3418dafa:	681b      	ldr	r3, [r3, #0]
3418dafc:	2264      	movs	r2, #100	@ 0x64
3418dafe:	6839      	ldr	r1, [r7, #0]
3418db00:	4618      	mov	r0, r3
3418db02:	f7fe f8a2 	bl	3418bc4a <HAL_XSPI_Receive>
3418db06:	4603      	mov	r3, r0
3418db08:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
3418db0a:	7bfb      	ldrb	r3, [r7, #15]
}
3418db0c:	4618      	mov	r0, r3
3418db0e:	3710      	adds	r7, #16
3418db10:	46bd      	mov	sp, r7
3418db12:	bd80      	pop	{r7, pc}

3418db14 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418db14:	b580      	push	{r7, lr}
3418db16:	b084      	sub	sp, #16
3418db18:	af00      	add	r7, sp, #0
3418db1a:	6078      	str	r0, [r7, #4]
3418db1c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
3418db1e:	2300      	movs	r3, #0
3418db20:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
3418db22:	683b      	ldr	r3, [r7, #0]
3418db24:	2200      	movs	r2, #0
3418db26:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
3418db28:	687b      	ldr	r3, [r7, #4]
3418db2a:	f103 0008 	add.w	r0, r3, #8
3418db2e:	2308      	movs	r3, #8
3418db30:	683a      	ldr	r2, [r7, #0]
3418db32:	2100      	movs	r1, #0
3418db34:	f7ff fbd2 	bl	3418d2dc <SAL_XSPI_GetSFDP>
3418db38:	4603      	mov	r3, r0
3418db3a:	2b00      	cmp	r3, #0
3418db3c:	d002      	beq.n	3418db44 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418db3e:	2303      	movs	r3, #3
3418db40:	73fb      	strb	r3, [r7, #15]
      goto error;
3418db42:	e01f      	b.n	3418db84 <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
3418db44:	683b      	ldr	r3, [r7, #0]
3418db46:	681b      	ldr	r3, [r3, #0]
3418db48:	4619      	mov	r1, r3
3418db4a:	6878      	ldr	r0, [r7, #4]
3418db4c:	f001 fc0a 	bl	3418f364 <CheckSFDP_Signature>
3418db50:	4603      	mov	r3, r0
3418db52:	2b00      	cmp	r3, #0
3418db54:	d002      	beq.n	3418db5c <SFDP_ReadHeader+0x48>
3418db56:	2b05      	cmp	r3, #5
3418db58:	d005      	beq.n	3418db66 <SFDP_ReadHeader+0x52>
3418db5a:	e00a      	b.n	3418db72 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
3418db5c:	2300      	movs	r3, #0
3418db5e:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418db60:	2302      	movs	r3, #2
3418db62:	73bb      	strb	r3, [r7, #14]
    break;
3418db64:	e00a      	b.n	3418db7c <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418db66:	2304      	movs	r3, #4
3418db68:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
3418db6a:	7bbb      	ldrb	r3, [r7, #14]
3418db6c:	3301      	adds	r3, #1
3418db6e:	73bb      	strb	r3, [r7, #14]
      break;
3418db70:	e004      	b.n	3418db7c <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418db72:	2304      	movs	r3, #4
3418db74:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418db76:	2302      	movs	r3, #2
3418db78:	73bb      	strb	r3, [r7, #14]
      break;
3418db7a:	bf00      	nop
    }
  } while(retry_counter < 2u);
3418db7c:	7bbb      	ldrb	r3, [r7, #14]
3418db7e:	2b01      	cmp	r3, #1
3418db80:	d9cf      	bls.n	3418db22 <SFDP_ReadHeader+0xe>

error:
3418db82:	bf00      	nop
  return retr;
3418db84:	7bfb      	ldrb	r3, [r7, #15]
}
3418db86:	4618      	mov	r0, r3
3418db88:	3710      	adds	r7, #16
3418db8a:	46bd      	mov	sp, r7
3418db8c:	bd80      	pop	{r7, pc}
	...

3418db90 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418db90:	b590      	push	{r4, r7, lr}
3418db92:	b089      	sub	sp, #36	@ 0x24
3418db94:	af00      	add	r7, sp, #0
3418db96:	6078      	str	r0, [r7, #4]
3418db98:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418db9a:	2304      	movs	r3, #4
3418db9c:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
3418db9e:	4b2a      	ldr	r3, [pc, #168]	@ (3418dc48 <SFDP_GetHeader+0xb8>)
3418dba0:	f107 040c 	add.w	r4, r7, #12
3418dba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418dba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
3418dbaa:	2300      	movs	r3, #0
3418dbac:	77bb      	strb	r3, [r7, #30]
3418dbae:	e040      	b.n	3418dc32 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
3418dbb0:	7fbb      	ldrb	r3, [r7, #30]
3418dbb2:	005b      	lsls	r3, r3, #1
3418dbb4:	3320      	adds	r3, #32
3418dbb6:	443b      	add	r3, r7
3418dbb8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
3418dbbc:	687b      	ldr	r3, [r7, #4]
3418dbbe:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
3418dbc2:	687b      	ldr	r3, [r7, #4]
3418dbc4:	f103 0008 	add.w	r0, r3, #8
3418dbc8:	687b      	ldr	r3, [r7, #4]
3418dbca:	3364      	adds	r3, #100	@ 0x64
3418dbcc:	461a      	mov	r2, r3
3418dbce:	2100      	movs	r1, #0
3418dbd0:	f7ff fa32 	bl	3418d038 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
3418dbd4:	7fbb      	ldrb	r3, [r7, #30]
3418dbd6:	005b      	lsls	r3, r3, #1
3418dbd8:	3320      	adds	r3, #32
3418dbda:	443b      	add	r3, r7
3418dbdc:	f813 2c13 	ldrb.w	r2, [r3, #-19]
3418dbe0:	687b      	ldr	r3, [r7, #4]
3418dbe2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
3418dbe6:	2300      	movs	r3, #0
3418dbe8:	777b      	strb	r3, [r7, #29]
3418dbea:	e017      	b.n	3418dc1c <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
3418dbec:	687b      	ldr	r3, [r7, #4]
3418dbee:	7f7a      	ldrb	r2, [r7, #29]
3418dbf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
3418dbf4:	6839      	ldr	r1, [r7, #0]
3418dbf6:	6878      	ldr	r0, [r7, #4]
3418dbf8:	f7ff ff8c 	bl	3418db14 <SFDP_ReadHeader>
3418dbfc:	4603      	mov	r3, r0
3418dbfe:	2b00      	cmp	r3, #0
3418dc00:	d101      	bne.n	3418dc06 <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
3418dc02:	2300      	movs	r3, #0
3418dc04:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
3418dc06:	7fbb      	ldrb	r3, [r7, #30]
3418dc08:	005b      	lsls	r3, r3, #1
3418dc0a:	3320      	adds	r3, #32
3418dc0c:	443b      	add	r3, r7
3418dc0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
3418dc12:	2b03      	cmp	r3, #3
3418dc14:	d909      	bls.n	3418dc2a <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
3418dc16:	7f7b      	ldrb	r3, [r7, #29]
3418dc18:	3301      	adds	r3, #1
3418dc1a:	777b      	strb	r3, [r7, #29]
3418dc1c:	7f7b      	ldrb	r3, [r7, #29]
3418dc1e:	2b01      	cmp	r3, #1
3418dc20:	d804      	bhi.n	3418dc2c <SFDP_GetHeader+0x9c>
3418dc22:	7ffb      	ldrb	r3, [r7, #31]
3418dc24:	2b04      	cmp	r3, #4
3418dc26:	d0e1      	beq.n	3418dbec <SFDP_GetHeader+0x5c>
3418dc28:	e000      	b.n	3418dc2c <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
3418dc2a:	bf00      	nop
           ; index++)
3418dc2c:	7fbb      	ldrb	r3, [r7, #30]
3418dc2e:	3301      	adds	r3, #1
3418dc30:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
3418dc32:	7fbb      	ldrb	r3, [r7, #30]
3418dc34:	2b07      	cmp	r3, #7
3418dc36:	d802      	bhi.n	3418dc3e <SFDP_GetHeader+0xae>
3418dc38:	7ffb      	ldrb	r3, [r7, #31]
3418dc3a:	2b04      	cmp	r3, #4
3418dc3c:	d0b8      	beq.n	3418dbb0 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
3418dc3e:	7ffb      	ldrb	r3, [r7, #31]
}
3418dc40:	4618      	mov	r0, r3
3418dc42:	3724      	adds	r7, #36	@ 0x24
3418dc44:	46bd      	mov	sp, r7
3418dc46:	bd90      	pop	{r4, r7, pc}
3418dc48:	3418f680 	.word	0x3418f680

3418dc4c <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418dc4c:	b580      	push	{r7, lr}
3418dc4e:	b088      	sub	sp, #32
3418dc50:	af00      	add	r7, sp, #0
3418dc52:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418dc54:	2300      	movs	r3, #0
3418dc56:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418dc58:	2308      	movs	r3, #8
3418dc5a:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
3418dc5c:	687b      	ldr	r3, [r7, #4]
3418dc5e:	2200      	movs	r2, #0
3418dc60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
3418dc64:	2278      	movs	r2, #120	@ 0x78
3418dc66:	2100      	movs	r1, #0
3418dc68:	485f      	ldr	r0, [pc, #380]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dc6a:	f001 fcc3 	bl	3418f5f4 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418dc6e:	2300      	movs	r3, #0
3418dc70:	75fb      	strb	r3, [r7, #23]
3418dc72:	e027      	b.n	3418dcc4 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
3418dc74:	7dfa      	ldrb	r2, [r7, #23]
3418dc76:	4613      	mov	r3, r2
3418dc78:	005b      	lsls	r3, r3, #1
3418dc7a:	4413      	add	r3, r2
3418dc7c:	009b      	lsls	r3, r3, #2
3418dc7e:	4a5a      	ldr	r2, [pc, #360]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dc80:	4413      	add	r3, r2
3418dc82:	461a      	mov	r2, r3
3418dc84:	69b9      	ldr	r1, [r7, #24]
3418dc86:	6878      	ldr	r0, [r7, #4]
3418dc88:	f000 ffae 	bl	3418ebe8 <sfdp_get_paraminfo>
3418dc8c:	4603      	mov	r3, r0
3418dc8e:	77fb      	strb	r3, [r7, #31]
3418dc90:	7ffb      	ldrb	r3, [r7, #31]
3418dc92:	2b00      	cmp	r3, #0
3418dc94:	f040 80a2 	bne.w	3418dddc <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
3418dc98:	687b      	ldr	r3, [r7, #4]
3418dc9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3418dc9e:	7dfa      	ldrb	r2, [r7, #23]
3418dca0:	4851      	ldr	r0, [pc, #324]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dca2:	4613      	mov	r3, r2
3418dca4:	005b      	lsls	r3, r3, #1
3418dca6:	4413      	add	r3, r2
3418dca8:	009b      	lsls	r3, r3, #2
3418dcaa:	4403      	add	r3, r0
3418dcac:	681b      	ldr	r3, [r3, #0]
3418dcae:	ea41 0203 	orr.w	r2, r1, r3
3418dcb2:	687b      	ldr	r3, [r7, #4]
3418dcb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418dcb8:	69bb      	ldr	r3, [r7, #24]
3418dcba:	3308      	adds	r3, #8
3418dcbc:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418dcbe:	7dfb      	ldrb	r3, [r7, #23]
3418dcc0:	3301      	adds	r3, #1
3418dcc2:	75fb      	strb	r3, [r7, #23]
3418dcc4:	7dfa      	ldrb	r2, [r7, #23]
3418dcc6:	687b      	ldr	r3, [r7, #4]
3418dcc8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418dccc:	3301      	adds	r3, #1
3418dcce:	429a      	cmp	r2, r3
3418dcd0:	d3d0      	bcc.n	3418dc74 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418dcd2:	2300      	movs	r3, #0
3418dcd4:	75bb      	strb	r3, [r7, #22]
3418dcd6:	e075      	b.n	3418ddc4 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
3418dcd8:	2300      	movs	r3, #0
3418dcda:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
3418dcdc:	7dba      	ldrb	r2, [r7, #22]
3418dcde:	4942      	ldr	r1, [pc, #264]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dce0:	4613      	mov	r3, r2
3418dce2:	005b      	lsls	r3, r3, #1
3418dce4:	4413      	add	r3, r2
3418dce6:	009b      	lsls	r3, r3, #2
3418dce8:	440b      	add	r3, r1
3418dcea:	3308      	adds	r3, #8
3418dcec:	781b      	ldrb	r3, [r3, #0]
3418dcee:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
3418dcf0:	7dba      	ldrb	r2, [r7, #22]
3418dcf2:	493d      	ldr	r1, [pc, #244]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dcf4:	4613      	mov	r3, r2
3418dcf6:	005b      	lsls	r3, r3, #1
3418dcf8:	4413      	add	r3, r2
3418dcfa:	009b      	lsls	r3, r3, #2
3418dcfc:	440b      	add	r3, r1
3418dcfe:	681b      	ldr	r3, [r3, #0]
3418dd00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418dd04:	d029      	beq.n	3418dd5a <SFDP_CollectData+0x10e>
3418dd06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418dd0a:	d829      	bhi.n	3418dd60 <SFDP_CollectData+0x114>
3418dd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418dd10:	d01d      	beq.n	3418dd4e <SFDP_CollectData+0x102>
3418dd12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418dd16:	d823      	bhi.n	3418dd60 <SFDP_CollectData+0x114>
3418dd18:	2b80      	cmp	r3, #128	@ 0x80
3418dd1a:	d01b      	beq.n	3418dd54 <SFDP_CollectData+0x108>
3418dd1c:	2b80      	cmp	r3, #128	@ 0x80
3418dd1e:	d81f      	bhi.n	3418dd60 <SFDP_CollectData+0x114>
3418dd20:	2b08      	cmp	r3, #8
3418dd22:	d002      	beq.n	3418dd2a <SFDP_CollectData+0xde>
3418dd24:	2b40      	cmp	r3, #64	@ 0x40
3418dd26:	d00f      	beq.n	3418dd48 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
3418dd28:	e01a      	b.n	3418dd60 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
3418dd2a:	7dba      	ldrb	r2, [r7, #22]
3418dd2c:	492e      	ldr	r1, [pc, #184]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dd2e:	4613      	mov	r3, r2
3418dd30:	005b      	lsls	r3, r3, #1
3418dd32:	4413      	add	r3, r2
3418dd34:	009b      	lsls	r3, r3, #2
3418dd36:	440b      	add	r3, r1
3418dd38:	3308      	adds	r3, #8
3418dd3a:	781b      	ldrb	r3, [r3, #0]
3418dd3c:	461a      	mov	r2, r3
3418dd3e:	4b2b      	ldr	r3, [pc, #172]	@ (3418ddec <SFDP_CollectData+0x1a0>)
3418dd40:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
3418dd42:	4b2b      	ldr	r3, [pc, #172]	@ (3418ddf0 <SFDP_CollectData+0x1a4>)
3418dd44:	613b      	str	r3, [r7, #16]
      break;
3418dd46:	e00c      	b.n	3418dd62 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
3418dd48:	4b2a      	ldr	r3, [pc, #168]	@ (3418ddf4 <SFDP_CollectData+0x1a8>)
3418dd4a:	613b      	str	r3, [r7, #16]
      break;
3418dd4c:	e009      	b.n	3418dd62 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
3418dd4e:	4b2a      	ldr	r3, [pc, #168]	@ (3418ddf8 <SFDP_CollectData+0x1ac>)
3418dd50:	613b      	str	r3, [r7, #16]
      break;
3418dd52:	e006      	b.n	3418dd62 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
3418dd54:	4b29      	ldr	r3, [pc, #164]	@ (3418ddfc <SFDP_CollectData+0x1b0>)
3418dd56:	613b      	str	r3, [r7, #16]
      break;
3418dd58:	e003      	b.n	3418dd62 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
3418dd5a:	4b29      	ldr	r3, [pc, #164]	@ (3418de00 <SFDP_CollectData+0x1b4>)
3418dd5c:	613b      	str	r3, [r7, #16]
      break;
3418dd5e:	e000      	b.n	3418dd62 <SFDP_CollectData+0x116>
      break;
3418dd60:	bf00      	nop
    }
    if (ptr != NULL)
3418dd62:	693b      	ldr	r3, [r7, #16]
3418dd64:	2b00      	cmp	r3, #0
3418dd66:	d016      	beq.n	3418dd96 <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418dd68:	687b      	ldr	r3, [r7, #4]
3418dd6a:	f103 0008 	add.w	r0, r3, #8
3418dd6e:	7dba      	ldrb	r2, [r7, #22]
3418dd70:	491d      	ldr	r1, [pc, #116]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dd72:	4613      	mov	r3, r2
3418dd74:	005b      	lsls	r3, r3, #1
3418dd76:	4413      	add	r3, r2
3418dd78:	009b      	lsls	r3, r3, #2
3418dd7a:	440b      	add	r3, r1
3418dd7c:	3304      	adds	r3, #4
3418dd7e:	6819      	ldr	r1, [r3, #0]
3418dd80:	68fb      	ldr	r3, [r7, #12]
3418dd82:	009b      	lsls	r3, r3, #2
3418dd84:	693a      	ldr	r2, [r7, #16]
3418dd86:	f7ff faa9 	bl	3418d2dc <SAL_XSPI_GetSFDP>
3418dd8a:	4603      	mov	r3, r0
3418dd8c:	2b00      	cmp	r3, #0
3418dd8e:	d002      	beq.n	3418dd96 <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418dd90:	230c      	movs	r3, #12
3418dd92:	77fb      	strb	r3, [r7, #31]
        goto error;
3418dd94:	e022      	b.n	3418dddc <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
3418dd96:	7dba      	ldrb	r2, [r7, #22]
3418dd98:	4913      	ldr	r1, [pc, #76]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418dd9a:	4613      	mov	r3, r2
3418dd9c:	005b      	lsls	r3, r3, #1
3418dd9e:	4413      	add	r3, r2
3418dda0:	009b      	lsls	r3, r3, #2
3418dda2:	440b      	add	r3, r1
3418dda4:	681b      	ldr	r3, [r3, #0]
3418dda6:	2b08      	cmp	r3, #8
3418dda8:	d109      	bne.n	3418ddbe <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
3418ddaa:	4b10      	ldr	r3, [pc, #64]	@ (3418ddec <SFDP_CollectData+0x1a0>)
3418ddac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418ddb0:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418ddb4:	b2db      	uxtb	r3, r3
3418ddb6:	461a      	mov	r2, r3
3418ddb8:	687b      	ldr	r3, [r7, #4]
3418ddba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418ddbe:	7dbb      	ldrb	r3, [r7, #22]
3418ddc0:	3301      	adds	r3, #1
3418ddc2:	75bb      	strb	r3, [r7, #22]
3418ddc4:	7dba      	ldrb	r2, [r7, #22]
3418ddc6:	4908      	ldr	r1, [pc, #32]	@ (3418dde8 <SFDP_CollectData+0x19c>)
3418ddc8:	4613      	mov	r3, r2
3418ddca:	005b      	lsls	r3, r3, #1
3418ddcc:	4413      	add	r3, r2
3418ddce:	009b      	lsls	r3, r3, #2
3418ddd0:	440b      	add	r3, r1
3418ddd2:	681b      	ldr	r3, [r3, #0]
3418ddd4:	2b00      	cmp	r3, #0
3418ddd6:	f47f af7f 	bne.w	3418dcd8 <SFDP_CollectData+0x8c>
    }
  }

error:
3418ddda:	bf00      	nop
  return retr;
3418dddc:	7ffb      	ldrb	r3, [r7, #31]
}
3418ddde:	4618      	mov	r0, r3
3418dde0:	3720      	adds	r7, #32
3418dde2:	46bd      	mov	sp, r7
3418dde4:	bd80      	pop	{r7, pc}
3418dde6:	bf00      	nop
3418dde8:	341c0258 	.word	0x341c0258
3418ddec:	341c02d0 	.word	0x341c02d0
3418ddf0:	341c02d4 	.word	0x341c02d4
3418ddf4:	341c0330 	.word	0x341c0330
3418ddf8:	341c0350 	.word	0x341c0350
3418ddfc:	341c0338 	.word	0x341c0338
3418de00:	341c03c0 	.word	0x341c03c0

3418de04 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418de04:	b580      	push	{r7, lr}
3418de06:	b086      	sub	sp, #24
3418de08:	af00      	add	r7, sp, #0
3418de0a:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418de0c:	2307      	movs	r3, #7
3418de0e:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418de10:	2308      	movs	r3, #8
3418de12:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
3418de14:	2300      	movs	r3, #0
3418de16:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418de18:	2300      	movs	r3, #0
3418de1a:	73bb      	strb	r3, [r7, #14]
3418de1c:	e02e      	b.n	3418de7c <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
3418de1e:	4a64      	ldr	r2, [pc, #400]	@ (3418dfb0 <SFDP_MemoryReset+0x1ac>)
3418de20:	6939      	ldr	r1, [r7, #16]
3418de22:	6878      	ldr	r0, [r7, #4]
3418de24:	f000 fee0 	bl	3418ebe8 <sfdp_get_paraminfo>
3418de28:	4603      	mov	r3, r0
3418de2a:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
3418de2c:	7dbb      	ldrb	r3, [r7, #22]
3418de2e:	2b00      	cmp	r3, #0
3418de30:	d118      	bne.n	3418de64 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
3418de32:	4b5f      	ldr	r3, [pc, #380]	@ (3418dfb0 <SFDP_MemoryReset+0x1ac>)
3418de34:	681b      	ldr	r3, [r3, #0]
3418de36:	2b08      	cmp	r3, #8
3418de38:	d114      	bne.n	3418de64 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418de3a:	687b      	ldr	r3, [r7, #4]
3418de3c:	f103 0008 	add.w	r0, r3, #8
3418de40:	4b5b      	ldr	r3, [pc, #364]	@ (3418dfb0 <SFDP_MemoryReset+0x1ac>)
3418de42:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
3418de44:	4b5a      	ldr	r3, [pc, #360]	@ (3418dfb0 <SFDP_MemoryReset+0x1ac>)
3418de46:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418de48:	009b      	lsls	r3, r3, #2
3418de4a:	4a5a      	ldr	r2, [pc, #360]	@ (3418dfb4 <SFDP_MemoryReset+0x1b0>)
3418de4c:	f7ff fa46 	bl	3418d2dc <SAL_XSPI_GetSFDP>
3418de50:	4603      	mov	r3, r0
3418de52:	2b00      	cmp	r3, #0
3418de54:	d002      	beq.n	3418de5c <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418de56:	230c      	movs	r3, #12
3418de58:	75bb      	strb	r3, [r7, #22]
3418de5a:	e003      	b.n	3418de64 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
3418de5c:	2300      	movs	r3, #0
3418de5e:	75bb      	strb	r3, [r7, #22]
          find = 1u;
3418de60:	2301      	movs	r3, #1
3418de62:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
3418de64:	7dbb      	ldrb	r3, [r7, #22]
3418de66:	2b00      	cmp	r3, #0
3418de68:	d10f      	bne.n	3418de8a <SFDP_MemoryReset+0x86>
3418de6a:	7bfb      	ldrb	r3, [r7, #15]
3418de6c:	2b01      	cmp	r3, #1
3418de6e:	d00c      	beq.n	3418de8a <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418de70:	693b      	ldr	r3, [r7, #16]
3418de72:	3308      	adds	r3, #8
3418de74:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418de76:	7bbb      	ldrb	r3, [r7, #14]
3418de78:	3301      	adds	r3, #1
3418de7a:	73bb      	strb	r3, [r7, #14]
3418de7c:	7bba      	ldrb	r2, [r7, #14]
3418de7e:	687b      	ldr	r3, [r7, #4]
3418de80:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418de84:	3301      	adds	r3, #1
3418de86:	429a      	cmp	r2, r3
3418de88:	d3c9      	bcc.n	3418de1e <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
3418de8a:	7dbb      	ldrb	r3, [r7, #22]
3418de8c:	2b00      	cmp	r3, #0
3418de8e:	d102      	bne.n	3418de96 <SFDP_MemoryReset+0x92>
3418de90:	7bfb      	ldrb	r3, [r7, #15]
3418de92:	2b00      	cmp	r3, #0
3418de94:	d102      	bne.n	3418de9c <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418de96:	230c      	movs	r3, #12
3418de98:	75bb      	strb	r3, [r7, #22]
    goto error;
3418de9a:	e083      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
3418de9c:	4b46      	ldr	r3, [pc, #280]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418de9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418dea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418dea6:	b2db      	uxtb	r3, r3
3418dea8:	2b00      	cmp	r3, #0
3418deaa:	d102      	bne.n	3418deb2 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
3418deac:	2300      	movs	r3, #0
3418deae:	75fb      	strb	r3, [r7, #23]
3418deb0:	e053      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418deb2:	4b41      	ldr	r3, [pc, #260]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418deb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418deb8:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418debc:	b2db      	uxtb	r3, r3
3418debe:	f003 0301 	and.w	r3, r3, #1
3418dec2:	b2db      	uxtb	r3, r3
3418dec4:	2b00      	cmp	r3, #0
3418dec6:	d002      	beq.n	3418dece <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
3418dec8:	2301      	movs	r3, #1
3418deca:	75fb      	strb	r3, [r7, #23]
3418decc:	e045      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418dece:	4b3a      	ldr	r3, [pc, #232]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418ded0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418ded4:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418ded8:	b2db      	uxtb	r3, r3
3418deda:	f003 0302 	and.w	r3, r3, #2
3418dede:	b2db      	uxtb	r3, r3
3418dee0:	2b00      	cmp	r3, #0
3418dee2:	d002      	beq.n	3418deea <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
3418dee4:	2302      	movs	r3, #2
3418dee6:	75fb      	strb	r3, [r7, #23]
3418dee8:	e037      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418deea:	4b33      	ldr	r3, [pc, #204]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418deec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418def0:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418def4:	b2db      	uxtb	r3, r3
3418def6:	f003 0304 	and.w	r3, r3, #4
3418defa:	b2db      	uxtb	r3, r3
3418defc:	2b00      	cmp	r3, #0
3418defe:	d002      	beq.n	3418df06 <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
3418df00:	2303      	movs	r3, #3
3418df02:	75fb      	strb	r3, [r7, #23]
3418df04:	e029      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418df06:	4b2c      	ldr	r3, [pc, #176]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418df08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418df0c:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418df10:	b2db      	uxtb	r3, r3
3418df12:	f003 0308 	and.w	r3, r3, #8
3418df16:	b2db      	uxtb	r3, r3
3418df18:	2b00      	cmp	r3, #0
3418df1a:	d002      	beq.n	3418df22 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
3418df1c:	2304      	movs	r3, #4
3418df1e:	75fb      	strb	r3, [r7, #23]
3418df20:	e01b      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418df22:	4b25      	ldr	r3, [pc, #148]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418df24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418df28:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418df2c:	b2db      	uxtb	r3, r3
3418df2e:	f003 0310 	and.w	r3, r3, #16
3418df32:	b2db      	uxtb	r3, r3
3418df34:	2b00      	cmp	r3, #0
3418df36:	d002      	beq.n	3418df3e <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
3418df38:	2305      	movs	r3, #5
3418df3a:	75fb      	strb	r3, [r7, #23]
3418df3c:	e00d      	b.n	3418df5a <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418df3e:	4b1e      	ldr	r3, [pc, #120]	@ (3418dfb8 <SFDP_MemoryReset+0x1b4>)
3418df40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418df44:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418df48:	b2db      	uxtb	r3, r3
3418df4a:	2b1f      	cmp	r3, #31
3418df4c:	d902      	bls.n	3418df54 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418df4e:	230f      	movs	r3, #15
3418df50:	75bb      	strb	r3, [r7, #22]
    goto error;
3418df52:	e027      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418df54:	230c      	movs	r3, #12
3418df56:	75bb      	strb	r3, [r7, #22]
    goto error;
3418df58:	e024      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_methode)
3418df5a:	7dfb      	ldrb	r3, [r7, #23]
3418df5c:	2b05      	cmp	r3, #5
3418df5e:	d009      	beq.n	3418df74 <SFDP_MemoryReset+0x170>
3418df60:	2b05      	cmp	r3, #5
3418df62:	dc1b      	bgt.n	3418df9c <SFDP_MemoryReset+0x198>
3418df64:	2b00      	cmp	r3, #0
3418df66:	d01c      	beq.n	3418dfa2 <SFDP_MemoryReset+0x19e>
3418df68:	2b00      	cmp	r3, #0
3418df6a:	db17      	blt.n	3418df9c <SFDP_MemoryReset+0x198>
3418df6c:	3b01      	subs	r3, #1
3418df6e:	2b03      	cmp	r3, #3
3418df70:	d814      	bhi.n	3418df9c <SFDP_MemoryReset+0x198>
3418df72:	e010      	b.n	3418df96 <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
3418df74:	687b      	ldr	r3, [r7, #4]
3418df76:	f103 0008 	add.w	r0, r3, #8
3418df7a:	2300      	movs	r3, #0
3418df7c:	2200      	movs	r2, #0
3418df7e:	2166      	movs	r1, #102	@ 0x66
3418df80:	f7ff fb0c 	bl	3418d59c <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
3418df84:	687b      	ldr	r3, [r7, #4]
3418df86:	f103 0008 	add.w	r0, r3, #8
3418df8a:	2300      	movs	r3, #0
3418df8c:	2200      	movs	r2, #0
3418df8e:	2199      	movs	r1, #153	@ 0x99
3418df90:	f7ff fb04 	bl	3418d59c <SAL_XSPI_CommandSendData>
    break;
3418df94:	e006      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418df96:	230f      	movs	r3, #15
3418df98:	75bb      	strb	r3, [r7, #22]
    break;
3418df9a:	e003      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
3418df9c:	2301      	movs	r3, #1
3418df9e:	75bb      	strb	r3, [r7, #22]
    break;
3418dfa0:	e000      	b.n	3418dfa4 <SFDP_MemoryReset+0x1a0>
    break;
3418dfa2:	bf00      	nop
  }
error :
  return retr;
3418dfa4:	7dbb      	ldrb	r3, [r7, #22]
}
3418dfa6:	4618      	mov	r0, r3
3418dfa8:	3718      	adds	r7, #24
3418dfaa:	46bd      	mov	sp, r7
3418dfac:	bd80      	pop	{r7, pc}
3418dfae:	bf00      	nop
3418dfb0:	341c0258 	.word	0x341c0258
3418dfb4:	341c02d4 	.word	0x341c02d4
3418dfb8:	341c02d0 	.word	0x341c02d0

3418dfbc <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
3418dfbc:	b5b0      	push	{r4, r5, r7, lr}
3418dfbe:	b08c      	sub	sp, #48	@ 0x30
3418dfc0:	af02      	add	r7, sp, #8
3418dfc2:	6078      	str	r0, [r7, #4]
3418dfc4:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418dfc6:	2300      	movs	r3, #0
3418dfc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
3418dfcc:	2300      	movs	r3, #0
3418dfce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418dfd2:	687b      	ldr	r3, [r7, #4]
3418dfd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418dfd8:	f003 0308 	and.w	r3, r3, #8
3418dfdc:	2b00      	cmp	r3, #0
3418dfde:	d104      	bne.n	3418dfea <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418dfe0:	2307      	movs	r3, #7
3418dfe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418dfe6:	f000 bd93 	b.w	3418eb10 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
3418dfea:	4bba      	ldr	r3, [pc, #744]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418dfec:	689b      	ldr	r3, [r3, #8]
3418dfee:	2b00      	cmp	r3, #0
3418dff0:	db13      	blt.n	3418e01a <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
3418dff2:	4bb8      	ldr	r3, [pc, #736]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418dff4:	689b      	ldr	r3, [r3, #8]
3418dff6:	3301      	adds	r3, #1
3418dff8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
3418dffa:	69bb      	ldr	r3, [r7, #24]
3418dffc:	2b00      	cmp	r3, #0
3418dffe:	d101      	bne.n	3418e004 <SFDP_BuildGenericDriver+0x48>
    return 32U;
3418e000:	2320      	movs	r3, #32
3418e002:	e003      	b.n	3418e00c <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
3418e004:	69bb      	ldr	r3, [r7, #24]
3418e006:	fab3 f383 	clz	r3, r3
3418e00a:	b2db      	uxtb	r3, r3
3418e00c:	f1c3 031f 	rsb	r3, r3, #31
3418e010:	b2da      	uxtb	r2, r3
3418e012:	687b      	ldr	r3, [r7, #4]
3418e014:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
3418e018:	e005      	b.n	3418e026 <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
3418e01a:	4bae      	ldr	r3, [pc, #696]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e01c:	689b      	ldr	r3, [r3, #8]
3418e01e:	b2da      	uxtb	r2, r3
3418e020:	687b      	ldr	r3, [r7, #4]
3418e022:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
3418e026:	687b      	ldr	r3, [r7, #4]
3418e028:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418e02c:	3b03      	subs	r3, #3
3418e02e:	b2da      	uxtb	r2, r3
3418e030:	687b      	ldr	r3, [r7, #4]
3418e032:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
3418e036:	687b      	ldr	r3, [r7, #4]
3418e038:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418e03c:	3b01      	subs	r3, #1
3418e03e:	b2db      	uxtb	r3, r3
3418e040:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
3418e042:	687b      	ldr	r3, [r7, #4]
3418e044:	3308      	adds	r3, #8
3418e046:	f107 0213 	add.w	r2, r7, #19
3418e04a:	2104      	movs	r1, #4
3418e04c:	4618      	mov	r0, r3
3418e04e:	f7fe fff3 	bl	3418d038 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
3418e052:	4ba0      	ldr	r3, [pc, #640]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e054:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
3418e058:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418e05c:	b2db      	uxtb	r3, r3
3418e05e:	461a      	mov	r2, r3
3418e060:	2301      	movs	r3, #1
3418e062:	fa03 f202 	lsl.w	r2, r3, r2
3418e066:	687b      	ldr	r3, [r7, #4]
3418e068:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
3418e06a:	687b      	ldr	r3, [r7, #4]
3418e06c:	2202      	movs	r2, #2
3418e06e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
3418e072:	4b98      	ldr	r3, [pc, #608]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e074:	f893 2020 	ldrb.w	r2, [r3, #32]
3418e078:	687b      	ldr	r3, [r7, #4]
3418e07a:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
3418e07e:	4b95      	ldr	r3, [pc, #596]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e080:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
3418e084:	687b      	ldr	r3, [r7, #4]
3418e086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3418e08a:	4b92      	ldr	r3, [pc, #584]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e08c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
3418e090:	687b      	ldr	r3, [r7, #4]
3418e092:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
3418e096:	4b8f      	ldr	r3, [pc, #572]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e098:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
3418e09c:	687b      	ldr	r3, [r7, #4]
3418e09e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
3418e0a2:	4b8c      	ldr	r3, [pc, #560]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0a4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
3418e0a8:	687b      	ldr	r3, [r7, #4]
3418e0aa:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
3418e0ae:	4b89      	ldr	r3, [pc, #548]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0b0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
3418e0b4:	687b      	ldr	r3, [r7, #4]
3418e0b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3418e0ba:	4b86      	ldr	r3, [pc, #536]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0bc:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
3418e0c0:	687b      	ldr	r3, [r7, #4]
3418e0c2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
3418e0c6:	4b83      	ldr	r3, [pc, #524]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0c8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
3418e0cc:	687b      	ldr	r3, [r7, #4]
3418e0ce:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
3418e0d2:	687b      	ldr	r3, [r7, #4]
3418e0d4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
3418e0d8:	2b00      	cmp	r3, #0
3418e0da:	d01d      	beq.n	3418e118 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
3418e0dc:	4b7d      	ldr	r3, [pc, #500]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e0e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e0e6:	b2db      	uxtb	r3, r3
3418e0e8:	461a      	mov	r2, r3
3418e0ea:	4b7a      	ldr	r3, [pc, #488]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418e0ee:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418e0f2:	b2db      	uxtb	r3, r3
3418e0f4:	3301      	adds	r3, #1
3418e0f6:	fb02 f303 	mul.w	r3, r2, r3
3418e0fa:	4a76      	ldr	r2, [pc, #472]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e0fc:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
3418e100:	f3c2 0241 	ubfx	r2, r2, #1, #2
3418e104:	b2d2      	uxtb	r2, r2
3418e106:	4611      	mov	r1, r2
3418e108:	4a73      	ldr	r2, [pc, #460]	@ (3418e2d8 <SFDP_BuildGenericDriver+0x31c>)
3418e10a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e10e:	fb03 f202 	mul.w	r2, r3, r2
3418e112:	687b      	ldr	r3, [r7, #4]
3418e114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
3418e118:	687b      	ldr	r3, [r7, #4]
3418e11a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
3418e11e:	2b00      	cmp	r3, #0
3418e120:	d01e      	beq.n	3418e160 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
3418e122:	4b6c      	ldr	r3, [pc, #432]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e128:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e12c:	b2db      	uxtb	r3, r3
3418e12e:	461a      	mov	r2, r3
3418e130:	4b68      	ldr	r3, [pc, #416]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e132:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
3418e136:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418e13a:	b2db      	uxtb	r3, r3
3418e13c:	3301      	adds	r3, #1
3418e13e:	fb02 f303 	mul.w	r3, r2, r3
3418e142:	4a64      	ldr	r2, [pc, #400]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e144:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
3418e148:	f3c2 0201 	ubfx	r2, r2, #0, #2
3418e14c:	b2d2      	uxtb	r2, r2
3418e14e:	4611      	mov	r1, r2
3418e150:	4a61      	ldr	r2, [pc, #388]	@ (3418e2d8 <SFDP_BuildGenericDriver+0x31c>)
3418e152:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e156:	fb03 f202 	mul.w	r2, r3, r2
3418e15a:	687b      	ldr	r3, [r7, #4]
3418e15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
3418e160:	687b      	ldr	r3, [r7, #4]
3418e162:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
3418e166:	2b00      	cmp	r3, #0
3418e168:	d01d      	beq.n	3418e1a6 <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3418e16a:	4b5a      	ldr	r3, [pc, #360]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e170:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e174:	b2db      	uxtb	r3, r3
3418e176:	461a      	mov	r2, r3
3418e178:	4b56      	ldr	r3, [pc, #344]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e17a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3418e17e:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418e182:	b2db      	uxtb	r3, r3
3418e184:	3301      	adds	r3, #1
3418e186:	fb02 f303 	mul.w	r3, r2, r3
3418e18a:	4a52      	ldr	r2, [pc, #328]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e18c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
3418e18e:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3418e192:	b2d2      	uxtb	r2, r2
3418e194:	4611      	mov	r1, r2
3418e196:	4a50      	ldr	r2, [pc, #320]	@ (3418e2d8 <SFDP_BuildGenericDriver+0x31c>)
3418e198:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e19c:	fb03 f202 	mul.w	r2, r3, r2
3418e1a0:	687b      	ldr	r3, [r7, #4]
3418e1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
3418e1a6:	687b      	ldr	r3, [r7, #4]
3418e1a8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
3418e1ac:	2b00      	cmp	r3, #0
3418e1ae:	d01e      	beq.n	3418e1ee <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
3418e1b0:	4b48      	ldr	r3, [pc, #288]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e1b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e1ba:	b2db      	uxtb	r3, r3
3418e1bc:	461a      	mov	r2, r3
3418e1be:	4b45      	ldr	r3, [pc, #276]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e1c0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
3418e1c4:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418e1c8:	b2db      	uxtb	r3, r3
3418e1ca:	3301      	adds	r3, #1
3418e1cc:	fb02 f303 	mul.w	r3, r2, r3
3418e1d0:	4a40      	ldr	r2, [pc, #256]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e1d2:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
3418e1d6:	f3c2 1281 	ubfx	r2, r2, #6, #2
3418e1da:	b2d2      	uxtb	r2, r2
3418e1dc:	4611      	mov	r1, r2
3418e1de:	4a3e      	ldr	r2, [pc, #248]	@ (3418e2d8 <SFDP_BuildGenericDriver+0x31c>)
3418e1e0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e1e4:	fb03 f202 	mul.w	r2, r3, r2
3418e1e8:	687b      	ldr	r3, [r7, #4]
3418e1ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
3418e1ee:	4b39      	ldr	r3, [pc, #228]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e1f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e1f8:	b2db      	uxtb	r3, r3
3418e1fa:	461a      	mov	r2, r3
3418e1fc:	4b35      	ldr	r3, [pc, #212]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e1fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
3418e202:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e206:	b2db      	uxtb	r3, r3
3418e208:	3301      	adds	r3, #1
3418e20a:	fb02 f303 	mul.w	r3, r2, r3
3418e20e:	4a31      	ldr	r2, [pc, #196]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e210:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
3418e214:	f3c2 1241 	ubfx	r2, r2, #5, #2
3418e218:	b2d2      	uxtb	r2, r2
3418e21a:	4611      	mov	r1, r2
3418e21c:	4a2f      	ldr	r2, [pc, #188]	@ (3418e2dc <SFDP_BuildGenericDriver+0x320>)
3418e21e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
3418e222:	fb03 f202 	mul.w	r2, r3, r2
3418e226:	687b      	ldr	r3, [r7, #4]
3418e228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
3418e22c:	687b      	ldr	r3, [r7, #4]
3418e22e:	2205      	movs	r2, #5
3418e230:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418e234:	687b      	ldr	r3, [r7, #4]
3418e236:	2205      	movs	r2, #5
3418e238:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
3418e23c:	4b25      	ldr	r3, [pc, #148]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e23e:	791b      	ldrb	r3, [r3, #4]
3418e240:	f003 0310 	and.w	r3, r3, #16
3418e244:	b2db      	uxtb	r3, r3
3418e246:	2b00      	cmp	r3, #0
3418e248:	d104      	bne.n	3418e254 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
3418e24a:	687b      	ldr	r3, [r7, #4]
3418e24c:	2250      	movs	r2, #80	@ 0x50
3418e24e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e252:	e003      	b.n	3418e25c <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
3418e254:	687b      	ldr	r3, [r7, #4]
3418e256:	2206      	movs	r2, #6
3418e258:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
3418e25c:	4b1d      	ldr	r3, [pc, #116]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e25e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418e262:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418e266:	b2db      	uxtb	r3, r3
3418e268:	f003 0301 	and.w	r3, r3, #1
3418e26c:	2b00      	cmp	r3, #0
3418e26e:	d004      	beq.n	3418e27a <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418e270:	687b      	ldr	r3, [r7, #4]
3418e272:	2206      	movs	r2, #6
3418e274:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e278:	e046      	b.n	3418e308 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3418e27a:	4b16      	ldr	r3, [pc, #88]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e27c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418e280:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418e284:	b2db      	uxtb	r3, r3
3418e286:	f003 0302 	and.w	r3, r3, #2
3418e28a:	2b00      	cmp	r3, #0
3418e28c:	d004      	beq.n	3418e298 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418e28e:	687b      	ldr	r3, [r7, #4]
3418e290:	2206      	movs	r2, #6
3418e292:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e296:	e037      	b.n	3418e308 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
3418e298:	4b0e      	ldr	r3, [pc, #56]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e29a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418e29e:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418e2a2:	b2db      	uxtb	r3, r3
3418e2a4:	f003 0304 	and.w	r3, r3, #4
3418e2a8:	2b00      	cmp	r3, #0
3418e2aa:	d004      	beq.n	3418e2b6 <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
3418e2ac:	687b      	ldr	r3, [r7, #4]
3418e2ae:	2250      	movs	r2, #80	@ 0x50
3418e2b0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e2b4:	e028      	b.n	3418e308 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
3418e2b6:	4b07      	ldr	r3, [pc, #28]	@ (3418e2d4 <SFDP_BuildGenericDriver+0x318>)
3418e2b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418e2bc:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418e2c0:	b2db      	uxtb	r3, r3
3418e2c2:	f003 0308 	and.w	r3, r3, #8
3418e2c6:	2b00      	cmp	r3, #0
3418e2c8:	d00a      	beq.n	3418e2e0 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418e2ca:	687b      	ldr	r3, [r7, #4]
3418e2cc:	2206      	movs	r2, #6
3418e2ce:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e2d2:	e019      	b.n	3418e308 <SFDP_BuildGenericDriver+0x34c>
3418e2d4:	341c02d0 	.word	0x341c02d0
3418e2d8:	3418f6ac 	.word	0x3418f6ac
3418e2dc:	3418f6b4 	.word	0x3418f6b4
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
3418e2e0:	4b66      	ldr	r3, [pc, #408]	@ (3418e47c <SFDP_BuildGenericDriver+0x4c0>)
3418e2e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418e2e6:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418e2ea:	b2db      	uxtb	r3, r3
3418e2ec:	f003 0310 	and.w	r3, r3, #16
3418e2f0:	2b00      	cmp	r3, #0
3418e2f2:	d004      	beq.n	3418e2fe <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418e2f4:	687b      	ldr	r3, [r7, #4]
3418e2f6:	2206      	movs	r2, #6
3418e2f8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418e2fc:	e004      	b.n	3418e308 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
3418e2fe:	230a      	movs	r3, #10
3418e300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418e304:	f000 bc04 	b.w	3418eb10 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418e308:	687b      	ldr	r3, [r7, #4]
3418e30a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e30e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418e312:	2b00      	cmp	r3, #0
3418e314:	d078      	beq.n	3418e408 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
3418e316:	4b5a      	ldr	r3, [pc, #360]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e318:	7cdb      	ldrb	r3, [r3, #19]
3418e31a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418e31e:	b2db      	uxtb	r3, r3
3418e320:	2b00      	cmp	r3, #0
3418e322:	d034      	beq.n	3418e38e <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
3418e324:	4b56      	ldr	r3, [pc, #344]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e326:	7c5a      	ldrb	r2, [r3, #17]
3418e328:	687b      	ldr	r3, [r7, #4]
3418e32a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418e32e:	4b54      	ldr	r3, [pc, #336]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e330:	7cdb      	ldrb	r3, [r3, #19]
3418e332:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e336:	b2db      	uxtb	r3, r3
3418e338:	461a      	mov	r2, r3
3418e33a:	687b      	ldr	r3, [r7, #4]
3418e33c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
3418e340:	4b4f      	ldr	r3, [pc, #316]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e342:	7cdb      	ldrb	r3, [r3, #19]
3418e344:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418e348:	b2db      	uxtb	r3, r3
3418e34a:	461a      	mov	r2, r3
3418e34c:	687b      	ldr	r3, [r7, #4]
3418e34e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418e352:	4b4b      	ldr	r3, [pc, #300]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e354:	7cdb      	ldrb	r3, [r3, #19]
3418e356:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e35a:	b2db      	uxtb	r3, r3
3418e35c:	461a      	mov	r2, r3
3418e35e:	687b      	ldr	r3, [r7, #4]
3418e360:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418e364:	4b46      	ldr	r3, [pc, #280]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e366:	7cdb      	ldrb	r3, [r3, #19]
3418e368:	f003 0310 	and.w	r3, r3, #16
3418e36c:	b2db      	uxtb	r3, r3
3418e36e:	2b00      	cmp	r3, #0
3418e370:	d009      	beq.n	3418e386 <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
3418e372:	4b43      	ldr	r3, [pc, #268]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e374:	7cdb      	ldrb	r3, [r3, #19]
3418e376:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418e37a:	b2db      	uxtb	r3, r3
3418e37c:	461a      	mov	r2, r3
3418e37e:	687b      	ldr	r3, [r7, #4]
3418e380:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
3418e384:	e003      	b.n	3418e38e <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
3418e386:	687b      	ldr	r3, [r7, #4]
3418e388:	22ff      	movs	r2, #255	@ 0xff
3418e38a:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
3418e38e:	4b3c      	ldr	r3, [pc, #240]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e390:	7ddb      	ldrb	r3, [r3, #23]
3418e392:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418e396:	b2db      	uxtb	r3, r3
3418e398:	2b00      	cmp	r3, #0
3418e39a:	d073      	beq.n	3418e484 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
3418e39c:	4b38      	ldr	r3, [pc, #224]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e39e:	7d5a      	ldrb	r2, [r3, #21]
3418e3a0:	687b      	ldr	r3, [r7, #4]
3418e3a2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418e3a6:	4b36      	ldr	r3, [pc, #216]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e3a8:	7ddb      	ldrb	r3, [r3, #23]
3418e3aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e3ae:	b2db      	uxtb	r3, r3
3418e3b0:	461a      	mov	r2, r3
3418e3b2:	687b      	ldr	r3, [r7, #4]
3418e3b4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
3418e3b8:	4b31      	ldr	r3, [pc, #196]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e3ba:	7ddb      	ldrb	r3, [r3, #23]
3418e3bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418e3c0:	b2db      	uxtb	r3, r3
3418e3c2:	461a      	mov	r2, r3
3418e3c4:	687b      	ldr	r3, [r7, #4]
3418e3c6:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418e3ca:	4b2d      	ldr	r3, [pc, #180]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e3cc:	7ddb      	ldrb	r3, [r3, #23]
3418e3ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418e3d2:	b2db      	uxtb	r3, r3
3418e3d4:	461a      	mov	r2, r3
3418e3d6:	687b      	ldr	r3, [r7, #4]
3418e3d8:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418e3dc:	4b28      	ldr	r3, [pc, #160]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e3de:	7cdb      	ldrb	r3, [r3, #19]
3418e3e0:	f003 0310 	and.w	r3, r3, #16
3418e3e4:	b2db      	uxtb	r3, r3
3418e3e6:	2b00      	cmp	r3, #0
3418e3e8:	d009      	beq.n	3418e3fe <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
3418e3ea:	4b25      	ldr	r3, [pc, #148]	@ (3418e480 <SFDP_BuildGenericDriver+0x4c4>)
3418e3ec:	7ddb      	ldrb	r3, [r3, #23]
3418e3ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418e3f2:	b2db      	uxtb	r3, r3
3418e3f4:	461a      	mov	r2, r3
3418e3f6:	687b      	ldr	r3, [r7, #4]
3418e3f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418e3fc:	e042      	b.n	3418e484 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
3418e3fe:	687b      	ldr	r3, [r7, #4]
3418e400:	22ff      	movs	r2, #255	@ 0xff
3418e402:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418e406:	e03d      	b.n	3418e484 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
3418e408:	687b      	ldr	r3, [r7, #4]
3418e40a:	2201      	movs	r2, #1
3418e40c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
3418e410:	687b      	ldr	r3, [r7, #4]
3418e412:	2200      	movs	r2, #0
3418e414:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
3418e418:	4b18      	ldr	r3, [pc, #96]	@ (3418e47c <SFDP_BuildGenericDriver+0x4c0>)
3418e41a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418e41e:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418e422:	b2db      	uxtb	r3, r3
3418e424:	f003 0301 	and.w	r3, r3, #1
3418e428:	2b00      	cmp	r3, #0
3418e42a:	d00c      	beq.n	3418e446 <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418e42c:	687b      	ldr	r3, [r7, #4]
3418e42e:	2205      	movs	r2, #5
3418e430:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
3418e434:	687b      	ldr	r3, [r7, #4]
3418e436:	2200      	movs	r2, #0
3418e438:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418e43c:	687b      	ldr	r3, [r7, #4]
3418e43e:	2200      	movs	r2, #0
3418e440:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418e444:	e01e      	b.n	3418e484 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
3418e446:	4b0d      	ldr	r3, [pc, #52]	@ (3418e47c <SFDP_BuildGenericDriver+0x4c0>)
3418e448:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418e44c:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418e450:	b2db      	uxtb	r3, r3
3418e452:	f003 0302 	and.w	r3, r3, #2
3418e456:	2b00      	cmp	r3, #0
3418e458:	d00c      	beq.n	3418e474 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
3418e45a:	687b      	ldr	r3, [r7, #4]
3418e45c:	2270      	movs	r2, #112	@ 0x70
3418e45e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
3418e462:	687b      	ldr	r3, [r7, #4]
3418e464:	2207      	movs	r2, #7
3418e466:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418e46a:	687b      	ldr	r3, [r7, #4]
3418e46c:	2200      	movs	r2, #0
3418e46e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418e472:	e007      	b.n	3418e484 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
3418e474:	2309      	movs	r3, #9
3418e476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418e47a:	e349      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
3418e47c:	341c02d0 	.word	0x341c02d0
3418e480:	341c0350 	.word	0x341c0350
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
3418e484:	687b      	ldr	r3, [r7, #4]
3418e486:	2203      	movs	r2, #3
3418e488:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418e48c:	687b      	ldr	r3, [r7, #4]
3418e48e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e492:	2b08      	cmp	r3, #8
3418e494:	f040 80a9 	bne.w	3418e5ea <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
3418e498:	2300      	movs	r3, #0
3418e49a:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418e49c:	687b      	ldr	r3, [r7, #4]
3418e49e:	2200      	movs	r2, #0
3418e4a0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
3418e4a4:	687b      	ldr	r3, [r7, #4]
3418e4a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418e4aa:	2b00      	cmp	r3, #0
3418e4ac:	d04c      	beq.n	3418e548 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
3418e4ae:	4bb4      	ldr	r3, [pc, #720]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4b0:	7c5b      	ldrb	r3, [r3, #17]
3418e4b2:	2b00      	cmp	r3, #0
3418e4b4:	d015      	beq.n	3418e4e2 <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
3418e4b6:	4bb2      	ldr	r3, [pc, #712]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4b8:	7c1b      	ldrb	r3, [r3, #16]
3418e4ba:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e4be:	b2db      	uxtb	r3, r3
3418e4c0:	461a      	mov	r2, r3
3418e4c2:	4baf      	ldr	r3, [pc, #700]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4c4:	7c1b      	ldrb	r3, [r3, #16]
3418e4c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418e4ca:	b2db      	uxtb	r3, r3
3418e4cc:	4413      	add	r3, r2
3418e4ce:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
3418e4d0:	4bab      	ldr	r3, [pc, #684]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4d2:	7c5a      	ldrb	r2, [r3, #17]
3418e4d4:	687b      	ldr	r3, [r7, #4]
3418e4d6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
3418e4da:	687b      	ldr	r3, [r7, #4]
3418e4dc:	2201      	movs	r2, #1
3418e4de:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
3418e4e2:	4ba7      	ldr	r3, [pc, #668]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4e4:	7cdb      	ldrb	r3, [r3, #19]
3418e4e6:	2b00      	cmp	r3, #0
3418e4e8:	d015      	beq.n	3418e516 <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
3418e4ea:	4ba5      	ldr	r3, [pc, #660]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4ec:	7c9b      	ldrb	r3, [r3, #18]
3418e4ee:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e4f2:	b2db      	uxtb	r3, r3
3418e4f4:	461a      	mov	r2, r3
3418e4f6:	4ba2      	ldr	r3, [pc, #648]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e4f8:	7c9b      	ldrb	r3, [r3, #18]
3418e4fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418e4fe:	b2db      	uxtb	r3, r3
3418e500:	4413      	add	r3, r2
3418e502:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
3418e504:	4b9e      	ldr	r3, [pc, #632]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e506:	7cda      	ldrb	r2, [r3, #19]
3418e508:	687b      	ldr	r3, [r7, #4]
3418e50a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
3418e50e:	687b      	ldr	r3, [r7, #4]
3418e510:	2202      	movs	r2, #2
3418e512:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
3418e516:	4b9a      	ldr	r3, [pc, #616]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e518:	7d1b      	ldrb	r3, [r3, #20]
3418e51a:	f003 0301 	and.w	r3, r3, #1
3418e51e:	b2db      	uxtb	r3, r3
3418e520:	2b00      	cmp	r3, #0
3418e522:	d011      	beq.n	3418e548 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
3418e524:	4b96      	ldr	r3, [pc, #600]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e526:	7e9b      	ldrb	r3, [r3, #26]
3418e528:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e52c:	b2db      	uxtb	r3, r3
3418e52e:	461a      	mov	r2, r3
3418e530:	4b93      	ldr	r3, [pc, #588]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e532:	7e9b      	ldrb	r3, [r3, #26]
3418e534:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418e538:	b2db      	uxtb	r3, r3
3418e53a:	4413      	add	r3, r2
3418e53c:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
3418e53e:	4b90      	ldr	r3, [pc, #576]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e540:	7eda      	ldrb	r2, [r3, #27]
3418e542:	687b      	ldr	r3, [r7, #4]
3418e544:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
3418e548:	687b      	ldr	r3, [r7, #4]
3418e54a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418e54e:	2b01      	cmp	r3, #1
3418e550:	d92c      	bls.n	3418e5ac <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
3418e552:	4b8b      	ldr	r3, [pc, #556]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e554:	7d1b      	ldrb	r3, [r3, #20]
3418e556:	f003 0310 	and.w	r3, r3, #16
3418e55a:	b2db      	uxtb	r3, r3
3418e55c:	2b00      	cmp	r3, #0
3418e55e:	d020      	beq.n	3418e5a2 <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
3418e560:	4b87      	ldr	r3, [pc, #540]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e562:	7f9b      	ldrb	r3, [r3, #30]
3418e564:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e568:	b2db      	uxtb	r3, r3
3418e56a:	461a      	mov	r2, r3
3418e56c:	4b84      	ldr	r3, [pc, #528]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e56e:	7f9b      	ldrb	r3, [r3, #30]
3418e570:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418e574:	b2db      	uxtb	r3, r3
3418e576:	4413      	add	r3, r2
3418e578:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3418e57a:	4b81      	ldr	r3, [pc, #516]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e57c:	7fda      	ldrb	r2, [r3, #31]
3418e57e:	687b      	ldr	r3, [r7, #4]
3418e580:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
3418e584:	687b      	ldr	r3, [r7, #4]
3418e586:	2204      	movs	r2, #4
3418e588:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
3418e58c:	6878      	ldr	r0, [r7, #4]
3418e58e:	f000 feab 	bl	3418f2e8 <JEDEC_Basic_Manage4S4S4SEnableSequence>
3418e592:	4603      	mov	r3, r0
3418e594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
3418e598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418e59c:	2b00      	cmp	r3, #0
3418e59e:	f040 82b4 	bne.w	3418eb0a <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
3418e5a2:	697b      	ldr	r3, [r7, #20]
3418e5a4:	b2da      	uxtb	r2, r3
3418e5a6:	687b      	ldr	r3, [r7, #4]
3418e5a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418e5ac:	687b      	ldr	r3, [r7, #4]
3418e5ae:	f103 0008 	add.w	r0, r3, #8
3418e5b2:	687b      	ldr	r3, [r7, #4]
3418e5b4:	3364      	adds	r3, #100	@ 0x64
3418e5b6:	461a      	mov	r2, r3
3418e5b8:	2100      	movs	r1, #0
3418e5ba:	f7fe fd3d 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e5be:	4603      	mov	r3, r0
3418e5c0:	2b00      	cmp	r3, #0
3418e5c2:	d003      	beq.n	3418e5cc <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e5c4:	230c      	movs	r3, #12
3418e5c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418e5ca:	e2a1      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
3418e5cc:	687b      	ldr	r3, [r7, #4]
3418e5ce:	3308      	adds	r3, #8
3418e5d0:	f107 0214 	add.w	r2, r7, #20
3418e5d4:	2101      	movs	r1, #1
3418e5d6:	4618      	mov	r0, r3
3418e5d8:	f7fe fd2e 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e5dc:	4603      	mov	r3, r0
3418e5de:	2b00      	cmp	r3, #0
3418e5e0:	d003      	beq.n	3418e5ea <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e5e2:	230c      	movs	r3, #12
3418e5e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418e5e8:	e292      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR))
3418e5ea:	687b      	ldr	r3, [r7, #4]
3418e5ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e5f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418e5f4:	2b00      	cmp	r3, #0
3418e5f6:	d069      	beq.n	3418e6cc <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
3418e5f8:	687b      	ldr	r3, [r7, #4]
3418e5fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418e5fe:	2b03      	cmp	r3, #3
3418e600:	d164      	bne.n	3418e6cc <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
3418e602:	687b      	ldr	r3, [r7, #4]
3418e604:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e608:	2b09      	cmp	r3, #9
3418e60a:	d103      	bne.n	3418e614 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
3418e60c:	2301      	movs	r3, #1
3418e60e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
3418e612:	e03a      	b.n	3418e68a <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
3418e614:	6878      	ldr	r0, [r7, #4]
3418e616:	f000 fbdb 	bl	3418edd0 <sfpd_enter_octal_mode>
3418e61a:	4603      	mov	r3, r0
3418e61c:	2b00      	cmp	r3, #0
3418e61e:	d134      	bne.n	3418e68a <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
3418e620:	2301      	movs	r3, #1
3418e622:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
3418e626:	687b      	ldr	r3, [r7, #4]
3418e628:	2209      	movs	r2, #9
3418e62a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418e62e:	687b      	ldr	r3, [r7, #4]
3418e630:	f103 0008 	add.w	r0, r3, #8
3418e634:	687b      	ldr	r3, [r7, #4]
3418e636:	3364      	adds	r3, #100	@ 0x64
3418e638:	461a      	mov	r2, r3
3418e63a:	2100      	movs	r1, #0
3418e63c:	f7fe fcfc 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e640:	4603      	mov	r3, r0
3418e642:	2b00      	cmp	r3, #0
3418e644:	d003      	beq.n	3418e64e <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e646:	230c      	movs	r3, #12
3418e648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418e64c:	e260      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }

        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
3418e64e:	687b      	ldr	r3, [r7, #4]
3418e650:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418e654:	2bfd      	cmp	r3, #253	@ 0xfd
3418e656:	d109      	bne.n	3418e66c <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
3418e658:	2314      	movs	r3, #20
3418e65a:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418e65c:	687b      	ldr	r3, [r7, #4]
3418e65e:	3308      	adds	r3, #8
3418e660:	f107 0214 	add.w	r2, r7, #20
3418e664:	2101      	movs	r1, #1
3418e666:	4618      	mov	r0, r3
3418e668:	f7fe fce6 	bl	3418d038 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
3418e66c:	687b      	ldr	r3, [r7, #4]
3418e66e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418e672:	2bfe      	cmp	r3, #254	@ 0xfe
3418e674:	d109      	bne.n	3418e68a <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3418e676:	2308      	movs	r3, #8
3418e678:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418e67a:	687b      	ldr	r3, [r7, #4]
3418e67c:	3308      	adds	r3, #8
3418e67e:	f107 0214 	add.w	r2, r7, #20
3418e682:	2101      	movs	r1, #1
3418e684:	4618      	mov	r0, r3
3418e686:	f7fe fcd7 	bl	3418d038 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418e68a:	687b      	ldr	r3, [r7, #4]
3418e68c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e690:	f003 0308 	and.w	r3, r3, #8
3418e694:	2b00      	cmp	r3, #0
3418e696:	d019      	beq.n	3418e6cc <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
3418e698:	4b39      	ldr	r3, [pc, #228]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e69a:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418e69c:	2b10      	cmp	r3, #16
3418e69e:	d915      	bls.n	3418e6cc <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
3418e6a0:	4b37      	ldr	r3, [pc, #220]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e6a2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418e6a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418e6aa:	b2db      	uxtb	r3, r3
3418e6ac:	2b01      	cmp	r3, #1
3418e6ae:	d903      	bls.n	3418e6b8 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e6b0:	230f      	movs	r3, #15
3418e6b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418e6b6:	e22b      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
3418e6b8:	4b31      	ldr	r3, [pc, #196]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e6ba:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418e6be:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418e6c2:	b2db      	uxtb	r3, r3
3418e6c4:	461a      	mov	r2, r3
3418e6c6:	687b      	ldr	r3, [r7, #4]
3418e6c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
3418e6cc:	687b      	ldr	r3, [r7, #4]
3418e6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e6d6:	2b00      	cmp	r3, #0
3418e6d8:	f000 813c 	beq.w	3418e954 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
3418e6dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
3418e6e0:	2b00      	cmp	r3, #0
3418e6e2:	f040 809e 	bne.w	3418e822 <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
3418e6e6:	4b26      	ldr	r3, [pc, #152]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e6e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418e6ec:	f003 0301 	and.w	r3, r3, #1
3418e6f0:	2b00      	cmp	r3, #0
3418e6f2:	d01c      	beq.n	3418e72e <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
3418e6f4:	687b      	ldr	r3, [r7, #4]
3418e6f6:	f103 0008 	add.w	r0, r3, #8
3418e6fa:	2300      	movs	r3, #0
3418e6fc:	2200      	movs	r2, #0
3418e6fe:	21b7      	movs	r1, #183	@ 0xb7
3418e700:	f7fe ff4c 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418e704:	4603      	mov	r3, r0
3418e706:	2b00      	cmp	r3, #0
3418e708:	d003      	beq.n	3418e712 <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e70a:	230c      	movs	r3, #12
3418e70c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418e710:	e1fe      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418e712:	687b      	ldr	r3, [r7, #4]
3418e714:	3308      	adds	r3, #8
3418e716:	2200      	movs	r2, #0
3418e718:	2102      	movs	r1, #2
3418e71a:	4618      	mov	r0, r3
3418e71c:	f7fe fc8c 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e720:	4603      	mov	r3, r0
3418e722:	2b00      	cmp	r3, #0
3418e724:	d06b      	beq.n	3418e7fe <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e726:	230c      	movs	r3, #12
3418e728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418e72c:	e1f0      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
3418e72e:	4b14      	ldr	r3, [pc, #80]	@ (3418e780 <SFDP_BuildGenericDriver+0x7c4>)
3418e730:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418e734:	f003 0302 	and.w	r3, r3, #2
3418e738:	2b00      	cmp	r3, #0
3418e73a:	d04e      	beq.n	3418e7da <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418e73c:	687b      	ldr	r3, [r7, #4]
3418e73e:	f103 0008 	add.w	r0, r3, #8
3418e742:	687b      	ldr	r3, [r7, #4]
3418e744:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418e748:	2300      	movs	r3, #0
3418e74a:	2200      	movs	r2, #0
3418e74c:	f7fe ff26 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418e750:	4603      	mov	r3, r0
3418e752:	2b00      	cmp	r3, #0
3418e754:	d003      	beq.n	3418e75e <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e756:	230c      	movs	r3, #12
3418e758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418e75c:	e1d8      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e75e:	687b      	ldr	r3, [r7, #4]
3418e760:	f103 0008 	add.w	r0, r3, #8
3418e764:	687b      	ldr	r3, [r7, #4]
3418e766:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418e76a:	687b      	ldr	r3, [r7, #4]
3418e76c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e770:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418e772:	687b      	ldr	r3, [r7, #4]
3418e774:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418e778:	2b00      	cmp	r3, #0
3418e77a:	d103      	bne.n	3418e784 <SFDP_BuildGenericDriver+0x7c8>
3418e77c:	2301      	movs	r3, #1
3418e77e:	e002      	b.n	3418e786 <SFDP_BuildGenericDriver+0x7ca>
3418e780:	341c02d0 	.word	0x341c02d0
3418e784:	2300      	movs	r3, #0
3418e786:	687a      	ldr	r2, [r7, #4]
3418e788:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418e78c:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e78e:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418e790:	687b      	ldr	r3, [r7, #4]
3418e792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418e796:	461c      	mov	r4, r3
3418e798:	2301      	movs	r3, #1
3418e79a:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418e79c:	b2db      	uxtb	r3, r3
3418e79e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418e7a2:	9401      	str	r4, [sp, #4]
3418e7a4:	9300      	str	r3, [sp, #0]
3418e7a6:	4613      	mov	r3, r2
3418e7a8:	462a      	mov	r2, r5
3418e7aa:	f7fe ffec 	bl	3418d786 <SAL_XSPI_CheckStatusRegister>
3418e7ae:	4603      	mov	r3, r0
3418e7b0:	2b00      	cmp	r3, #0
3418e7b2:	d003      	beq.n	3418e7bc <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e7b4:	230c      	movs	r3, #12
3418e7b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418e7ba:	e1a9      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
3418e7bc:	687b      	ldr	r3, [r7, #4]
3418e7be:	f103 0008 	add.w	r0, r3, #8
3418e7c2:	2300      	movs	r3, #0
3418e7c4:	2200      	movs	r2, #0
3418e7c6:	21b7      	movs	r1, #183	@ 0xb7
3418e7c8:	f7fe fee8 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418e7cc:	4603      	mov	r3, r0
3418e7ce:	2b00      	cmp	r3, #0
3418e7d0:	d015      	beq.n	3418e7fe <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e7d2:	230c      	movs	r3, #12
3418e7d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418e7d8:	e19a      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
3418e7da:	4ba3      	ldr	r3, [pc, #652]	@ (3418ea68 <SFDP_BuildGenericDriver+0xaac>)
3418e7dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418e7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e7e4:	2b00      	cmp	r3, #0
3418e7e6:	d10a      	bne.n	3418e7fe <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
3418e7e8:	4b9f      	ldr	r3, [pc, #636]	@ (3418ea68 <SFDP_BuildGenericDriver+0xaac>)
3418e7ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418e7ee:	f003 0320 	and.w	r3, r3, #32
3418e7f2:	2b00      	cmp	r3, #0
3418e7f4:	d103      	bne.n	3418e7fe <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e7f6:	230f      	movs	r3, #15
3418e7f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418e7fc:	e188      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418e7fe:	687b      	ldr	r3, [r7, #4]
3418e800:	3308      	adds	r3, #8
3418e802:	2200      	movs	r2, #0
3418e804:	2102      	movs	r1, #2
3418e806:	4618      	mov	r0, r3
3418e808:	f7fe fc16 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e80c:	4603      	mov	r3, r0
3418e80e:	2b00      	cmp	r3, #0
3418e810:	d003      	beq.n	3418e81a <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e812:	230c      	movs	r3, #12
3418e814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418e818:	e17a      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
      }

      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
3418e81a:	687b      	ldr	r3, [r7, #4]
3418e81c:	2213      	movs	r2, #19
3418e81e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
3418e822:	687b      	ldr	r3, [r7, #4]
3418e824:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418e828:	2b03      	cmp	r3, #3
3418e82a:	d12e      	bne.n	3418e88a <SFDP_BuildGenericDriver+0x8ce>
3418e82c:	687b      	ldr	r3, [r7, #4]
3418e82e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e832:	2b00      	cmp	r3, #0
3418e834:	d129      	bne.n	3418e88a <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
3418e836:	4b8d      	ldr	r3, [pc, #564]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e838:	789b      	ldrb	r3, [r3, #2]
3418e83a:	f003 0320 	and.w	r3, r3, #32
3418e83e:	b2db      	uxtb	r3, r3
3418e840:	2b00      	cmp	r3, #0
3418e842:	d022      	beq.n	3418e88a <SFDP_BuildGenericDriver+0x8ce>
3418e844:	4b89      	ldr	r3, [pc, #548]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e846:	78db      	ldrb	r3, [r3, #3]
3418e848:	f003 0301 	and.w	r3, r3, #1
3418e84c:	b2db      	uxtb	r3, r3
3418e84e:	2b00      	cmp	r3, #0
3418e850:	d01b      	beq.n	3418e88a <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
3418e852:	687b      	ldr	r3, [r7, #4]
3418e854:	2207      	movs	r2, #7
3418e856:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418e85a:	687b      	ldr	r3, [r7, #4]
3418e85c:	f103 0008 	add.w	r0, r3, #8
3418e860:	687b      	ldr	r3, [r7, #4]
3418e862:	3364      	adds	r3, #100	@ 0x64
3418e864:	461a      	mov	r2, r3
3418e866:	2100      	movs	r1, #0
3418e868:	f7fe fbe6 	bl	3418d038 <SAL_XSPI_MemoryConfig>
3418e86c:	4603      	mov	r3, r0
3418e86e:	2b00      	cmp	r3, #0
3418e870:	d003      	beq.n	3418e87a <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e872:	230c      	movs	r3, #12
3418e874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418e878:	e14a      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
3418e87a:	687b      	ldr	r3, [r7, #4]
3418e87c:	22cc      	movs	r2, #204	@ 0xcc
3418e87e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
3418e882:	687b      	ldr	r3, [r7, #4]
3418e884:	228e      	movs	r2, #142	@ 0x8e
3418e886:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418e88a:	687b      	ldr	r3, [r7, #4]
3418e88c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e890:	2b09      	cmp	r3, #9
3418e892:	d004      	beq.n	3418e89e <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
3418e894:	687b      	ldr	r3, [r7, #4]
3418e896:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418e89a:	2b00      	cmp	r3, #0
3418e89c:	d120      	bne.n	3418e8e0 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
3418e89e:	4b73      	ldr	r3, [pc, #460]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e8a0:	781b      	ldrb	r3, [r3, #0]
3418e8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e8a6:	b2db      	uxtb	r3, r3
3418e8a8:	2b00      	cmp	r3, #0
3418e8aa:	d003      	beq.n	3418e8b4 <SFDP_BuildGenericDriver+0x8f8>
3418e8ac:	687b      	ldr	r3, [r7, #4]
3418e8ae:	2212      	movs	r2, #18
3418e8b0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
3418e8b4:	4b6d      	ldr	r3, [pc, #436]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e8b6:	781b      	ldrb	r3, [r3, #0]
3418e8b8:	f003 0301 	and.w	r3, r3, #1
3418e8bc:	b2db      	uxtb	r3, r3
3418e8be:	2b00      	cmp	r3, #0
3418e8c0:	d003      	beq.n	3418e8ca <SFDP_BuildGenericDriver+0x90e>
3418e8c2:	687b      	ldr	r3, [r7, #4]
3418e8c4:	2213      	movs	r2, #19
3418e8c6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
3418e8ca:	4b68      	ldr	r3, [pc, #416]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e8cc:	781b      	ldrb	r3, [r3, #0]
3418e8ce:	f003 0302 	and.w	r3, r3, #2
3418e8d2:	b2db      	uxtb	r3, r3
3418e8d4:	2b00      	cmp	r3, #0
3418e8d6:	d003      	beq.n	3418e8e0 <SFDP_BuildGenericDriver+0x924>
3418e8d8:	687b      	ldr	r3, [r7, #4]
3418e8da:	220c      	movs	r2, #12
3418e8dc:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
3418e8e0:	687b      	ldr	r3, [r7, #4]
3418e8e2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e8e6:	2b08      	cmp	r3, #8
3418e8e8:	d120      	bne.n	3418e92c <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
3418e8ea:	4b60      	ldr	r3, [pc, #384]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e8ec:	78db      	ldrb	r3, [r3, #3]
3418e8ee:	f003 0301 	and.w	r3, r3, #1
3418e8f2:	b2db      	uxtb	r3, r3
3418e8f4:	2b00      	cmp	r3, #0
3418e8f6:	d003      	beq.n	3418e900 <SFDP_BuildGenericDriver+0x944>
3418e8f8:	687b      	ldr	r3, [r7, #4]
3418e8fa:	2202      	movs	r2, #2
3418e8fc:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
3418e900:	4b5a      	ldr	r3, [pc, #360]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e902:	789b      	ldrb	r3, [r3, #2]
3418e904:	f003 0320 	and.w	r3, r3, #32
3418e908:	b2db      	uxtb	r3, r3
3418e90a:	2b00      	cmp	r3, #0
3418e90c:	d003      	beq.n	3418e916 <SFDP_BuildGenericDriver+0x95a>
3418e90e:	687b      	ldr	r3, [r7, #4]
3418e910:	22cc      	movs	r2, #204	@ 0xcc
3418e912:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
3418e916:	4b55      	ldr	r3, [pc, #340]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e918:	789b      	ldrb	r3, [r3, #2]
3418e91a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418e91e:	b2db      	uxtb	r3, r3
3418e920:	2b00      	cmp	r3, #0
3418e922:	d003      	beq.n	3418e92c <SFDP_BuildGenericDriver+0x970>
3418e924:	687b      	ldr	r3, [r7, #4]
3418e926:	22fd      	movs	r2, #253	@ 0xfd
3418e928:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
3418e92c:	4b4f      	ldr	r3, [pc, #316]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e92e:	791a      	ldrb	r2, [r3, #4]
3418e930:	687b      	ldr	r3, [r7, #4]
3418e932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
3418e936:	4b4d      	ldr	r3, [pc, #308]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e938:	795a      	ldrb	r2, [r3, #5]
3418e93a:	687b      	ldr	r3, [r7, #4]
3418e93c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
3418e940:	4b4a      	ldr	r3, [pc, #296]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e942:	799a      	ldrb	r2, [r3, #6]
3418e944:	687b      	ldr	r3, [r7, #4]
3418e946:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
3418e94a:	4b48      	ldr	r3, [pc, #288]	@ (3418ea6c <SFDP_BuildGenericDriver+0xab0>)
3418e94c:	79da      	ldrb	r2, [r3, #7]
3418e94e:	687b      	ldr	r3, [r7, #4]
3418e950:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
3418e954:	687b      	ldr	r3, [r7, #4]
3418e956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e95a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418e95e:	2b00      	cmp	r3, #0
3418e960:	f000 80d5 	beq.w	3418eb0e <SFDP_BuildGenericDriver+0xb52>
      &&
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418e964:	687b      	ldr	r3, [r7, #4]
3418e966:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
3418e96a:	2b09      	cmp	r3, #9
3418e96c:	d005      	beq.n	3418e97a <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418e96e:	687b      	ldr	r3, [r7, #4]
3418e970:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e974:	2b08      	cmp	r3, #8
3418e976:	f040 80ca 	bne.w	3418eb0e <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
3418e97a:	2300      	movs	r3, #0
3418e97c:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
3418e97e:	4b3c      	ldr	r3, [pc, #240]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418e980:	785b      	ldrb	r3, [r3, #1]
3418e982:	2b00      	cmp	r3, #0
3418e984:	d004      	beq.n	3418e990 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
3418e986:	4b3a      	ldr	r3, [pc, #232]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418e988:	785a      	ldrb	r2, [r3, #1]
3418e98a:	687b      	ldr	r3, [r7, #4]
3418e98c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
3418e990:	4b37      	ldr	r3, [pc, #220]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418e992:	7d1b      	ldrb	r3, [r3, #20]
3418e994:	f003 031f 	and.w	r3, r3, #31
3418e998:	b2db      	uxtb	r3, r3
3418e99a:	2b00      	cmp	r3, #0
3418e99c:	d00d      	beq.n	3418e9ba <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
3418e99e:	4b34      	ldr	r3, [pc, #208]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418e9a0:	7d1b      	ldrb	r3, [r3, #20]
3418e9a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418e9a6:	b2db      	uxtb	r3, r3
3418e9a8:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418e9aa:	687b      	ldr	r3, [r7, #4]
3418e9ac:	3308      	adds	r3, #8
3418e9ae:	f107 0214 	add.w	r2, r7, #20
3418e9b2:	2101      	movs	r1, #1
3418e9b4:	4618      	mov	r0, r3
3418e9b6:	f7fe fb3f 	bl	3418d038 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
3418e9ba:	4b2b      	ldr	r3, [pc, #172]	@ (3418ea68 <SFDP_BuildGenericDriver+0xaac>)
3418e9bc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418e9c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418e9c4:	b2db      	uxtb	r3, r3
3418e9c6:	4618      	mov	r0, r3
3418e9c8:	f000 f8e8 	bl	3418eb9c <sfdp_getfrequencevalue>
3418e9cc:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
3418e9ce:	687b      	ldr	r3, [r7, #4]
3418e9d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418e9d2:	69fa      	ldr	r2, [r7, #28]
3418e9d4:	429a      	cmp	r2, r3
3418e9d6:	d902      	bls.n	3418e9de <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
3418e9d8:	687b      	ldr	r3, [r7, #4]
3418e9da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418e9dc:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
3418e9de:	687b      	ldr	r3, [r7, #4]
3418e9e0:	f103 0008 	add.w	r0, r3, #8
3418e9e4:	687b      	ldr	r3, [r7, #4]
3418e9e6:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3418e9e8:	f107 030c 	add.w	r3, r7, #12
3418e9ec:	69fa      	ldr	r2, [r7, #28]
3418e9ee:	f7fe fab0 	bl	3418cf52 <SAL_XSPI_SetClock>
3418e9f2:	4603      	mov	r3, r0
3418e9f4:	2b00      	cmp	r3, #0
3418e9f6:	d003      	beq.n	3418ea00 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
3418e9f8:	230d      	movs	r3, #13
3418e9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418e9fe:	e087      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
3418ea00:	683b      	ldr	r3, [r7, #0]
3418ea02:	2201      	movs	r2, #1
3418ea04:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
3418ea06:	68fb      	ldr	r3, [r7, #12]
3418ea08:	4a1a      	ldr	r2, [pc, #104]	@ (3418ea74 <SFDP_BuildGenericDriver+0xab8>)
3418ea0a:	4293      	cmp	r3, r2
3418ea0c:	d913      	bls.n	3418ea36 <SFDP_BuildGenericDriver+0xa7a>
3418ea0e:	4b18      	ldr	r3, [pc, #96]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea10:	899b      	ldrh	r3, [r3, #12]
3418ea12:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
3418ea16:	b29b      	uxth	r3, r3
3418ea18:	2b00      	cmp	r3, #0
3418ea1a:	d00c      	beq.n	3418ea36 <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
3418ea1c:	4b14      	ldr	r3, [pc, #80]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea1e:	899b      	ldrh	r3, [r3, #12]
3418ea20:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418ea24:	b2db      	uxtb	r3, r3
3418ea26:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
3418ea28:	4b11      	ldr	r3, [pc, #68]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea2a:	7b1b      	ldrb	r3, [r3, #12]
3418ea2c:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418ea30:	b2db      	uxtb	r3, r3
3418ea32:	623b      	str	r3, [r7, #32]
3418ea34:	e046      	b.n	3418eac4 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
3418ea36:	68fb      	ldr	r3, [r7, #12]
3418ea38:	4a0f      	ldr	r2, [pc, #60]	@ (3418ea78 <SFDP_BuildGenericDriver+0xabc>)
3418ea3a:	4293      	cmp	r3, r2
3418ea3c:	d91e      	bls.n	3418ea7c <SFDP_BuildGenericDriver+0xac0>
3418ea3e:	4b0c      	ldr	r3, [pc, #48]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea40:	7cdb      	ldrb	r3, [r3, #19]
3418ea42:	f023 0307 	bic.w	r3, r3, #7
3418ea46:	b2db      	uxtb	r3, r3
3418ea48:	2b00      	cmp	r3, #0
3418ea4a:	d017      	beq.n	3418ea7c <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
3418ea4c:	4b08      	ldr	r3, [pc, #32]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea4e:	7cdb      	ldrb	r3, [r3, #19]
3418ea50:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418ea54:	b2db      	uxtb	r3, r3
3418ea56:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
3418ea58:	4b05      	ldr	r3, [pc, #20]	@ (3418ea70 <SFDP_BuildGenericDriver+0xab4>)
3418ea5a:	8a5b      	ldrh	r3, [r3, #18]
3418ea5c:	f3c3 1384 	ubfx	r3, r3, #6, #5
3418ea60:	b2db      	uxtb	r3, r3
3418ea62:	623b      	str	r3, [r7, #32]
3418ea64:	e02e      	b.n	3418eac4 <SFDP_BuildGenericDriver+0xb08>
3418ea66:	bf00      	nop
3418ea68:	341c02d0 	.word	0x341c02d0
3418ea6c:	341c0330 	.word	0x341c0330
3418ea70:	341c0338 	.word	0x341c0338
3418ea74:	0bebc1ff 	.word	0x0bebc1ff
3418ea78:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
3418ea7c:	68fb      	ldr	r3, [r7, #12]
3418ea7e:	4a27      	ldr	r2, [pc, #156]	@ (3418eb1c <SFDP_BuildGenericDriver+0xb60>)
3418ea80:	4293      	cmp	r3, r2
3418ea82:	d913      	bls.n	3418eaac <SFDP_BuildGenericDriver+0xaf0>
3418ea84:	4b26      	ldr	r3, [pc, #152]	@ (3418eb20 <SFDP_BuildGenericDriver+0xb64>)
3418ea86:	7c9b      	ldrb	r3, [r3, #18]
3418ea88:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
3418ea8c:	b2db      	uxtb	r3, r3
3418ea8e:	2b00      	cmp	r3, #0
3418ea90:	d00c      	beq.n	3418eaac <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
3418ea92:	4b23      	ldr	r3, [pc, #140]	@ (3418eb20 <SFDP_BuildGenericDriver+0xb64>)
3418ea94:	7c9b      	ldrb	r3, [r3, #18]
3418ea96:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418ea9a:	b2db      	uxtb	r3, r3
3418ea9c:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
3418ea9e:	4b20      	ldr	r3, [pc, #128]	@ (3418eb20 <SFDP_BuildGenericDriver+0xb64>)
3418eaa0:	691b      	ldr	r3, [r3, #16]
3418eaa2:	f3c3 3304 	ubfx	r3, r3, #12, #5
3418eaa6:	b2db      	uxtb	r3, r3
3418eaa8:	623b      	str	r3, [r7, #32]
3418eaaa:	e00b      	b.n	3418eac4 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
3418eaac:	4b1c      	ldr	r3, [pc, #112]	@ (3418eb20 <SFDP_BuildGenericDriver+0xb64>)
3418eaae:	8a1b      	ldrh	r3, [r3, #16]
3418eab0:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418eab4:	b2db      	uxtb	r3, r3
3418eab6:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
3418eab8:	4b19      	ldr	r3, [pc, #100]	@ (3418eb20 <SFDP_BuildGenericDriver+0xb64>)
3418eaba:	7c1b      	ldrb	r3, [r3, #16]
3418eabc:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418eac0:	b2db      	uxtb	r3, r3
3418eac2:	623b      	str	r3, [r7, #32]
    }

    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418eac4:	687b      	ldr	r3, [r7, #4]
3418eac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418eaca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418eace:	2b00      	cmp	r3, #0
3418ead0:	d017      	beq.n	3418eb02 <SFDP_BuildGenericDriver+0xb46>
        && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
3418ead2:	4b14      	ldr	r3, [pc, #80]	@ (3418eb24 <SFDP_BuildGenericDriver+0xb68>)
3418ead4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418ead8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418eadc:	b2db      	uxtb	r3, r3
3418eade:	2b00      	cmp	r3, #0
3418eae0:	d00f      	beq.n	3418eb02 <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418eae2:	6a39      	ldr	r1, [r7, #32]
3418eae4:	6878      	ldr	r0, [r7, #4]
3418eae6:	f000 fa61 	bl	3418efac <sfpd_set_dummycycle>
3418eaea:	4603      	mov	r3, r0
3418eaec:	2b00      	cmp	r3, #0
3418eaee:	d10f      	bne.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418eaf0:	687b      	ldr	r3, [r7, #4]
3418eaf2:	3308      	adds	r3, #8
3418eaf4:	f107 0214 	add.w	r2, r7, #20
3418eaf8:	2101      	movs	r1, #1
3418eafa:	4618      	mov	r0, r3
3418eafc:	f7fe fa9c 	bl	3418d038 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418eb00:	e006      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
3418eb02:	230e      	movs	r3, #14
3418eb04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418eb08:	e002      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
          goto error;
3418eb0a:	bf00      	nop
3418eb0c:	e000      	b.n	3418eb10 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
3418eb0e:	bf00      	nop
  return retr;
3418eb10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418eb14:	4618      	mov	r0, r3
3418eb16:	3728      	adds	r7, #40	@ 0x28
3418eb18:	46bd      	mov	sp, r7
3418eb1a:	bdb0      	pop	{r4, r5, r7, pc}
3418eb1c:	07ed6b3f 	.word	0x07ed6b3f
3418eb20:	341c0338 	.word	0x341c0338
3418eb24:	341c0350 	.word	0x341c0350

3418eb28 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
3418eb28:	b5b0      	push	{r4, r5, r7, lr}
3418eb2a:	b086      	sub	sp, #24
3418eb2c:	af02      	add	r7, sp, #8
3418eb2e:	6078      	str	r0, [r7, #4]
3418eb30:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
3418eb32:	23fb      	movs	r3, #251	@ 0xfb
3418eb34:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
3418eb36:	687b      	ldr	r3, [r7, #4]
3418eb38:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3418eb3c:	2b00      	cmp	r3, #0
3418eb3e:	d026      	beq.n	3418eb8e <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418eb40:	687b      	ldr	r3, [r7, #4]
3418eb42:	f103 0008 	add.w	r0, r3, #8
3418eb46:	687b      	ldr	r3, [r7, #4]
3418eb48:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
3418eb4c:	687b      	ldr	r3, [r7, #4]
3418eb4e:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418eb52:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418eb54:	687b      	ldr	r3, [r7, #4]
3418eb56:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
3418eb5a:	461a      	mov	r2, r3
3418eb5c:	687b      	ldr	r3, [r7, #4]
3418eb5e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418eb62:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418eb66:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418eb68:	687b      	ldr	r3, [r7, #4]
3418eb6a:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418eb6e:	461a      	mov	r2, r3
3418eb70:	2301      	movs	r3, #1
3418eb72:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418eb74:	b2db      	uxtb	r3, r3
3418eb76:	683a      	ldr	r2, [r7, #0]
3418eb78:	9201      	str	r2, [sp, #4]
3418eb7a:	9300      	str	r3, [sp, #0]
3418eb7c:	4623      	mov	r3, r4
3418eb7e:	462a      	mov	r2, r5
3418eb80:	f7fe fe01 	bl	3418d786 <SAL_XSPI_CheckStatusRegister>
3418eb84:	4603      	mov	r3, r0
3418eb86:	2b00      	cmp	r3, #0
3418eb88:	d101      	bne.n	3418eb8e <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418eb8a:	2300      	movs	r3, #0
3418eb8c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
3418eb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418eb92:	4618      	mov	r0, r3
3418eb94:	3710      	adds	r7, #16
3418eb96:	46bd      	mov	sp, r7
3418eb98:	bdb0      	pop	{r4, r5, r7, pc}
	...

3418eb9c <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
3418eb9c:	b4b0      	push	{r4, r5, r7}
3418eb9e:	b08b      	sub	sp, #44	@ 0x2c
3418eba0:	af00      	add	r7, sp, #0
3418eba2:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
3418eba4:	4b0e      	ldr	r3, [pc, #56]	@ (3418ebe0 <sfdp_getfrequencevalue+0x44>)
3418eba6:	f107 040c 	add.w	r4, r7, #12
3418ebaa:	461d      	mov	r5, r3
3418ebac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418ebae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418ebb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
3418ebb4:	c403      	stmia	r4!, {r0, r1}
3418ebb6:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
3418ebb8:	687b      	ldr	r3, [r7, #4]
3418ebba:	2b09      	cmp	r3, #9
3418ebbc:	d80a      	bhi.n	3418ebd4 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
3418ebbe:	687b      	ldr	r3, [r7, #4]
3418ebc0:	005b      	lsls	r3, r3, #1
3418ebc2:	3328      	adds	r3, #40	@ 0x28
3418ebc4:	443b      	add	r3, r7
3418ebc6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
3418ebca:	461a      	mov	r2, r3
3418ebcc:	4b05      	ldr	r3, [pc, #20]	@ (3418ebe4 <sfdp_getfrequencevalue+0x48>)
3418ebce:	fb02 f303 	mul.w	r3, r2, r3
3418ebd2:	e000      	b.n	3418ebd6 <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
3418ebd4:	2300      	movs	r3, #0
}
3418ebd6:	4618      	mov	r0, r3
3418ebd8:	372c      	adds	r7, #44	@ 0x2c
3418ebda:	46bd      	mov	sp, r7
3418ebdc:	bcb0      	pop	{r4, r5, r7}
3418ebde:	4770      	bx	lr
3418ebe0:	3418f690 	.word	0x3418f690
3418ebe4:	000f4240 	.word	0x000f4240

3418ebe8 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
3418ebe8:	b580      	push	{r7, lr}
3418ebea:	b088      	sub	sp, #32
3418ebec:	af00      	add	r7, sp, #0
3418ebee:	60f8      	str	r0, [r7, #12]
3418ebf0:	60b9      	str	r1, [r7, #8]
3418ebf2:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418ebf4:	2300      	movs	r3, #0
3418ebf6:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
3418ebf8:	f107 0314 	add.w	r3, r7, #20
3418ebfc:	2200      	movs	r2, #0
3418ebfe:	601a      	str	r2, [r3, #0]
3418ec00:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress,
3418ec02:	68fb      	ldr	r3, [r7, #12]
3418ec04:	f103 0008 	add.w	r0, r3, #8
3418ec08:	f107 0214 	add.w	r2, r7, #20
3418ec0c:	2308      	movs	r3, #8
3418ec0e:	68b9      	ldr	r1, [r7, #8]
3418ec10:	f7fe fb64 	bl	3418d2dc <SAL_XSPI_GetSFDP>
3418ec14:	4603      	mov	r3, r0
3418ec16:	2b00      	cmp	r3, #0
3418ec18:	d002      	beq.n	3418ec20 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418ec1a:	2303      	movs	r3, #3
3418ec1c:	77fb      	strb	r3, [r7, #31]
    goto error;
3418ec1e:	e0d1      	b.n	3418edc4 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
3418ec20:	687b      	ldr	r3, [r7, #4]
3418ec22:	2200      	movs	r2, #0
3418ec24:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
3418ec26:	7dfa      	ldrb	r2, [r7, #23]
3418ec28:	687b      	ldr	r3, [r7, #4]
3418ec2a:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418ec2c:	7ebb      	ldrb	r3, [r7, #26]
3418ec2e:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
3418ec30:	7e7b      	ldrb	r3, [r7, #25]
3418ec32:	021b      	lsls	r3, r3, #8
3418ec34:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
3418ec36:	7e3a      	ldrb	r2, [r7, #24]
3418ec38:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418ec3a:	687b      	ldr	r3, [r7, #4]
3418ec3c:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
3418ec3e:	7efb      	ldrb	r3, [r7, #27]
3418ec40:	2b00      	cmp	r3, #0
3418ec42:	d010      	beq.n	3418ec66 <sfdp_get_paraminfo+0x7e>
3418ec44:	7efb      	ldrb	r3, [r7, #27]
3418ec46:	b25b      	sxtb	r3, r3
3418ec48:	2b00      	cmp	r3, #0
3418ec4a:	db0c      	blt.n	3418ec66 <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418ec4c:	7efb      	ldrb	r3, [r7, #27]
3418ec4e:	f003 0301 	and.w	r3, r3, #1
3418ec52:	2b00      	cmp	r3, #0
3418ec54:	d003      	beq.n	3418ec5e <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
3418ec56:	687b      	ldr	r3, [r7, #4]
3418ec58:	2201      	movs	r2, #1
3418ec5a:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418ec5c:	e0b2      	b.n	3418edc4 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
3418ec5e:	687b      	ldr	r3, [r7, #4]
3418ec60:	2202      	movs	r2, #2
3418ec62:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418ec64:	e0ae      	b.n	3418edc4 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
3418ec66:	7d3b      	ldrb	r3, [r7, #20]
3418ec68:	f003 0301 	and.w	r3, r3, #1
3418ec6c:	2b00      	cmp	r3, #0
3418ec6e:	d102      	bne.n	3418ec76 <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
3418ec70:	687b      	ldr	r3, [r7, #4]
3418ec72:	2204      	movs	r2, #4
3418ec74:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
3418ec76:	7efb      	ldrb	r3, [r7, #27]
3418ec78:	2bff      	cmp	r3, #255	@ 0xff
3418ec7a:	f040 80a2 	bne.w	3418edc2 <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
3418ec7e:	7d3b      	ldrb	r3, [r7, #20]
3418ec80:	2b0f      	cmp	r3, #15
3418ec82:	dc4b      	bgt.n	3418ed1c <sfdp_get_paraminfo+0x134>
3418ec84:	2b00      	cmp	r3, #0
3418ec86:	da23      	bge.n	3418ecd0 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
3418ec88:	e09a      	b.n	3418edc0 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
3418ec8a:	3b81      	subs	r3, #129	@ 0x81
3418ec8c:	2b0d      	cmp	r3, #13
3418ec8e:	f200 8097 	bhi.w	3418edc0 <sfdp_get_paraminfo+0x1d8>
3418ec92:	a201      	add	r2, pc, #4	@ (adr r2, 3418ec98 <sfdp_get_paraminfo+0xb0>)
3418ec94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418ec98:	3418ed3d 	.word	0x3418ed3d
3418ec9c:	3418edc1 	.word	0x3418edc1
3418eca0:	3418edc1 	.word	0x3418edc1
3418eca4:	3418ed4d 	.word	0x3418ed4d
3418eca8:	3418edc1 	.word	0x3418edc1
3418ecac:	3418edc1 	.word	0x3418edc1
3418ecb0:	3418ed67 	.word	0x3418ed67
3418ecb4:	3418ed71 	.word	0x3418ed71
3418ecb8:	3418edc1 	.word	0x3418edc1
3418ecbc:	3418edc1 	.word	0x3418edc1
3418ecc0:	3418ed8f 	.word	0x3418ed8f
3418ecc4:	3418edc1 	.word	0x3418edc1
3418ecc8:	3418eda3 	.word	0x3418eda3
3418eccc:	3418edad 	.word	0x3418edad
3418ecd0:	2b0f      	cmp	r3, #15
3418ecd2:	d875      	bhi.n	3418edc0 <sfdp_get_paraminfo+0x1d8>
3418ecd4:	a201      	add	r2, pc, #4	@ (adr r2, 3418ecdc <sfdp_get_paraminfo+0xf4>)
3418ecd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418ecda:	bf00      	nop
3418ecdc:	3418ed27 	.word	0x3418ed27
3418ece0:	3418edc1 	.word	0x3418edc1
3418ece4:	3418edc1 	.word	0x3418edc1
3418ece8:	3418ed45 	.word	0x3418ed45
3418ecec:	3418edc1 	.word	0x3418edc1
3418ecf0:	3418ed55 	.word	0x3418ed55
3418ecf4:	3418ed5d 	.word	0x3418ed5d
3418ecf8:	3418edc1 	.word	0x3418edc1
3418ecfc:	3418edc1 	.word	0x3418edc1
3418ed00:	3418ed7b 	.word	0x3418ed7b
3418ed04:	3418ed85 	.word	0x3418ed85
3418ed08:	3418edc1 	.word	0x3418edc1
3418ed0c:	3418ed99 	.word	0x3418ed99
3418ed10:	3418edc1 	.word	0x3418edc1
3418ed14:	3418edc1 	.word	0x3418edc1
3418ed18:	3418edb7 	.word	0x3418edb7
3418ed1c:	2b8e      	cmp	r3, #142	@ 0x8e
3418ed1e:	dc4f      	bgt.n	3418edc0 <sfdp_get_paraminfo+0x1d8>
3418ed20:	2b81      	cmp	r3, #129	@ 0x81
3418ed22:	dab2      	bge.n	3418ec8a <sfdp_get_paraminfo+0xa2>
        break;
3418ed24:	e04c      	b.n	3418edc0 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
3418ed26:	687b      	ldr	r3, [r7, #4]
3418ed28:	2208      	movs	r2, #8
3418ed2a:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
3418ed2c:	7dfb      	ldrb	r3, [r7, #23]
3418ed2e:	2b10      	cmp	r3, #16
3418ed30:	bf38      	it	cc
3418ed32:	2310      	movcc	r3, #16
3418ed34:	b2da      	uxtb	r2, r3
3418ed36:	687b      	ldr	r3, [r7, #4]
3418ed38:	721a      	strb	r2, [r3, #8]
        break;
3418ed3a:	e042      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
3418ed3c:	687b      	ldr	r3, [r7, #4]
3418ed3e:	2210      	movs	r2, #16
3418ed40:	601a      	str	r2, [r3, #0]
        break;
3418ed42:	e03e      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
3418ed44:	687b      	ldr	r3, [r7, #4]
3418ed46:	2220      	movs	r2, #32
3418ed48:	601a      	str	r2, [r3, #0]
        break;
3418ed4a:	e03a      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
3418ed4c:	687b      	ldr	r3, [r7, #4]
3418ed4e:	2240      	movs	r2, #64	@ 0x40
3418ed50:	601a      	str	r2, [r3, #0]
        break;
3418ed52:	e036      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
3418ed54:	687b      	ldr	r3, [r7, #4]
3418ed56:	2280      	movs	r2, #128	@ 0x80
3418ed58:	601a      	str	r2, [r3, #0]
        break;
3418ed5a:	e032      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
3418ed5c:	687b      	ldr	r3, [r7, #4]
3418ed5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418ed62:	601a      	str	r2, [r3, #0]
        break;
3418ed64:	e02d      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
3418ed66:	687b      	ldr	r3, [r7, #4]
3418ed68:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418ed6c:	601a      	str	r2, [r3, #0]
        break;
3418ed6e:	e028      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
3418ed70:	687b      	ldr	r3, [r7, #4]
3418ed72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3418ed76:	601a      	str	r2, [r3, #0]
        break;
3418ed78:	e023      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
3418ed7a:	687b      	ldr	r3, [r7, #4]
3418ed7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418ed80:	601a      	str	r2, [r3, #0]
        break;
3418ed82:	e01e      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
3418ed84:	687b      	ldr	r3, [r7, #4]
3418ed86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418ed8a:	601a      	str	r2, [r3, #0]
        break;
3418ed8c:	e019      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
3418ed8e:	687b      	ldr	r3, [r7, #4]
3418ed90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418ed94:	601a      	str	r2, [r3, #0]
        break;
3418ed96:	e014      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
3418ed98:	687b      	ldr	r3, [r7, #4]
3418ed9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418ed9e:	601a      	str	r2, [r3, #0]
        break;
3418eda0:	e00f      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
3418eda2:	687b      	ldr	r3, [r7, #4]
3418eda4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418eda8:	601a      	str	r2, [r3, #0]
        break;
3418edaa:	e00a      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
3418edac:	687b      	ldr	r3, [r7, #4]
3418edae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418edb2:	601a      	str	r2, [r3, #0]
        break;
3418edb4:	e005      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
3418edb6:	687b      	ldr	r3, [r7, #4]
3418edb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418edbc:	601a      	str	r2, [r3, #0]
        break;
3418edbe:	e000      	b.n	3418edc2 <sfdp_get_paraminfo+0x1da>
        break;
3418edc0:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }

error:
3418edc2:	bf00      	nop
  return retr;
3418edc4:	7ffb      	ldrb	r3, [r7, #31]
}
3418edc6:	4618      	mov	r0, r3
3418edc8:	3720      	adds	r7, #32
3418edca:	46bd      	mov	sp, r7
3418edcc:	bd80      	pop	{r7, pc}
3418edce:	bf00      	nop

3418edd0 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418edd0:	b590      	push	{r4, r7, lr}
3418edd2:	b085      	sub	sp, #20
3418edd4:	af00      	add	r7, sp, #0
3418edd6:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418edd8:	2300      	movs	r3, #0
3418edda:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
3418eddc:	4b72      	ldr	r3, [pc, #456]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418edde:	78db      	ldrb	r3, [r3, #3]
3418ede0:	2b00      	cmp	r3, #0
3418ede2:	d032      	beq.n	3418ee4a <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
3418ede4:	4b70      	ldr	r3, [pc, #448]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ede6:	789b      	ldrb	r3, [r3, #2]
3418ede8:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
3418edea:	4b6f      	ldr	r3, [pc, #444]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418edec:	785b      	ldrb	r3, [r3, #1]
3418edee:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
3418edf0:	4b6d      	ldr	r3, [pc, #436]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418edf2:	781b      	ldrb	r3, [r3, #0]
3418edf4:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
3418edf6:	4b6c      	ldr	r3, [pc, #432]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418edf8:	79db      	ldrb	r3, [r3, #7]
3418edfa:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
3418edfc:	4b6a      	ldr	r3, [pc, #424]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418edfe:	799b      	ldrb	r3, [r3, #6]
3418ee00:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
3418ee02:	4b69      	ldr	r3, [pc, #420]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee04:	795b      	ldrb	r3, [r3, #5]
3418ee06:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
3418ee08:	4b67      	ldr	r3, [pc, #412]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee0a:	791b      	ldrb	r3, [r3, #4]
3418ee0c:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ee0e:	687b      	ldr	r3, [r7, #4]
3418ee10:	f103 0008 	add.w	r0, r3, #8
3418ee14:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
3418ee16:	4b64      	ldr	r3, [pc, #400]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee18:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ee1a:	3b01      	subs	r3, #1
3418ee1c:	b29c      	uxth	r4, r3
3418ee1e:	f107 0308 	add.w	r3, r7, #8
3418ee22:	1c5a      	adds	r2, r3, #1
3418ee24:	4623      	mov	r3, r4
3418ee26:	f7fe fbb9 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418ee2a:	4603      	mov	r3, r0
3418ee2c:	2b00      	cmp	r3, #0
3418ee2e:	d002      	beq.n	3418ee36 <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418ee30:	230b      	movs	r3, #11
3418ee32:	73fb      	strb	r3, [r7, #15]
       goto error;
3418ee34:	e0b3      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418ee36:	2164      	movs	r1, #100	@ 0x64
3418ee38:	6878      	ldr	r0, [r7, #4]
3418ee3a:	f7ff fe75 	bl	3418eb28 <driver_check_FlagBUSY>
3418ee3e:	4603      	mov	r3, r0
3418ee40:	2b00      	cmp	r3, #0
3418ee42:	d002      	beq.n	3418ee4a <sfpd_enter_octal_mode+0x7a>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ee44:	230c      	movs	r3, #12
3418ee46:	73fb      	strb	r3, [r7, #15]
       goto error;
3418ee48:	e0a9      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
3418ee4a:	4b57      	ldr	r3, [pc, #348]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee4c:	7adb      	ldrb	r3, [r3, #11]
3418ee4e:	2b00      	cmp	r3, #0
3418ee50:	d032      	beq.n	3418eeb8 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
3418ee52:	4b55      	ldr	r3, [pc, #340]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee54:	7a9b      	ldrb	r3, [r3, #10]
3418ee56:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
3418ee58:	4b53      	ldr	r3, [pc, #332]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee5a:	7a5b      	ldrb	r3, [r3, #9]
3418ee5c:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
3418ee5e:	4b52      	ldr	r3, [pc, #328]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee60:	7a1b      	ldrb	r3, [r3, #8]
3418ee62:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
3418ee64:	4b50      	ldr	r3, [pc, #320]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee66:	7bdb      	ldrb	r3, [r3, #15]
3418ee68:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
3418ee6a:	4b4f      	ldr	r3, [pc, #316]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee6c:	7b9b      	ldrb	r3, [r3, #14]
3418ee6e:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
3418ee70:	4b4d      	ldr	r3, [pc, #308]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee72:	7b5b      	ldrb	r3, [r3, #13]
3418ee74:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
3418ee76:	4b4c      	ldr	r3, [pc, #304]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee78:	7b1b      	ldrb	r3, [r3, #12]
3418ee7a:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ee7c:	687b      	ldr	r3, [r7, #4]
3418ee7e:	f103 0008 	add.w	r0, r3, #8
3418ee82:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
3418ee84:	4b48      	ldr	r3, [pc, #288]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ee86:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ee88:	3b01      	subs	r3, #1
3418ee8a:	b29c      	uxth	r4, r3
3418ee8c:	f107 0308 	add.w	r3, r7, #8
3418ee90:	1c5a      	adds	r2, r3, #1
3418ee92:	4623      	mov	r3, r4
3418ee94:	f7fe fb82 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418ee98:	4603      	mov	r3, r0
3418ee9a:	2b00      	cmp	r3, #0
3418ee9c:	d002      	beq.n	3418eea4 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418ee9e:	230b      	movs	r3, #11
3418eea0:	73fb      	strb	r3, [r7, #15]
       goto error;
3418eea2:	e07c      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418eea4:	2164      	movs	r1, #100	@ 0x64
3418eea6:	6878      	ldr	r0, [r7, #4]
3418eea8:	f7ff fe3e 	bl	3418eb28 <driver_check_FlagBUSY>
3418eeac:	4603      	mov	r3, r0
3418eeae:	2b00      	cmp	r3, #0
3418eeb0:	d002      	beq.n	3418eeb8 <sfpd_enter_octal_mode+0xe8>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418eeb2:	230c      	movs	r3, #12
3418eeb4:	73fb      	strb	r3, [r7, #15]
       goto error;
3418eeb6:	e072      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
3418eeb8:	4b3b      	ldr	r3, [pc, #236]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eeba:	7cdb      	ldrb	r3, [r3, #19]
3418eebc:	2b00      	cmp	r3, #0
3418eebe:	d032      	beq.n	3418ef26 <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
3418eec0:	4b39      	ldr	r3, [pc, #228]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eec2:	7c9b      	ldrb	r3, [r3, #18]
3418eec4:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
3418eec6:	4b38      	ldr	r3, [pc, #224]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eec8:	7c5b      	ldrb	r3, [r3, #17]
3418eeca:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
3418eecc:	4b36      	ldr	r3, [pc, #216]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eece:	7c1b      	ldrb	r3, [r3, #16]
3418eed0:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
3418eed2:	4b35      	ldr	r3, [pc, #212]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eed4:	7ddb      	ldrb	r3, [r3, #23]
3418eed6:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
3418eed8:	4b33      	ldr	r3, [pc, #204]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eeda:	7d9b      	ldrb	r3, [r3, #22]
3418eedc:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
3418eede:	4b32      	ldr	r3, [pc, #200]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eee0:	7d5b      	ldrb	r3, [r3, #21]
3418eee2:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
3418eee4:	4b30      	ldr	r3, [pc, #192]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eee6:	7d1b      	ldrb	r3, [r3, #20]
3418eee8:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418eeea:	687b      	ldr	r3, [r7, #4]
3418eeec:	f103 0008 	add.w	r0, r3, #8
3418eef0:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
3418eef2:	4b2d      	ldr	r3, [pc, #180]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418eef4:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418eef6:	3b01      	subs	r3, #1
3418eef8:	b29c      	uxth	r4, r3
3418eefa:	f107 0308 	add.w	r3, r7, #8
3418eefe:	1c5a      	adds	r2, r3, #1
3418ef00:	4623      	mov	r3, r4
3418ef02:	f7fe fb4b 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418ef06:	4603      	mov	r3, r0
3418ef08:	2b00      	cmp	r3, #0
3418ef0a:	d002      	beq.n	3418ef12 <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418ef0c:	230b      	movs	r3, #11
3418ef0e:	73fb      	strb	r3, [r7, #15]
      goto error;
3418ef10:	e045      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418ef12:	2164      	movs	r1, #100	@ 0x64
3418ef14:	6878      	ldr	r0, [r7, #4]
3418ef16:	f7ff fe07 	bl	3418eb28 <driver_check_FlagBUSY>
3418ef1a:	4603      	mov	r3, r0
3418ef1c:	2b00      	cmp	r3, #0
3418ef1e:	d002      	beq.n	3418ef26 <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ef20:	230c      	movs	r3, #12
3418ef22:	73fb      	strb	r3, [r7, #15]
      goto error;
3418ef24:	e03b      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
3418ef26:	4b20      	ldr	r3, [pc, #128]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef28:	7edb      	ldrb	r3, [r3, #27]
3418ef2a:	2b00      	cmp	r3, #0
3418ef2c:	d032      	beq.n	3418ef94 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
3418ef2e:	4b1e      	ldr	r3, [pc, #120]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef30:	7e9b      	ldrb	r3, [r3, #26]
3418ef32:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
3418ef34:	4b1c      	ldr	r3, [pc, #112]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef36:	7e5b      	ldrb	r3, [r3, #25]
3418ef38:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
3418ef3a:	4b1b      	ldr	r3, [pc, #108]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef3c:	7e1b      	ldrb	r3, [r3, #24]
3418ef3e:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
3418ef40:	4b19      	ldr	r3, [pc, #100]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef42:	7fdb      	ldrb	r3, [r3, #31]
3418ef44:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
3418ef46:	4b18      	ldr	r3, [pc, #96]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef48:	7f9b      	ldrb	r3, [r3, #30]
3418ef4a:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
3418ef4c:	4b16      	ldr	r3, [pc, #88]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef4e:	7f5b      	ldrb	r3, [r3, #29]
3418ef50:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
3418ef52:	4b15      	ldr	r3, [pc, #84]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef54:	7f1b      	ldrb	r3, [r3, #28]
3418ef56:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ef58:	687b      	ldr	r3, [r7, #4]
3418ef5a:	f103 0008 	add.w	r0, r3, #8
3418ef5e:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
3418ef60:	4b11      	ldr	r3, [pc, #68]	@ (3418efa8 <sfpd_enter_octal_mode+0x1d8>)
3418ef62:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418ef64:	3b01      	subs	r3, #1
3418ef66:	b29c      	uxth	r4, r3
3418ef68:	f107 0308 	add.w	r3, r7, #8
3418ef6c:	1c5a      	adds	r2, r3, #1
3418ef6e:	4623      	mov	r3, r4
3418ef70:	f7fe fb14 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418ef74:	4603      	mov	r3, r0
3418ef76:	2b00      	cmp	r3, #0
3418ef78:	d002      	beq.n	3418ef80 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418ef7a:	230b      	movs	r3, #11
3418ef7c:	73fb      	strb	r3, [r7, #15]
      goto error;
3418ef7e:	e00e      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418ef80:	2164      	movs	r1, #100	@ 0x64
3418ef82:	6878      	ldr	r0, [r7, #4]
3418ef84:	f7ff fdd0 	bl	3418eb28 <driver_check_FlagBUSY>
3418ef88:	4603      	mov	r3, r0
3418ef8a:	2b00      	cmp	r3, #0
3418ef8c:	d002      	beq.n	3418ef94 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ef8e:	230c      	movs	r3, #12
3418ef90:	73fb      	strb	r3, [r7, #15]
      goto error;
3418ef92:	e004      	b.n	3418ef9e <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* Abort any ongoing tranfert to avoid perofomance issue */
  SAL_XSPI_Abort(&Object->sfpd_private.SALObject);
3418ef94:	687b      	ldr	r3, [r7, #4]
3418ef96:	3308      	adds	r3, #8
3418ef98:	4618      	mov	r0, r3
3418ef9a:	f7fe fd5e 	bl	3418da5a <SAL_XSPI_Abort>

error:
  return retr;
3418ef9e:	7bfb      	ldrb	r3, [r7, #15]
}
3418efa0:	4618      	mov	r0, r3
3418efa2:	3714      	adds	r7, #20
3418efa4:	46bd      	mov	sp, r7
3418efa6:	bd90      	pop	{r4, r7, pc}
3418efa8:	341c03c0 	.word	0x341c03c0

3418efac <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
3418efac:	b5b0      	push	{r4, r5, r7, lr}
3418efae:	b088      	sub	sp, #32
3418efb0:	af02      	add	r7, sp, #8
3418efb2:	6078      	str	r0, [r7, #4]
3418efb4:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
3418efb6:	4b6d      	ldr	r3, [pc, #436]	@ (3418f16c <sfpd_set_dummycycle+0x1c0>)
3418efb8:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418efba:	2300      	movs	r3, #0
3418efbc:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
3418efbe:	2300      	movs	r3, #0
3418efc0:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418efc2:	4b6b      	ldr	r3, [pc, #428]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418efc4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418efc8:	f003 0310 	and.w	r3, r3, #16
3418efcc:	b2db      	uxtb	r3, r3
3418efce:	2b00      	cmp	r3, #0
3418efd0:	d10a      	bne.n	3418efe8 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
3418efd2:	4b67      	ldr	r3, [pc, #412]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418efd4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418efd8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418efdc:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418efde:	2b00      	cmp	r3, #0
3418efe0:	d002      	beq.n	3418efe8 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418efe2:	230c      	movs	r3, #12
3418efe4:	75fb      	strb	r3, [r7, #23]
    goto error;
3418efe6:	e0bb      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
3418efe8:	4b61      	ldr	r3, [pc, #388]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418efea:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418efee:	f003 0308 	and.w	r3, r3, #8
3418eff2:	b2db      	uxtb	r3, r3
3418eff4:	2b00      	cmp	r3, #0
3418eff6:	d005      	beq.n	3418f004 <sfpd_set_dummycycle+0x58>
  {
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
3418eff8:	4b5d      	ldr	r3, [pc, #372]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418effa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
3418effe:	021b      	lsls	r3, r3, #8
3418f000:	613b      	str	r3, [r7, #16]
3418f002:	e001      	b.n	3418f008 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1;
3418f004:	2301      	movs	r3, #1
3418f006:	613b      	str	r3, [r7, #16]
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject,
3418f008:	687b      	ldr	r3, [r7, #4]
3418f00a:	f103 0008 	add.w	r0, r3, #8
3418f00e:	4b58      	ldr	r3, [pc, #352]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f010:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418f014:	f107 0308 	add.w	r3, r7, #8
3418f018:	2202      	movs	r2, #2
3418f01a:	9200      	str	r2, [sp, #0]
3418f01c:	693a      	ldr	r2, [r7, #16]
3418f01e:	f7fe fb65 	bl	3418d6ec <SAL_XSPI_CommandSendReadAddress>
3418f022:	4603      	mov	r3, r0
3418f024:	2b00      	cmp	r3, #0
3418f026:	d002      	beq.n	3418f02e <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
                   Address,
                   (uint8_t *)localValue,
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f028:	230c      	movs	r3, #12
3418f02a:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f02c:	e098      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418f02e:	687b      	ldr	r3, [r7, #4]
3418f030:	f103 0008 	add.w	r0, r3, #8
3418f034:	687b      	ldr	r3, [r7, #4]
3418f036:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418f03a:	2300      	movs	r3, #0
3418f03c:	2200      	movs	r2, #0
3418f03e:	f7fe faad 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418f042:	4603      	mov	r3, r0
3418f044:	2b00      	cmp	r3, #0
3418f046:	d002      	beq.n	3418f04e <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f048:	230c      	movs	r3, #12
3418f04a:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f04c:	e088      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f04e:	687b      	ldr	r3, [r7, #4]
3418f050:	f103 0008 	add.w	r0, r3, #8
3418f054:	687b      	ldr	r3, [r7, #4]
3418f056:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418f05a:	687b      	ldr	r3, [r7, #4]
3418f05c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f060:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418f062:	687b      	ldr	r3, [r7, #4]
3418f064:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418f068:	2b00      	cmp	r3, #0
3418f06a:	d101      	bne.n	3418f070 <sfpd_set_dummycycle+0xc4>
3418f06c:	2301      	movs	r3, #1
3418f06e:	e000      	b.n	3418f072 <sfpd_set_dummycycle+0xc6>
3418f070:	2300      	movs	r3, #0
3418f072:	687a      	ldr	r2, [r7, #4]
3418f074:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418f078:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f07a:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418f07c:	687b      	ldr	r3, [r7, #4]
3418f07e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418f082:	461c      	mov	r4, r3
3418f084:	2301      	movs	r3, #1
3418f086:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f088:	b2db      	uxtb	r3, r3
3418f08a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418f08e:	9401      	str	r4, [sp, #4]
3418f090:	9300      	str	r3, [sp, #0]
3418f092:	4613      	mov	r3, r2
3418f094:	462a      	mov	r2, r5
3418f096:	f7fe fb76 	bl	3418d786 <SAL_XSPI_CheckStatusRegister>
3418f09a:	4603      	mov	r3, r0
3418f09c:	2b00      	cmp	r3, #0
3418f09e:	d002      	beq.n	3418f0a6 <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f0a0:	230c      	movs	r3, #12
3418f0a2:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f0a4:	e05c      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418f0a6:	7a3b      	ldrb	r3, [r7, #8]
3418f0a8:	b25a      	sxtb	r2, r3
3418f0aa:	4b31      	ldr	r3, [pc, #196]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f0ac:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f0b0:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418f0b4:	b2db      	uxtb	r3, r3
3418f0b6:	3318      	adds	r3, #24
3418f0b8:	443b      	add	r3, r7
3418f0ba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
3418f0be:	4619      	mov	r1, r3
3418f0c0:	4b2b      	ldr	r3, [pc, #172]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f0c2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f0c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f0ca:	b2db      	uxtb	r3, r3
3418f0cc:	fa01 f303 	lsl.w	r3, r1, r3
3418f0d0:	b25b      	sxtb	r3, r3
3418f0d2:	43db      	mvns	r3, r3
3418f0d4:	b25b      	sxtb	r3, r3
3418f0d6:	4013      	ands	r3, r2
3418f0d8:	b25b      	sxtb	r3, r3
3418f0da:	b2db      	uxtb	r3, r3
3418f0dc:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418f0de:	7a3a      	ldrb	r2, [r7, #8]
3418f0e0:	4b23      	ldr	r3, [pc, #140]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f0e2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f0e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f0ea:	b2db      	uxtb	r3, r3
3418f0ec:	4619      	mov	r1, r3
3418f0ee:	683b      	ldr	r3, [r7, #0]
3418f0f0:	408b      	lsls	r3, r1
3418f0f2:	b2db      	uxtb	r3, r3
3418f0f4:	4313      	orrs	r3, r2
3418f0f6:	b2db      	uxtb	r3, r3
3418f0f8:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
3418f0fa:	7a3b      	ldrb	r3, [r7, #8]
3418f0fc:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
3418f0fe:	687b      	ldr	r3, [r7, #4]
3418f100:	f103 0008 	add.w	r0, r3, #8
3418f104:	4b1a      	ldr	r3, [pc, #104]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f106:	f893 1020 	ldrb.w	r1, [r3, #32]
3418f10a:	f107 0308 	add.w	r3, r7, #8
3418f10e:	2202      	movs	r2, #2
3418f110:	9200      	str	r2, [sp, #0]
3418f112:	693a      	ldr	r2, [r7, #16]
3418f114:	f7fe f9f9 	bl	3418d50a <SAL_XSPI_Write>
3418f118:	4603      	mov	r3, r0
3418f11a:	2b00      	cmp	r3, #0
3418f11c:	d002      	beq.n	3418f124 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f11e:	230c      	movs	r3, #12
3418f120:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f122:	e01d      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f124:	2164      	movs	r1, #100	@ 0x64
3418f126:	6878      	ldr	r0, [r7, #4]
3418f128:	f7ff fcfe 	bl	3418eb28 <driver_check_FlagBUSY>
3418f12c:	4603      	mov	r3, r0
3418f12e:	2b00      	cmp	r3, #0
3418f130:	d002      	beq.n	3418f138 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f132:	230c      	movs	r3, #12
3418f134:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f136:	e013      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
3418f138:	687b      	ldr	r3, [r7, #4]
3418f13a:	f103 0008 	add.w	r0, r3, #8
3418f13e:	4b0c      	ldr	r3, [pc, #48]	@ (3418f170 <sfpd_set_dummycycle+0x1c4>)
3418f140:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418f144:	f107 0308 	add.w	r3, r7, #8
3418f148:	2202      	movs	r2, #2
3418f14a:	9200      	str	r2, [sp, #0]
3418f14c:	693a      	ldr	r2, [r7, #16]
3418f14e:	f7fe f974 	bl	3418d43a <SAL_XSPI_Read>
3418f152:	4603      	mov	r3, r0
3418f154:	2b00      	cmp	r3, #0
3418f156:	d002      	beq.n	3418f15e <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f158:	230c      	movs	r3, #12
3418f15a:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f15c:	e000      	b.n	3418f160 <sfpd_set_dummycycle+0x1b4>
  }

error :
3418f15e:	bf00      	nop
  return retr;
3418f160:	7dfb      	ldrb	r3, [r7, #23]
}
3418f162:	4618      	mov	r0, r3
3418f164:	3718      	adds	r7, #24
3418f166:	46bd      	mov	sp, r7
3418f168:	bdb0      	pop	{r4, r5, r7, pc}
3418f16a:	bf00      	nop
3418f16c:	1f0f0703 	.word	0x1f0f0703
3418f170:	341c0350 	.word	0x341c0350

3418f174 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418f174:	b580      	push	{r7, lr}
3418f176:	b084      	sub	sp, #16
3418f178:	af00      	add	r7, sp, #0
3418f17a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f17c:	230f      	movs	r3, #15
3418f17e:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
3418f180:	4b58      	ldr	r3, [pc, #352]	@ (3418f2e4 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
3418f182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
3418f186:	f3c3 1302 	ubfx	r3, r3, #4, #3
3418f18a:	b2db      	uxtb	r3, r3
3418f18c:	2b07      	cmp	r3, #7
3418f18e:	f200 80a1 	bhi.w	3418f2d4 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
3418f192:	a201      	add	r2, pc, #4	@ (adr r2, 3418f198 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
3418f194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f198:	3418f2d5 	.word	0x3418f2d5
3418f19c:	3418f2d5 	.word	0x3418f2d5
3418f1a0:	3418f1b9 	.word	0x3418f1b9
3418f1a4:	3418f2d5 	.word	0x3418f2d5
3418f1a8:	3418f239 	.word	0x3418f239
3418f1ac:	3418f2d5 	.word	0x3418f2d5
3418f1b0:	3418f2d5 	.word	0x3418f2d5
3418f1b4:	3418f2d5 	.word	0x3418f2d5
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418f1b8:	687b      	ldr	r3, [r7, #4]
3418f1ba:	f103 0008 	add.w	r0, r3, #8
3418f1be:	687b      	ldr	r3, [r7, #4]
3418f1c0:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418f1c4:	2300      	movs	r3, #0
3418f1c6:	2200      	movs	r2, #0
3418f1c8:	f7fe fa3c 	bl	3418d644 <SAL_XSPI_SendReadCommand>
3418f1cc:	4603      	mov	r3, r0
3418f1ce:	2b00      	cmp	r3, #0
3418f1d0:	d002      	beq.n	3418f1d8 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f1d2:	230c      	movs	r3, #12
3418f1d4:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f1d6:	e080      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
3418f1d8:	687b      	ldr	r3, [r7, #4]
3418f1da:	f103 0008 	add.w	r0, r3, #8
3418f1de:	f107 020c 	add.w	r2, r7, #12
3418f1e2:	2301      	movs	r3, #1
3418f1e4:	2105      	movs	r1, #5
3418f1e6:	f7fe fa2d 	bl	3418d644 <SAL_XSPI_SendReadCommand>
3418f1ea:	4603      	mov	r3, r0
3418f1ec:	2b00      	cmp	r3, #0
3418f1ee:	d002      	beq.n	3418f1f6 <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f1f0:	230c      	movs	r3, #12
3418f1f2:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f1f4:	e071      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
3418f1f6:	7b3b      	ldrb	r3, [r7, #12]
3418f1f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418f1fc:	b2db      	uxtb	r3, r3
3418f1fe:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
3418f200:	687b      	ldr	r3, [r7, #4]
3418f202:	f103 0008 	add.w	r0, r3, #8
3418f206:	f107 020c 	add.w	r2, r7, #12
3418f20a:	2301      	movs	r3, #1
3418f20c:	2101      	movs	r1, #1
3418f20e:	f7fe f9c5 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418f212:	4603      	mov	r3, r0
3418f214:	2b00      	cmp	r3, #0
3418f216:	d002      	beq.n	3418f21e <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f218:	230c      	movs	r3, #12
3418f21a:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f21c:	e05d      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418f21e:	2164      	movs	r1, #100	@ 0x64
3418f220:	6878      	ldr	r0, [r7, #4]
3418f222:	f7ff fc81 	bl	3418eb28 <driver_check_FlagBUSY>
3418f226:	4603      	mov	r3, r0
3418f228:	2b00      	cmp	r3, #0
3418f22a:	d002      	beq.n	3418f232 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f22c:	230c      	movs	r3, #12
3418f22e:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f230:	e053      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
3418f232:	2300      	movs	r3, #0
3418f234:	73fb      	strb	r3, [r7, #15]
    break;
3418f236:	e050      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418f238:	687b      	ldr	r3, [r7, #4]
3418f23a:	f103 0008 	add.w	r0, r3, #8
3418f23e:	f107 020c 	add.w	r2, r7, #12
3418f242:	2302      	movs	r3, #2
3418f244:	2105      	movs	r1, #5
3418f246:	f7fe f9fd 	bl	3418d644 <SAL_XSPI_SendReadCommand>
3418f24a:	4603      	mov	r3, r0
3418f24c:	2b00      	cmp	r3, #0
3418f24e:	d002      	beq.n	3418f256 <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f250:	230c      	movs	r3, #12
3418f252:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f254:	e041      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* update the status register */
    localValue[1] |= 2u;
3418f256:	7b7b      	ldrb	r3, [r7, #13]
3418f258:	f043 0302 	orr.w	r3, r3, #2
3418f25c:	b2db      	uxtb	r3, r3
3418f25e:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418f260:	687b      	ldr	r3, [r7, #4]
3418f262:	f103 0008 	add.w	r0, r3, #8
3418f266:	687b      	ldr	r3, [r7, #4]
3418f268:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418f26c:	2300      	movs	r3, #0
3418f26e:	2200      	movs	r2, #0
3418f270:	f7fe f9e8 	bl	3418d644 <SAL_XSPI_SendReadCommand>
3418f274:	4603      	mov	r3, r0
3418f276:	2b00      	cmp	r3, #0
3418f278:	d002      	beq.n	3418f280 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f27a:	230c      	movs	r3, #12
3418f27c:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f27e:	e02c      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
3418f280:	687b      	ldr	r3, [r7, #4]
3418f282:	f103 0008 	add.w	r0, r3, #8
3418f286:	f107 020c 	add.w	r2, r7, #12
3418f28a:	2302      	movs	r3, #2
3418f28c:	2101      	movs	r1, #1
3418f28e:	f7fe f985 	bl	3418d59c <SAL_XSPI_CommandSendData>
3418f292:	4603      	mov	r3, r0
3418f294:	2b00      	cmp	r3, #0
3418f296:	d002      	beq.n	3418f29e <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f298:	230c      	movs	r3, #12
3418f29a:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f29c:	e01d      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418f29e:	2164      	movs	r1, #100	@ 0x64
3418f2a0:	6878      	ldr	r0, [r7, #4]
3418f2a2:	f7ff fc41 	bl	3418eb28 <driver_check_FlagBUSY>
3418f2a6:	4603      	mov	r3, r0
3418f2a8:	2b00      	cmp	r3, #0
3418f2aa:	d002      	beq.n	3418f2b2 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f2ac:	230c      	movs	r3, #12
3418f2ae:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f2b0:	e013      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
3418f2b2:	23ff      	movs	r3, #255	@ 0xff
3418f2b4:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418f2b6:	687b      	ldr	r3, [r7, #4]
3418f2b8:	f103 0008 	add.w	r0, r3, #8
3418f2bc:	f107 020c 	add.w	r2, r7, #12
3418f2c0:	2302      	movs	r3, #2
3418f2c2:	2105      	movs	r1, #5
3418f2c4:	f7fe f9be 	bl	3418d644 <SAL_XSPI_SendReadCommand>
3418f2c8:	4603      	mov	r3, r0
3418f2ca:	2b00      	cmp	r3, #0
3418f2cc:	d004      	beq.n	3418f2d8 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f2ce:	230c      	movs	r3, #12
3418f2d0:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f2d2:	e002      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
3418f2d4:	bf00      	nop
3418f2d6:	e000      	b.n	3418f2da <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
3418f2d8:	bf00      	nop
  }
error :
  return retr;
3418f2da:	7bfb      	ldrb	r3, [r7, #15]
}
3418f2dc:	4618      	mov	r0, r3
3418f2de:	3710      	adds	r7, #16
3418f2e0:	46bd      	mov	sp, r7
3418f2e2:	bd80      	pop	{r7, pc}
3418f2e4:	341c02d0 	.word	0x341c02d0

3418f2e8 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418f2e8:	b580      	push	{r7, lr}
3418f2ea:	b084      	sub	sp, #16
3418f2ec:	af00      	add	r7, sp, #0
3418f2ee:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f2f0:	230f      	movs	r3, #15
3418f2f2:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
3418f2f4:	2300      	movs	r3, #0
3418f2f6:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
3418f2f8:	4b19      	ldr	r3, [pc, #100]	@ (3418f360 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418f2fa:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418f2fc:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418f300:	b2db      	uxtb	r3, r3
3418f302:	f003 0301 	and.w	r3, r3, #1
3418f306:	2b00      	cmp	r3, #0
3418f308:	d007      	beq.n	3418f31a <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
3418f30a:	6878      	ldr	r0, [r7, #4]
3418f30c:	f7ff ff32 	bl	3418f174 <JEDEC_Basic_ManageQuadEnableRequierement>
3418f310:	4603      	mov	r3, r0
3418f312:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
3418f314:	2338      	movs	r3, #56	@ 0x38
3418f316:	73bb      	strb	r3, [r7, #14]
3418f318:	e00c      	b.n	3418f334 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
3418f31a:	4b11      	ldr	r3, [pc, #68]	@ (3418f360 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418f31c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418f31e:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418f322:	b2db      	uxtb	r3, r3
3418f324:	f003 0304 	and.w	r3, r3, #4
3418f328:	2b00      	cmp	r3, #0
3418f32a:	d003      	beq.n	3418f334 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
3418f32c:	2300      	movs	r3, #0
3418f32e:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
3418f330:	2335      	movs	r3, #53	@ 0x35
3418f332:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
3418f334:	7bfb      	ldrb	r3, [r7, #15]
3418f336:	2b00      	cmp	r3, #0
3418f338:	d10c      	bne.n	3418f354 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
3418f33a:	7bbb      	ldrb	r3, [r7, #14]
3418f33c:	2b00      	cmp	r3, #0
3418f33e:	d009      	beq.n	3418f354 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
3418f340:	687b      	ldr	r3, [r7, #4]
3418f342:	f103 0008 	add.w	r0, r3, #8
3418f346:	7bb9      	ldrb	r1, [r7, #14]
3418f348:	2300      	movs	r3, #0
3418f34a:	2200      	movs	r2, #0
3418f34c:	f7fe f97a 	bl	3418d644 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
3418f350:	2300      	movs	r3, #0
3418f352:	73fb      	strb	r3, [r7, #15]

    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.

  return retr;
3418f354:	7bfb      	ldrb	r3, [r7, #15]
}
3418f356:	4618      	mov	r0, r3
3418f358:	3710      	adds	r7, #16
3418f35a:	46bd      	mov	sp, r7
3418f35c:	bd80      	pop	{r7, pc}
3418f35e:	bf00      	nop
3418f360:	341c02d0 	.word	0x341c02d0

3418f364 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
3418f364:	b580      	push	{r7, lr}
3418f366:	b084      	sub	sp, #16
3418f368:	af00      	add	r7, sp, #0
3418f36a:	6078      	str	r0, [r7, #4]
3418f36c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418f36e:	2304      	movs	r3, #4
3418f370:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
3418f372:	683b      	ldr	r3, [r7, #0]
3418f374:	4a0e      	ldr	r2, [pc, #56]	@ (3418f3b0 <CheckSFDP_Signature+0x4c>)
3418f376:	4293      	cmp	r3, r2
3418f378:	d006      	beq.n	3418f388 <CheckSFDP_Signature+0x24>
3418f37a:	683b      	ldr	r3, [r7, #0]
3418f37c:	4a0d      	ldr	r2, [pc, #52]	@ (3418f3b4 <CheckSFDP_Signature+0x50>)
3418f37e:	4293      	cmp	r3, r2
3418f380:	d10e      	bne.n	3418f3a0 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
3418f382:	2300      	movs	r3, #0
3418f384:	73fb      	strb	r3, [r7, #15]
    break;
3418f386:	e00e      	b.n	3418f3a6 <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
3418f388:	687b      	ldr	r3, [r7, #4]
3418f38a:	3308      	adds	r3, #8
3418f38c:	2100      	movs	r1, #0
3418f38e:	4618      	mov	r0, r3
3418f390:	f7fe fb2b 	bl	3418d9ea <SAL_XSPI_UpdateMemoryType>
3418f394:	4603      	mov	r3, r0
3418f396:	2b00      	cmp	r3, #0
3418f398:	d104      	bne.n	3418f3a4 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
3418f39a:	2305      	movs	r3, #5
3418f39c:	73fb      	strb	r3, [r7, #15]
    }
    break;
3418f39e:	e001      	b.n	3418f3a4 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
3418f3a0:	bf00      	nop
3418f3a2:	e000      	b.n	3418f3a6 <CheckSFDP_Signature+0x42>
    break;
3418f3a4:	bf00      	nop
  }
  return retr;
3418f3a6:	7bfb      	ldrb	r3, [r7, #15]
}
3418f3a8:	4618      	mov	r0, r3
3418f3aa:	3710      	adds	r7, #16
3418f3ac:	46bd      	mov	sp, r7
3418f3ae:	bd80      	pop	{r7, pc}
3418f3b0:	44505346 	.word	0x44505346
3418f3b4:	50444653 	.word	0x50444653

3418f3b8 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418f3b8:	b580      	push	{r7, lr}
3418f3ba:	b08a      	sub	sp, #40	@ 0x28
3418f3bc:	af00      	add	r7, sp, #0
3418f3be:	60f8      	str	r0, [r7, #12]
3418f3c0:	607a      	str	r2, [r7, #4]
3418f3c2:	603b      	str	r3, [r7, #0]
3418f3c4:	460b      	mov	r3, r1
3418f3c6:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418f3c8:	2300      	movs	r3, #0
3418f3ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
3418f3ce:	2300      	movs	r3, #0
3418f3d0:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
3418f3d2:	683b      	ldr	r3, [r7, #0]
3418f3d4:	3308      	adds	r3, #8
3418f3d6:	2298      	movs	r2, #152	@ 0x98
3418f3d8:	2100      	movs	r1, #0
3418f3da:	4618      	mov	r0, r3
3418f3dc:	f000 f90a 	bl	3418f5f4 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
3418f3e0:	683b      	ldr	r3, [r7, #0]
3418f3e2:	7afa      	ldrb	r2, [r7, #11]
3418f3e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418f3e8:	683b      	ldr	r3, [r7, #0]
3418f3ea:	2200      	movs	r2, #0
3418f3ec:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
3418f3f0:	683b      	ldr	r3, [r7, #0]
3418f3f2:	687a      	ldr	r2, [r7, #4]
3418f3f4:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
3418f3f6:	683b      	ldr	r3, [r7, #0]
3418f3f8:	2208      	movs	r2, #8
3418f3fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
3418f3fe:	683b      	ldr	r3, [r7, #0]
3418f400:	3308      	adds	r3, #8
3418f402:	68f9      	ldr	r1, [r7, #12]
3418f404:	4618      	mov	r0, r3
3418f406:	f7fd fde3 	bl	3418cfd0 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
3418f40a:	683b      	ldr	r3, [r7, #0]
3418f40c:	f103 0008 	add.w	r0, r3, #8
3418f410:	f107 0310 	add.w	r3, r7, #16
3418f414:	4a44      	ldr	r2, [pc, #272]	@ (3418f528 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
3418f416:	6879      	ldr	r1, [r7, #4]
3418f418:	f7fd fd9b 	bl	3418cf52 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
3418f41c:	683b      	ldr	r3, [r7, #0]
3418f41e:	3308      	adds	r3, #8
3418f420:	4618      	mov	r0, r3
3418f422:	f7fe fad1 	bl	3418d9c8 <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418f426:	f107 031c 	add.w	r3, r7, #28
3418f42a:	4619      	mov	r1, r3
3418f42c:	6838      	ldr	r0, [r7, #0]
3418f42e:	f7fe fbaf 	bl	3418db90 <SFDP_GetHeader>
3418f432:	4603      	mov	r3, r0
3418f434:	2b00      	cmp	r3, #0
3418f436:	d003      	beq.n	3418f440 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418f438:	23ff      	movs	r3, #255	@ 0xff
3418f43a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f43e:	e06c      	b.n	3418f51a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
3418f440:	6838      	ldr	r0, [r7, #0]
3418f442:	f7fe fcdf 	bl	3418de04 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
3418f446:	200a      	movs	r0, #10
3418f448:	f7f2 f8fc 	bl	34181644 <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418f44c:	f107 031c 	add.w	r3, r7, #28
3418f450:	4619      	mov	r1, r3
3418f452:	6838      	ldr	r0, [r7, #0]
3418f454:	f7fe fb9c 	bl	3418db90 <SFDP_GetHeader>
3418f458:	4603      	mov	r3, r0
3418f45a:	2b00      	cmp	r3, #0
3418f45c:	d003      	beq.n	3418f466 <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418f45e:	23ff      	movs	r3, #255	@ 0xff
3418f460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f464:	e059      	b.n	3418f51a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
3418f466:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
3418f46a:	683b      	ldr	r3, [r7, #0]
3418f46c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
3418f470:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
3418f474:	683b      	ldr	r3, [r7, #0]
3418f476:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418f47a:	683b      	ldr	r3, [r7, #0]
3418f47c:	3308      	adds	r3, #8
3418f47e:	f107 0114 	add.w	r1, r7, #20
3418f482:	2204      	movs	r2, #4
3418f484:	4618      	mov	r0, r3
3418f486:	f7fd ff85 	bl	3418d394 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
3418f48a:	7d3a      	ldrb	r2, [r7, #20]
3418f48c:	683b      	ldr	r3, [r7, #0]
3418f48e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
3418f492:	6838      	ldr	r0, [r7, #0]
3418f494:	f7fe fbda 	bl	3418dc4c <SFDP_CollectData>
3418f498:	4603      	mov	r3, r0
3418f49a:	2b00      	cmp	r3, #0
3418f49c:	d003      	beq.n	3418f4a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418f49e:	23ff      	movs	r3, #255	@ 0xff
3418f4a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f4a4:	e039      	b.n	3418f51a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
3418f4a6:	f107 031b 	add.w	r3, r7, #27
3418f4aa:	4619      	mov	r1, r3
3418f4ac:	6838      	ldr	r0, [r7, #0]
3418f4ae:	f7fe fd85 	bl	3418dfbc <SFDP_BuildGenericDriver>
3418f4b2:	4603      	mov	r3, r0
3418f4b4:	2b00      	cmp	r3, #0
3418f4b6:	d003      	beq.n	3418f4c0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
3418f4b8:	23fd      	movs	r3, #253	@ 0xfd
3418f4ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f4be:	e02c      	b.n	3418f51a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
3418f4c0:	7efb      	ldrb	r3, [r7, #27]
3418f4c2:	2b00      	cmp	r3, #0
3418f4c4:	d10d      	bne.n	3418f4e2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
3418f4c6:	683b      	ldr	r3, [r7, #0]
3418f4c8:	681b      	ldr	r3, [r3, #0]
3418f4ca:	2b00      	cmp	r3, #0
3418f4cc:	d009      	beq.n	3418f4e2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
3418f4ce:	683b      	ldr	r3, [r7, #0]
3418f4d0:	f103 0008 	add.w	r0, r3, #8
3418f4d4:	683b      	ldr	r3, [r7, #0]
3418f4d6:	681a      	ldr	r2, [r3, #0]
3418f4d8:	f107 0310 	add.w	r3, r7, #16
3418f4dc:	6879      	ldr	r1, [r7, #4]
3418f4de:	f7fd fd38 	bl	3418cf52 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
3418f4e2:	f107 031c 	add.w	r3, r7, #28
3418f4e6:	4619      	mov	r1, r3
3418f4e8:	6838      	ldr	r0, [r7, #0]
3418f4ea:	f7fe fb13 	bl	3418db14 <SFDP_ReadHeader>
3418f4ee:	4603      	mov	r3, r0
3418f4f0:	2b00      	cmp	r3, #0
3418f4f2:	d003      	beq.n	3418f4fc <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
3418f4f4:	23f2      	movs	r3, #242	@ 0xf2
3418f4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f4fa:	e00e      	b.n	3418f51a <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
3418f4fc:	f107 0314 	add.w	r3, r7, #20
3418f500:	2206      	movs	r2, #6
3418f502:	21aa      	movs	r1, #170	@ 0xaa
3418f504:	4618      	mov	r0, r3
3418f506:	f000 f875 	bl	3418f5f4 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418f50a:	683b      	ldr	r3, [r7, #0]
3418f50c:	3308      	adds	r3, #8
3418f50e:	f107 0114 	add.w	r1, r7, #20
3418f512:	2204      	movs	r2, #4
3418f514:	4618      	mov	r0, r3
3418f516:	f7fd ff3d 	bl	3418d394 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
3418f51a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
3418f51e:	4618      	mov	r0, r3
3418f520:	3728      	adds	r7, #40	@ 0x28
3418f522:	46bd      	mov	sp, r7
3418f524:	bd80      	pop	{r7, pc}
3418f526:	bf00      	nop
3418f528:	02faf080 	.word	0x02faf080

3418f52c <EXTMEM_DRIVER_NOR_SFDP_Read>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Read(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418f52c:	b580      	push	{r7, lr}
3418f52e:	b088      	sub	sp, #32
3418f530:	af02      	add	r7, sp, #8
3418f532:	60f8      	str	r0, [r7, #12]
3418f534:	60b9      	str	r1, [r7, #8]
3418f536:	607a      	str	r2, [r7, #4]
3418f538:	603b      	str	r3, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr;
  DEBUG_DRIVER((uint8_t *)__func__)
  /* check busy flag */
  retr = driver_check_FlagBUSY(SFDPObject, 5000);
3418f53a:	f241 3188 	movw	r1, #5000	@ 0x1388
3418f53e:	68f8      	ldr	r0, [r7, #12]
3418f540:	f7ff faf2 	bl	3418eb28 <driver_check_FlagBUSY>
3418f544:	4603      	mov	r3, r0
3418f546:	75fb      	strb	r3, [r7, #23]
  if ( EXTMEM_DRIVER_NOR_SFDP_OK != retr)
3418f548:	f997 3017 	ldrsb.w	r3, [r7, #23]
3418f54c:	2b00      	cmp	r3, #0
3418f54e:	d111      	bne.n	3418f574 <EXTMEM_DRIVER_NOR_SFDP_Read+0x48>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_CHECK_BUSY")
    goto error;
  }

  if (HAL_OK != SAL_XSPI_Read(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction, Address, Data, Size))
3418f550:	68fb      	ldr	r3, [r7, #12]
3418f552:	f103 0008 	add.w	r0, r3, #8
3418f556:	68fb      	ldr	r3, [r7, #12]
3418f558:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
3418f55c:	683b      	ldr	r3, [r7, #0]
3418f55e:	9300      	str	r3, [sp, #0]
3418f560:	687b      	ldr	r3, [r7, #4]
3418f562:	68ba      	ldr	r2, [r7, #8]
3418f564:	f7fd ff69 	bl	3418d43a <SAL_XSPI_Read>
3418f568:	4603      	mov	r3, r0
3418f56a:	2b00      	cmp	r3, #0
3418f56c:	d004      	beq.n	3418f578 <EXTMEM_DRIVER_NOR_SFDP_Read+0x4c>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_READ")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_READ;
3418f56e:	23fe      	movs	r3, #254	@ 0xfe
3418f570:	75fb      	strb	r3, [r7, #23]
3418f572:	e002      	b.n	3418f57a <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
    goto error;
3418f574:	bf00      	nop
3418f576:	e000      	b.n	3418f57a <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
  }
error :
3418f578:	bf00      	nop
  return retr;
3418f57a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418f57e:	4618      	mov	r0, r3
3418f580:	3718      	adds	r7, #24
3418f582:	46bd      	mov	sp, r7
3418f584:	bd80      	pop	{r7, pc}

3418f586 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418f586:	b590      	push	{r4, r7, lr}
3418f588:	b087      	sub	sp, #28
3418f58a:	af02      	add	r7, sp, #8
3418f58c:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418f58e:	2300      	movs	r3, #0
3418f590:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418f592:	687b      	ldr	r3, [r7, #4]
3418f594:	f103 0008 	add.w	r0, r3, #8
3418f598:	687b      	ldr	r3, [r7, #4]
3418f59a:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
3418f59e:	687b      	ldr	r3, [r7, #4]
3418f5a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418f5a2:	b2da      	uxtb	r2, r3
3418f5a4:	687b      	ldr	r3, [r7, #4]
3418f5a6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
3418f5aa:	2400      	movs	r4, #0
3418f5ac:	9400      	str	r4, [sp, #0]
3418f5ae:	f7fe f992 	bl	3418d8d6 <SAL_XSPI_EnableMapMode>
3418f5b2:	4603      	mov	r3, r0
3418f5b4:	2b00      	cmp	r3, #0
3418f5b6:	d001      	beq.n	3418f5bc <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418f5b8:	23f3      	movs	r3, #243	@ 0xf3
3418f5ba:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418f5bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418f5c0:	4618      	mov	r0, r3
3418f5c2:	3714      	adds	r7, #20
3418f5c4:	46bd      	mov	sp, r7
3418f5c6:	bd90      	pop	{r4, r7, pc}

3418f5c8 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418f5c8:	b580      	push	{r7, lr}
3418f5ca:	b084      	sub	sp, #16
3418f5cc:	af00      	add	r7, sp, #0
3418f5ce:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418f5d0:	2300      	movs	r3, #0
3418f5d2:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
3418f5d4:	687b      	ldr	r3, [r7, #4]
3418f5d6:	3308      	adds	r3, #8
3418f5d8:	4618      	mov	r0, r3
3418f5da:	f7fe f9f5 	bl	3418d9c8 <SAL_XSPI_DisableMapMode>
3418f5de:	4603      	mov	r3, r0
3418f5e0:	2b00      	cmp	r3, #0
3418f5e2:	d001      	beq.n	3418f5e8 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418f5e4:	23f3      	movs	r3, #243	@ 0xf3
3418f5e6:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418f5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418f5ec:	4618      	mov	r0, r3
3418f5ee:	3710      	adds	r7, #16
3418f5f0:	46bd      	mov	sp, r7
3418f5f2:	bd80      	pop	{r7, pc}

3418f5f4 <memset>:
3418f5f4:	4402      	add	r2, r0
3418f5f6:	4603      	mov	r3, r0
3418f5f8:	4293      	cmp	r3, r2
3418f5fa:	d100      	bne.n	3418f5fe <memset+0xa>
3418f5fc:	4770      	bx	lr
3418f5fe:	f803 1b01 	strb.w	r1, [r3], #1
3418f602:	e7f9      	b.n	3418f5f8 <memset+0x4>

3418f604 <__libc_init_array>:
3418f604:	b570      	push	{r4, r5, r6, lr}
3418f606:	4d0d      	ldr	r5, [pc, #52]	@ (3418f63c <__libc_init_array+0x38>)
3418f608:	2600      	movs	r6, #0
3418f60a:	4c0d      	ldr	r4, [pc, #52]	@ (3418f640 <__libc_init_array+0x3c>)
3418f60c:	1b64      	subs	r4, r4, r5
3418f60e:	10a4      	asrs	r4, r4, #2
3418f610:	42a6      	cmp	r6, r4
3418f612:	d109      	bne.n	3418f628 <__libc_init_array+0x24>
3418f614:	4d0b      	ldr	r5, [pc, #44]	@ (3418f644 <__libc_init_array+0x40>)
3418f616:	2600      	movs	r6, #0
3418f618:	4c0b      	ldr	r4, [pc, #44]	@ (3418f648 <__libc_init_array+0x44>)
3418f61a:	f000 f825 	bl	3418f668 <_init>
3418f61e:	1b64      	subs	r4, r4, r5
3418f620:	10a4      	asrs	r4, r4, #2
3418f622:	42a6      	cmp	r6, r4
3418f624:	d105      	bne.n	3418f632 <__libc_init_array+0x2e>
3418f626:	bd70      	pop	{r4, r5, r6, pc}
3418f628:	f855 3b04 	ldr.w	r3, [r5], #4
3418f62c:	3601      	adds	r6, #1
3418f62e:	4798      	blx	r3
3418f630:	e7ee      	b.n	3418f610 <__libc_init_array+0xc>
3418f632:	f855 3b04 	ldr.w	r3, [r5], #4
3418f636:	3601      	adds	r6, #1
3418f638:	4798      	blx	r3
3418f63a:	e7f2      	b.n	3418f622 <__libc_init_array+0x1e>
3418f63c:	3418f6c4 	.word	0x3418f6c4
3418f640:	3418f6c4 	.word	0x3418f6c4
3418f644:	3418f6c4 	.word	0x3418f6c4
3418f648:	3418f6c8 	.word	0x3418f6c8

3418f64c <memcpy>:
3418f64c:	440a      	add	r2, r1
3418f64e:	1e43      	subs	r3, r0, #1
3418f650:	4291      	cmp	r1, r2
3418f652:	d100      	bne.n	3418f656 <memcpy+0xa>
3418f654:	4770      	bx	lr
3418f656:	b510      	push	{r4, lr}
3418f658:	f811 4b01 	ldrb.w	r4, [r1], #1
3418f65c:	4291      	cmp	r1, r2
3418f65e:	f803 4f01 	strb.w	r4, [r3, #1]!
3418f662:	d1f9      	bne.n	3418f658 <memcpy+0xc>
3418f664:	bd10      	pop	{r4, pc}
	...

3418f668 <_init>:
3418f668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418f66a:	bf00      	nop
3418f66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418f66e:	bc08      	pop	{r3}
3418f670:	469e      	mov	lr, r3
3418f672:	4770      	bx	lr

3418f674 <_fini>:
3418f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418f676:	bf00      	nop
3418f678:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418f67a:	bc08      	pop	{r3}
3418f67c:	469e      	mov	lr, r3
3418f67e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3418f6e0 <SECURE_SystemCoreClockUpdate>:
3418f6e0:	e97f e97f 	sg
3418f6e4:	f7f1 bf2e 	b.w	34181544 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
